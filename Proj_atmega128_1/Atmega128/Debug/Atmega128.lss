
Atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b8  00800100  00003cd8  00003d6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003cd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001e5  008001b8  008001b8  00003e24  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003e24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003e80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000610  00000000  00000000  00003ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c044  00000000  00000000  000044d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c27  00000000  00000000  00010514  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003c65  00000000  00000000  0001213b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f28  00000000  00000000  00015da0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000017e6  00000000  00000000  00016cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005e0e  00000000  00000000  000184ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000420  00000000  00000000  0001e2bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	bb c0       	rjmp	.+374    	; 0x178 <__ctors_end>
       2:	00 00       	nop
       4:	d8 c0       	rjmp	.+432    	; 0x1b6 <__bad_interrupt>
       6:	00 00       	nop
       8:	d6 c0       	rjmp	.+428    	; 0x1b6 <__bad_interrupt>
       a:	00 00       	nop
       c:	d4 c0       	rjmp	.+424    	; 0x1b6 <__bad_interrupt>
       e:	00 00       	nop
      10:	d2 c0       	rjmp	.+420    	; 0x1b6 <__bad_interrupt>
      12:	00 00       	nop
      14:	d0 c0       	rjmp	.+416    	; 0x1b6 <__bad_interrupt>
      16:	00 00       	nop
      18:	ce c0       	rjmp	.+412    	; 0x1b6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	cc c0       	rjmp	.+408    	; 0x1b6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	ca c0       	rjmp	.+404    	; 0x1b6 <__bad_interrupt>
      22:	00 00       	nop
      24:	c8 c0       	rjmp	.+400    	; 0x1b6 <__bad_interrupt>
      26:	00 00       	nop
      28:	c6 c0       	rjmp	.+396    	; 0x1b6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c4 c0       	rjmp	.+392    	; 0x1b6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	c2 c0       	rjmp	.+388    	; 0x1b6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c0 c0       	rjmp	.+384    	; 0x1b6 <__bad_interrupt>
      36:	00 00       	nop
      38:	be c0       	rjmp	.+380    	; 0x1b6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	bc c0       	rjmp	.+376    	; 0x1b6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ba c0       	rjmp	.+372    	; 0x1b6 <__bad_interrupt>
      42:	00 00       	nop
      44:	b8 c0       	rjmp	.+368    	; 0x1b6 <__bad_interrupt>
      46:	00 00       	nop
      48:	51 c1       	rjmp	.+674    	; 0x2ec <__vector_18>
      4a:	00 00       	nop
      4c:	87 c1       	rjmp	.+782    	; 0x35c <__vector_19>
      4e:	00 00       	nop
      50:	b2 c0       	rjmp	.+356    	; 0x1b6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b1 c0       	rjmp	.+354    	; 0x1b8 <__vector_21>
      56:	00 00       	nop
      58:	ae c0       	rjmp	.+348    	; 0x1b6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ac c0       	rjmp	.+344    	; 0x1b6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	aa c0       	rjmp	.+340    	; 0x1b6 <__bad_interrupt>
      62:	00 00       	nop
      64:	a8 c0       	rjmp	.+336    	; 0x1b6 <__bad_interrupt>
      66:	00 00       	nop
      68:	a6 c0       	rjmp	.+332    	; 0x1b6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a4 c0       	rjmp	.+328    	; 0x1b6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	a2 c0       	rjmp	.+324    	; 0x1b6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a0 c0       	rjmp	.+320    	; 0x1b6 <__bad_interrupt>
      76:	00 00       	nop
      78:	8c c1       	rjmp	.+792    	; 0x392 <__vector_30>
      7a:	00 00       	nop
      7c:	c2 c1       	rjmp	.+900    	; 0x402 <__vector_31>
      7e:	00 00       	nop
      80:	9a c0       	rjmp	.+308    	; 0x1b6 <__bad_interrupt>
      82:	00 00       	nop
      84:	98 c0       	rjmp	.+304    	; 0x1b6 <__bad_interrupt>
      86:	00 00       	nop
      88:	96 c0       	rjmp	.+300    	; 0x1b6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9e 13       	cpse	r25, r30
      8e:	f1 13       	cpse	r31, r17
      90:	0b 14       	cp	r0, r11
      92:	48 14       	cp	r4, r8
      94:	88 14       	cp	r8, r8
      96:	c9 14       	cp	r12, r9
      98:	51 15       	cp	r21, r1
      9a:	6c 15       	cp	r22, r12
      9c:	2b 16       	cp	r2, r27
      9e:	46 16       	cp	r4, r22
      a0:	88 16       	cp	r8, r24
      a2:	94 16       	cp	r9, r20
      a4:	a0 16       	cp	r10, r16
      a6:	ac 16       	cp	r10, r28
      a8:	b8 16       	cp	r11, r24
      aa:	db 16       	cp	r13, r27
      ac:	db 16       	cp	r13, r27
      ae:	db 16       	cp	r13, r27
      b0:	db 16       	cp	r13, r27
      b2:	db 16       	cp	r13, r27
      b4:	db 16       	cp	r13, r27
      b6:	db 16       	cp	r13, r27
      b8:	db 16       	cp	r13, r27
      ba:	db 16       	cp	r13, r27
      bc:	db 16       	cp	r13, r27
      be:	db 16       	cp	r13, r27
      c0:	db 16       	cp	r13, r27
      c2:	db 16       	cp	r13, r27
      c4:	db 16       	cp	r13, r27
      c6:	db 16       	cp	r13, r27
      c8:	db 16       	cp	r13, r27
      ca:	db 16       	cp	r13, r27
      cc:	db 16       	cp	r13, r27
      ce:	db 16       	cp	r13, r27
      d0:	db 16       	cp	r13, r27
      d2:	db 16       	cp	r13, r27
      d4:	db 16       	cp	r13, r27
      d6:	db 16       	cp	r13, r27
      d8:	db 16       	cp	r13, r27
      da:	db 16       	cp	r13, r27
      dc:	db 16       	cp	r13, r27
      de:	db 16       	cp	r13, r27
      e0:	db 16       	cp	r13, r27
      e2:	db 16       	cp	r13, r27
      e4:	db 16       	cp	r13, r27
      e6:	db 16       	cp	r13, r27
      e8:	db 16       	cp	r13, r27
      ea:	db 16       	cp	r13, r27
      ec:	db 16       	cp	r13, r27
      ee:	db 16       	cp	r13, r27
      f0:	db 16       	cp	r13, r27
      f2:	c4 16       	cp	r12, r20
      f4:	d0 16       	cp	r13, r16
      f6:	07 63       	ori	r16, 0x37	; 55
      f8:	42 36       	cpi	r20, 0x62	; 98
      fa:	b7 9b       	sbis	0x16, 7	; 22
      fc:	d8 a7       	std	Y+40, r29	; 0x28
      fe:	1a 39       	cpi	r17, 0x9A	; 154
     100:	68 56       	subi	r22, 0x68	; 104
     102:	18 ae       	std	Y+56, r1	; 0x38
     104:	ba ab       	std	Y+50, r27	; 0x32
     106:	55 8c       	ldd	r5, Z+29	; 0x1d
     108:	1d 3c       	cpi	r17, 0xCD	; 205
     10a:	b7 cc       	rjmp	.-1682   	; 0xfffffa7a <__eeprom_end+0xff7efa7a>
     10c:	57 63       	ori	r21, 0x37	; 55
     10e:	bd 6d       	ori	r27, 0xDD	; 221
     110:	ed fd       	.word	0xfded	; ????
     112:	75 3e       	cpi	r23, 0xE5	; 229
     114:	f6 17       	cp	r31, r22
     116:	72 31       	cpi	r23, 0x12	; 18
     118:	bf 00       	.word	0x00bf	; ????
     11a:	00 00       	nop
     11c:	80 3f       	cpi	r24, 0xF0	; 240
     11e:	08 00       	.word	0x0008	; ????
     120:	00 00       	nop
     122:	be 92       	st	-X, r11
     124:	24 49       	sbci	r18, 0x94	; 148
     126:	12 3e       	cpi	r17, 0xE2	; 226
     128:	ab aa       	std	Y+51, r10	; 0x33
     12a:	aa 2a       	or	r10, r26
     12c:	be cd       	rjmp	.-1156   	; 0xfffffcaa <__eeprom_end+0xff7efcaa>
     12e:	cc cc       	rjmp	.-1640   	; 0xfffffac8 <__eeprom_end+0xff7efac8>
     130:	4c 3e       	cpi	r20, 0xEC	; 236
     132:	00 00       	nop
     134:	00 80       	ld	r0, Z
     136:	be ab       	std	Y+54, r27	; 0x36
     138:	aa aa       	std	Y+50, r10	; 0x32
     13a:	aa 3e       	cpi	r26, 0xEA	; 234
     13c:	00 00       	nop
     13e:	00 00       	nop
     140:	bf 00       	.word	0x00bf	; ????
     142:	00 00       	nop
     144:	80 3f       	cpi	r24, 0xF0	; 240
     146:	00 00       	nop
     148:	00 00       	nop
     14a:	00 08       	sbc	r0, r0
     14c:	41 78       	andi	r20, 0x81	; 129
     14e:	d3 bb       	out	0x13, r29	; 19
     150:	43 87       	std	Z+11, r20	; 0x0b
     152:	d1 13       	cpse	r29, r17
     154:	3d 19       	sub	r19, r13
     156:	0e 3c       	cpi	r16, 0xCE	; 206
     158:	c3 bd       	out	0x23, r28	; 35
     15a:	42 82       	std	Z+2, r4	; 0x02
     15c:	ad 2b       	or	r26, r29
     15e:	3e 68       	ori	r19, 0x8E	; 142
     160:	ec 82       	std	Y+4, r14	; 0x04
     162:	76 be       	out	0x36, r7	; 54
     164:	d9 8f       	std	Y+25, r29	; 0x19
     166:	e1 a9       	ldd	r30, Z+49	; 0x31
     168:	3e 4c       	sbci	r19, 0xCE	; 206
     16a:	80 ef       	ldi	r24, 0xF0	; 240
     16c:	ff be       	out	0x3f, r15	; 63
     16e:	01 c4       	rjmp	.+2050   	; 0x972 <FUNCi32toa+0x56>
     170:	ff 7f       	andi	r31, 0xFF	; 255
     172:	3f 00       	.word	0x003f	; ????
     174:	00 00       	nop
	...

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d0 e1       	ldi	r29, 0x10	; 16
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	11 e0       	ldi	r17, 0x01	; 1
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	e8 ed       	ldi	r30, 0xD8	; 216
     18c:	fc e3       	ldi	r31, 0x3C	; 60
     18e:	00 e0       	ldi	r16, 0x00	; 0
     190:	0b bf       	out	0x3b, r16	; 59
     192:	02 c0       	rjmp	.+4      	; 0x198 <__do_copy_data+0x14>
     194:	07 90       	elpm	r0, Z+
     196:	0d 92       	st	X+, r0
     198:	a8 3b       	cpi	r26, 0xB8	; 184
     19a:	b1 07       	cpc	r27, r17
     19c:	d9 f7       	brne	.-10     	; 0x194 <__do_copy_data+0x10>

0000019e <__do_clear_bss>:
     19e:	23 e0       	ldi	r18, 0x03	; 3
     1a0:	a8 eb       	ldi	r26, 0xB8	; 184
     1a2:	b1 e0       	ldi	r27, 0x01	; 1
     1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <.do_clear_bss_start>

000001a6 <.do_clear_bss_loop>:
     1a6:	1d 92       	st	X+, r1

000001a8 <.do_clear_bss_start>:
     1a8:	ad 39       	cpi	r26, 0x9D	; 157
     1aa:	b2 07       	cpc	r27, r18
     1ac:	e1 f7       	brne	.-8      	; 0x1a6 <.do_clear_bss_loop>
     1ae:	0e 94 ed 12 	call	0x25da	; 0x25da <main>
     1b2:	0c 94 6a 1e 	jmp	0x3cd4	; 0x3cd4 <_exit>

000001b6 <__bad_interrupt>:
     1b6:	24 cf       	rjmp	.-440    	; 0x0 <__vectors>

000001b8 <__vector_21>:

/*** File Interrupt ***/
ISR(ADC_vect)
// Function: ANALOG interrupt
// Purpose:  Read Analog Input
{
     1b8:	1f 92       	push	r1
     1ba:	0f 92       	push	r0
     1bc:	0f b6       	in	r0, 0x3f	; 63
     1be:	0f 92       	push	r0
     1c0:	11 24       	eor	r1, r1
     1c2:	0b b6       	in	r0, 0x3b	; 59
     1c4:	0f 92       	push	r0
     1c6:	2f 93       	push	r18
     1c8:	3f 93       	push	r19
     1ca:	4f 93       	push	r20
     1cc:	5f 93       	push	r21
     1ce:	6f 93       	push	r22
     1d0:	7f 93       	push	r23
     1d2:	8f 93       	push	r24
     1d4:	9f 93       	push	r25
     1d6:	af 93       	push	r26
     1d8:	bf 93       	push	r27
     1da:	ef 93       	push	r30
     1dc:	ff 93       	push	r31
	// adc_tmp = m.adc->adc.L; // ADCL
	// adc_tmp |= (m.adc->adc.H << 8); // (ADCH << 8);
	// adc_tmp = *((uint16_t*)&m.adc->adc); // more then one way to skin a rabbit.
	adc_tmp = ReadHLByte(m.adc.reg->adc);
     1de:	e0 91 a9 02 	lds	r30, 0x02A9	; 0x8002a9 <m+0x4>
     1e2:	f0 91 aa 02 	lds	r31, 0x02AA	; 0x8002aa <m+0x5>
     1e6:	80 81       	ld	r24, Z
     1e8:	91 81       	ldd	r25, Z+1	; 0x01
     1ea:	78 d0       	rcall	.+240    	; 0x2dc <ReadHLByte>
     1ec:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <adc_tmp+0x1>
     1f0:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <adc_tmp>
	if(adc_n_sample < (1 << ADC_NUMBER_SAMPLE)){
     1f4:	20 91 b8 01 	lds	r18, 0x01B8	; 0x8001b8 <__data_end>
     1f8:	24 30       	cpi	r18, 0x04	; 4
     1fa:	80 f4       	brcc	.+32     	; 0x21c <__vector_21+0x64>
		adc_n_sample++;
     1fc:	20 91 b8 01 	lds	r18, 0x01B8	; 0x8001b8 <__data_end>
     200:	2f 5f       	subi	r18, 0xFF	; 255
     202:	20 93 b8 01 	sts	0x01B8, r18	; 0x8001b8 <__data_end>
		adc_sample += adc_tmp;
     206:	20 91 b9 01 	lds	r18, 0x01B9	; 0x8001b9 <adc_sample>
     20a:	30 91 ba 01 	lds	r19, 0x01BA	; 0x8001ba <adc_sample+0x1>
     20e:	82 0f       	add	r24, r18
     210:	93 1f       	adc	r25, r19
     212:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <adc_sample+0x1>
     216:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <adc_sample>
     21a:	4d c0       	rjmp	.+154    	; 0x2b6 <__vector_21+0xfe>
	}else{
		ADC_VALUE[ADC_SELECTOR] = adc_sample >> ADC_NUMBER_SAMPLE;
     21c:	e0 91 bb 01 	lds	r30, 0x01BB	; 0x8001bb <ADC_SELECTOR>
     220:	f0 91 bc 01 	lds	r31, 0x01BC	; 0x8001bc <ADC_SELECTOR+0x1>
     224:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <adc_sample>
     228:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <adc_sample+0x1>
     22c:	95 95       	asr	r25
     22e:	87 95       	ror	r24
     230:	95 95       	asr	r25
     232:	87 95       	ror	r24
     234:	ee 0f       	add	r30, r30
     236:	ff 1f       	adc	r31, r31
     238:	e3 50       	subi	r30, 0x03	; 3
     23a:	fe 4f       	sbci	r31, 0xFE	; 254
     23c:	91 83       	std	Z+1, r25	; 0x01
     23e:	80 83       	st	Z, r24
		adc_n_sample = adc_sample = 0;
     240:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <adc_sample+0x1>
     244:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <adc_sample>
     248:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <__data_end>
		
		if(ADC_SELECTOR < ADC_N_CHANNEL)
     24c:	20 91 bb 01 	lds	r18, 0x01BB	; 0x8001bb <ADC_SELECTOR>
     250:	30 91 bc 01 	lds	r19, 0x01BC	; 0x8001bc <ADC_SELECTOR+0x1>
     254:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <ADC_N_CHANNEL>
     258:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <ADC_N_CHANNEL+0x1>
     25c:	28 17       	cp	r18, r24
     25e:	39 07       	cpc	r19, r25
     260:	54 f4       	brge	.+20     	; 0x276 <__vector_21+0xbe>
			ADC_SELECTOR++;
     262:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <ADC_SELECTOR>
     266:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <ADC_SELECTOR+0x1>
     26a:	01 96       	adiw	r24, 0x01	; 1
     26c:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <ADC_SELECTOR+0x1>
     270:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <ADC_SELECTOR>
     274:	04 c0       	rjmp	.+8      	; 0x27e <__vector_21+0xc6>
		else
			ADC_SELECTOR = 0;
     276:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <ADC_SELECTOR+0x1>
     27a:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <ADC_SELECTOR>
		m.adc.reg->admux &= ~MUX_MASK;
     27e:	a5 ea       	ldi	r26, 0xA5	; 165
     280:	b2 e0       	ldi	r27, 0x02	; 2
     282:	14 96       	adiw	r26, 0x04	; 4
     284:	ed 91       	ld	r30, X+
     286:	fc 91       	ld	r31, X
     288:	15 97       	sbiw	r26, 0x05	; 5
     28a:	83 81       	ldd	r24, Z+3	; 0x03
     28c:	80 7e       	andi	r24, 0xE0	; 224
     28e:	83 83       	std	Z+3, r24	; 0x03
		m.adc.reg->admux |= (ADC_CHANNEL_GAIN[ADC_SELECTOR] & MUX_MASK);
     290:	e0 91 bb 01 	lds	r30, 0x01BB	; 0x8001bb <ADC_SELECTOR>
     294:	f0 91 bc 01 	lds	r31, 0x01BC	; 0x8001bc <ADC_SELECTOR+0x1>
     298:	ee 0f       	add	r30, r30
     29a:	ff 1f       	adc	r31, r31
     29c:	e3 54       	subi	r30, 0x43	; 67
     29e:	fe 4f       	sbci	r31, 0xFE	; 254
     2a0:	80 81       	ld	r24, Z
     2a2:	91 81       	ldd	r25, Z+1	; 0x01
     2a4:	14 96       	adiw	r26, 0x04	; 4
     2a6:	ed 91       	ld	r30, X+
     2a8:	fc 91       	ld	r31, X
     2aa:	15 97       	sbiw	r26, 0x05	; 5
     2ac:	8f 71       	andi	r24, 0x1F	; 31
     2ae:	99 27       	eor	r25, r25
     2b0:	93 81       	ldd	r25, Z+3	; 0x03
     2b2:	89 2b       	or	r24, r25
     2b4:	83 83       	std	Z+3, r24	; 0x03
	}
}
     2b6:	ff 91       	pop	r31
     2b8:	ef 91       	pop	r30
     2ba:	bf 91       	pop	r27
     2bc:	af 91       	pop	r26
     2be:	9f 91       	pop	r25
     2c0:	8f 91       	pop	r24
     2c2:	7f 91       	pop	r23
     2c4:	6f 91       	pop	r22
     2c6:	5f 91       	pop	r21
     2c8:	4f 91       	pop	r20
     2ca:	3f 91       	pop	r19
     2cc:	2f 91       	pop	r18
     2ce:	0f 90       	pop	r0
     2d0:	0b be       	out	0x3b, r0	; 59
     2d2:	0f 90       	pop	r0
     2d4:	0f be       	out	0x3f, r0	; 63
     2d6:	0f 90       	pop	r0
     2d8:	1f 90       	pop	r1
     2da:	18 95       	reti

000002dc <ReadHLByte>:
}

// COMMON
uint16_t ReadHLByte(HighLowByte reg)
{
	return (reg.H << 8) | reg.L;
     2dc:	29 2f       	mov	r18, r25
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	32 2f       	mov	r19, r18
     2e2:	22 27       	eor	r18, r18
}
     2e4:	a9 01       	movw	r20, r18
     2e6:	48 2b       	or	r20, r24
     2e8:	ca 01       	movw	r24, r20
     2ea:	08 95       	ret

000002ec <__vector_18>:
	}
}

/*** File Interrupt ***/
ISR(UART0_RECEIVE_INTERRUPT)
{
     2ec:	1f 92       	push	r1
     2ee:	0f 92       	push	r0
     2f0:	0f b6       	in	r0, 0x3f	; 63
     2f2:	0f 92       	push	r0
     2f4:	11 24       	eor	r1, r1
     2f6:	0b b6       	in	r0, 0x3b	; 59
     2f8:	0f 92       	push	r0
     2fa:	2f 93       	push	r18
     2fc:	3f 93       	push	r19
     2fe:	4f 93       	push	r20
     300:	5f 93       	push	r21
     302:	6f 93       	push	r22
     304:	7f 93       	push	r23
     306:	8f 93       	push	r24
     308:	9f 93       	push	r25
     30a:	af 93       	push	r26
     30c:	bf 93       	push	r27
     30e:	ef 93       	push	r30
     310:	ff 93       	push	r31
	unsigned char bit9;
	unsigned char usr;
	
	usr  = m.usart0.reg->ucsr0a;
     312:	e0 91 e1 02 	lds	r30, 0x02E1	; 0x8002e1 <m+0x3c>
     316:	f0 91 e2 02 	lds	r31, 0x02E2	; 0x8002e2 <m+0x3d>
	bit9 = m.usart0.reg->ucsr0b;
	bit9 = 0x01 & (bit9 >> 1);
	
	UART0_LastRxError = (usr & (_BV(FE0) | _BV(DOR0)));
     31a:	82 81       	ldd	r24, Z+2	; 0x02
     31c:	88 71       	andi	r24, 0x18	; 24
     31e:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <UART0_LastRxError>
	
	UART0_Rx = m.usart0.reg->udr0;
     322:	63 81       	ldd	r22, Z+3	; 0x03
     324:	60 93 17 03 	sts	0x0317, r22	; 0x800317 <UART0_Rx>
	rx0buff.push(&rx0buff, UART0_Rx);
     328:	e0 91 20 03 	lds	r30, 0x0320	; 0x800320 <rx0buff+0x8>
     32c:	f0 91 21 03 	lds	r31, 0x0321	; 0x800321 <rx0buff+0x9>
     330:	88 e1       	ldi	r24, 0x18	; 24
     332:	93 e0       	ldi	r25, 0x03	; 3
     334:	09 95       	icall
}
     336:	ff 91       	pop	r31
     338:	ef 91       	pop	r30
     33a:	bf 91       	pop	r27
     33c:	af 91       	pop	r26
     33e:	9f 91       	pop	r25
     340:	8f 91       	pop	r24
     342:	7f 91       	pop	r23
     344:	6f 91       	pop	r22
     346:	5f 91       	pop	r21
     348:	4f 91       	pop	r20
     34a:	3f 91       	pop	r19
     34c:	2f 91       	pop	r18
     34e:	0f 90       	pop	r0
     350:	0b be       	out	0x3b, r0	; 59
     352:	0f 90       	pop	r0
     354:	0f be       	out	0x3f, r0	; 63
     356:	0f 90       	pop	r0
     358:	1f 90       	pop	r1
     35a:	18 95       	reti

0000035c <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
{
     35c:	1f 92       	push	r1
     35e:	0f 92       	push	r0
     360:	0f b6       	in	r0, 0x3f	; 63
     362:	0f 92       	push	r0
     364:	11 24       	eor	r1, r1
     366:	0b b6       	in	r0, 0x3b	; 59
     368:	0f 92       	push	r0
     36a:	8f 93       	push	r24
     36c:	ef 93       	push	r30
     36e:	ff 93       	push	r31
	m.usart0.reg->ucsr0b &= ~_BV(UDRIE0);
     370:	e0 91 e1 02 	lds	r30, 0x02E1	; 0x8002e1 <m+0x3c>
     374:	f0 91 e2 02 	lds	r31, 0x02E2	; 0x8002e2 <m+0x3d>
     378:	81 81       	ldd	r24, Z+1	; 0x01
     37a:	8f 7d       	andi	r24, 0xDF	; 223
     37c:	81 83       	std	Z+1, r24	; 0x01
}
     37e:	ff 91       	pop	r31
     380:	ef 91       	pop	r30
     382:	8f 91       	pop	r24
     384:	0f 90       	pop	r0
     386:	0b be       	out	0x3b, r0	; 59
     388:	0f 90       	pop	r0
     38a:	0f be       	out	0x3f, r0	; 63
     38c:	0f 90       	pop	r0
     38e:	1f 90       	pop	r1
     390:	18 95       	reti

00000392 <__vector_30>:

SIGNAL(UART1_RECEIVE_INTERRUPT)
{
     392:	1f 92       	push	r1
     394:	0f 92       	push	r0
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	0f 92       	push	r0
     39a:	11 24       	eor	r1, r1
     39c:	0b b6       	in	r0, 0x3b	; 59
     39e:	0f 92       	push	r0
     3a0:	2f 93       	push	r18
     3a2:	3f 93       	push	r19
     3a4:	4f 93       	push	r20
     3a6:	5f 93       	push	r21
     3a8:	6f 93       	push	r22
     3aa:	7f 93       	push	r23
     3ac:	8f 93       	push	r24
     3ae:	9f 93       	push	r25
     3b0:	af 93       	push	r26
     3b2:	bf 93       	push	r27
     3b4:	ef 93       	push	r30
     3b6:	ff 93       	push	r31
	unsigned char bit9;
	unsigned char usr;
	
	usr  = m.usart1.reg->ucsr1a;
     3b8:	e0 91 e5 02 	lds	r30, 0x02E5	; 0x8002e5 <m+0x40>
     3bc:	f0 91 e6 02 	lds	r31, 0x02E6	; 0x8002e6 <m+0x41>
	bit9 = m.usart1.reg->ucsr1b;
	bit9 = 0x01 & (bit9 >> 1);
 	   
	UART1_LastRxError = (usr & (_BV(FE1) | _BV(DOR1)));
     3c0:	83 81       	ldd	r24, Z+3	; 0x03
     3c2:	88 71       	andi	r24, 0x18	; 24
     3c4:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <UART1_LastRxError>
	
	UART1_Rx = m.usart1.reg->udr1;
     3c8:	64 81       	ldd	r22, Z+4	; 0x04
     3ca:	60 93 16 03 	sts	0x0316, r22	; 0x800316 <UART1_Rx>
	rx1buff.push(&rx1buff, UART1_Rx);
     3ce:	e0 91 51 03 	lds	r30, 0x0351	; 0x800351 <rx1buff+0x8>
     3d2:	f0 91 52 03 	lds	r31, 0x0352	; 0x800352 <rx1buff+0x9>
     3d6:	89 e4       	ldi	r24, 0x49	; 73
     3d8:	93 e0       	ldi	r25, 0x03	; 3
     3da:	09 95       	icall
}
     3dc:	ff 91       	pop	r31
     3de:	ef 91       	pop	r30
     3e0:	bf 91       	pop	r27
     3e2:	af 91       	pop	r26
     3e4:	9f 91       	pop	r25
     3e6:	8f 91       	pop	r24
     3e8:	7f 91       	pop	r23
     3ea:	6f 91       	pop	r22
     3ec:	5f 91       	pop	r21
     3ee:	4f 91       	pop	r20
     3f0:	3f 91       	pop	r19
     3f2:	2f 91       	pop	r18
     3f4:	0f 90       	pop	r0
     3f6:	0b be       	out	0x3b, r0	; 59
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <__vector_31>:
SIGNAL(UART1_TRANSMIT_INTERRUPT)
{
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	0f 92       	push	r0
     40a:	11 24       	eor	r1, r1
     40c:	0b b6       	in	r0, 0x3b	; 59
     40e:	0f 92       	push	r0
     410:	8f 93       	push	r24
     412:	ef 93       	push	r30
     414:	ff 93       	push	r31
	m.usart1.reg->ucsr1b &= ~_BV(UDRIE1);
     416:	e0 91 e5 02 	lds	r30, 0x02E5	; 0x8002e5 <m+0x40>
     41a:	f0 91 e6 02 	lds	r31, 0x02E6	; 0x8002e6 <m+0x41>
     41e:	82 81       	ldd	r24, Z+2	; 0x02
     420:	8f 7d       	andi	r24, 0xDF	; 223
     422:	82 83       	std	Z+2, r24	; 0x02
}
     424:	ff 91       	pop	r31
     426:	ef 91       	pop	r30
     428:	8f 91       	pop	r24
     42a:	0f 90       	pop	r0
     42c:	0b be       	out	0x3b, r0	; 59
     42e:	0f 90       	pop	r0
     430:	0f be       	out	0x3f, r0	; 63
     432:	0f 90       	pop	r0
     434:	1f 90       	pop	r1
     436:	18 95       	reti

00000438 <EEPROMenable>:
/*** File Variable ***/

/*** File Header ***/

/*** Procedure & Function ***/
EEPROM EEPROMenable(void){
     438:	fc 01       	movw	r30, r24
	eprom.write_float = eeprom_write_float;
	eprom.update_float = eeprom_update_float;
	eprom.read_block = eeprom_read_block;
	eprom.write_block = eeprom_write_block;
	eprom.update_block = eeprom_update_block;
	return eprom;
     43a:	83 e1       	ldi	r24, 0x13	; 19
     43c:	9e e1       	ldi	r25, 0x1E	; 30
     43e:	91 83       	std	Z+1, r25	; 0x01
     440:	80 83       	st	Z, r24
     442:	85 e5       	ldi	r24, 0x55	; 85
     444:	9e e1       	ldi	r25, 0x1E	; 30
     446:	93 83       	std	Z+3, r25	; 0x03
     448:	82 83       	std	Z+2, r24	; 0x02
     44a:	8f e2       	ldi	r24, 0x2F	; 47
     44c:	9e e1       	ldi	r25, 0x1E	; 30
     44e:	95 83       	std	Z+5, r25	; 0x05
     450:	84 83       	std	Z+4, r24	; 0x04
     452:	8b e1       	ldi	r24, 0x1B	; 27
     454:	9e e1       	ldi	r25, 0x1E	; 30
     456:	97 83       	std	Z+7, r25	; 0x07
     458:	86 83       	std	Z+6, r24	; 0x06
     45a:	87 e6       	ldi	r24, 0x67	; 103
     45c:	9e e1       	ldi	r25, 0x1E	; 30
     45e:	91 87       	std	Z+9, r25	; 0x09
     460:	80 87       	std	Z+8, r24	; 0x08
     462:	88 e4       	ldi	r24, 0x48	; 72
     464:	9e e1       	ldi	r25, 0x1E	; 30
     466:	93 87       	std	Z+11, r25	; 0x0b
     468:	82 87       	std	Z+10, r24	; 0x0a
     46a:	82 e6       	ldi	r24, 0x62	; 98
     46c:	9e e1       	ldi	r25, 0x1E	; 30
     46e:	97 87       	std	Z+15, r25	; 0x0f
     470:	86 87       	std	Z+14, r24	; 0x0e
     472:	82 e6       	ldi	r24, 0x62	; 98
     474:	9e e1       	ldi	r25, 0x1E	; 30
     476:	95 8b       	std	Z+21, r25	; 0x15
     478:	84 8b       	std	Z+20, r24	; 0x14
     47a:	80 e4       	ldi	r24, 0x40	; 64
     47c:	9e e1       	ldi	r25, 0x1E	; 30
     47e:	97 8b       	std	Z+23, r25	; 0x17
     480:	86 8b       	std	Z+22, r24	; 0x16
     482:	83 e0       	ldi	r24, 0x03	; 3
     484:	9e e1       	ldi	r25, 0x1E	; 30
     486:	91 8f       	std	Z+25, r25	; 0x19
     488:	80 8f       	std	Z+24, r24	; 0x18
     48a:	8c e4       	ldi	r24, 0x4C	; 76
     48c:	9e e1       	ldi	r25, 0x1E	; 30
     48e:	93 8f       	std	Z+27, r25	; 0x1b
     490:	82 8f       	std	Z+26, r24	; 0x1a
     492:	80 e2       	ldi	r24, 0x20	; 32
     494:	9e e1       	ldi	r25, 0x1E	; 30
     496:	95 8f       	std	Z+29, r25	; 0x1d
     498:	84 8f       	std	Z+28, r24	; 0x1c
}
     49a:	cf 01       	movw	r24, r30
     49c:	08 95       	ret

0000049e <FUNCswap>:
	return i;
}
uint8_t bintobcd(uint8_t bin)
{
	return (uint8_t)((((bin) / 10) << 4) + ((bin) % 10));
}
     49e:	cf 92       	push	r12
     4a0:	df 92       	push	r13
     4a2:	ef 92       	push	r14
     4a4:	ff 92       	push	r15
     4a6:	0f 93       	push	r16
     4a8:	1f 93       	push	r17
     4aa:	fc 01       	movw	r30, r24
     4ac:	00 81       	ld	r16, Z
     4ae:	11 81       	ldd	r17, Z+1	; 0x01
     4b0:	22 81       	ldd	r18, Z+2	; 0x02
     4b2:	33 81       	ldd	r19, Z+3	; 0x03
     4b4:	fb 01       	movw	r30, r22
     4b6:	c0 80       	ld	r12, Z
     4b8:	d1 80       	ldd	r13, Z+1	; 0x01
     4ba:	e2 80       	ldd	r14, Z+2	; 0x02
     4bc:	f3 80       	ldd	r15, Z+3	; 0x03
     4be:	fc 01       	movw	r30, r24
     4c0:	c0 82       	st	Z, r12
     4c2:	d1 82       	std	Z+1, r13	; 0x01
     4c4:	e2 82       	std	Z+2, r14	; 0x02
     4c6:	f3 82       	std	Z+3, r15	; 0x03
     4c8:	fb 01       	movw	r30, r22
     4ca:	00 83       	st	Z, r16
     4cc:	11 83       	std	Z+1, r17	; 0x01
     4ce:	22 83       	std	Z+2, r18	; 0x02
     4d0:	33 83       	std	Z+3, r19	; 0x03
     4d2:	1f 91       	pop	r17
     4d4:	0f 91       	pop	r16
     4d6:	ff 90       	pop	r15
     4d8:	ef 90       	pop	r14
     4da:	df 90       	pop	r13
     4dc:	cf 90       	pop	r12
     4de:	08 95       	ret

000004e0 <FUNCcopy>:
     4e0:	fb 01       	movw	r30, r22
     4e2:	20 81       	ld	r18, Z
     4e4:	fc 01       	movw	r30, r24
     4e6:	20 83       	st	Z, r18
     4e8:	22 23       	and	r18, r18
     4ea:	39 f0       	breq	.+14     	; 0x4fa <FUNCcopy+0x1a>
     4ec:	db 01       	movw	r26, r22
     4ee:	11 96       	adiw	r26, 0x01	; 1
     4f0:	31 96       	adiw	r30, 0x01	; 1
     4f2:	9d 91       	ld	r25, X+
     4f4:	91 93       	st	Z+, r25
     4f6:	91 11       	cpse	r25, r1
     4f8:	fc cf       	rjmp	.-8      	; 0x4f2 <FUNCcopy+0x12>
     4fa:	08 95       	ret

000004fc <FUNCsqueeze>:
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	ec 01       	movw	r28, r24
     502:	98 81       	ld	r25, Y
     504:	99 23       	and	r25, r25
     506:	99 f0       	breq	.+38     	; 0x52e <FUNCsqueeze+0x32>
     508:	fe 01       	movw	r30, r28
     50a:	31 96       	adiw	r30, 0x01	; 1
     50c:	20 e0       	ldi	r18, 0x00	; 0
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	49 2f       	mov	r20, r25
     512:	50 e0       	ldi	r21, 0x00	; 0
     514:	46 17       	cp	r20, r22
     516:	57 07       	cpc	r21, r23
     518:	31 f0       	breq	.+12     	; 0x526 <FUNCsqueeze+0x2a>
     51a:	de 01       	movw	r26, r28
     51c:	a2 0f       	add	r26, r18
     51e:	b3 1f       	adc	r27, r19
     520:	9c 93       	st	X, r25
     522:	2f 5f       	subi	r18, 0xFF	; 255
     524:	3f 4f       	sbci	r19, 0xFF	; 255
     526:	91 91       	ld	r25, Z+
     528:	91 11       	cpse	r25, r1
     52a:	f2 cf       	rjmp	.-28     	; 0x510 <FUNCsqueeze+0x14>
     52c:	02 c0       	rjmp	.+4      	; 0x532 <FUNCsqueeze+0x36>
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	fe 01       	movw	r30, r28
     534:	e2 0f       	add	r30, r18
     536:	f3 1f       	adc	r31, r19
     538:	10 82       	st	Z, r1
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	08 95       	ret

00000540 <FUNCshellsort>:
     540:	2f 92       	push	r2
     542:	3f 92       	push	r3
     544:	4f 92       	push	r4
     546:	5f 92       	push	r5
     548:	6f 92       	push	r6
     54a:	7f 92       	push	r7
     54c:	8f 92       	push	r8
     54e:	9f 92       	push	r9
     550:	af 92       	push	r10
     552:	bf 92       	push	r11
     554:	cf 92       	push	r12
     556:	df 92       	push	r13
     558:	ef 92       	push	r14
     55a:	ff 92       	push	r15
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	00 d0       	rcall	.+0      	; 0x566 <FUNCshellsort+0x26>
     566:	00 d0       	rcall	.+0      	; 0x568 <FUNCshellsort+0x28>
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
     56c:	2c 01       	movw	r4, r24
     56e:	1b 01       	movw	r2, r22
     570:	4b 01       	movw	r8, r22
     572:	77 23       	and	r23, r23
     574:	1c f4       	brge	.+6      	; 0x57c <FUNCshellsort+0x3c>
     576:	2f ef       	ldi	r18, 0xFF	; 255
     578:	82 1a       	sub	r8, r18
     57a:	92 0a       	sbc	r9, r18
     57c:	95 94       	asr	r9
     57e:	87 94       	ror	r8
     580:	18 14       	cp	r1, r8
     582:	19 04       	cpc	r1, r9
     584:	0c f4       	brge	.+2      	; 0x588 <FUNCshellsort+0x48>
     586:	51 c0       	rjmp	.+162    	; 0x62a <FUNCshellsort+0xea>
     588:	6a c0       	rjmp	.+212    	; 0x65e <FUNCshellsort+0x11e>
     58a:	96 01       	movw	r18, r12
     58c:	dd 20       	and	r13, r13
     58e:	9c f1       	brlt	.+102    	; 0x5f6 <FUNCshellsort+0xb6>
     590:	f5 01       	movw	r30, r10
     592:	40 81       	ld	r20, Z
     594:	51 81       	ldd	r21, Z+1	; 0x01
     596:	f4 01       	movw	r30, r8
     598:	60 81       	ld	r22, Z
     59a:	71 81       	ldd	r23, Z+1	; 0x01
     59c:	64 17       	cp	r22, r20
     59e:	75 07       	cpc	r23, r21
     5a0:	54 f5       	brge	.+84     	; 0x5f6 <FUNCshellsort+0xb6>
     5a2:	8c 01       	movw	r16, r24
     5a4:	0a 0d       	add	r16, r10
     5a6:	1b 1d       	adc	r17, r11
     5a8:	d4 01       	movw	r26, r8
     5aa:	bc 82       	std	Y+4, r11	; 0x04
     5ac:	ab 82       	std	Y+3, r10	; 0x03
     5ae:	ba 82       	std	Y+2, r11	; 0x02
     5b0:	a9 82       	std	Y+1, r10	; 0x01
     5b2:	eb 81       	ldd	r30, Y+3	; 0x03
     5b4:	fc 81       	ldd	r31, Y+4	; 0x04
     5b6:	71 83       	std	Z+1, r23	; 0x01
     5b8:	60 83       	st	Z, r22
     5ba:	11 96       	adiw	r26, 0x01	; 1
     5bc:	5c 93       	st	X, r21
     5be:	4e 93       	st	-X, r20
     5c0:	2e 19       	sub	r18, r14
     5c2:	3f 09       	sbc	r19, r15
     5c4:	c2 f0       	brmi	.+48     	; 0x5f6 <FUNCshellsort+0xb6>
     5c6:	f8 01       	movw	r30, r16
     5c8:	40 81       	ld	r20, Z
     5ca:	51 81       	ldd	r21, Z+1	; 0x01
     5cc:	e9 81       	ldd	r30, Y+1	; 0x01
     5ce:	fa 81       	ldd	r31, Y+2	; 0x02
     5d0:	60 81       	ld	r22, Z
     5d2:	71 81       	ldd	r23, Z+1	; 0x01
     5d4:	08 0f       	add	r16, r24
     5d6:	19 1f       	adc	r17, r25
     5d8:	e8 0f       	add	r30, r24
     5da:	f9 1f       	adc	r31, r25
     5dc:	fa 83       	std	Y+2, r31	; 0x02
     5de:	e9 83       	std	Y+1, r30	; 0x01
     5e0:	eb 81       	ldd	r30, Y+3	; 0x03
     5e2:	fc 81       	ldd	r31, Y+4	; 0x04
     5e4:	e8 0f       	add	r30, r24
     5e6:	f9 1f       	adc	r31, r25
     5e8:	fc 83       	std	Y+4, r31	; 0x04
     5ea:	eb 83       	std	Y+3, r30	; 0x03
     5ec:	a8 0f       	add	r26, r24
     5ee:	b9 1f       	adc	r27, r25
     5f0:	64 17       	cp	r22, r20
     5f2:	75 07       	cpc	r23, r21
     5f4:	f4 f2       	brlt	.-68     	; 0x5b2 <FUNCshellsort+0x72>
     5f6:	ff ef       	ldi	r31, 0xFF	; 255
     5f8:	cf 1a       	sub	r12, r31
     5fa:	df 0a       	sbc	r13, r31
     5fc:	22 e0       	ldi	r18, 0x02	; 2
     5fe:	a2 0e       	add	r10, r18
     600:	b1 1c       	adc	r11, r1
     602:	e2 e0       	ldi	r30, 0x02	; 2
     604:	8e 0e       	add	r8, r30
     606:	91 1c       	adc	r9, r1
     608:	c6 14       	cp	r12, r6
     60a:	d7 04       	cpc	r13, r7
     60c:	09 f0       	breq	.+2      	; 0x610 <FUNCshellsort+0xd0>
     60e:	bd cf       	rjmp	.-134    	; 0x58a <FUNCshellsort+0x4a>
     610:	47 01       	movw	r8, r14
     612:	ff 20       	and	r15, r15
     614:	1c f4       	brge	.+6      	; 0x61c <FUNCshellsort+0xdc>
     616:	ff ef       	ldi	r31, 0xFF	; 255
     618:	8f 1a       	sub	r8, r31
     61a:	9f 0a       	sbc	r9, r31
     61c:	95 94       	asr	r9
     61e:	87 94       	ror	r8
     620:	18 14       	cp	r1, r8
     622:	19 04       	cpc	r1, r9
     624:	e4 f4       	brge	.+56     	; 0x65e <FUNCshellsort+0x11e>
     626:	74 01       	movw	r14, r8
     628:	01 c0       	rjmp	.+2      	; 0x62c <FUNCshellsort+0xec>
     62a:	74 01       	movw	r14, r8
     62c:	82 14       	cp	r8, r2
     62e:	93 04       	cpc	r9, r3
     630:	7c f7       	brge	.-34     	; 0x610 <FUNCshellsort+0xd0>
     632:	64 01       	movw	r12, r8
     634:	ce 18       	sub	r12, r14
     636:	df 08       	sbc	r13, r15
     638:	56 01       	movw	r10, r12
     63a:	aa 0c       	add	r10, r10
     63c:	bb 1c       	adc	r11, r11
     63e:	a4 0c       	add	r10, r4
     640:	b5 1c       	adc	r11, r5
     642:	88 0c       	add	r8, r8
     644:	99 1c       	adc	r9, r9
     646:	84 0c       	add	r8, r4
     648:	95 1c       	adc	r9, r5
     64a:	31 01       	movw	r6, r2
     64c:	6e 18       	sub	r6, r14
     64e:	7f 08       	sbc	r7, r15
     650:	c7 01       	movw	r24, r14
     652:	88 0f       	add	r24, r24
     654:	99 1f       	adc	r25, r25
     656:	91 95       	neg	r25
     658:	81 95       	neg	r24
     65a:	91 09       	sbc	r25, r1
     65c:	96 cf       	rjmp	.-212    	; 0x58a <FUNCshellsort+0x4a>
     65e:	0f 90       	pop	r0
     660:	0f 90       	pop	r0
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	ff 90       	pop	r15
     670:	ef 90       	pop	r14
     672:	df 90       	pop	r13
     674:	cf 90       	pop	r12
     676:	bf 90       	pop	r11
     678:	af 90       	pop	r10
     67a:	9f 90       	pop	r9
     67c:	8f 90       	pop	r8
     67e:	7f 90       	pop	r7
     680:	6f 90       	pop	r6
     682:	5f 90       	pop	r5
     684:	4f 90       	pop	r4
     686:	3f 90       	pop	r3
     688:	2f 90       	pop	r2
     68a:	08 95       	ret

0000068c <FUNCpmax>:
     68c:	86 17       	cp	r24, r22
     68e:	97 07       	cpc	r25, r23
     690:	0c f4       	brge	.+2      	; 0x694 <FUNCpmax+0x8>
     692:	cb 01       	movw	r24, r22
     694:	08 95       	ret

00000696 <FUNCgcd>:
     696:	9b 01       	movw	r18, r22
     698:	67 2b       	or	r22, r23
     69a:	11 f4       	brne	.+4      	; 0x6a0 <FUNCgcd+0xa>
     69c:	08 95       	ret
     69e:	9a 01       	movw	r18, r20
     6a0:	b9 01       	movw	r22, r18
     6a2:	0e 94 ab 1a 	call	0x3556	; 0x3556 <__divmodhi4>
     6a6:	ac 01       	movw	r20, r24
     6a8:	82 2f       	mov	r24, r18
     6aa:	93 2f       	mov	r25, r19
     6ac:	41 15       	cp	r20, r1
     6ae:	51 05       	cpc	r21, r1
     6b0:	b1 f7       	brne	.-20     	; 0x69e <FUNCgcd+0x8>
     6b2:	08 95       	ret

000006b4 <FUNCstrToInt>:
     6b4:	fc 01       	movw	r30, r24
     6b6:	90 81       	ld	r25, Z
     6b8:	80 ed       	ldi	r24, 0xD0	; 208
     6ba:	89 0f       	add	r24, r25
     6bc:	8a 30       	cpi	r24, 0x0A	; 10
     6be:	d0 f4       	brcc	.+52     	; 0x6f4 <FUNCstrToInt+0x40>
     6c0:	31 96       	adiw	r30, 0x01	; 1
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	a9 01       	movw	r20, r18
     6c8:	44 0f       	add	r20, r20
     6ca:	55 1f       	adc	r21, r21
     6cc:	22 0f       	add	r18, r18
     6ce:	33 1f       	adc	r19, r19
     6d0:	22 0f       	add	r18, r18
     6d2:	33 1f       	adc	r19, r19
     6d4:	22 0f       	add	r18, r18
     6d6:	33 1f       	adc	r19, r19
     6d8:	42 0f       	add	r20, r18
     6da:	53 1f       	adc	r21, r19
     6dc:	29 2f       	mov	r18, r25
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	20 53       	subi	r18, 0x30	; 48
     6e2:	31 09       	sbc	r19, r1
     6e4:	24 0f       	add	r18, r20
     6e6:	35 1f       	adc	r19, r21
     6e8:	91 91       	ld	r25, Z+
     6ea:	80 ed       	ldi	r24, 0xD0	; 208
     6ec:	89 0f       	add	r24, r25
     6ee:	8a 30       	cpi	r24, 0x0A	; 10
     6f0:	50 f3       	brcs	.-44     	; 0x6c6 <FUNCstrToInt+0x12>
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <FUNCstrToInt+0x44>
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	c9 01       	movw	r24, r18
     6fa:	08 95       	ret

000006fc <FUNCfilter>:
     6fc:	86 23       	and	r24, r22
     6fe:	08 95       	ret

00000700 <FUNCticks>:
     700:	00 97       	sbiw	r24, 0x00	; 0
     702:	39 f0       	breq	.+14     	; 0x712 <FUNCticks+0x12>
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	2f 5f       	subi	r18, 0xFF	; 255
     70a:	3f 4f       	sbci	r19, 0xFF	; 255
     70c:	82 17       	cp	r24, r18
     70e:	93 07       	cpc	r25, r19
     710:	d9 f7       	brne	.-10     	; 0x708 <FUNCticks+0x8>
     712:	08 95       	ret

00000714 <FUNCtwocomptoint8bit>:
     714:	87 ff       	sbrs	r24, 7
     716:	08 c0       	rjmp	.+16     	; 0x728 <FUNCtwocomptoint8bit+0x14>
     718:	91 95       	neg	r25
     71a:	81 95       	neg	r24
     71c:	91 09       	sbc	r25, r1
     71e:	99 27       	eor	r25, r25
     720:	91 95       	neg	r25
     722:	81 95       	neg	r24
     724:	91 09       	sbc	r25, r1
     726:	08 95       	ret
     728:	8f 77       	andi	r24, 0x7F	; 127
     72a:	99 27       	eor	r25, r25
     72c:	08 95       	ret

0000072e <FUNCtwocomptoint10bit>:
     72e:	91 ff       	sbrs	r25, 1
     730:	08 c0       	rjmp	.+16     	; 0x742 <FUNCtwocomptoint10bit+0x14>
     732:	91 95       	neg	r25
     734:	81 95       	neg	r24
     736:	91 09       	sbc	r25, r1
     738:	93 70       	andi	r25, 0x03	; 3
     73a:	91 95       	neg	r25
     73c:	81 95       	neg	r24
     73e:	91 09       	sbc	r25, r1
     740:	08 95       	ret
     742:	91 70       	andi	r25, 0x01	; 1
     744:	08 95       	ret

00000746 <FUNCtwocomptointnbit>:
     746:	61 50       	subi	r22, 0x01	; 1
     748:	21 e0       	ldi	r18, 0x01	; 1
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	02 c0       	rjmp	.+4      	; 0x752 <FUNCtwocomptointnbit+0xc>
     74e:	22 0f       	add	r18, r18
     750:	33 1f       	adc	r19, r19
     752:	6a 95       	dec	r22
     754:	e2 f7       	brpl	.-8      	; 0x74e <FUNCtwocomptointnbit+0x8>
     756:	a9 01       	movw	r20, r18
     758:	41 50       	subi	r20, 0x01	; 1
     75a:	51 09       	sbc	r21, r1
     75c:	b9 01       	movw	r22, r18
     75e:	68 23       	and	r22, r24
     760:	79 23       	and	r23, r25
     762:	67 2b       	or	r22, r23
     764:	29 f0       	breq	.+10     	; 0x770 <FUNCtwocomptointnbit+0x2a>
     766:	84 23       	and	r24, r20
     768:	95 23       	and	r25, r21
     76a:	82 1b       	sub	r24, r18
     76c:	93 0b       	sbc	r25, r19
     76e:	08 95       	ret
     770:	84 23       	and	r24, r20
     772:	95 23       	and	r25, r21
     774:	08 95       	ret

00000776 <FUNCdec2bcd>:
     776:	9d ec       	ldi	r25, 0xCD	; 205
     778:	89 9f       	mul	r24, r25
     77a:	91 2d       	mov	r25, r1
     77c:	11 24       	eor	r1, r1
     77e:	96 95       	lsr	r25
     780:	96 95       	lsr	r25
     782:	96 95       	lsr	r25
     784:	39 2f       	mov	r19, r25
     786:	33 0f       	add	r19, r19
     788:	23 2f       	mov	r18, r19
     78a:	22 0f       	add	r18, r18
     78c:	22 0f       	add	r18, r18
     78e:	23 0f       	add	r18, r19
     790:	82 1b       	sub	r24, r18
     792:	20 e1       	ldi	r18, 0x10	; 16
     794:	92 9f       	mul	r25, r18
     796:	80 0d       	add	r24, r0
     798:	11 24       	eor	r1, r1
     79a:	08 95       	ret

0000079c <FUNCbcd2dec>:
     79c:	98 2f       	mov	r25, r24
     79e:	92 95       	swap	r25
     7a0:	9f 70       	andi	r25, 0x0F	; 15
     7a2:	99 0f       	add	r25, r25
     7a4:	29 2f       	mov	r18, r25
     7a6:	22 0f       	add	r18, r18
     7a8:	22 0f       	add	r18, r18
     7aa:	92 0f       	add	r25, r18
     7ac:	8f 70       	andi	r24, 0x0F	; 15
     7ae:	89 0f       	add	r24, r25
     7b0:	08 95       	ret

000007b2 <FUNCresizestr>:
     7b2:	fc 01       	movw	r30, r24
     7b4:	db 01       	movw	r26, r22
     7b6:	a3 5c       	subi	r26, 0xC3	; 195
     7b8:	bd 4f       	sbci	r27, 0xFD	; 253
     7ba:	1c 92       	st	X, r1
     7bc:	16 16       	cp	r1, r22
     7be:	17 06       	cpc	r1, r23
     7c0:	14 f5       	brge	.+68     	; 0x806 <FUNCresizestr+0x54>
     7c2:	90 81       	ld	r25, Z
     7c4:	91 11       	cpse	r25, r1
     7c6:	0c c0       	rjmp	.+24     	; 0x7e0 <FUNCresizestr+0x2e>
     7c8:	17 c0       	rjmp	.+46     	; 0x7f8 <FUNCresizestr+0x46>
     7ca:	91 91       	ld	r25, Z+
     7cc:	91 11       	cpse	r25, r1
     7ce:	0d c0       	rjmp	.+26     	; 0x7ea <FUNCresizestr+0x38>
     7d0:	15 c0       	rjmp	.+42     	; 0x7fc <FUNCresizestr+0x4a>
     7d2:	81 93       	st	Z+, r24
     7d4:	2f 5f       	subi	r18, 0xFF	; 255
     7d6:	3f 4f       	sbci	r19, 0xFF	; 255
     7d8:	26 17       	cp	r18, r22
     7da:	37 07       	cpc	r19, r23
     7dc:	d4 f3       	brlt	.-12     	; 0x7d2 <FUNCresizestr+0x20>
     7de:	13 c0       	rjmp	.+38     	; 0x806 <FUNCresizestr+0x54>
     7e0:	ad e3       	ldi	r26, 0x3D	; 61
     7e2:	b2 e0       	ldi	r27, 0x02	; 2
     7e4:	31 96       	adiw	r30, 0x01	; 1
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	9d 93       	st	X+, r25
     7ec:	2f 5f       	subi	r18, 0xFF	; 255
     7ee:	3f 4f       	sbci	r19, 0xFF	; 255
     7f0:	62 17       	cp	r22, r18
     7f2:	73 07       	cpc	r23, r19
     7f4:	51 f7       	brne	.-44     	; 0x7ca <FUNCresizestr+0x18>
     7f6:	07 c0       	rjmp	.+14     	; 0x806 <FUNCresizestr+0x54>
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	f9 01       	movw	r30, r18
     7fe:	e3 5c       	subi	r30, 0xC3	; 195
     800:	fd 4f       	sbci	r31, 0xFD	; 253
     802:	80 e2       	ldi	r24, 0x20	; 32
     804:	e6 cf       	rjmp	.-52     	; 0x7d2 <FUNCresizestr+0x20>
     806:	8d e3       	ldi	r24, 0x3D	; 61
     808:	92 e0       	ldi	r25, 0x02	; 2
     80a:	08 95       	ret

0000080c <FUNCtrimmer>:
     80c:	4f 92       	push	r4
     80e:	5f 92       	push	r5
     810:	6f 92       	push	r6
     812:	7f 92       	push	r7
     814:	af 92       	push	r10
     816:	bf 92       	push	r11
     818:	cf 92       	push	r12
     81a:	df 92       	push	r13
     81c:	ef 92       	push	r14
     81e:	ff 92       	push	r15
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	cd b7       	in	r28, 0x3d	; 61
     82a:	de b7       	in	r29, 0x3e	; 62
     82c:	29 01       	movw	r4, r18
     82e:	3a 01       	movw	r6, r20
     830:	9b 01       	movw	r18, r22
     832:	ac 01       	movw	r20, r24
     834:	24 19       	sub	r18, r4
     836:	35 09       	sbc	r19, r5
     838:	46 09       	sbc	r20, r6
     83a:	57 09       	sbc	r21, r7
     83c:	89 89       	ldd	r24, Y+17	; 0x11
     83e:	9a 89       	ldd	r25, Y+18	; 0x12
     840:	ab 89       	ldd	r26, Y+19	; 0x13
     842:	bc 89       	ldd	r27, Y+20	; 0x14
     844:	bc 01       	movw	r22, r24
     846:	cd 01       	movw	r24, r26
     848:	6a 19       	sub	r22, r10
     84a:	7b 09       	sbc	r23, r11
     84c:	8c 09       	sbc	r24, r12
     84e:	9d 09       	sbc	r25, r13
     850:	0e 94 88 1a 	call	0x3510	; 0x3510 <__mulsi3>
     854:	a8 01       	movw	r20, r16
     856:	97 01       	movw	r18, r14
     858:	24 19       	sub	r18, r4
     85a:	35 09       	sbc	r19, r5
     85c:	46 09       	sbc	r20, r6
     85e:	57 09       	sbc	r21, r7
     860:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__divmodsi4>
     864:	ca 01       	movw	r24, r20
     866:	b9 01       	movw	r22, r18
     868:	6a 0d       	add	r22, r10
     86a:	7b 1d       	adc	r23, r11
     86c:	8c 1d       	adc	r24, r12
     86e:	9d 1d       	adc	r25, r13
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	ff 90       	pop	r15
     87a:	ef 90       	pop	r14
     87c:	df 90       	pop	r13
     87e:	cf 90       	pop	r12
     880:	bf 90       	pop	r11
     882:	af 90       	pop	r10
     884:	7f 90       	pop	r7
     886:	6f 90       	pop	r6
     888:	5f 90       	pop	r5
     88a:	4f 90       	pop	r4
     88c:	08 95       	ret

0000088e <StringLength>:
     88e:	fc 01       	movw	r30, r24
     890:	20 81       	ld	r18, Z
     892:	22 23       	and	r18, r18
     894:	41 f0       	breq	.+16     	; 0x8a6 <StringLength+0x18>
     896:	31 96       	adiw	r30, 0x01	; 1
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	01 96       	adiw	r24, 0x01	; 1
     89e:	21 91       	ld	r18, Z+
     8a0:	21 11       	cpse	r18, r1
     8a2:	fc cf       	rjmp	.-8      	; 0x89c <StringLength+0xe>
     8a4:	08 95       	ret
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	08 95       	ret

000008ac <FUNCtrim>:
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	ec 01       	movw	r28, r24
     8b2:	ed df       	rcall	.-38     	; 0x88e <StringLength>
     8b4:	9c 01       	movw	r18, r24
     8b6:	21 50       	subi	r18, 0x01	; 1
     8b8:	31 09       	sbc	r19, r1
     8ba:	62 f0       	brmi	.+24     	; 0x8d4 <FUNCtrim+0x28>
     8bc:	fe 01       	movw	r30, r28
     8be:	e8 0f       	add	r30, r24
     8c0:	f9 1f       	adc	r31, r25
     8c2:	92 91       	ld	r25, -Z
     8c4:	90 32       	cpi	r25, 0x20	; 32
     8c6:	19 f0       	breq	.+6      	; 0x8ce <FUNCtrim+0x22>
     8c8:	99 50       	subi	r25, 0x09	; 9
     8ca:	92 30       	cpi	r25, 0x02	; 2
     8cc:	18 f4       	brcc	.+6      	; 0x8d4 <FUNCtrim+0x28>
     8ce:	21 50       	subi	r18, 0x01	; 1
     8d0:	31 09       	sbc	r19, r1
     8d2:	b8 f7       	brcc	.-18     	; 0x8c2 <FUNCtrim+0x16>
     8d4:	c2 0f       	add	r28, r18
     8d6:	d3 1f       	adc	r29, r19
     8d8:	19 82       	std	Y+1, r1	; 0x01
     8da:	c9 01       	movw	r24, r18
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	08 95       	ret

000008e2 <Reverse>:
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	ec 01       	movw	r28, r24
     8e8:	d2 df       	rcall	.-92     	; 0x88e <StringLength>
     8ea:	9c 01       	movw	r18, r24
     8ec:	21 50       	subi	r18, 0x01	; 1
     8ee:	31 09       	sbc	r19, r1
     8f0:	12 16       	cp	r1, r18
     8f2:	13 06       	cpc	r1, r19
     8f4:	84 f4       	brge	.+32     	; 0x916 <Reverse+0x34>
     8f6:	de 01       	movw	r26, r28
     8f8:	a8 0f       	add	r26, r24
     8fa:	b9 1f       	adc	r27, r25
     8fc:	fe 01       	movw	r30, r28
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	40 81       	ld	r20, Z
     904:	5e 91       	ld	r21, -X
     906:	51 93       	st	Z+, r21
     908:	4c 93       	st	X, r20
     90a:	01 96       	adiw	r24, 0x01	; 1
     90c:	21 50       	subi	r18, 0x01	; 1
     90e:	31 09       	sbc	r19, r1
     910:	82 17       	cp	r24, r18
     912:	93 07       	cpc	r25, r19
     914:	b4 f3       	brlt	.-20     	; 0x902 <Reverse+0x20>
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	08 95       	ret

0000091c <FUNCi32toa>:
     91c:	8f 92       	push	r8
     91e:	9f 92       	push	r9
     920:	af 92       	push	r10
     922:	bf 92       	push	r11
     924:	cf 92       	push	r12
     926:	df 92       	push	r13
     928:	ef 92       	push	r14
     92a:	ff 92       	push	r15
     92c:	0f 93       	push	r16
     92e:	1f 93       	push	r17
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	6b 01       	movw	r12, r22
     936:	7c 01       	movw	r14, r24
     938:	dc 01       	movw	r26, r24
     93a:	cb 01       	movw	r24, r22
     93c:	ff 20       	and	r15, r15
     93e:	3c f4       	brge	.+14     	; 0x94e <FUNCi32toa+0x32>
     940:	88 27       	eor	r24, r24
     942:	99 27       	eor	r25, r25
     944:	dc 01       	movw	r26, r24
     946:	8c 19       	sub	r24, r12
     948:	9d 09       	sbc	r25, r13
     94a:	ae 09       	sbc	r26, r14
     94c:	bf 09       	sbc	r27, r15
     94e:	bc 01       	movw	r22, r24
     950:	cd 01       	movw	r24, r26
     952:	10 e0       	ldi	r17, 0x00	; 0
     954:	0f 2e       	mov	r0, r31
     956:	fa e0       	ldi	r31, 0x0A	; 10
     958:	8f 2e       	mov	r8, r31
     95a:	91 2c       	mov	r9, r1
     95c:	a1 2c       	mov	r10, r1
     95e:	b1 2c       	mov	r11, r1
     960:	f0 2d       	mov	r31, r0
     962:	01 c0       	rjmp	.+2      	; 0x966 <FUNCi32toa+0x4a>
     964:	10 2f       	mov	r17, r16
     966:	01 e0       	ldi	r16, 0x01	; 1
     968:	01 0f       	add	r16, r17
     96a:	c1 2f       	mov	r28, r17
     96c:	d0 e0       	ldi	r29, 0x00	; 0
     96e:	c3 5c       	subi	r28, 0xC3	; 195
     970:	dd 4f       	sbci	r29, 0xFD	; 253
     972:	a5 01       	movw	r20, r10
     974:	94 01       	movw	r18, r8
     976:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__divmodsi4>
     97a:	60 5d       	subi	r22, 0xD0	; 208
     97c:	68 83       	st	Y, r22
     97e:	62 2f       	mov	r22, r18
     980:	73 2f       	mov	r23, r19
     982:	84 2f       	mov	r24, r20
     984:	95 2f       	mov	r25, r21
     986:	16 16       	cp	r1, r22
     988:	17 06       	cpc	r1, r23
     98a:	18 06       	cpc	r1, r24
     98c:	19 06       	cpc	r1, r25
     98e:	54 f3       	brlt	.-44     	; 0x964 <FUNCi32toa+0x48>
     990:	ff 20       	and	r15, r15
     992:	44 f4       	brge	.+16     	; 0x9a4 <FUNCi32toa+0x88>
     994:	e0 2f       	mov	r30, r16
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	e3 5c       	subi	r30, 0xC3	; 195
     99a:	fd 4f       	sbci	r31, 0xFD	; 253
     99c:	8d e2       	ldi	r24, 0x2D	; 45
     99e:	80 83       	st	Z, r24
     9a0:	02 e0       	ldi	r16, 0x02	; 2
     9a2:	01 0f       	add	r16, r17
     9a4:	e0 2f       	mov	r30, r16
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	e3 5c       	subi	r30, 0xC3	; 195
     9aa:	fd 4f       	sbci	r31, 0xFD	; 253
     9ac:	10 82       	st	Z, r1
     9ae:	8d e3       	ldi	r24, 0x3D	; 61
     9b0:	92 e0       	ldi	r25, 0x02	; 2
     9b2:	97 df       	rcall	.-210    	; 0x8e2 <Reverse>
     9b4:	8d e3       	ldi	r24, 0x3D	; 61
     9b6:	92 e0       	ldi	r25, 0x02	; 2
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	1f 91       	pop	r17
     9be:	0f 91       	pop	r16
     9c0:	ff 90       	pop	r15
     9c2:	ef 90       	pop	r14
     9c4:	df 90       	pop	r13
     9c6:	cf 90       	pop	r12
     9c8:	bf 90       	pop	r11
     9ca:	af 90       	pop	r10
     9cc:	9f 90       	pop	r9
     9ce:	8f 90       	pop	r8
     9d0:	08 95       	ret

000009d2 <FUNCi16toa>:
     9d2:	0f 93       	push	r16
     9d4:	1f 93       	push	r17
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	ec 01       	movw	r28, r24
     9dc:	99 23       	and	r25, r25
     9de:	24 f4       	brge	.+8      	; 0x9e8 <FUNCi16toa+0x16>
     9e0:	88 27       	eor	r24, r24
     9e2:	99 27       	eor	r25, r25
     9e4:	8c 1b       	sub	r24, r28
     9e6:	9d 0b       	sbc	r25, r29
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	0a e0       	ldi	r16, 0x0A	; 10
     9ec:	10 e0       	ldi	r17, 0x00	; 0
     9ee:	01 c0       	rjmp	.+2      	; 0x9f2 <FUNCi16toa+0x20>
     9f0:	23 2f       	mov	r18, r19
     9f2:	31 e0       	ldi	r19, 0x01	; 1
     9f4:	32 0f       	add	r19, r18
     9f6:	e2 2f       	mov	r30, r18
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	e3 5c       	subi	r30, 0xC3	; 195
     9fc:	fd 4f       	sbci	r31, 0xFD	; 253
     9fe:	b8 01       	movw	r22, r16
     a00:	0e 94 ab 1a 	call	0x3556	; 0x3556 <__divmodhi4>
     a04:	80 5d       	subi	r24, 0xD0	; 208
     a06:	80 83       	st	Z, r24
     a08:	86 2f       	mov	r24, r22
     a0a:	97 2f       	mov	r25, r23
     a0c:	18 16       	cp	r1, r24
     a0e:	19 06       	cpc	r1, r25
     a10:	7c f3       	brlt	.-34     	; 0x9f0 <FUNCi16toa+0x1e>
     a12:	dd 23       	and	r29, r29
     a14:	44 f4       	brge	.+16     	; 0xa26 <FUNCi16toa+0x54>
     a16:	e3 2f       	mov	r30, r19
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	e3 5c       	subi	r30, 0xC3	; 195
     a1c:	fd 4f       	sbci	r31, 0xFD	; 253
     a1e:	8d e2       	ldi	r24, 0x2D	; 45
     a20:	80 83       	st	Z, r24
     a22:	32 e0       	ldi	r19, 0x02	; 2
     a24:	32 0f       	add	r19, r18
     a26:	e3 2f       	mov	r30, r19
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	e3 5c       	subi	r30, 0xC3	; 195
     a2c:	fd 4f       	sbci	r31, 0xFD	; 253
     a2e:	10 82       	st	Z, r1
     a30:	8d e3       	ldi	r24, 0x3D	; 61
     a32:	92 e0       	ldi	r25, 0x02	; 2
     a34:	56 df       	rcall	.-340    	; 0x8e2 <Reverse>
     a36:	8d e3       	ldi	r24, 0x3D	; 61
     a38:	92 e0       	ldi	r25, 0x02	; 2
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	1f 91       	pop	r17
     a40:	0f 91       	pop	r16
     a42:	08 95       	ret

00000a44 <FUNCui16toa>:
     a44:	cf 93       	push	r28
     a46:	ac 01       	movw	r20, r24
     a48:	9c 01       	movw	r18, r24
     a4a:	ad ec       	ldi	r26, 0xCD	; 205
     a4c:	bc ec       	ldi	r27, 0xCC	; 204
     a4e:	0e 94 05 1b 	call	0x360a	; 0x360a <__umulhisi3>
     a52:	96 95       	lsr	r25
     a54:	87 95       	ror	r24
     a56:	96 95       	lsr	r25
     a58:	87 95       	ror	r24
     a5a:	96 95       	lsr	r25
     a5c:	87 95       	ror	r24
     a5e:	9c 01       	movw	r18, r24
     a60:	22 0f       	add	r18, r18
     a62:	33 1f       	adc	r19, r19
     a64:	88 0f       	add	r24, r24
     a66:	99 1f       	adc	r25, r25
     a68:	88 0f       	add	r24, r24
     a6a:	99 1f       	adc	r25, r25
     a6c:	88 0f       	add	r24, r24
     a6e:	99 1f       	adc	r25, r25
     a70:	82 0f       	add	r24, r18
     a72:	93 1f       	adc	r25, r19
     a74:	9a 01       	movw	r18, r20
     a76:	28 1b       	sub	r18, r24
     a78:	39 0b       	sbc	r19, r25
     a7a:	c9 01       	movw	r24, r18
     a7c:	80 5d       	subi	r24, 0xD0	; 208
     a7e:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <FUNCstr>
     a82:	9a 01       	movw	r18, r20
     a84:	0e 94 05 1b 	call	0x360a	; 0x360a <__umulhisi3>
     a88:	ac 01       	movw	r20, r24
     a8a:	56 95       	lsr	r21
     a8c:	47 95       	ror	r20
     a8e:	56 95       	lsr	r21
     a90:	47 95       	ror	r20
     a92:	56 95       	lsr	r21
     a94:	47 95       	ror	r20
     a96:	41 15       	cp	r20, r1
     a98:	51 05       	cpc	r21, r1
     a9a:	89 f1       	breq	.+98     	; 0xafe <FUNCui16toa+0xba>
     a9c:	e1 e0       	ldi	r30, 0x01	; 1
     a9e:	c1 e0       	ldi	r28, 0x01	; 1
     aa0:	ce 0f       	add	r28, r30
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	e3 5c       	subi	r30, 0xC3	; 195
     aa6:	fd 4f       	sbci	r31, 0xFD	; 253
     aa8:	9a 01       	movw	r18, r20
     aaa:	ad ec       	ldi	r26, 0xCD	; 205
     aac:	bc ec       	ldi	r27, 0xCC	; 204
     aae:	0e 94 05 1b 	call	0x360a	; 0x360a <__umulhisi3>
     ab2:	96 95       	lsr	r25
     ab4:	87 95       	ror	r24
     ab6:	96 95       	lsr	r25
     ab8:	87 95       	ror	r24
     aba:	96 95       	lsr	r25
     abc:	87 95       	ror	r24
     abe:	9c 01       	movw	r18, r24
     ac0:	22 0f       	add	r18, r18
     ac2:	33 1f       	adc	r19, r19
     ac4:	88 0f       	add	r24, r24
     ac6:	99 1f       	adc	r25, r25
     ac8:	88 0f       	add	r24, r24
     aca:	99 1f       	adc	r25, r25
     acc:	88 0f       	add	r24, r24
     ace:	99 1f       	adc	r25, r25
     ad0:	82 0f       	add	r24, r18
     ad2:	93 1f       	adc	r25, r19
     ad4:	9a 01       	movw	r18, r20
     ad6:	28 1b       	sub	r18, r24
     ad8:	39 0b       	sbc	r19, r25
     ada:	c9 01       	movw	r24, r18
     adc:	80 5d       	subi	r24, 0xD0	; 208
     ade:	80 83       	st	Z, r24
     ae0:	9a 01       	movw	r18, r20
     ae2:	0e 94 05 1b 	call	0x360a	; 0x360a <__umulhisi3>
     ae6:	ac 01       	movw	r20, r24
     ae8:	56 95       	lsr	r21
     aea:	47 95       	ror	r20
     aec:	56 95       	lsr	r21
     aee:	47 95       	ror	r20
     af0:	56 95       	lsr	r21
     af2:	47 95       	ror	r20
     af4:	ec 2f       	mov	r30, r28
     af6:	41 15       	cp	r20, r1
     af8:	51 05       	cpc	r21, r1
     afa:	89 f6       	brne	.-94     	; 0xa9e <FUNCui16toa+0x5a>
     afc:	01 c0       	rjmp	.+2      	; 0xb00 <FUNCui16toa+0xbc>
     afe:	c1 e0       	ldi	r28, 0x01	; 1
     b00:	ec 2f       	mov	r30, r28
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	e3 5c       	subi	r30, 0xC3	; 195
     b06:	fd 4f       	sbci	r31, 0xFD	; 253
     b08:	10 82       	st	Z, r1
     b0a:	8d e3       	ldi	r24, 0x3D	; 61
     b0c:	92 e0       	ldi	r25, 0x02	; 2
     b0e:	e9 de       	rcall	.-558    	; 0x8e2 <Reverse>
     b10:	8d e3       	ldi	r24, 0x3D	; 61
     b12:	92 e0       	ldi	r25, 0x02	; 2
     b14:	cf 91       	pop	r28
     b16:	08 95       	ret

00000b18 <FUNCbcd2bin>:
     b18:	98 2f       	mov	r25, r24
     b1a:	92 95       	swap	r25
     b1c:	9f 70       	andi	r25, 0x0F	; 15
     b1e:	99 0f       	add	r25, r25
     b20:	29 2f       	mov	r18, r25
     b22:	22 0f       	add	r18, r18
     b24:	22 0f       	add	r18, r18
     b26:	92 0f       	add	r25, r18
     b28:	8f 70       	andi	r24, 0x0F	; 15
     b2a:	89 0f       	add	r24, r25
     b2c:	08 95       	ret

00000b2e <FUNCbin2bcd>:
     b2e:	ac 01       	movw	r20, r24
     b30:	9c 01       	movw	r18, r24
     b32:	ad ec       	ldi	r26, 0xCD	; 205
     b34:	bc ec       	ldi	r27, 0xCC	; 204
     b36:	0e 94 05 1b 	call	0x360a	; 0x360a <__umulhisi3>
     b3a:	96 95       	lsr	r25
     b3c:	87 95       	ror	r24
     b3e:	96 95       	lsr	r25
     b40:	87 95       	ror	r24
     b42:	96 95       	lsr	r25
     b44:	87 95       	ror	r24
     b46:	bc 01       	movw	r22, r24
     b48:	66 0f       	add	r22, r22
     b4a:	77 1f       	adc	r23, r23
     b4c:	9c 01       	movw	r18, r24
     b4e:	22 0f       	add	r18, r18
     b50:	33 1f       	adc	r19, r19
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	22 0f       	add	r18, r18
     b58:	33 1f       	adc	r19, r19
     b5a:	26 0f       	add	r18, r22
     b5c:	37 1f       	adc	r19, r23
     b5e:	42 1b       	sub	r20, r18
     b60:	53 0b       	sbc	r21, r19
     b62:	34 2f       	mov	r19, r20
     b64:	20 e1       	ldi	r18, 0x10	; 16
     b66:	82 9f       	mul	r24, r18
     b68:	30 0d       	add	r19, r0
     b6a:	11 24       	eor	r1, r1
     b6c:	83 2f       	mov	r24, r19
     b6e:	08 95       	ret

00000b70 <FUNCgcd1>:
     b70:	cf 92       	push	r12
     b72:	df 92       	push	r13
     b74:	ef 92       	push	r14
     b76:	ff 92       	push	r15
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	28 97       	sbiw	r28, 0x08	; 8
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	f8 94       	cli
     b86:	de bf       	out	0x3e, r29	; 62
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	6b 01       	movw	r12, r22
     b8e:	7c 01       	movw	r14, r24
     b90:	69 83       	std	Y+1, r22	; 0x01
     b92:	7a 83       	std	Y+2, r23	; 0x02
     b94:	8b 83       	std	Y+3, r24	; 0x03
     b96:	9c 83       	std	Y+4, r25	; 0x04
     b98:	2d 83       	std	Y+5, r18	; 0x05
     b9a:	3e 83       	std	Y+6, r19	; 0x06
     b9c:	4f 83       	std	Y+7, r20	; 0x07
     b9e:	58 87       	std	Y+8, r21	; 0x08
     ba0:	c2 16       	cp	r12, r18
     ba2:	d3 06       	cpc	r13, r19
     ba4:	e4 06       	cpc	r14, r20
     ba6:	f5 06       	cpc	r15, r21
     ba8:	34 f4       	brge	.+12     	; 0xbb6 <FUNCgcd1+0x46>
     baa:	be 01       	movw	r22, r28
     bac:	6b 5f       	subi	r22, 0xFB	; 251
     bae:	7f 4f       	sbci	r23, 0xFF	; 255
     bb0:	ce 01       	movw	r24, r28
     bb2:	01 96       	adiw	r24, 0x01	; 1
     bb4:	74 dc       	rcall	.-1816   	; 0x49e <FUNCswap>
     bb6:	8d 81       	ldd	r24, Y+5	; 0x05
     bb8:	9e 81       	ldd	r25, Y+6	; 0x06
     bba:	af 81       	ldd	r26, Y+7	; 0x07
     bbc:	b8 85       	ldd	r27, Y+8	; 0x08
     bbe:	89 2b       	or	r24, r25
     bc0:	8a 2b       	or	r24, r26
     bc2:	8b 2b       	or	r24, r27
     bc4:	71 f4       	brne	.+28     	; 0xbe2 <FUNCgcd1+0x72>
     bc6:	69 81       	ldd	r22, Y+1	; 0x01
     bc8:	7a 81       	ldd	r23, Y+2	; 0x02
     bca:	8b 81       	ldd	r24, Y+3	; 0x03
     bcc:	9c 81       	ldd	r25, Y+4	; 0x04
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	a9 01       	movw	r20, r18
     bd4:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__divmodsi4>
     bd8:	61 15       	cp	r22, r1
     bda:	71 05       	cpc	r23, r1
     bdc:	81 05       	cpc	r24, r1
     bde:	91 05       	cpc	r25, r1
     be0:	29 f4       	brne	.+10     	; 0xbec <FUNCgcd1+0x7c>
     be2:	6d 81       	ldd	r22, Y+5	; 0x05
     be4:	7e 81       	ldd	r23, Y+6	; 0x06
     be6:	8f 81       	ldd	r24, Y+7	; 0x07
     be8:	98 85       	ldd	r25, Y+8	; 0x08
     bea:	05 c0       	rjmp	.+10     	; 0xbf6 <FUNCgcd1+0x86>
     bec:	6d 83       	std	Y+5, r22	; 0x05
     bee:	7e 83       	std	Y+6, r23	; 0x06
     bf0:	8f 83       	std	Y+7, r24	; 0x07
     bf2:	98 87       	std	Y+8, r25	; 0x08
     bf4:	f6 cf       	rjmp	.-20     	; 0xbe2 <FUNCgcd1+0x72>
     bf6:	28 96       	adiw	r28, 0x08	; 8
     bf8:	0f b6       	in	r0, 0x3f	; 63
     bfa:	f8 94       	cli
     bfc:	de bf       	out	0x3e, r29	; 62
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	cd bf       	out	0x3d, r28	; 61
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	ff 90       	pop	r15
     c08:	ef 90       	pop	r14
     c0a:	df 90       	pop	r13
     c0c:	cf 90       	pop	r12
     c0e:	08 95       	ret

00000c10 <FUNCpincheck>:
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	02 c0       	rjmp	.+4      	; 0xc18 <FUNCpincheck+0x8>
     c14:	95 95       	asr	r25
     c16:	87 95       	ror	r24
     c18:	6a 95       	dec	r22
     c1a:	e2 f7       	brpl	.-8      	; 0xc14 <FUNCpincheck+0x4>
     c1c:	81 70       	andi	r24, 0x01	; 1
     c1e:	08 95       	ret

00000c20 <FUNCprint_binary>:
     c20:	9c 01       	movw	r18, r24
     c22:	21 50       	subi	r18, 0x01	; 1
     c24:	31 09       	sbc	r19, r1
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <FUNCprint_binary+0x10>
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	2a 95       	dec	r18
     c32:	e2 f7       	brpl	.-8      	; 0xc2c <FUNCprint_binary+0xc>
     c34:	00 97       	sbiw	r24, 0x00	; 0
     c36:	b1 f0       	breq	.+44     	; 0xc64 <FUNCprint_binary+0x44>
     c38:	ed e3       	ldi	r30, 0x3D	; 61
     c3a:	f2 e0       	ldi	r31, 0x02	; 2
     c3c:	20 e0       	ldi	r18, 0x00	; 0
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	b0 e3       	ldi	r27, 0x30	; 48
     c42:	a1 e3       	ldi	r26, 0x31	; 49
     c44:	ab 01       	movw	r20, r22
     c46:	48 23       	and	r20, r24
     c48:	59 23       	and	r21, r25
     c4a:	45 2b       	or	r20, r21
     c4c:	11 f0       	breq	.+4      	; 0xc52 <FUNCprint_binary+0x32>
     c4e:	a0 83       	st	Z, r26
     c50:	01 c0       	rjmp	.+2      	; 0xc54 <FUNCprint_binary+0x34>
     c52:	b0 83       	st	Z, r27
     c54:	96 95       	lsr	r25
     c56:	87 95       	ror	r24
     c58:	2f 5f       	subi	r18, 0xFF	; 255
     c5a:	3f 4f       	sbci	r19, 0xFF	; 255
     c5c:	31 96       	adiw	r30, 0x01	; 1
     c5e:	00 97       	sbiw	r24, 0x00	; 0
     c60:	89 f7       	brne	.-30     	; 0xc44 <FUNCprint_binary+0x24>
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <FUNCprint_binary+0x48>
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	f9 01       	movw	r30, r18
     c6a:	e3 5c       	subi	r30, 0xC3	; 195
     c6c:	fd 4f       	sbci	r31, 0xFD	; 253
     c6e:	10 82       	st	Z, r1
     c70:	8d e3       	ldi	r24, 0x3D	; 61
     c72:	92 e0       	ldi	r25, 0x02	; 2
     c74:	08 95       	ret

00000c76 <FUNCdectohex>:
     c76:	ab 01       	movw	r20, r22
     c78:	bc 01       	movw	r22, r24
     c7a:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <FUNCstr>
     c7e:	41 15       	cp	r20, r1
     c80:	51 05       	cpc	r21, r1
     c82:	61 05       	cpc	r22, r1
     c84:	71 05       	cpc	r23, r1
     c86:	09 f4       	brne	.+2      	; 0xc8a <FUNCdectohex+0x14>
     c88:	42 c0       	rjmp	.+132    	; 0xd0e <FUNCdectohex+0x98>
     c8a:	21 e0       	ldi	r18, 0x01	; 1
     c8c:	ef ef       	ldi	r30, 0xFF	; 255
     c8e:	e2 0f       	add	r30, r18
     c90:	db 01       	movw	r26, r22
     c92:	ca 01       	movw	r24, r20
     c94:	8f 70       	andi	r24, 0x0F	; 15
     c96:	99 27       	eor	r25, r25
     c98:	aa 27       	eor	r26, r26
     c9a:	b0 78       	andi	r27, 0x80	; 128
     c9c:	bb 23       	and	r27, r27
     c9e:	54 f4       	brge	.+20     	; 0xcb4 <FUNCdectohex+0x3e>
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	a1 09       	sbc	r26, r1
     ca4:	b1 09       	sbc	r27, r1
     ca6:	80 6f       	ori	r24, 0xF0	; 240
     ca8:	9f 6f       	ori	r25, 0xFF	; 255
     caa:	af 6f       	ori	r26, 0xFF	; 255
     cac:	bf 6f       	ori	r27, 0xFF	; 255
     cae:	01 96       	adiw	r24, 0x01	; 1
     cb0:	a1 1d       	adc	r26, r1
     cb2:	b1 1d       	adc	r27, r1
     cb4:	8a 30       	cpi	r24, 0x0A	; 10
     cb6:	91 05       	cpc	r25, r1
     cb8:	a1 05       	cpc	r26, r1
     cba:	b1 05       	cpc	r27, r1
     cbc:	34 f4       	brge	.+12     	; 0xcca <FUNCdectohex+0x54>
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	e3 5c       	subi	r30, 0xC3	; 195
     cc2:	fd 4f       	sbci	r31, 0xFD	; 253
     cc4:	80 5d       	subi	r24, 0xD0	; 208
     cc6:	80 83       	st	Z, r24
     cc8:	05 c0       	rjmp	.+10     	; 0xcd4 <FUNCdectohex+0x5e>
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	e3 5c       	subi	r30, 0xC3	; 195
     cce:	fd 4f       	sbci	r31, 0xFD	; 253
     cd0:	89 5c       	subi	r24, 0xC9	; 201
     cd2:	80 83       	st	Z, r24
     cd4:	e2 2f       	mov	r30, r18
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	e3 5c       	subi	r30, 0xC3	; 195
     cda:	fd 4f       	sbci	r31, 0xFD	; 253
     cdc:	10 82       	st	Z, r1
     cde:	db 01       	movw	r26, r22
     ce0:	ca 01       	movw	r24, r20
     ce2:	77 23       	and	r23, r23
     ce4:	1c f4       	brge	.+6      	; 0xcec <FUNCdectohex+0x76>
     ce6:	0f 96       	adiw	r24, 0x0f	; 15
     ce8:	a1 1d       	adc	r26, r1
     cea:	b1 1d       	adc	r27, r1
     cec:	ac 01       	movw	r20, r24
     cee:	bd 01       	movw	r22, r26
     cf0:	68 94       	set
     cf2:	13 f8       	bld	r1, 3
     cf4:	75 95       	asr	r23
     cf6:	67 95       	ror	r22
     cf8:	57 95       	ror	r21
     cfa:	47 95       	ror	r20
     cfc:	16 94       	lsr	r1
     cfe:	d1 f7       	brne	.-12     	; 0xcf4 <FUNCdectohex+0x7e>
     d00:	2f 5f       	subi	r18, 0xFF	; 255
     d02:	41 15       	cp	r20, r1
     d04:	51 05       	cpc	r21, r1
     d06:	61 05       	cpc	r22, r1
     d08:	71 05       	cpc	r23, r1
     d0a:	09 f0       	breq	.+2      	; 0xd0e <FUNCdectohex+0x98>
     d0c:	bf cf       	rjmp	.-130    	; 0xc8c <FUNCdectohex+0x16>
     d0e:	8d e3       	ldi	r24, 0x3D	; 61
     d10:	92 e0       	ldi	r25, 0x02	; 2
     d12:	e7 dd       	rcall	.-1074   	; 0x8e2 <Reverse>
     d14:	8d e3       	ldi	r24, 0x3D	; 61
     d16:	92 e0       	ldi	r25, 0x02	; 2
     d18:	08 95       	ret

00000d1a <FUNCReadHLByte>:
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	32 2f       	mov	r19, r18
     d20:	22 27       	eor	r18, r18
     d22:	a9 01       	movw	r20, r18
     d24:	49 2b       	or	r20, r25
     d26:	ca 01       	movw	r24, r20
     d28:	08 95       	ret

00000d2a <FUNCReadLHByte>:
     d2a:	29 2f       	mov	r18, r25
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	32 2f       	mov	r19, r18
     d30:	22 27       	eor	r18, r18
     d32:	a9 01       	movw	r20, r18
     d34:	48 2b       	or	r20, r24
     d36:	ca 01       	movw	r24, r20
     d38:	08 95       	ret

00000d3a <FUNCWriteHLByte>:
     d3a:	28 2f       	mov	r18, r24
     d3c:	89 2f       	mov	r24, r25
     d3e:	92 2f       	mov	r25, r18
     d40:	08 95       	ret

00000d42 <FUNCWriteLHByte>:
     d42:	08 95       	ret

00000d44 <FUNCSwapByte>:
     d44:	98 27       	eor	r25, r24
     d46:	89 27       	eor	r24, r25
     d48:	98 27       	eor	r25, r24
     d4a:	08 95       	ret

00000d4c <FUNCmayia>:
     d4c:	ff 92       	push	r15
     d4e:	0f 93       	push	r16
     d50:	1f 93       	push	r17
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	8c 01       	movw	r16, r24
     d58:	eb 01       	movw	r28, r22
     d5a:	f4 2e       	mov	r15, r20
     d5c:	64 2f       	mov	r22, r20
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 94 0e 18 	call	0x301c	; 0x301c <__floatunsisf>
     d68:	9b 01       	movw	r18, r22
     d6a:	ac 01       	movw	r20, r24
     d6c:	60 e0       	ldi	r22, 0x00	; 0
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	90 e4       	ldi	r25, 0x40	; 64
     d74:	0e 94 23 19 	call	0x3246	; 0x3246 <pow>
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	40 e8       	ldi	r20, 0x80	; 128
     d7e:	5f e3       	ldi	r21, 0x3F	; 63
     d80:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__subsf3>
     d84:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__fixunssfsi>
     d88:	9e 01       	movw	r18, r28
     d8a:	26 23       	and	r18, r22
     d8c:	37 23       	and	r19, r23
     d8e:	60 23       	and	r22, r16
     d90:	71 23       	and	r23, r17
     d92:	cb 01       	movw	r24, r22
     d94:	82 27       	eor	r24, r18
     d96:	93 27       	eor	r25, r19
     d98:	28 23       	and	r18, r24
     d9a:	39 23       	and	r19, r25
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <FUNCmayia+0x56>
     d9e:	22 0f       	add	r18, r18
     da0:	33 1f       	adc	r19, r19
     da2:	fa 94       	dec	r15
     da4:	e2 f7       	brpl	.-8      	; 0xd9e <FUNCmayia+0x52>
     da6:	82 2b       	or	r24, r18
     da8:	93 2b       	or	r25, r19
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	ff 90       	pop	r15
     db4:	08 95       	ret

00000db6 <FUNCprint>:
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	9e 01       	movw	r18, r28
     dc0:	2b 5f       	subi	r18, 0xFB	; 251
     dc2:	3f 4f       	sbci	r19, 0xFF	; 255
     dc4:	f9 01       	movw	r30, r18
     dc6:	41 91       	ld	r20, Z+
     dc8:	51 91       	ld	r21, Z+
     dca:	9f 01       	movw	r18, r30
     dcc:	6f e5       	ldi	r22, 0x5F	; 95
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	8d e3       	ldi	r24, 0x3D	; 61
     dd2:	92 e0       	ldi	r25, 0x02	; 2
     dd4:	0e 94 1e 1b 	call	0x363c	; 0x363c <vsnprintf>
     dd8:	99 23       	and	r25, r25
     dda:	1c f0       	brlt	.+6      	; 0xde2 <FUNCprint+0x2c>
     ddc:	8d e3       	ldi	r24, 0x3D	; 61
     dde:	92 e0       	ldi	r25, 0x02	; 2
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <FUNCprint+0x30>
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	08 95       	ret

00000dec <FUNCenable>:
     dec:	fc 01       	movw	r30, r24
     dee:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <FUNCstr+0x5f>
     df2:	87 e4       	ldi	r24, 0x47	; 71
     df4:	94 e0       	ldi	r25, 0x04	; 4
     df6:	91 83       	std	Z+1, r25	; 0x01
     df8:	80 83       	st	Z, r24
     dfa:	81 e7       	ldi	r24, 0x71	; 113
     dfc:	94 e0       	ldi	r25, 0x04	; 4
     dfe:	93 83       	std	Z+3, r25	; 0x03
     e00:	82 83       	std	Z+2, r24	; 0x02
     e02:	86 ea       	ldi	r24, 0xA6	; 166
     e04:	96 e0       	ldi	r25, 0x06	; 6
     e06:	95 83       	std	Z+5, r25	; 0x05
     e08:	84 83       	std	Z+4, r24	; 0x04
     e0a:	8f e4       	ldi	r24, 0x4F	; 79
     e0c:	92 e0       	ldi	r25, 0x02	; 2
     e0e:	97 83       	std	Z+7, r25	; 0x07
     e10:	86 83       	std	Z+6, r24	; 0x06
     e12:	80 e7       	ldi	r24, 0x70	; 112
     e14:	92 e0       	ldi	r25, 0x02	; 2
     e16:	91 87       	std	Z+9, r25	; 0x09
     e18:	80 87       	std	Z+8, r24	; 0x08
     e1a:	8e e7       	ldi	r24, 0x7E	; 126
     e1c:	92 e0       	ldi	r25, 0x02	; 2
     e1e:	93 87       	std	Z+11, r25	; 0x0b
     e20:	82 87       	std	Z+10, r24	; 0x0a
     e22:	80 ea       	ldi	r24, 0xA0	; 160
     e24:	92 e0       	ldi	r25, 0x02	; 2
     e26:	95 87       	std	Z+13, r25	; 0x0d
     e28:	84 87       	std	Z+12, r24	; 0x0c
     e2a:	89 ee       	ldi	r24, 0xE9	; 233
     e2c:	94 e0       	ldi	r25, 0x04	; 4
     e2e:	97 87       	std	Z+15, r25	; 0x0f
     e30:	86 87       	std	Z+14, r24	; 0x0e
     e32:	82 e2       	ldi	r24, 0x22	; 34
     e34:	95 e0       	ldi	r25, 0x05	; 5
     e36:	91 8b       	std	Z+17, r25	; 0x11
     e38:	80 8b       	std	Z+16, r24	; 0x10
     e3a:	8e e8       	ldi	r24, 0x8E	; 142
     e3c:	94 e0       	ldi	r25, 0x04	; 4
     e3e:	93 8b       	std	Z+19, r25	; 0x13
     e40:	82 8b       	std	Z+18, r24	; 0x12
     e42:	86 e5       	ldi	r24, 0x56	; 86
     e44:	94 e0       	ldi	r25, 0x04	; 4
     e46:	95 8b       	std	Z+21, r25	; 0x15
     e48:	84 8b       	std	Z+20, r24	; 0x14
     e4a:	86 e4       	ldi	r24, 0x46	; 70
     e4c:	93 e0       	ldi	r25, 0x03	; 3
     e4e:	97 8b       	std	Z+23, r25	; 0x17
     e50:	86 8b       	std	Z+22, r24	; 0x16
     e52:	8b e4       	ldi	r24, 0x4B	; 75
     e54:	93 e0       	ldi	r25, 0x03	; 3
     e56:	91 8f       	std	Z+25, r25	; 0x19
     e58:	80 8f       	std	Z+24, r24	; 0x18
     e5a:	8a e5       	ldi	r24, 0x5A	; 90
     e5c:	93 e0       	ldi	r25, 0x03	; 3
     e5e:	93 8f       	std	Z+27, r25	; 0x1b
     e60:	82 8f       	std	Z+26, r24	; 0x1a
     e62:	8e e7       	ldi	r24, 0x7E	; 126
     e64:	93 e0       	ldi	r25, 0x03	; 3
     e66:	95 8f       	std	Z+29, r25	; 0x1d
     e68:	84 8f       	std	Z+28, r24	; 0x1c
     e6a:	80 e8       	ldi	r24, 0x80	; 128
     e6c:	93 e0       	ldi	r25, 0x03	; 3
     e6e:	97 8f       	std	Z+31, r25	; 0x1f
     e70:	86 8f       	std	Z+30, r24	; 0x1e
     e72:	8a e8       	ldi	r24, 0x8A	; 138
     e74:	93 e0       	ldi	r25, 0x03	; 3
     e76:	91 a3       	std	Z+33, r25	; 0x21
     e78:	80 a3       	std	Z+32, r24	; 0x20
     e7a:	87 e9       	ldi	r24, 0x97	; 151
     e7c:	93 e0       	ldi	r25, 0x03	; 3
     e7e:	93 a3       	std	Z+35, r25	; 0x23
     e80:	82 a3       	std	Z+34, r24	; 0x22
     e82:	83 ea       	ldi	r24, 0xA3	; 163
     e84:	93 e0       	ldi	r25, 0x03	; 3
     e86:	95 a3       	std	Z+37, r25	; 0x25
     e88:	84 a3       	std	Z+36, r24	; 0x24
     e8a:	8b eb       	ldi	r24, 0xBB	; 187
     e8c:	93 e0       	ldi	r25, 0x03	; 3
     e8e:	97 a3       	std	Z+39, r25	; 0x27
     e90:	86 a3       	std	Z+38, r24	; 0x26
     e92:	8e ec       	ldi	r24, 0xCE	; 206
     e94:	93 e0       	ldi	r25, 0x03	; 3
     e96:	91 a7       	std	Z+41, r25	; 0x29
     e98:	80 a7       	std	Z+40, r24	; 0x28
     e9a:	89 ed       	ldi	r24, 0xD9	; 217
     e9c:	93 e0       	ldi	r25, 0x03	; 3
     e9e:	93 a7       	std	Z+43, r25	; 0x2b
     ea0:	82 a7       	std	Z+42, r24	; 0x2a
     ea2:	86 e0       	ldi	r24, 0x06	; 6
     ea4:	94 e0       	ldi	r25, 0x04	; 4
     ea6:	95 a7       	std	Z+45, r25	; 0x2d
     ea8:	84 a7       	std	Z+44, r24	; 0x2c
     eaa:	8c e8       	ldi	r24, 0x8C	; 140
     eac:	95 e0       	ldi	r25, 0x05	; 5
     eae:	97 a7       	std	Z+47, r25	; 0x2f
     eb0:	86 a7       	std	Z+46, r24	; 0x2e
     eb2:	87 e9       	ldi	r24, 0x97	; 151
     eb4:	95 e0       	ldi	r25, 0x05	; 5
     eb6:	91 ab       	std	Z+49, r25	; 0x31
     eb8:	80 ab       	std	Z+48, r24	; 0x30
     eba:	88 eb       	ldi	r24, 0xB8	; 184
     ebc:	95 e0       	ldi	r25, 0x05	; 5
     ebe:	93 ab       	std	Z+51, r25	; 0x33
     ec0:	82 ab       	std	Z+50, r24	; 0x32
     ec2:	88 e0       	ldi	r24, 0x08	; 8
     ec4:	96 e0       	ldi	r25, 0x06	; 6
     ec6:	95 ab       	std	Z+53, r25	; 0x35
     ec8:	84 ab       	std	Z+52, r24	; 0x34
     eca:	80 e1       	ldi	r24, 0x10	; 16
     ecc:	96 e0       	ldi	r25, 0x06	; 6
     ece:	97 ab       	std	Z+55, r25	; 0x37
     ed0:	86 ab       	std	Z+54, r24	; 0x36
     ed2:	8e ee       	ldi	r24, 0xEE	; 238
     ed4:	97 e0       	ldi	r25, 0x07	; 7
     ed6:	91 af       	std	Z+57, r25	; 0x39
     ed8:	80 af       	std	Z+56, r24	; 0x38
     eda:	8b e3       	ldi	r24, 0x3B	; 59
     edc:	96 e0       	ldi	r25, 0x06	; 6
     ede:	93 af       	std	Z+59, r25	; 0x3b
     ee0:	82 af       	std	Z+58, r24	; 0x3a
     ee2:	8d e8       	ldi	r24, 0x8D	; 141
     ee4:	96 e0       	ldi	r25, 0x06	; 6
     ee6:	95 af       	std	Z+61, r25	; 0x3d
     ee8:	84 af       	std	Z+60, r24	; 0x3c
     eea:	85 e9       	ldi	r24, 0x95	; 149
     eec:	96 e0       	ldi	r25, 0x06	; 6
     eee:	97 af       	std	Z+63, r25	; 0x3f
     ef0:	86 af       	std	Z+62, r24	; 0x3e
     ef2:	df 01       	movw	r26, r30
     ef4:	a0 5c       	subi	r26, 0xC0	; 192
     ef6:	bf 4f       	sbci	r27, 0xFF	; 255
     ef8:	8d e9       	ldi	r24, 0x9D	; 157
     efa:	96 e0       	ldi	r25, 0x06	; 6
     efc:	11 96       	adiw	r26, 0x01	; 1
     efe:	9c 93       	st	X, r25
     f00:	8e 93       	st	-X, r24
     f02:	12 96       	adiw	r26, 0x02	; 2
     f04:	81 ea       	ldi	r24, 0xA1	; 161
     f06:	96 e0       	ldi	r25, 0x06	; 6
     f08:	11 96       	adiw	r26, 0x01	; 1
     f0a:	9c 93       	st	X, r25
     f0c:	8e 93       	st	-X, r24
     f0e:	12 96       	adiw	r26, 0x02	; 2
     f10:	82 ea       	ldi	r24, 0xA2	; 162
     f12:	96 e0       	ldi	r25, 0x06	; 6
     f14:	11 96       	adiw	r26, 0x01	; 1
     f16:	9c 93       	st	X, r25
     f18:	8e 93       	st	-X, r24
     f1a:	12 96       	adiw	r26, 0x02	; 2
     f1c:	8b ed       	ldi	r24, 0xDB	; 219
     f1e:	96 e0       	ldi	r25, 0x06	; 6
     f20:	8d 93       	st	X+, r24
     f22:	9c 93       	st	X, r25
     f24:	cf 01       	movw	r24, r30
     f26:	08 95       	ret

00000f28 <FUNCintinvstr>:
// intinvstr
uint8_t FUNCintinvstr(int32_t num, char* res, uint8_t n_digit)
{
     f28:	8f 92       	push	r8
     f2a:	9f 92       	push	r9
     f2c:	af 92       	push	r10
     f2e:	bf 92       	push	r11
     f30:	ef 92       	push	r14
     f32:	ff 92       	push	r15
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	8a 01       	movw	r16, r20
     f3e:	d2 2f       	mov	r29, r18
	uint8_t k = 0;
	for(res[k++] = (char)((num % 10) + '0'); (num /= 10) > 0 ; res[k++] = (char)((num % 10) + '0'));
     f40:	2a e0       	ldi	r18, 0x0A	; 10
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__divmodsi4>
     f4c:	60 5d       	subi	r22, 0xD0	; 208
     f4e:	f8 01       	movw	r30, r16
     f50:	60 83       	st	Z, r22
     f52:	62 2f       	mov	r22, r18
     f54:	73 2f       	mov	r23, r19
     f56:	84 2f       	mov	r24, r20
     f58:	95 2f       	mov	r25, r21
     f5a:	16 16       	cp	r1, r22
     f5c:	17 06       	cpc	r1, r23
     f5e:	18 06       	cpc	r1, r24
     f60:	19 06       	cpc	r1, r25
     f62:	fc f4       	brge	.+62     	; 0xfa2 <FUNCintinvstr+0x7a>
     f64:	21 e0       	ldi	r18, 0x01	; 1
     f66:	0f 2e       	mov	r0, r31
     f68:	fa e0       	ldi	r31, 0x0A	; 10
     f6a:	8f 2e       	mov	r8, r31
     f6c:	91 2c       	mov	r9, r1
     f6e:	a1 2c       	mov	r10, r1
     f70:	b1 2c       	mov	r11, r1
     f72:	f0 2d       	mov	r31, r0
     f74:	c1 e0       	ldi	r28, 0x01	; 1
     f76:	c2 0f       	add	r28, r18
     f78:	78 01       	movw	r14, r16
     f7a:	e2 0e       	add	r14, r18
     f7c:	f1 1c       	adc	r15, r1
     f7e:	a5 01       	movw	r20, r10
     f80:	94 01       	movw	r18, r8
     f82:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__divmodsi4>
     f86:	60 5d       	subi	r22, 0xD0	; 208
     f88:	f7 01       	movw	r30, r14
     f8a:	60 83       	st	Z, r22
     f8c:	62 2f       	mov	r22, r18
     f8e:	73 2f       	mov	r23, r19
     f90:	84 2f       	mov	r24, r20
     f92:	95 2f       	mov	r25, r21
     f94:	2c 2f       	mov	r18, r28
     f96:	16 16       	cp	r1, r22
     f98:	17 06       	cpc	r1, r23
     f9a:	18 06       	cpc	r1, r24
     f9c:	19 06       	cpc	r1, r25
     f9e:	54 f3       	brlt	.-44     	; 0xf74 <FUNCintinvstr+0x4c>
     fa0:	01 c0       	rjmp	.+2      	; 0xfa4 <FUNCintinvstr+0x7c>
     fa2:	c1 e0       	ldi	r28, 0x01	; 1
	for( ; k < n_digit ; res[k++] = '0');
     fa4:	cd 17       	cp	r28, r29
     fa6:	48 f4       	brcc	.+18     	; 0xfba <FUNCintinvstr+0x92>
     fa8:	80 e3       	ldi	r24, 0x30	; 48
     faa:	f8 01       	movw	r30, r16
     fac:	ec 0f       	add	r30, r28
     fae:	f1 1d       	adc	r31, r1
     fb0:	80 83       	st	Z, r24
     fb2:	cf 5f       	subi	r28, 0xFF	; 255
     fb4:	dc 13       	cpse	r29, r28
     fb6:	f9 cf       	rjmp	.-14     	; 0xfaa <FUNCintinvstr+0x82>
     fb8:	01 c0       	rjmp	.+2      	; 0xfbc <FUNCintinvstr+0x94>
     fba:	dc 2f       	mov	r29, r28
	res[k] = '\0';
     fbc:	f8 01       	movw	r30, r16
     fbe:	ed 0f       	add	r30, r29
     fc0:	f1 1d       	adc	r31, r1
     fc2:	10 82       	st	Z, r1
	return k;
}
     fc4:	8d 2f       	mov	r24, r29
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	1f 91       	pop	r17
     fcc:	0f 91       	pop	r16
     fce:	ff 90       	pop	r15
     fd0:	ef 90       	pop	r14
     fd2:	bf 90       	pop	r11
     fd4:	af 90       	pop	r10
     fd6:	9f 90       	pop	r9
     fd8:	8f 90       	pop	r8
     fda:	08 95       	ret

00000fdc <FUNCftoa>:
// ftoa
char* FUNCftoa(double num, char* res, uint8_t afterpoint)
{
     fdc:	8f 92       	push	r8
     fde:	9f 92       	push	r9
     fe0:	af 92       	push	r10
     fe2:	bf 92       	push	r11
     fe4:	cf 92       	push	r12
     fe6:	df 92       	push	r13
     fe8:	ef 92       	push	r14
     fea:	ff 92       	push	r15
     fec:	0f 93       	push	r16
     fee:	1f 93       	push	r17
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	6b 01       	movw	r12, r22
     ff6:	7c 01       	movw	r14, r24
     ff8:	ea 01       	movw	r28, r20
     ffa:	02 2f       	mov	r16, r18
	uint32_t ipart;
	double n, fpart;
	uint8_t k = 0;
	int8_t sign;
	if (num < 0){
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	a9 01       	movw	r20, r18
    1002:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <__cmpsf2>
    1006:	88 23       	and	r24, r24
    1008:	0c f0       	brlt	.+2      	; 0x100c <FUNCftoa+0x30>
    100a:	66 c0       	rjmp	.+204    	; 0x10d8 <FUNCftoa+0xfc>
		n = -num; sign = -1;
    100c:	f7 fa       	bst	r15, 7
    100e:	f0 94       	com	r15
    1010:	f7 f8       	bld	r15, 7
    1012:	f0 94       	com	r15
	}else{
		n = num; sign = 1;
	}
	ipart = (uint32_t) n; fpart = n - (double)ipart;
    1014:	c7 01       	movw	r24, r14
    1016:	b6 01       	movw	r22, r12
    1018:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__fixunssfsi>
    101c:	4b 01       	movw	r8, r22
    101e:	5c 01       	movw	r10, r24
    1020:	0e 94 0e 18 	call	0x301c	; 0x301c <__floatunsisf>
    1024:	9b 01       	movw	r18, r22
    1026:	ac 01       	movw	r20, r24
    1028:	c7 01       	movw	r24, r14
    102a:	b6 01       	movw	r22, r12
    102c:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__subsf3>
    1030:	6b 01       	movw	r12, r22
    1032:	7c 01       	movw	r14, r24
	k = FUNCintinvstr((int)ipart, res, 1);
    1034:	b4 01       	movw	r22, r8
    1036:	99 0c       	add	r9, r9
    1038:	88 0b       	sbc	r24, r24
    103a:	99 0b       	sbc	r25, r25
    103c:	21 e0       	ldi	r18, 0x01	; 1
    103e:	ae 01       	movw	r20, r28
    1040:	73 df       	rcall	.-282    	; 0xf28 <FUNCintinvstr>
	if (sign < 0) res[k++] = '-'; else res[k++] = ' ';
    1042:	11 e0       	ldi	r17, 0x01	; 1
    1044:	18 0f       	add	r17, r24
    1046:	fe 01       	movw	r30, r28
    1048:	e8 0f       	add	r30, r24
    104a:	f1 1d       	adc	r31, r1
    104c:	8d e2       	ldi	r24, 0x2D	; 45
    104e:	80 83       	st	Z, r24
	res[k] = '\0';
    1050:	5e 01       	movw	r10, r28
    1052:	a1 0e       	add	r10, r17
    1054:	b1 1c       	adc	r11, r1
    1056:	f5 01       	movw	r30, r10
    1058:	10 82       	st	Z, r1
	Reverse(res);
    105a:	ce 01       	movw	r24, r28
    105c:	42 dc       	rcall	.-1916   	; 0x8e2 <Reverse>
	if (afterpoint > 0 && afterpoint < (MAXafterpoint + 1)){ // it is only a 8 bit mcu
    105e:	8f ef       	ldi	r24, 0xFF	; 255
    1060:	80 0f       	add	r24, r16
    1062:	86 30       	cpi	r24, 0x06	; 6
    1064:	08 f5       	brcc	.+66     	; 0x10a8 <FUNCftoa+0xcc>
		res[k++] = '.';
    1066:	8e e2       	ldi	r24, 0x2E	; 46
    1068:	f5 01       	movw	r30, r10
    106a:	80 83       	st	Z, r24
		FUNCintinvstr( (int32_t)(fpart * pow(10, afterpoint)), (res + k), afterpoint );
    106c:	1f 5f       	subi	r17, 0xFF	; 255
    106e:	5e 01       	movw	r10, r28
    1070:	a1 0e       	add	r10, r17
    1072:	b1 1c       	adc	r11, r1
    1074:	60 2f       	mov	r22, r16
    1076:	70 e0       	ldi	r23, 0x00	; 0
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	0e 94 0e 18 	call	0x301c	; 0x301c <__floatunsisf>
    1080:	9b 01       	movw	r18, r22
    1082:	ac 01       	movw	r20, r24
    1084:	60 e0       	ldi	r22, 0x00	; 0
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	80 e2       	ldi	r24, 0x20	; 32
    108a:	91 e4       	ldi	r25, 0x41	; 65
    108c:	0e 94 23 19 	call	0x3246	; 0x3246 <pow>
    1090:	a7 01       	movw	r20, r14
    1092:	96 01       	movw	r18, r12
    1094:	0e 94 c0 18 	call	0x3180	; 0x3180 <__mulsf3>
    1098:	0e 94 dd 17 	call	0x2fba	; 0x2fba <__fixsfsi>
    109c:	20 2f       	mov	r18, r16
    109e:	a5 01       	movw	r20, r10
		Reverse(res + k);
    10a0:	43 df       	rcall	.-378    	; 0xf28 <FUNCintinvstr>
    10a2:	c5 01       	movw	r24, r10
    10a4:	1e dc       	rcall	.-1988   	; 0x8e2 <Reverse>
    10a6:	37 c0       	rjmp	.+110    	; 0x1116 <__stack+0x17>
	}else{
		res[k++] = '.';
    10a8:	8e e2       	ldi	r24, 0x2E	; 46
    10aa:	f5 01       	movw	r30, r10
    10ac:	80 83       	st	Z, r24
		FUNCintinvstr( (int32_t)(fpart * pow(10, DEFAULTafterpoint)), (res + k), DEFAULTafterpoint );
    10ae:	1f 5f       	subi	r17, 0xFF	; 255
    10b0:	ce 01       	movw	r24, r28
    10b2:	81 0f       	add	r24, r17
    10b4:	91 1d       	adc	r25, r1
    10b6:	8c 01       	movw	r16, r24
    10b8:	20 e0       	ldi	r18, 0x00	; 0
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	48 ec       	ldi	r20, 0xC8	; 200
    10be:	52 e4       	ldi	r21, 0x42	; 66
    10c0:	c7 01       	movw	r24, r14
    10c2:	b6 01       	movw	r22, r12
    10c4:	0e 94 c0 18 	call	0x3180	; 0x3180 <__mulsf3>
    10c8:	0e 94 dd 17 	call	0x2fba	; 0x2fba <__fixsfsi>
    10cc:	22 e0       	ldi	r18, 0x02	; 2
    10ce:	a8 01       	movw	r20, r16
		Reverse(res + k);
    10d0:	2b df       	rcall	.-426    	; 0xf28 <FUNCintinvstr>
    10d2:	c8 01       	movw	r24, r16
    10d4:	06 dc       	rcall	.-2036   	; 0x8e2 <Reverse>
	}
	return res;
    10d6:	1f c0       	rjmp	.+62     	; 0x1116 <__stack+0x17>
	if (num < 0){
		n = -num; sign = -1;
	}else{
		n = num; sign = 1;
	}
	ipart = (uint32_t) n; fpart = n - (double)ipart;
    10d8:	c7 01       	movw	r24, r14
    10da:	b6 01       	movw	r22, r12
    10dc:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__fixunssfsi>
    10e0:	4b 01       	movw	r8, r22
    10e2:	5c 01       	movw	r10, r24
    10e4:	0e 94 0e 18 	call	0x301c	; 0x301c <__floatunsisf>
    10e8:	9b 01       	movw	r18, r22
    10ea:	ac 01       	movw	r20, r24
    10ec:	c7 01       	movw	r24, r14
    10ee:	b6 01       	movw	r22, r12
    10f0:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__subsf3>
    10f4:	6b 01       	movw	r12, r22
    10f6:	7c 01       	movw	r14, r24
	k = FUNCintinvstr((int)ipart, res, 1);
    10f8:	b4 01       	movw	r22, r8
    10fa:	99 0c       	add	r9, r9
    10fc:	88 0b       	sbc	r24, r24
    10fe:	99 0b       	sbc	r25, r25
    1100:	21 e0       	ldi	r18, 0x01	; 1
    1102:	ae 01       	movw	r20, r28
    1104:	11 df       	rcall	.-478    	; 0xf28 <FUNCintinvstr>
	if (sign < 0) res[k++] = '-'; else res[k++] = ' ';
    1106:	11 e0       	ldi	r17, 0x01	; 1
    1108:	18 0f       	add	r17, r24
    110a:	fe 01       	movw	r30, r28
    110c:	e8 0f       	add	r30, r24
    110e:	f1 1d       	adc	r31, r1
    1110:	80 e2       	ldi	r24, 0x20	; 32
    1112:	80 83       	st	Z, r24
    1114:	9d cf       	rjmp	.-198    	; 0x1050 <FUNCftoa+0x74>
		res[k++] = '.';
		FUNCintinvstr( (int32_t)(fpart * pow(10, DEFAULTafterpoint)), (res + k), DEFAULTafterpoint );
		Reverse(res + k);
	}
	return res;
}
    1116:	ce 01       	movw	r24, r28
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	1f 91       	pop	r17
    111e:	0f 91       	pop	r16
    1120:	ff 90       	pop	r15
    1122:	ef 90       	pop	r14
    1124:	df 90       	pop	r13
    1126:	cf 90       	pop	r12
    1128:	bf 90       	pop	r11
    112a:	af 90       	pop	r10
    112c:	9f 90       	pop	r9
    112e:	8f 90       	pop	r8
    1130:	08 95       	ret

00001132 <KEYPAD_data>:
		}
	}
}
// read
keypadata KEYPAD_data(void)
{
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	00 d0       	rcall	.+0      	; 0x1138 <KEYPAD_data+0x6>
    1138:	00 d0       	rcall	.+0      	; 0x113a <KEYPAD_data+0x8>
    113a:	1f 92       	push	r1
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
	return data;
    1140:	85 e0       	ldi	r24, 0x05	; 5
    1142:	e7 e8       	ldi	r30, 0x87	; 135
    1144:	f3 e0       	ldi	r31, 0x03	; 3
    1146:	de 01       	movw	r26, r28
    1148:	11 96       	adiw	r26, 0x01	; 1
    114a:	01 90       	ld	r0, Z+
    114c:	0d 92       	st	X+, r0
    114e:	8a 95       	dec	r24
    1150:	e1 f7       	brne	.-8      	; 0x114a <KEYPAD_data+0x18>
    1152:	29 81       	ldd	r18, Y+1	; 0x01
    1154:	3a 81       	ldd	r19, Y+2	; 0x02
    1156:	4b 81       	ldd	r20, Y+3	; 0x03
    1158:	5c 81       	ldd	r21, Y+4	; 0x04
    115a:	6d 81       	ldd	r22, Y+5	; 0x05
}
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	08 95       	ret

00001172 <KEYPAD_flush>:
// flush
void KEYPAD_flush(void)
{
	KEYPADSTRINGINDEX = 0;
    1172:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <KEYPADSTRINGINDEX>
	data.character = ' ';
    1176:	e7 e8       	ldi	r30, 0x87	; 135
    1178:	f3 e0       	ldi	r31, 0x03	; 3
    117a:	80 e2       	ldi	r24, 0x20	; 32
    117c:	80 83       	st	Z, r24
	data.print = endstr;
    117e:	8d e9       	ldi	r24, 0x9D	; 157
    1180:	92 e0       	ldi	r25, 0x02	; 2
    1182:	92 83       	std	Z+2, r25	; 0x02
    1184:	81 83       	std	Z+1, r24	; 0x01
	data.string = endstr;
    1186:	94 83       	std	Z+4, r25	; 0x04
    1188:	83 83       	std	Z+3, r24	; 0x03
    118a:	08 95       	ret

0000118c <KEYPAD_getkey>:
	*keypad_PORT |= (1 << KEYPADLINE_1) | (1 << KEYPADLINE_2) | (1 << KEYPADLINE_3) | (1 << KEYPADLINE_4);
	// Going to use pull down method.
	return keypad;
}
char KEYPAD_getkey(void)
{
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	21 e0       	ldi	r18, 0x01	; 1
	uint8_t HL;
	char c = 0;
    1192:	80 e0       	ldi	r24, 0x00	; 0
				*keypad_PORT |= (1 << KEYPADLINE_1);
			break;
			case 1: // line 2 index 1
				*keypad_DDR |= (1 << KEYPADLINE_2);
				*keypad_PORT &= ~(1 << KEYPADLINE_2);
				keypad_dataf.line_2 = *keypad_PIN & ((1 << KEYPADDATA_1) | (1 << KEYPADDATA_2) | (1 << KEYPADDATA_3) | (1 << KEYPADDATA_4));
    1194:	aa e5       	ldi	r26, 0x5A	; 90
    1196:	b3 e0       	ldi	r27, 0x03	; 3
				HL = KEYPADhl(keypad_datai.line_2, keypad_dataf.line_2);
    1198:	ee e5       	ldi	r30, 0x5E	; 94
    119a:	f3 e0       	ldi	r31, 0x03	; 3
					if(HL == (1 << KEYPADDATA_2))
						c = keypadvalue[1][1];
					if(HL == (1 << KEYPADDATA_3))
						c = keypadvalue[1][2];
					if(HL == (1 << KEYPADDATA_4))
						c = keypadvalue[1][3];
    119c:	60 e0       	ldi	r22, 0x00	; 0
    119e:	71 e0       	ldi	r23, 0x01	; 1
    11a0:	01 c0       	rjmp	.+2      	; 0x11a4 <KEYPAD_getkey+0x18>
    11a2:	2f 5f       	subi	r18, 0xFF	; 255
{
	uint8_t HL;
	char c = 0;
	uint8_t keypad_option;
	for(keypad_option = 0; keypad_option < KEYPADLINES; keypad_option++){
		switch (keypad_option)
    11a4:	9f ef       	ldi	r25, 0xFF	; 255
    11a6:	92 0f       	add	r25, r18
    11a8:	91 30       	cpi	r25, 0x01	; 1
    11aa:	09 f4       	brne	.+2      	; 0x11ae <KEYPAD_getkey+0x22>
    11ac:	4b c0       	rjmp	.+150    	; 0x1244 <KEYPAD_getkey+0xb8>
    11ae:	38 f0       	brcs	.+14     	; 0x11be <KEYPAD_getkey+0x32>
    11b0:	92 30       	cpi	r25, 0x02	; 2
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <KEYPAD_getkey+0x2a>
    11b4:	8c c0       	rjmp	.+280    	; 0x12ce <KEYPAD_getkey+0x142>
    11b6:	93 30       	cpi	r25, 0x03	; 3
    11b8:	09 f4       	brne	.+2      	; 0x11bc <KEYPAD_getkey+0x30>
    11ba:	ce c0       	rjmp	.+412    	; 0x1358 <KEYPAD_getkey+0x1cc>
    11bc:	0e c1       	rjmp	.+540    	; 0x13da <KEYPAD_getkey+0x24e>
		{
			case 0: // line 1 index 0
				*keypad_DDR |= (1 << KEYPADLINE_1);
    11be:	40 91 65 03 	lds	r20, 0x0365	; 0x800365 <keypad_DDR>
    11c2:	50 91 66 03 	lds	r21, 0x0366	; 0x800366 <keypad_DDR+0x1>
    11c6:	ea 01       	movw	r28, r20
    11c8:	98 81       	ld	r25, Y
    11ca:	90 68       	ori	r25, 0x80	; 128
    11cc:	98 83       	st	Y, r25
				*keypad_PORT &= ~(1 << KEYPADLINE_1);
    11ce:	40 91 57 03 	lds	r20, 0x0357	; 0x800357 <keypad_PORT>
    11d2:	50 91 58 03 	lds	r21, 0x0358	; 0x800358 <keypad_PORT+0x1>
    11d6:	ea 01       	movw	r28, r20
    11d8:	98 81       	ld	r25, Y
    11da:	9f 77       	andi	r25, 0x7F	; 127
    11dc:	98 83       	st	Y, r25
				keypad_dataf.line_1 = *keypad_PIN & ((1 << KEYPADDATA_1) | (1 << KEYPADDATA_2) | (1 << KEYPADDATA_3) | (1 << KEYPADDATA_4));
    11de:	40 91 63 03 	lds	r20, 0x0363	; 0x800363 <keypad_PIN>
    11e2:	50 91 64 03 	lds	r21, 0x0364	; 0x800364 <keypad_PIN+0x1>
    11e6:	ea 01       	movw	r28, r20
    11e8:	38 81       	ld	r19, Y
    11ea:	34 77       	andi	r19, 0x74	; 116
    11ec:	3c 93       	st	X, r19
				HL = KEYPADhl(keypad_datai.line_1, keypad_dataf.line_1);
    11ee:	90 81       	ld	r25, Z
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	// printf("KEYPADhl\n");
	i = xf ^ xi;
	i &= xi;
    11f0:	43 2f       	mov	r20, r19
    11f2:	49 27       	eor	r20, r25
    11f4:	94 23       	and	r25, r20
			case 0: // line 1 index 0
				*keypad_DDR |= (1 << KEYPADLINE_1);
				*keypad_PORT &= ~(1 << KEYPADLINE_1);
				keypad_dataf.line_1 = *keypad_PIN & ((1 << KEYPADDATA_1) | (1 << KEYPADDATA_2) | (1 << KEYPADDATA_3) | (1 << KEYPADDATA_4));
				HL = KEYPADhl(keypad_datai.line_1, keypad_dataf.line_1);
				keypad_datai.line_1 = keypad_dataf.line_1;
    11f6:	30 83       	st	Z, r19
				if(HL){
    11f8:	99 23       	and	r25, r25
    11fa:	99 f0       	breq	.+38     	; 0x1222 <KEYPAD_getkey+0x96>
					// decode index line one column what ?
					if(HL == (1 << KEYPADDATA_1))
    11fc:	94 30       	cpi	r25, 0x04	; 4
    11fe:	19 f4       	brne	.+6      	; 0x1206 <KEYPAD_getkey+0x7a>
						c = keypadvalue[0][0];
    1200:	eb 01       	movw	r28, r22
    1202:	88 81       	ld	r24, Y
    1204:	0a c0       	rjmp	.+20     	; 0x121a <KEYPAD_getkey+0x8e>
					if(HL == (1 << KEYPADDATA_2))
    1206:	90 31       	cpi	r25, 0x10	; 16
    1208:	19 f4       	brne	.+6      	; 0x1210 <KEYPAD_getkey+0x84>
						c = keypadvalue[0][1];
    120a:	eb 01       	movw	r28, r22
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	09 c0       	rjmp	.+18     	; 0x1222 <KEYPAD_getkey+0x96>
					if(HL == (1 << KEYPADDATA_3))
    1210:	90 32       	cpi	r25, 0x20	; 32
    1212:	19 f4       	brne	.+6      	; 0x121a <KEYPAD_getkey+0x8e>
						c = keypadvalue[0][2];
    1214:	eb 01       	movw	r28, r22
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	04 c0       	rjmp	.+8      	; 0x1222 <KEYPAD_getkey+0x96>
					if(HL == (1 << KEYPADDATA_4))
    121a:	90 34       	cpi	r25, 0x40	; 64
    121c:	11 f4       	brne	.+4      	; 0x1222 <KEYPAD_getkey+0x96>
						c = keypadvalue[0][3];
    121e:	eb 01       	movw	r28, r22
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
				}
				*keypad_DDR &= ~(1 << KEYPADLINE_1);
    1222:	40 91 65 03 	lds	r20, 0x0365	; 0x800365 <keypad_DDR>
    1226:	50 91 66 03 	lds	r21, 0x0366	; 0x800366 <keypad_DDR+0x1>
    122a:	ea 01       	movw	r28, r20
    122c:	98 81       	ld	r25, Y
    122e:	9f 77       	andi	r25, 0x7F	; 127
    1230:	98 83       	st	Y, r25
				*keypad_PORT |= (1 << KEYPADLINE_1);
    1232:	40 91 57 03 	lds	r20, 0x0357	; 0x800357 <keypad_PORT>
    1236:	50 91 58 03 	lds	r21, 0x0358	; 0x800358 <keypad_PORT+0x1>
    123a:	ea 01       	movw	r28, r20
    123c:	98 81       	ld	r25, Y
    123e:	90 68       	ori	r25, 0x80	; 128
    1240:	98 83       	st	Y, r25
			break;
    1242:	af cf       	rjmp	.-162    	; 0x11a2 <KEYPAD_getkey+0x16>
			case 1: // line 2 index 1
				*keypad_DDR |= (1 << KEYPADLINE_2);
    1244:	40 91 65 03 	lds	r20, 0x0365	; 0x800365 <keypad_DDR>
    1248:	50 91 66 03 	lds	r21, 0x0366	; 0x800366 <keypad_DDR+0x1>
    124c:	ea 01       	movw	r28, r20
    124e:	98 81       	ld	r25, Y
    1250:	91 60       	ori	r25, 0x01	; 1
    1252:	98 83       	st	Y, r25
				*keypad_PORT &= ~(1 << KEYPADLINE_2);
    1254:	40 91 57 03 	lds	r20, 0x0357	; 0x800357 <keypad_PORT>
    1258:	50 91 58 03 	lds	r21, 0x0358	; 0x800358 <keypad_PORT+0x1>
    125c:	ea 01       	movw	r28, r20
    125e:	98 81       	ld	r25, Y
    1260:	9e 7f       	andi	r25, 0xFE	; 254
    1262:	98 83       	st	Y, r25
				keypad_dataf.line_2 = *keypad_PIN & ((1 << KEYPADDATA_1) | (1 << KEYPADDATA_2) | (1 << KEYPADDATA_3) | (1 << KEYPADDATA_4));
    1264:	40 91 63 03 	lds	r20, 0x0363	; 0x800363 <keypad_PIN>
    1268:	50 91 64 03 	lds	r21, 0x0364	; 0x800364 <keypad_PIN+0x1>
    126c:	ea 01       	movw	r28, r20
    126e:	38 81       	ld	r19, Y
    1270:	34 77       	andi	r19, 0x74	; 116
    1272:	11 96       	adiw	r26, 0x01	; 1
    1274:	3c 93       	st	X, r19
    1276:	11 97       	sbiw	r26, 0x01	; 1
				HL = KEYPADhl(keypad_datai.line_2, keypad_dataf.line_2);
    1278:	91 81       	ldd	r25, Z+1	; 0x01
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	// printf("KEYPADhl\n");
	i = xf ^ xi;
	i &= xi;
    127a:	43 2f       	mov	r20, r19
    127c:	49 27       	eor	r20, r25
    127e:	94 23       	and	r25, r20
			case 1: // line 2 index 1
				*keypad_DDR |= (1 << KEYPADLINE_2);
				*keypad_PORT &= ~(1 << KEYPADLINE_2);
				keypad_dataf.line_2 = *keypad_PIN & ((1 << KEYPADDATA_1) | (1 << KEYPADDATA_2) | (1 << KEYPADDATA_3) | (1 << KEYPADDATA_4));
				HL = KEYPADhl(keypad_datai.line_2, keypad_dataf.line_2);
				keypad_datai.line_2 = keypad_dataf.line_2;
    1280:	31 83       	std	Z+1, r19	; 0x01
				if(HL){
    1282:	99 23       	and	r25, r25
    1284:	99 f0       	breq	.+38     	; 0x12ac <KEYPAD_getkey+0x120>
					// decode index line two column what ?
					if(HL == (1 << KEYPADDATA_1))
    1286:	94 30       	cpi	r25, 0x04	; 4
    1288:	19 f4       	brne	.+6      	; 0x1290 <KEYPAD_getkey+0x104>
						c = keypadvalue[1][0];
    128a:	eb 01       	movw	r28, r22
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
    128e:	0a c0       	rjmp	.+20     	; 0x12a4 <KEYPAD_getkey+0x118>
					if(HL == (1 << KEYPADDATA_2))
    1290:	90 31       	cpi	r25, 0x10	; 16
    1292:	19 f4       	brne	.+6      	; 0x129a <KEYPAD_getkey+0x10e>
						c = keypadvalue[1][1];
    1294:	eb 01       	movw	r28, r22
    1296:	8d 81       	ldd	r24, Y+5	; 0x05
    1298:	09 c0       	rjmp	.+18     	; 0x12ac <KEYPAD_getkey+0x120>
					if(HL == (1 << KEYPADDATA_3))
    129a:	90 32       	cpi	r25, 0x20	; 32
    129c:	19 f4       	brne	.+6      	; 0x12a4 <KEYPAD_getkey+0x118>
						c = keypadvalue[1][2];
    129e:	eb 01       	movw	r28, r22
    12a0:	8e 81       	ldd	r24, Y+6	; 0x06
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <KEYPAD_getkey+0x120>
					if(HL == (1 << KEYPADDATA_4))
    12a4:	90 34       	cpi	r25, 0x40	; 64
    12a6:	11 f4       	brne	.+4      	; 0x12ac <KEYPAD_getkey+0x120>
						c = keypadvalue[1][3];
    12a8:	eb 01       	movw	r28, r22
    12aa:	8f 81       	ldd	r24, Y+7	; 0x07
				}
				*keypad_DDR &= ~(1 << KEYPADLINE_2);
    12ac:	40 91 65 03 	lds	r20, 0x0365	; 0x800365 <keypad_DDR>
    12b0:	50 91 66 03 	lds	r21, 0x0366	; 0x800366 <keypad_DDR+0x1>
    12b4:	ea 01       	movw	r28, r20
    12b6:	98 81       	ld	r25, Y
    12b8:	9e 7f       	andi	r25, 0xFE	; 254
    12ba:	98 83       	st	Y, r25
				*keypad_PORT |= (1<<KEYPADLINE_2);
    12bc:	40 91 57 03 	lds	r20, 0x0357	; 0x800357 <keypad_PORT>
    12c0:	50 91 58 03 	lds	r21, 0x0358	; 0x800358 <keypad_PORT+0x1>
    12c4:	ea 01       	movw	r28, r20
    12c6:	98 81       	ld	r25, Y
    12c8:	91 60       	ori	r25, 0x01	; 1
    12ca:	98 83       	st	Y, r25
			break;
    12cc:	6a cf       	rjmp	.-300    	; 0x11a2 <KEYPAD_getkey+0x16>
			case 2: // line 3 index 2
				*keypad_DDR |= (1 << KEYPADLINE_3);
    12ce:	40 91 65 03 	lds	r20, 0x0365	; 0x800365 <keypad_DDR>
    12d2:	50 91 66 03 	lds	r21, 0x0366	; 0x800366 <keypad_DDR+0x1>
    12d6:	ea 01       	movw	r28, r20
    12d8:	98 81       	ld	r25, Y
    12da:	92 60       	ori	r25, 0x02	; 2
    12dc:	98 83       	st	Y, r25
				*keypad_PORT &= ~(1 << KEYPADLINE_3);
    12de:	40 91 57 03 	lds	r20, 0x0357	; 0x800357 <keypad_PORT>
    12e2:	50 91 58 03 	lds	r21, 0x0358	; 0x800358 <keypad_PORT+0x1>
    12e6:	ea 01       	movw	r28, r20
    12e8:	98 81       	ld	r25, Y
    12ea:	9d 7f       	andi	r25, 0xFD	; 253
    12ec:	98 83       	st	Y, r25
				keypad_dataf.line_3 = *keypad_PIN & ((1 << KEYPADDATA_1) | (1 << KEYPADDATA_2) | (1 << KEYPADDATA_3) | (1 << KEYPADDATA_4));
    12ee:	40 91 63 03 	lds	r20, 0x0363	; 0x800363 <keypad_PIN>
    12f2:	50 91 64 03 	lds	r21, 0x0364	; 0x800364 <keypad_PIN+0x1>
    12f6:	ea 01       	movw	r28, r20
    12f8:	38 81       	ld	r19, Y
    12fa:	34 77       	andi	r19, 0x74	; 116
    12fc:	12 96       	adiw	r26, 0x02	; 2
    12fe:	3c 93       	st	X, r19
    1300:	12 97       	sbiw	r26, 0x02	; 2
				HL = KEYPADhl(keypad_datai.line_3, keypad_dataf.line_3);
    1302:	92 81       	ldd	r25, Z+2	; 0x02
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	// printf("KEYPADhl\n");
	i = xf ^ xi;
	i &= xi;
    1304:	43 2f       	mov	r20, r19
    1306:	49 27       	eor	r20, r25
    1308:	94 23       	and	r25, r20
			case 2: // line 3 index 2
				*keypad_DDR |= (1 << KEYPADLINE_3);
				*keypad_PORT &= ~(1 << KEYPADLINE_3);
				keypad_dataf.line_3 = *keypad_PIN & ((1 << KEYPADDATA_1) | (1 << KEYPADDATA_2) | (1 << KEYPADDATA_3) | (1 << KEYPADDATA_4));
				HL = KEYPADhl(keypad_datai.line_3, keypad_dataf.line_3);
				keypad_datai.line_3 = keypad_dataf.line_3;
    130a:	32 83       	std	Z+2, r19	; 0x02
				if(HL){
    130c:	99 23       	and	r25, r25
    130e:	99 f0       	breq	.+38     	; 0x1336 <KEYPAD_getkey+0x1aa>
					// decode index line three column what ?
					if(HL == (1 << KEYPADDATA_1))
    1310:	94 30       	cpi	r25, 0x04	; 4
    1312:	19 f4       	brne	.+6      	; 0x131a <KEYPAD_getkey+0x18e>
						c = keypadvalue[2][0];
    1314:	eb 01       	movw	r28, r22
    1316:	88 85       	ldd	r24, Y+8	; 0x08
    1318:	0a c0       	rjmp	.+20     	; 0x132e <KEYPAD_getkey+0x1a2>
					if(HL == (1 << KEYPADDATA_2))
    131a:	90 31       	cpi	r25, 0x10	; 16
    131c:	19 f4       	brne	.+6      	; 0x1324 <KEYPAD_getkey+0x198>
						c = keypadvalue[2][1];
    131e:	eb 01       	movw	r28, r22
    1320:	89 85       	ldd	r24, Y+9	; 0x09
    1322:	09 c0       	rjmp	.+18     	; 0x1336 <KEYPAD_getkey+0x1aa>
					if(HL == (1 << KEYPADDATA_3))
    1324:	90 32       	cpi	r25, 0x20	; 32
    1326:	19 f4       	brne	.+6      	; 0x132e <KEYPAD_getkey+0x1a2>
						c = keypadvalue[2][2];
    1328:	eb 01       	movw	r28, r22
    132a:	8a 85       	ldd	r24, Y+10	; 0x0a
    132c:	04 c0       	rjmp	.+8      	; 0x1336 <KEYPAD_getkey+0x1aa>
					if(HL == (1 << KEYPADDATA_4))
    132e:	90 34       	cpi	r25, 0x40	; 64
    1330:	11 f4       	brne	.+4      	; 0x1336 <KEYPAD_getkey+0x1aa>
						c = keypadvalue[2][3];
    1332:	eb 01       	movw	r28, r22
    1334:	8b 85       	ldd	r24, Y+11	; 0x0b
				}
				*keypad_DDR &= ~(1 << KEYPADLINE_3);
    1336:	40 91 65 03 	lds	r20, 0x0365	; 0x800365 <keypad_DDR>
    133a:	50 91 66 03 	lds	r21, 0x0366	; 0x800366 <keypad_DDR+0x1>
    133e:	ea 01       	movw	r28, r20
    1340:	98 81       	ld	r25, Y
    1342:	9d 7f       	andi	r25, 0xFD	; 253
    1344:	98 83       	st	Y, r25
				*keypad_PORT |= (1 << KEYPADLINE_3);
    1346:	40 91 57 03 	lds	r20, 0x0357	; 0x800357 <keypad_PORT>
    134a:	50 91 58 03 	lds	r21, 0x0358	; 0x800358 <keypad_PORT+0x1>
    134e:	ea 01       	movw	r28, r20
    1350:	98 81       	ld	r25, Y
    1352:	92 60       	ori	r25, 0x02	; 2
    1354:	98 83       	st	Y, r25
			break;
    1356:	25 cf       	rjmp	.-438    	; 0x11a2 <KEYPAD_getkey+0x16>
			case 3: // line 4 index 3
				*keypad_DDR |= (1 << KEYPADLINE_4);
    1358:	e0 91 65 03 	lds	r30, 0x0365	; 0x800365 <keypad_DDR>
    135c:	f0 91 66 03 	lds	r31, 0x0366	; 0x800366 <keypad_DDR+0x1>
    1360:	90 81       	ld	r25, Z
    1362:	98 60       	ori	r25, 0x08	; 8
    1364:	90 83       	st	Z, r25
				*keypad_PORT &= ~(1 << KEYPADLINE_4);
    1366:	e0 91 57 03 	lds	r30, 0x0357	; 0x800357 <keypad_PORT>
    136a:	f0 91 58 03 	lds	r31, 0x0358	; 0x800358 <keypad_PORT+0x1>
    136e:	90 81       	ld	r25, Z
    1370:	97 7f       	andi	r25, 0xF7	; 247
    1372:	90 83       	st	Z, r25
				keypad_dataf.line_4 = *keypad_PIN & ((1 << KEYPADDATA_1) | (1 << KEYPADDATA_2) | (1 << KEYPADDATA_3) | (1 << KEYPADDATA_4));
    1374:	e0 91 63 03 	lds	r30, 0x0363	; 0x800363 <keypad_PIN>
    1378:	f0 91 64 03 	lds	r31, 0x0364	; 0x800364 <keypad_PIN+0x1>
    137c:	20 81       	ld	r18, Z
    137e:	24 77       	andi	r18, 0x74	; 116
    1380:	20 93 5d 03 	sts	0x035D, r18	; 0x80035d <keypad_dataf+0x3>
				HL = KEYPADhl(keypad_datai.line_4, keypad_dataf.line_4);
    1384:	ee e5       	ldi	r30, 0x5E	; 94
    1386:	f3 e0       	ldi	r31, 0x03	; 3
    1388:	93 81       	ldd	r25, Z+3	; 0x03
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	// printf("KEYPADhl\n");
	i = xf ^ xi;
	i &= xi;
    138a:	32 2f       	mov	r19, r18
    138c:	39 27       	eor	r19, r25
    138e:	93 23       	and	r25, r19
			case 3: // line 4 index 3
				*keypad_DDR |= (1 << KEYPADLINE_4);
				*keypad_PORT &= ~(1 << KEYPADLINE_4);
				keypad_dataf.line_4 = *keypad_PIN & ((1 << KEYPADDATA_1) | (1 << KEYPADDATA_2) | (1 << KEYPADDATA_3) | (1 << KEYPADDATA_4));
				HL = KEYPADhl(keypad_datai.line_4, keypad_dataf.line_4);
				keypad_datai.line_4 = keypad_dataf.line_4;
    1390:	23 83       	std	Z+3, r18	; 0x03
				if(HL){
    1392:	99 23       	and	r25, r25
    1394:	99 f0       	breq	.+38     	; 0x13bc <KEYPAD_getkey+0x230>
					// decode index line four column what ?
					if(HL == (1 << KEYPADDATA_1))
    1396:	94 30       	cpi	r25, 0x04	; 4
    1398:	19 f4       	brne	.+6      	; 0x13a0 <KEYPAD_getkey+0x214>
						c = keypadvalue[3][0];
    139a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
    139e:	0a c0       	rjmp	.+20     	; 0x13b4 <KEYPAD_getkey+0x228>
					if(HL == (1 << KEYPADDATA_2))
    13a0:	90 31       	cpi	r25, 0x10	; 16
    13a2:	19 f4       	brne	.+6      	; 0x13aa <KEYPAD_getkey+0x21e>
						c = keypadvalue[3][1];
    13a4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <__DATA_REGION_ORIGIN__+0xd>
    13a8:	09 c0       	rjmp	.+18     	; 0x13bc <KEYPAD_getkey+0x230>
					if(HL == (1 << KEYPADDATA_3))
    13aa:	90 32       	cpi	r25, 0x20	; 32
    13ac:	19 f4       	brne	.+6      	; 0x13b4 <KEYPAD_getkey+0x228>
						c = keypadvalue[3][2];
    13ae:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
    13b2:	04 c0       	rjmp	.+8      	; 0x13bc <KEYPAD_getkey+0x230>
					if(HL == (1 << KEYPADDATA_4))
    13b4:	90 34       	cpi	r25, 0x40	; 64
    13b6:	11 f4       	brne	.+4      	; 0x13bc <KEYPAD_getkey+0x230>
						c = keypadvalue[3][3];
    13b8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
				}
				*keypad_DDR &= ~(1 << KEYPADLINE_4);
    13bc:	e0 91 65 03 	lds	r30, 0x0365	; 0x800365 <keypad_DDR>
    13c0:	f0 91 66 03 	lds	r31, 0x0366	; 0x800366 <keypad_DDR+0x1>
    13c4:	90 81       	ld	r25, Z
    13c6:	97 7f       	andi	r25, 0xF7	; 247
    13c8:	90 83       	st	Z, r25
				*keypad_PORT |= (1 << KEYPADLINE_4);
    13ca:	e0 91 57 03 	lds	r30, 0x0357	; 0x800357 <keypad_PORT>
    13ce:	f0 91 58 03 	lds	r31, 0x0358	; 0x800358 <keypad_PORT+0x1>
    13d2:	90 81       	ld	r25, Z
    13d4:	98 60       	ori	r25, 0x08	; 8
    13d6:	90 83       	st	Z, r25
    13d8:	03 c0       	rjmp	.+6      	; 0x13e0 <KEYPAD_getkey+0x254>
char KEYPAD_getkey(void)
{
	uint8_t HL;
	char c = 0;
	uint8_t keypad_option;
	for(keypad_option = 0; keypad_option < KEYPADLINES; keypad_option++){
    13da:	24 30       	cpi	r18, 0x04	; 4
    13dc:	08 f4       	brcc	.+2      	; 0x13e0 <KEYPAD_getkey+0x254>
    13de:	e1 ce       	rjmp	.-574    	; 0x11a2 <KEYPAD_getkey+0x16>
			default:
			break;
		}
	}
	return c;
}
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	08 95       	ret

000013e6 <KEYPAD_read>:
// read
void KEYPAD_read(void)
{
	char c;
	c = KEYPAD_getkey(); // returns null ('\0') all the time when no entry
    13e6:	d2 de       	rcall	.-604    	; 0x118c <KEYPAD_getkey>
	if(c){
    13e8:	88 23       	and	r24, r24
    13ea:	09 f4       	brne	.+2      	; 0x13ee <KEYPAD_read+0x8>
    13ec:	45 c0       	rjmp	.+138    	; 0x1478 <KEYPAD_read+0x92>
		data.character = c;
    13ee:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <data>
		if(c == KEYPADENTERKEY){
    13f2:	84 34       	cpi	r24, 0x44	; 68
    13f4:	99 f4       	brne	.+38     	; 0x141c <KEYPAD_read+0x36>
			KEYPAD_string[KEYPADSTRINGINDEX] = '\0';
    13f6:	e0 91 62 03 	lds	r30, 0x0362	; 0x800362 <KEYPADSTRINGINDEX>
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	e9 59       	subi	r30, 0x99	; 153
    13fe:	fc 4f       	sbci	r31, 0xFC	; 252
    1400:	10 82       	st	Z, r1
			KEYPADSTRINGINDEX = 0;
    1402:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <KEYPADSTRINGINDEX>
			data.print = endstr;
    1406:	e7 e8       	ldi	r30, 0x87	; 135
    1408:	f3 e0       	ldi	r31, 0x03	; 3
    140a:	8d e9       	ldi	r24, 0x9D	; 157
    140c:	92 e0       	ldi	r25, 0x02	; 2
    140e:	92 83       	std	Z+2, r25	; 0x02
    1410:	81 83       	std	Z+1, r24	; 0x01
			data.string = KEYPAD_string; // shift output
    1412:	87 e6       	ldi	r24, 0x67	; 103
    1414:	93 e0       	ldi	r25, 0x03	; 3
    1416:	94 83       	std	Z+4, r25	; 0x04
    1418:	83 83       	std	Z+3, r24	; 0x03
    141a:	08 95       	ret
		}else{
			if(KEYPADSTRINGINDEX < KEYPADSTRINGSIZE){
    141c:	e0 91 62 03 	lds	r30, 0x0362	; 0x800362 <KEYPADSTRINGINDEX>
    1420:	e6 30       	cpi	r30, 0x06	; 6
    1422:	b8 f4       	brcc	.+46     	; 0x1452 <KEYPAD_read+0x6c>
				KEYPAD_string[KEYPADSTRINGINDEX] = c;
    1424:	ae 2f       	mov	r26, r30
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	a9 59       	subi	r26, 0x99	; 153
    142a:	bc 4f       	sbci	r27, 0xFC	; 252
    142c:	8c 93       	st	X, r24
				KEYPADSTRINGINDEX++;
    142e:	ef 5f       	subi	r30, 0xFF	; 255
    1430:	e0 93 62 03 	sts	0x0362, r30	; 0x800362 <KEYPADSTRINGINDEX>
				KEYPAD_string[KEYPADSTRINGINDEX] = '\0';
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	e9 59       	subi	r30, 0x99	; 153
    1438:	fc 4f       	sbci	r31, 0xFC	; 252
    143a:	10 82       	st	Z, r1
				data.print = KEYPAD_string;
    143c:	e7 e8       	ldi	r30, 0x87	; 135
    143e:	f3 e0       	ldi	r31, 0x03	; 3
    1440:	87 e6       	ldi	r24, 0x67	; 103
    1442:	93 e0       	ldi	r25, 0x03	; 3
    1444:	92 83       	std	Z+2, r25	; 0x02
    1446:	81 83       	std	Z+1, r24	; 0x01
				data.string = endstr; // clear output
    1448:	8d e9       	ldi	r24, 0x9D	; 157
    144a:	92 e0       	ldi	r25, 0x02	; 2
    144c:	94 83       	std	Z+4, r25	; 0x04
    144e:	83 83       	std	Z+3, r24	; 0x03
    1450:	08 95       	ret
			}else{
				KEYPADSTRINGINDEX = 0;
				KEYPAD_string[KEYPADSTRINGINDEX] = c;
    1452:	e7 e6       	ldi	r30, 0x67	; 103
    1454:	f3 e0       	ldi	r31, 0x03	; 3
    1456:	80 83       	st	Z, r24
				KEYPADSTRINGINDEX++;
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <KEYPADSTRINGINDEX>
				KEYPAD_string[KEYPADSTRINGINDEX] = '\0';
    145e:	11 82       	std	Z+1, r1	; 0x01
				data.print = KEYPAD_string;
    1460:	a7 e8       	ldi	r26, 0x87	; 135
    1462:	b3 e0       	ldi	r27, 0x03	; 3
    1464:	12 96       	adiw	r26, 0x02	; 2
    1466:	fc 93       	st	X, r31
    1468:	ee 93       	st	-X, r30
    146a:	11 97       	sbiw	r26, 0x01	; 1
				data.string = endstr; // clear output
    146c:	8d e9       	ldi	r24, 0x9D	; 157
    146e:	92 e0       	ldi	r25, 0x02	; 2
    1470:	14 96       	adiw	r26, 0x04	; 4
    1472:	9c 93       	st	X, r25
    1474:	8e 93       	st	-X, r24
    1476:	13 97       	sbiw	r26, 0x03	; 3
    1478:	08 95       	ret

0000147a <KEYPADenable>:
// hl
uint8_t KEYPADhl(uint8_t xi, uint8_t xf);

/*** Procedure & Function ***/
KEYPAD KEYPADenable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
    1482:	28 97       	sbiw	r28, 0x08	; 8
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	de bf       	out	0x3e, r29	; 62
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	cd bf       	out	0x3d, r28	; 61
	// LOCAL VARIABLE
	data.character = ' ';
    148e:	20 e2       	ldi	r18, 0x20	; 32
    1490:	20 93 87 03 	sts	0x0387, r18	; 0x800387 <data>
	// ALLOCAÇÂO MEMORIA PARA Estrutura
	KEYPAD keypad;
	// import parameters
	keypad_DDR = ddr;
    1494:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <keypad_DDR+0x1>
    1498:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <keypad_DDR>
	keypad_PIN = pin;
    149c:	70 93 64 03 	sts	0x0364, r23	; 0x800364 <keypad_PIN+0x1>
    14a0:	60 93 63 03 	sts	0x0363, r22	; 0x800363 <keypad_PIN>
	keypad_PORT = port;
    14a4:	50 93 58 03 	sts	0x0358, r21	; 0x800358 <keypad_PORT+0x1>
    14a8:	40 93 57 03 	sts	0x0357, r20	; 0x800357 <keypad_PORT>
	// initialize variables
	*keypad_DDR = (1 << KEYPADLINE_1) | (1 << KEYPADLINE_2) | (1 << KEYPADLINE_3) | (1 << KEYPADLINE_4);
    14ac:	2b e8       	ldi	r18, 0x8B	; 139
    14ae:	fc 01       	movw	r30, r24
    14b0:	20 83       	st	Z, r18
	*keypad_PORT = (1 << KEYPADDATA_1) | (1 << KEYPADDATA_2) | (1 << KEYPADDATA_3) | (1 << KEYPADDATA_4);
    14b2:	e0 91 57 03 	lds	r30, 0x0357	; 0x800357 <keypad_PORT>
    14b6:	f0 91 58 03 	lds	r31, 0x0358	; 0x800358 <keypad_PORT+0x1>
    14ba:	84 e7       	ldi	r24, 0x74	; 116
    14bc:	80 83       	st	Z, r24
	keypad_datai.line_1 = keypad_dataf.line_1 = (1 << KEYPADDATA_1) | (1 << KEYPADDATA_2) | (1 << KEYPADDATA_3) | (1 << KEYPADDATA_4);
    14be:	aa e5       	ldi	r26, 0x5A	; 90
    14c0:	b3 e0       	ldi	r27, 0x03	; 3
    14c2:	8c 93       	st	X, r24
    14c4:	ee e5       	ldi	r30, 0x5E	; 94
    14c6:	f3 e0       	ldi	r31, 0x03	; 3
    14c8:	80 83       	st	Z, r24
	keypad_datai.line_2 = keypad_dataf.line_2 = (1 << KEYPADDATA_1) | (1 << KEYPADDATA_2) | (1 << KEYPADDATA_3) | (1 << KEYPADDATA_4);
    14ca:	11 96       	adiw	r26, 0x01	; 1
    14cc:	8c 93       	st	X, r24
    14ce:	11 97       	sbiw	r26, 0x01	; 1
    14d0:	81 83       	std	Z+1, r24	; 0x01
	keypad_datai.line_3 = keypad_dataf.line_3 = (1 << KEYPADDATA_1) | (1 << KEYPADDATA_2) | (1 << KEYPADDATA_3) | (1 << KEYPADDATA_4);
    14d2:	12 96       	adiw	r26, 0x02	; 2
    14d4:	8c 93       	st	X, r24
    14d6:	12 97       	sbiw	r26, 0x02	; 2
    14d8:	82 83       	std	Z+2, r24	; 0x02
	keypad_datai.line_4 = keypad_dataf.line_4 = (1 << KEYPADDATA_1) | (1 << KEYPADDATA_2) | (1 << KEYPADDATA_3) | (1 << KEYPADDATA_4);
    14da:	13 96       	adiw	r26, 0x03	; 3
    14dc:	8c 93       	st	X, r24
    14de:	83 83       	std	Z+3, r24	; 0x03
	KEYPADSTRINGINDEX = 0;
    14e0:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <KEYPADSTRINGINDEX>
	keypad.getkey = KEYPAD_getkey;
	keypad.read = KEYPAD_read;
	keypad.data = KEYPAD_data;
	keypad.flush = KEYPAD_flush;
	//
	*keypad_PORT |= (1 << KEYPADLINE_1) | (1 << KEYPADLINE_2) | (1 << KEYPADLINE_3) | (1 << KEYPADLINE_4);
    14e4:	e0 91 57 03 	lds	r30, 0x0357	; 0x800357 <keypad_PORT>
    14e8:	f0 91 58 03 	lds	r31, 0x0358	; 0x800358 <keypad_PORT+0x1>
    14ec:	80 81       	ld	r24, Z
    14ee:	8b 68       	ori	r24, 0x8B	; 139
    14f0:	80 83       	st	Z, r24
	// Going to use pull down method.
	return keypad;
    14f2:	26 ec       	ldi	r18, 0xC6	; 198
    14f4:	38 e0       	ldi	r19, 0x08	; 8
    14f6:	3a 83       	std	Y+2, r19	; 0x02
    14f8:	29 83       	std	Y+1, r18	; 0x01
    14fa:	43 ef       	ldi	r20, 0xF3	; 243
    14fc:	59 e0       	ldi	r21, 0x09	; 9
    14fe:	5c 83       	std	Y+4, r21	; 0x04
    1500:	4b 83       	std	Y+3, r20	; 0x03
    1502:	69 e9       	ldi	r22, 0x99	; 153
    1504:	78 e0       	ldi	r23, 0x08	; 8
    1506:	7e 83       	std	Y+6, r23	; 0x06
    1508:	6d 83       	std	Y+5, r22	; 0x05
    150a:	89 eb       	ldi	r24, 0xB9	; 185
    150c:	98 e0       	ldi	r25, 0x08	; 8
    150e:	98 87       	std	Y+8, r25	; 0x08
    1510:	8f 83       	std	Y+7, r24	; 0x07
    1512:	3a 81       	ldd	r19, Y+2	; 0x02
    1514:	5c 81       	ldd	r21, Y+4	; 0x04
    1516:	7e 81       	ldd	r23, Y+6	; 0x06
}
    1518:	98 85       	ldd	r25, Y+8	; 0x08
    151a:	28 96       	adiw	r28, 0x08	; 8
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	f8 94       	cli
    1520:	de bf       	out	0x3e, r29	; 62
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	cd bf       	out	0x3d, r28	; 61
    1526:	df 91       	pop	r29
    1528:	cf 91       	pop	r28
    152a:	08 95       	ret

0000152c <LCD0_strobe>:
		break;
	}
}
void LCD0_strobe(uint16_t num)
{
	*lcd0_PORT &= ~(1 << EN);
    152c:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    1530:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    1534:	80 81       	ld	r24, Z
    1536:	8b 7f       	andi	r24, 0xFB	; 251
    1538:	80 83       	st	Z, r24
	LCD_ticks(num);
	*lcd0_PORT |= (1 << EN);
    153a:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    153e:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    1542:	80 81       	ld	r24, Z
    1544:	84 60       	ori	r24, 0x04	; 4
    1546:	80 83       	st	Z, r24
    1548:	08 95       	ret

0000154a <LCD0_write>:
	// LCD0_write(0x03, INST);// return home
	// _delay_ms(1.53);
	LCD0_gotoxy(0,0);
}
void LCD0_write(char c, unsigned short D_I)
{
    154a:	0f 93       	push	r16
    154c:	1f 93       	push	r17
    154e:	cf 93       	push	r28
    1550:	c8 2f       	mov	r28, r24
    1552:	8b 01       	movw	r16, r22
	*lcd0_PORT &= ~(1 << RW); // lcd as input
    1554:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    1558:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    155c:	80 81       	ld	r24, Z
    155e:	8d 7f       	andi	r24, 0xFD	; 253
    1560:	80 83       	st	Z, r24
	*lcd0_DDR |= (1 << DB4) | (1 << DB5) | (1 << DB6) | (1 << DB7); // mcu as output
    1562:	e0 91 75 03 	lds	r30, 0x0375	; 0x800375 <lcd0_DDR>
    1566:	f0 91 76 03 	lds	r31, 0x0376	; 0x800376 <lcd0_DDR+0x1>
    156a:	80 81       	ld	r24, Z
    156c:	80 6f       	ori	r24, 0xF0	; 240
    156e:	80 83       	st	Z, r24
	
	if(D_I) *lcd0_PORT |= (1 << RS); else *lcd0_PORT &= ~(1 << RS);
    1570:	67 2b       	or	r22, r23
    1572:	41 f0       	breq	.+16     	; 0x1584 <LCD0_write+0x3a>
    1574:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    1578:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    157c:	80 81       	ld	r24, Z
    157e:	81 60       	ori	r24, 0x01	; 1
    1580:	80 83       	st	Z, r24
    1582:	07 c0       	rjmp	.+14     	; 0x1592 <LCD0_write+0x48>
    1584:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    1588:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    158c:	80 81       	ld	r24, Z
    158e:	8e 7f       	andi	r24, 0xFE	; 254
    1590:	80 83       	st	Z, r24
	LCD0_strobe(LCD_N_TICKS); LCD_ticks(BIT_N_TICKS);
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	ca df       	rcall	.-108    	; 0x152c <LCD0_strobe>
	
	if(c & 0x80) *lcd0_PORT |= 1 << DB7; else *lcd0_PORT &= ~(1 << DB7); LCD_ticks(BIT_N_TICKS);
    1598:	cc 23       	and	r28, r28
    159a:	44 f4       	brge	.+16     	; 0x15ac <LCD0_write+0x62>
    159c:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    15a0:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    15a4:	80 81       	ld	r24, Z
    15a6:	80 68       	ori	r24, 0x80	; 128
    15a8:	80 83       	st	Z, r24
    15aa:	07 c0       	rjmp	.+14     	; 0x15ba <LCD0_write+0x70>
    15ac:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    15b0:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    15b4:	80 81       	ld	r24, Z
    15b6:	8f 77       	andi	r24, 0x7F	; 127
    15b8:	80 83       	st	Z, r24
	if(c & 0x40) *lcd0_PORT |= 1 << DB6; else *lcd0_PORT &= ~(1 << DB6); LCD_ticks(BIT_N_TICKS);
    15ba:	c6 ff       	sbrs	r28, 6
    15bc:	08 c0       	rjmp	.+16     	; 0x15ce <LCD0_write+0x84>
    15be:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    15c2:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    15c6:	80 81       	ld	r24, Z
    15c8:	80 64       	ori	r24, 0x40	; 64
    15ca:	80 83       	st	Z, r24
    15cc:	07 c0       	rjmp	.+14     	; 0x15dc <LCD0_write+0x92>
    15ce:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    15d2:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    15d6:	80 81       	ld	r24, Z
    15d8:	8f 7b       	andi	r24, 0xBF	; 191
    15da:	80 83       	st	Z, r24
	if(c & 0x20) *lcd0_PORT |= 1 << DB5; else *lcd0_PORT &= ~(1 << DB5); LCD_ticks(BIT_N_TICKS);
    15dc:	c5 ff       	sbrs	r28, 5
    15de:	08 c0       	rjmp	.+16     	; 0x15f0 <LCD0_write+0xa6>
    15e0:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    15e4:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    15e8:	80 81       	ld	r24, Z
    15ea:	80 62       	ori	r24, 0x20	; 32
    15ec:	80 83       	st	Z, r24
    15ee:	07 c0       	rjmp	.+14     	; 0x15fe <LCD0_write+0xb4>
    15f0:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    15f4:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    15f8:	80 81       	ld	r24, Z
    15fa:	8f 7d       	andi	r24, 0xDF	; 223
    15fc:	80 83       	st	Z, r24
	if(c & 0x10) *lcd0_PORT |= 1 << DB4; else *lcd0_PORT &= ~(1 << DB4); LCD_ticks(BIT_N_TICKS);
    15fe:	c4 ff       	sbrs	r28, 4
    1600:	08 c0       	rjmp	.+16     	; 0x1612 <LCD0_write+0xc8>
    1602:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    1606:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    160a:	80 81       	ld	r24, Z
    160c:	80 61       	ori	r24, 0x10	; 16
    160e:	80 83       	st	Z, r24
    1610:	07 c0       	rjmp	.+14     	; 0x1620 <LCD0_write+0xd6>
    1612:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    1616:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    161a:	80 81       	ld	r24, Z
    161c:	8f 7e       	andi	r24, 0xEF	; 239
    161e:	80 83       	st	Z, r24
	
	if(D_I) *lcd0_PORT |= (1 << RS); else *lcd0_PORT &= ~(1 << RS);
    1620:	01 2b       	or	r16, r17
    1622:	41 f0       	breq	.+16     	; 0x1634 <LCD0_write+0xea>
    1624:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    1628:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    162c:	80 81       	ld	r24, Z
    162e:	81 60       	ori	r24, 0x01	; 1
    1630:	80 83       	st	Z, r24
    1632:	07 c0       	rjmp	.+14     	; 0x1642 <LCD0_write+0xf8>
    1634:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    1638:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    163c:	80 81       	ld	r24, Z
    163e:	8e 7f       	andi	r24, 0xFE	; 254
    1640:	80 83       	st	Z, r24
	LCD0_strobe(LCD_N_TICKS); LCD_ticks(BIT_N_TICKS);
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	72 df       	rcall	.-284    	; 0x152c <LCD0_strobe>
	
	if(c & 0x08) *lcd0_PORT |= 1 << DB7; else *lcd0_PORT &= ~(1 << DB7); LCD_ticks(BIT_N_TICKS);
    1648:	c3 ff       	sbrs	r28, 3
    164a:	08 c0       	rjmp	.+16     	; 0x165c <LCD0_write+0x112>
    164c:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    1650:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    1654:	80 81       	ld	r24, Z
    1656:	80 68       	ori	r24, 0x80	; 128
    1658:	80 83       	st	Z, r24
    165a:	07 c0       	rjmp	.+14     	; 0x166a <LCD0_write+0x120>
    165c:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    1660:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    1664:	80 81       	ld	r24, Z
    1666:	8f 77       	andi	r24, 0x7F	; 127
    1668:	80 83       	st	Z, r24
	if(c & 0x04) *lcd0_PORT |= 1 << DB6; else *lcd0_PORT &= ~(1 << DB6); LCD_ticks(BIT_N_TICKS);
    166a:	c2 ff       	sbrs	r28, 2
    166c:	08 c0       	rjmp	.+16     	; 0x167e <LCD0_write+0x134>
    166e:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    1672:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    1676:	80 81       	ld	r24, Z
    1678:	80 64       	ori	r24, 0x40	; 64
    167a:	80 83       	st	Z, r24
    167c:	07 c0       	rjmp	.+14     	; 0x168c <LCD0_write+0x142>
    167e:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    1682:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    1686:	80 81       	ld	r24, Z
    1688:	8f 7b       	andi	r24, 0xBF	; 191
    168a:	80 83       	st	Z, r24
	if(c & 0x02) *lcd0_PORT |= 1 << DB5; else *lcd0_PORT &= ~(1 << DB5); LCD_ticks(BIT_N_TICKS);
    168c:	c1 ff       	sbrs	r28, 1
    168e:	08 c0       	rjmp	.+16     	; 0x16a0 <LCD0_write+0x156>
    1690:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    1694:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    1698:	80 81       	ld	r24, Z
    169a:	80 62       	ori	r24, 0x20	; 32
    169c:	80 83       	st	Z, r24
    169e:	07 c0       	rjmp	.+14     	; 0x16ae <LCD0_write+0x164>
    16a0:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    16a4:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    16a8:	80 81       	ld	r24, Z
    16aa:	8f 7d       	andi	r24, 0xDF	; 223
    16ac:	80 83       	st	Z, r24
	if(c & 0x01) *lcd0_PORT |= 1 << DB4; else *lcd0_PORT &= ~(1 << DB4); LCD_ticks(BIT_N_TICKS);
    16ae:	c0 ff       	sbrs	r28, 0
    16b0:	08 c0       	rjmp	.+16     	; 0x16c2 <LCD0_write+0x178>
    16b2:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    16b6:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    16ba:	80 81       	ld	r24, Z
    16bc:	80 61       	ori	r24, 0x10	; 16
    16be:	80 83       	st	Z, r24
    16c0:	07 c0       	rjmp	.+14     	; 0x16d0 <LCD0_write+0x186>
    16c2:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    16c6:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    16ca:	80 81       	ld	r24, Z
    16cc:	8f 7e       	andi	r24, 0xEF	; 239
    16ce:	80 83       	st	Z, r24
	
	*lcd0_PORT &= ~(1 << EN); LCD_ticks(LCD_N_TICKS);
    16d0:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    16d4:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    16d8:	80 81       	ld	r24, Z
    16da:	8b 7f       	andi	r24, 0xFB	; 251
    16dc:	80 83       	st	Z, r24
}
    16de:	cf 91       	pop	r28
    16e0:	1f 91       	pop	r17
    16e2:	0f 91       	pop	r16
    16e4:	08 95       	ret

000016e6 <LCD0_clear>:
		LCD0_putch(' ');
	}
}
void LCD0_clear(void)
{
	LCD0_write(0x01, INST);
    16e6:	60 e0       	ldi	r22, 0x00	; 0
    16e8:	70 e0       	ldi	r23, 0x00	; 0
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	2e df       	rcall	.-420    	; 0x154a <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    16ee:	87 ee       	ldi	r24, 0xE7	; 231
    16f0:	97 e1       	ldi	r25, 0x17	; 23
    16f2:	01 97       	sbiw	r24, 0x01	; 1
    16f4:	f1 f7       	brne	.-4      	; 0x16f2 <LCD0_clear+0xc>
    16f6:	00 c0       	rjmp	.+0      	; 0x16f8 <LCD0_clear+0x12>
    16f8:	00 00       	nop
    16fa:	08 95       	ret

000016fc <LCD0_read>:
	if(c & 0x01) *lcd0_PORT |= 1 << DB4; else *lcd0_PORT &= ~(1 << DB4); LCD_ticks(BIT_N_TICKS);
	
	*lcd0_PORT &= ~(1 << EN); LCD_ticks(LCD_N_TICKS);
}
char LCD0_read(unsigned short D_I)
{
    16fc:	0f 93       	push	r16
    16fe:	1f 93       	push	r17
    1700:	cf 93       	push	r28
    1702:	8c 01       	movw	r16, r24
	char c = 0x00;
	*lcd0_DDR &= ~((1 << DB4) | (1 << DB5) | (1 << DB6) | (1 << DB7)); // mcu as input
    1704:	e0 91 75 03 	lds	r30, 0x0375	; 0x800375 <lcd0_DDR>
    1708:	f0 91 76 03 	lds	r31, 0x0376	; 0x800376 <lcd0_DDR+0x1>
    170c:	80 81       	ld	r24, Z
    170e:	8f 70       	andi	r24, 0x0F	; 15
    1710:	80 83       	st	Z, r24
	*lcd0_PORT |= (1 << DB4) | (1 << DB5) | (1 << DB6) | (1 << DB7); // pull up resistors
    1712:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    1716:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    171a:	80 81       	ld	r24, Z
    171c:	80 6f       	ori	r24, 0xF0	; 240
    171e:	80 83       	st	Z, r24
	*lcd0_PORT |= (1 << RW); // lcd as output
    1720:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    1724:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    1728:	80 81       	ld	r24, Z
    172a:	82 60       	ori	r24, 0x02	; 2
    172c:	80 83       	st	Z, r24
	
	if(D_I) *lcd0_PORT |= (1 << RS); else *lcd0_PORT &= ~(1 << RS);
    172e:	01 15       	cp	r16, r1
    1730:	11 05       	cpc	r17, r1
    1732:	41 f0       	breq	.+16     	; 0x1744 <LCD0_read+0x48>
    1734:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    1738:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    173c:	80 81       	ld	r24, Z
    173e:	81 60       	ori	r24, 0x01	; 1
    1740:	80 83       	st	Z, r24
    1742:	07 c0       	rjmp	.+14     	; 0x1752 <LCD0_read+0x56>
    1744:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    1748:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    174c:	80 81       	ld	r24, Z
    174e:	8e 7f       	andi	r24, 0xFE	; 254
    1750:	80 83       	st	Z, r24
	LCD0_strobe(LCD_N_TICKS); LCD_ticks(BIT_N_TICKS);
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	ea de       	rcall	.-556    	; 0x152c <LCD0_strobe>
	
	if(*lcd0_PIN & (1 << DB7)) c |= 1 << 7; else c &= ~(1 << 7); LCD_ticks(BIT_N_TICKS);
    1758:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <lcd0_PIN>
    175c:	f0 91 6f 03 	lds	r31, 0x036F	; 0x80036f <lcd0_PIN+0x1>
    1760:	80 81       	ld	r24, Z
    1762:	88 23       	and	r24, r24
    1764:	14 f0       	brlt	.+4      	; 0x176a <LCD0_read+0x6e>
    1766:	c0 e0       	ldi	r28, 0x00	; 0
    1768:	01 c0       	rjmp	.+2      	; 0x176c <LCD0_read+0x70>
    176a:	c0 e8       	ldi	r28, 0x80	; 128
	if(*lcd0_PIN & (1 << DB6)) c |= 1 << 6; else c &= ~(1 << 6); LCD_ticks(BIT_N_TICKS);
    176c:	80 81       	ld	r24, Z
    176e:	86 ff       	sbrs	r24, 6
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <LCD0_read+0x7a>
    1772:	c0 64       	ori	r28, 0x40	; 64
    1774:	01 c0       	rjmp	.+2      	; 0x1778 <LCD0_read+0x7c>
    1776:	cf 7b       	andi	r28, 0xBF	; 191
	if(*lcd0_PIN & (1 << DB5)) c |= 1 << 5; else c &= ~(1 << 5); LCD_ticks(BIT_N_TICKS);
    1778:	80 81       	ld	r24, Z
    177a:	85 ff       	sbrs	r24, 5
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <LCD0_read+0x86>
    177e:	c0 62       	ori	r28, 0x20	; 32
    1780:	01 c0       	rjmp	.+2      	; 0x1784 <LCD0_read+0x88>
    1782:	cf 7d       	andi	r28, 0xDF	; 223
	if(*lcd0_PIN & (1 << DB4)) c |= 1 << 4; else c &= ~(1 << 4); LCD_ticks(BIT_N_TICKS);
    1784:	80 81       	ld	r24, Z
    1786:	84 ff       	sbrs	r24, 4
    1788:	02 c0       	rjmp	.+4      	; 0x178e <LCD0_read+0x92>
    178a:	c0 61       	ori	r28, 0x10	; 16
    178c:	01 c0       	rjmp	.+2      	; 0x1790 <LCD0_read+0x94>
    178e:	cf 7e       	andi	r28, 0xEF	; 239
	
	if(D_I) *lcd0_PORT |= (1 << RS); else *lcd0_PORT &= ~(1 << RS);
    1790:	01 2b       	or	r16, r17
    1792:	41 f0       	breq	.+16     	; 0x17a4 <LCD0_read+0xa8>
    1794:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    1798:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    179c:	80 81       	ld	r24, Z
    179e:	81 60       	ori	r24, 0x01	; 1
    17a0:	80 83       	st	Z, r24
    17a2:	07 c0       	rjmp	.+14     	; 0x17b2 <LCD0_read+0xb6>
    17a4:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    17a8:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    17ac:	80 81       	ld	r24, Z
    17ae:	8e 7f       	andi	r24, 0xFE	; 254
    17b0:	80 83       	st	Z, r24
	LCD0_strobe(LCD_N_TICKS); LCD_ticks(BIT_N_TICKS);
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	ba de       	rcall	.-652    	; 0x152c <LCD0_strobe>
	
	if(*lcd0_PIN & (1 << DB7)) c |= 1 << 3; else c &= ~(1 << 3); LCD_ticks(BIT_N_TICKS);
    17b8:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <lcd0_PIN>
    17bc:	f0 91 6f 03 	lds	r31, 0x036F	; 0x80036f <lcd0_PIN+0x1>
    17c0:	80 81       	ld	r24, Z
    17c2:	88 23       	and	r24, r24
    17c4:	1c f4       	brge	.+6      	; 0x17cc <LCD0_read+0xd0>
    17c6:	8c 2f       	mov	r24, r28
    17c8:	88 60       	ori	r24, 0x08	; 8
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <LCD0_read+0xd4>
    17cc:	8c 2f       	mov	r24, r28
    17ce:	87 7f       	andi	r24, 0xF7	; 247
	if(*lcd0_PIN & (1 << DB6)) c |= 1 << 2; else c &= ~(1 << 2); LCD_ticks(BIT_N_TICKS);
    17d0:	90 81       	ld	r25, Z
    17d2:	96 ff       	sbrs	r25, 6
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <LCD0_read+0xde>
    17d6:	84 60       	ori	r24, 0x04	; 4
    17d8:	01 c0       	rjmp	.+2      	; 0x17dc <LCD0_read+0xe0>
    17da:	8b 7f       	andi	r24, 0xFB	; 251
	if(*lcd0_PIN & (1 << DB5)) c |= 1 << 1; else c &= ~(1 << 1); LCD_ticks(BIT_N_TICKS);
    17dc:	90 81       	ld	r25, Z
    17de:	95 ff       	sbrs	r25, 5
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <LCD0_read+0xea>
    17e2:	82 60       	ori	r24, 0x02	; 2
    17e4:	01 c0       	rjmp	.+2      	; 0x17e8 <LCD0_read+0xec>
    17e6:	8d 7f       	andi	r24, 0xFD	; 253
	if(*lcd0_PIN & (1 << DB4)) c |= 1 << 0; else c &= ~(1 << 0); LCD_ticks(BIT_N_TICKS);
    17e8:	90 81       	ld	r25, Z
    17ea:	94 ff       	sbrs	r25, 4
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <LCD0_read+0xf6>
    17ee:	81 60       	ori	r24, 0x01	; 1
    17f0:	01 c0       	rjmp	.+2      	; 0x17f4 <LCD0_read+0xf8>
    17f2:	8e 7f       	andi	r24, 0xFE	; 254
	
	*lcd0_PORT &= ~(1 << EN); LCD_ticks(LCD_N_TICKS);
    17f4:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    17f8:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    17fc:	90 81       	ld	r25, Z
    17fe:	9b 7f       	andi	r25, 0xFB	; 251
    1800:	90 83       	st	Z, r25
	
	return c;
}
    1802:	cf 91       	pop	r28
    1804:	1f 91       	pop	r17
    1806:	0f 91       	pop	r16
    1808:	08 95       	ret

0000180a <LCD0_BF>:
// it has to read at minimum one equal and exit immediately if not equal, weird property.
{
	uint8_t i;
	char inst = 0x80;
	for(i=0; 0x80 & inst; i++){
		inst = LCD0_read(INST);
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	76 df       	rcall	.-276    	; 0x16fc <LCD0_read>
void LCD0_BF(void)
// it has to read at minimum one equal and exit immediately if not equal, weird property.
{
	uint8_t i;
	char inst = 0x80;
	for(i=0; 0x80 & inst; i++){
    1810:	88 23       	and	r24, r24
    1812:	44 f4       	brge	.+16     	; 0x1824 <LCD0_BF+0x1a>
		inst = LCD0_read(INST);
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	71 df       	rcall	.-286    	; 0x16fc <LCD0_read>
void LCD0_BF(void)
// it has to read at minimum one equal and exit immediately if not equal, weird property.
{
	uint8_t i;
	char inst = 0x80;
	for(i=0; 0x80 & inst; i++){
    181a:	88 23       	and	r24, r24
    181c:	1c f4       	brge	.+6      	; 0x1824 <LCD0_BF+0x1a>
		inst = LCD0_read(INST);
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	6c cf       	rjmp	.-296    	; 0x16fc <LCD0_read>
    1824:	08 95       	ret

00001826 <LCD0_putch>:
	LCD0_BF();
	return c;
}
void LCD0_putch(char c)
{
	LCD0_write(c, DATA);
    1826:	61 e0       	ldi	r22, 0x01	; 1
    1828:	70 e0       	ldi	r23, 0x00	; 0
    182a:	8f de       	rcall	.-738    	; 0x154a <LCD0_write>
	LCD0_BF();
    182c:	ee cf       	rjmp	.-36     	; 0x180a <LCD0_BF>
    182e:	08 95       	ret

00001830 <LCD0_string>:
    1830:	cf 93       	push	r28
}
void LCD0_string(const char* s)
{
    1832:	df 93       	push	r29
    1834:	ec 01       	movw	r28, r24
	char tmp;
	while(*s){
    1836:	88 81       	ld	r24, Y
    1838:	88 23       	and	r24, r24
    183a:	29 f0       	breq	.+10     	; 0x1846 <LCD0_string+0x16>
    183c:	21 96       	adiw	r28, 0x01	; 1
		tmp = *(s++);
		LCD0_putch(tmp);
    183e:	f3 df       	rcall	.-26     	; 0x1826 <LCD0_putch>
	LCD0_BF();
}
void LCD0_string(const char* s)
{
	char tmp;
	while(*s){
    1840:	89 91       	ld	r24, Y+
    1842:	81 11       	cpse	r24, r1
    1844:	fc cf       	rjmp	.-8      	; 0x183e <LCD0_string+0xe>
		tmp = *(s++);
		LCD0_putch(tmp);
	}
}
    1846:	df 91       	pop	r29
    1848:	cf 91       	pop	r28
    184a:	08 95       	ret

0000184c <LCD0_string_size>:
void LCD0_string_size(const char* s, uint8_t size)
{
    184c:	0f 93       	push	r16
    184e:	1f 93       	push	r17
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	fc 01       	movw	r30, r24
    1856:	d6 2f       	mov	r29, r22
	char tmp;
	uint8_t pos = 0;
	while(*s){
    1858:	80 81       	ld	r24, Z
    185a:	88 23       	and	r24, r24
    185c:	51 f0       	breq	.+20     	; 0x1872 <LCD0_string_size+0x26>
		tmp=*(s++);
    185e:	8f 01       	movw	r16, r30
    1860:	0f 5f       	subi	r16, 0xFF	; 255
    1862:	1f 4f       	sbci	r17, 0xFF	; 255
		pos++;
		if(pos > size) // 1 TO SIZE+1
    1864:	61 11       	cpse	r22, r1
    1866:	09 c0       	rjmp	.+18     	; 0x187a <LCD0_string_size+0x2e>
    1868:	15 c0       	rjmp	.+42     	; 0x1894 <LCD0_string_size+0x48>
{
	char tmp;
	uint8_t pos = 0;
	while(*s){
		tmp=*(s++);
		pos++;
    186a:	cf 5f       	subi	r28, 0xFF	; 255
		if(pos > size) // 1 TO SIZE+1
    186c:	dc 17       	cp	r29, r28
    186e:	30 f4       	brcc	.+12     	; 0x187c <LCD0_string_size+0x30>
    1870:	01 c0       	rjmp	.+2      	; 0x1874 <LCD0_string_size+0x28>
	}
}
void LCD0_string_size(const char* s, uint8_t size)
{
	char tmp;
	uint8_t pos = 0;
    1872:	c0 e0       	ldi	r28, 0x00	; 0
		pos++;
		if(pos > size) // 1 TO SIZE+1
			break;
		LCD0_putch(tmp);
	}
	while(pos<size){ // TO SIZE
    1874:	cd 17       	cp	r28, r29
    1876:	48 f0       	brcs	.+18     	; 0x188a <LCD0_string_size+0x3e>
    1878:	0d c0       	rjmp	.+26     	; 0x1894 <LCD0_string_size+0x48>
	char tmp;
	uint8_t pos = 0;
	while(*s){
		tmp=*(s++);
		pos++;
		if(pos > size) // 1 TO SIZE+1
    187a:	c1 e0       	ldi	r28, 0x01	; 1
			break;
		LCD0_putch(tmp);
    187c:	d4 df       	rcall	.-88     	; 0x1826 <LCD0_putch>
}
void LCD0_string_size(const char* s, uint8_t size)
{
	char tmp;
	uint8_t pos = 0;
	while(*s){
    187e:	f8 01       	movw	r30, r16
    1880:	81 91       	ld	r24, Z+
    1882:	8f 01       	movw	r16, r30
    1884:	81 11       	cpse	r24, r1
    1886:	f1 cf       	rjmp	.-30     	; 0x186a <LCD0_string_size+0x1e>
    1888:	f5 cf       	rjmp	.-22     	; 0x1874 <LCD0_string_size+0x28>
		if(pos > size) // 1 TO SIZE+1
			break;
		LCD0_putch(tmp);
	}
	while(pos<size){ // TO SIZE
		LCD0_putch(' ');
    188a:	80 e2       	ldi	r24, 0x20	; 32
    188c:	cc df       	rcall	.-104    	; 0x1826 <LCD0_putch>
		pos++;
    188e:	cf 5f       	subi	r28, 0xFF	; 255
		pos++;
		if(pos > size) // 1 TO SIZE+1
			break;
		LCD0_putch(tmp);
	}
	while(pos<size){ // TO SIZE
    1890:	cd 17       	cp	r28, r29
    1892:	d8 f3       	brcs	.-10     	; 0x188a <LCD0_string_size+0x3e>
		LCD0_putch(' ');
		pos++;
	}
}
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	1f 91       	pop	r17
    189a:	0f 91       	pop	r16
    189c:	08 95       	ret

0000189e <LCD0_hspace>:
void LCD0_hspace(uint8_t n)
{
    189e:	cf 93       	push	r28
    18a0:	c8 2f       	mov	r28, r24
	for(; n; n--){
    18a2:	88 23       	and	r24, r24
    18a4:	21 f0       	breq	.+8      	; 0x18ae <LCD0_hspace+0x10>
		LCD0_putch(' ');
    18a6:	80 e2       	ldi	r24, 0x20	; 32
    18a8:	be df       	rcall	.-132    	; 0x1826 <LCD0_putch>
		pos++;
	}
}
void LCD0_hspace(uint8_t n)
{
	for(; n; n--){
    18aa:	c1 50       	subi	r28, 0x01	; 1
    18ac:	e1 f7       	brne	.-8      	; 0x18a6 <LCD0_hspace+0x8>
		LCD0_putch(' ');
	}
}
    18ae:	cf 91       	pop	r28
    18b0:	08 95       	ret

000018b2 <LCD0_gotoxy>:
{
	LCD0_write(0x01, INST);
    _delay_ms(1.53);
}
void LCD0_gotoxy(unsigned int y, unsigned int x)
{
    18b2:	26 2f       	mov	r18, r22
	switch(y){
    18b4:	81 30       	cpi	r24, 0x01	; 1
    18b6:	91 05       	cpc	r25, r1
    18b8:	71 f0       	breq	.+28     	; 0x18d6 <LCD0_gotoxy+0x24>
    18ba:	30 f0       	brcs	.+12     	; 0x18c8 <LCD0_gotoxy+0x16>
    18bc:	82 30       	cpi	r24, 0x02	; 2
    18be:	91 05       	cpc	r25, r1
    18c0:	89 f0       	breq	.+34     	; 0x18e4 <LCD0_gotoxy+0x32>
    18c2:	03 97       	sbiw	r24, 0x03	; 3
    18c4:	b1 f0       	breq	.+44     	; 0x18f2 <LCD0_gotoxy+0x40>
    18c6:	08 95       	ret
		case 0:
			LCD0_write((0x80 + x), INST);
    18c8:	60 e0       	ldi	r22, 0x00	; 0
    18ca:	70 e0       	ldi	r23, 0x00	; 0
    18cc:	80 e8       	ldi	r24, 0x80	; 128
    18ce:	82 0f       	add	r24, r18
    18d0:	3c de       	rcall	.-904    	; 0x154a <LCD0_write>
			LCD0_BF();
    18d2:	9b cf       	rjmp	.-202    	; 0x180a <LCD0_BF>
    18d4:	08 95       	ret
		break;
    18d6:	60 e0       	ldi	r22, 0x00	; 0
		case 1:
			LCD0_write((0xC0 + x), INST);
    18d8:	70 e0       	ldi	r23, 0x00	; 0
    18da:	80 ec       	ldi	r24, 0xC0	; 192
    18dc:	82 0f       	add	r24, r18
    18de:	35 de       	rcall	.-918    	; 0x154a <LCD0_write>
			LCD0_BF();
    18e0:	94 cf       	rjmp	.-216    	; 0x180a <LCD0_BF>
    18e2:	08 95       	ret
		break;
    18e4:	60 e0       	ldi	r22, 0x00	; 0
		case 2:
			LCD0_write((0x94 + x), INST); // 0x94
    18e6:	70 e0       	ldi	r23, 0x00	; 0
    18e8:	84 e9       	ldi	r24, 0x94	; 148
    18ea:	82 0f       	add	r24, r18
    18ec:	2e de       	rcall	.-932    	; 0x154a <LCD0_write>
			LCD0_BF();
    18ee:	8d cf       	rjmp	.-230    	; 0x180a <LCD0_BF>
		break;
		case 3:
			LCD0_write((0xD4 + x), INST); // 0xD4
    18f0:	08 95       	ret
    18f2:	60 e0       	ldi	r22, 0x00	; 0
    18f4:	70 e0       	ldi	r23, 0x00	; 0
    18f6:	84 ed       	ldi	r24, 0xD4	; 212
    18f8:	82 0f       	add	r24, r18
    18fa:	27 de       	rcall	.-946    	; 0x154a <LCD0_write>
			LCD0_BF();
    18fc:	86 cf       	rjmp	.-244    	; 0x180a <LCD0_BF>
    18fe:	08 95       	ret

00001900 <LCD0_inic>:
    1900:	e0 91 75 03 	lds	r30, 0x0375	; 0x800375 <lcd0_DDR>
	return lcd0;
}
void LCD0_inic(void)
{
	// LCD INIC
	*lcd0_DDR = (1 << RS) | (1 << RW) | (1 << EN) | (0 << NC);
    1904:	f0 91 76 03 	lds	r31, 0x0376	; 0x800376 <lcd0_DDR+0x1>
    1908:	87 e0       	ldi	r24, 0x07	; 7
    190a:	80 83       	st	Z, r24
	*lcd0_PORT = (1 << NC);
    190c:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    1910:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    1914:	88 e0       	ldi	r24, 0x08	; 8
    1916:	80 83       	st	Z, r24
    1918:	2f ef       	ldi	r18, 0xFF	; 255
    191a:	83 ef       	ldi	r24, 0xF3	; 243
    191c:	91 e0       	ldi	r25, 0x01	; 1
    191e:	21 50       	subi	r18, 0x01	; 1
    1920:	80 40       	sbci	r24, 0x00	; 0
    1922:	90 40       	sbci	r25, 0x00	; 0
    1924:	e1 f7       	brne	.-8      	; 0x191e <LCD0_inic+0x1e>
    1926:	00 c0       	rjmp	.+0      	; 0x1928 <LCD0_inic+0x28>
    1928:	00 00       	nop
	// INICIALIZACAO LCD datasheet/
	_delay_ms(40); // using clock at 16Mhz
	LCD0_write(0x38, INST); // function set
    192a:	60 e0       	ldi	r22, 0x00	; 0
    192c:	70 e0       	ldi	r23, 0x00	; 0
    192e:	88 e3       	ldi	r24, 0x38	; 56
    1930:	0c de       	rcall	.-1000   	; 0x154a <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1932:	20 ed       	ldi	r18, 0xD0	; 208
    1934:	2a 95       	dec	r18
    1936:	f1 f7       	brne	.-4      	; 0x1934 <LCD0_inic+0x34>
	_delay_us(39);
	LCD0_write(0x38, INST); // function set
    1938:	60 e0       	ldi	r22, 0x00	; 0
    193a:	70 e0       	ldi	r23, 0x00	; 0
    193c:	88 e3       	ldi	r24, 0x38	; 56
    193e:	05 de       	rcall	.-1014   	; 0x154a <LCD0_write>
    1940:	80 ed       	ldi	r24, 0xD0	; 208
    1942:	8a 95       	dec	r24
    1944:	f1 f7       	brne	.-4      	; 0x1942 <LCD0_inic+0x42>
	_delay_us(39);
	LCD0_write(0x38, INST); // function set
    1946:	60 e0       	ldi	r22, 0x00	; 0
    1948:	70 e0       	ldi	r23, 0x00	; 0
    194a:	88 e3       	ldi	r24, 0x38	; 56
    194c:	fe dd       	rcall	.-1028   	; 0x154a <LCD0_write>
    194e:	90 ed       	ldi	r25, 0xD0	; 208
    1950:	9a 95       	dec	r25
    1952:	f1 f7       	brne	.-4      	; 0x1950 <LCD0_inic+0x50>
	_delay_us(39);
	LCD0_write(0x28, INST); // function set 2B
    1954:	60 e0       	ldi	r22, 0x00	; 0
    1956:	70 e0       	ldi	r23, 0x00	; 0
    1958:	88 e2       	ldi	r24, 0x28	; 40
    195a:	f7 dd       	rcall	.-1042   	; 0x154a <LCD0_write>
    195c:	25 ec       	ldi	r18, 0xC5	; 197
    195e:	2a 95       	dec	r18
    1960:	f1 f7       	brne	.-4      	; 0x195e <LCD0_inic+0x5e>
	_delay_us(37);
	LCD0_write(0x28, INST); // function set 2B
    1962:	00 00       	nop
    1964:	60 e0       	ldi	r22, 0x00	; 0
    1966:	70 e0       	ldi	r23, 0x00	; 0
    1968:	88 e2       	ldi	r24, 0x28	; 40
    196a:	ef dd       	rcall	.-1058   	; 0x154a <LCD0_write>
    196c:	85 ec       	ldi	r24, 0xC5	; 197
    196e:	8a 95       	dec	r24
    1970:	f1 f7       	brne	.-4      	; 0x196e <LCD0_inic+0x6e>
	_delay_us(37);
	/**************************************/
	// for(repeat = 2 ; repeat ; repeat--){
	// repeat twice in 4 bit length
	LCD0_write(0x28, INST); // function set 2B
    1972:	00 00       	nop
    1974:	60 e0       	ldi	r22, 0x00	; 0
    1976:	70 e0       	ldi	r23, 0x00	; 0
    1978:	88 e2       	ldi	r24, 0x28	; 40
	LCD0_BF();
    197a:	e7 dd       	rcall	.-1074   	; 0x154a <LCD0_write>
    197c:	46 df       	rcall	.-372    	; 0x180a <LCD0_BF>
	LCD0_write(0x28, INST); // function set 2B
    197e:	60 e0       	ldi	r22, 0x00	; 0
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	88 e2       	ldi	r24, 0x28	; 40
	LCD0_BF();
    1984:	e2 dd       	rcall	.-1084   	; 0x154a <LCD0_write>

	LCD0_write(0x0C, INST);// display on/off control
    1986:	41 df       	rcall	.-382    	; 0x180a <LCD0_BF>
    1988:	60 e0       	ldi	r22, 0x00	; 0
    198a:	70 e0       	ldi	r23, 0x00	; 0
    198c:	8c e0       	ldi	r24, 0x0C	; 12
	LCD0_BF();
    198e:	dd dd       	rcall	.-1094   	; 0x154a <LCD0_write>
	LCD0_write(0x0C, INST);// display on/off control
    1990:	3c df       	rcall	.-392    	; 0x180a <LCD0_BF>
    1992:	60 e0       	ldi	r22, 0x00	; 0
    1994:	70 e0       	ldi	r23, 0x00	; 0
	LCD0_BF();
    1996:	8c e0       	ldi	r24, 0x0C	; 12
    1998:	d8 dd       	rcall	.-1104   	; 0x154a <LCD0_write>

	LCD0_write(0x01, INST);// clear display
    199a:	37 df       	rcall	.-402    	; 0x180a <LCD0_BF>
    199c:	60 e0       	ldi	r22, 0x00	; 0
    199e:	70 e0       	ldi	r23, 0x00	; 0
	LCD0_BF();
    19a0:	81 e0       	ldi	r24, 0x01	; 1
	LCD0_write(0x01, INST);// clear display
    19a2:	d3 dd       	rcall	.-1114   	; 0x154a <LCD0_write>
    19a4:	32 df       	rcall	.-412    	; 0x180a <LCD0_BF>
    19a6:	60 e0       	ldi	r22, 0x00	; 0
    19a8:	70 e0       	ldi	r23, 0x00	; 0
	LCD0_BF();
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	ce dd       	rcall	.-1124   	; 0x154a <LCD0_write>

	LCD0_write(0x06, INST);// entry mode set (crazy settings)
    19ae:	2d df       	rcall	.-422    	; 0x180a <LCD0_BF>
    19b0:	60 e0       	ldi	r22, 0x00	; 0
    19b2:	70 e0       	ldi	r23, 0x00	; 0
    19b4:	86 e0       	ldi	r24, 0x06	; 6
    19b6:	c9 dd       	rcall	.-1134   	; 0x154a <LCD0_write>
	LCD0_BF();
    19b8:	28 df       	rcall	.-432    	; 0x180a <LCD0_BF>
    19ba:	60 e0       	ldi	r22, 0x00	; 0
	LCD0_write(0x06, INST);// entry mode set (crazy settings)
    19bc:	70 e0       	ldi	r23, 0x00	; 0
    19be:	86 e0       	ldi	r24, 0x06	; 6
    19c0:	c4 dd       	rcall	.-1144   	; 0x154a <LCD0_write>
    19c2:	23 df       	rcall	.-442    	; 0x180a <LCD0_BF>
    19c4:	60 e0       	ldi	r22, 0x00	; 0
	LCD0_BF();
    19c6:	70 e0       	ldi	r23, 0x00	; 0
    19c8:	80 e0       	ldi	r24, 0x00	; 0
	// INICIALIZATION END
	// LCD0_write(0x1F, INST);// cursor or display shift
	// _delay_us(39);
	// LCD0_write(0x03, INST);// return home
	// _delay_ms(1.53);
	LCD0_gotoxy(0,0);
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	72 cf       	rjmp	.-284    	; 0x18b2 <LCD0_gotoxy>
    19ce:	08 95       	ret

000019d0 <LCD0enable>:
    19d0:	cf 93       	push	r28
    19d2:	df 93       	push	r29
    19d4:	ec 01       	movw	r28, r24
    19d6:	70 93 76 03 	sts	0x0376, r23	; 0x800376 <lcd0_DDR+0x1>
{
	// LOCAL VARIABLES
	// ALLOCAÇÂO MEMORIA PARA Estrutura
	LCD0 lcd0;
	// import parameters
	lcd0_DDR = ddr;
    19da:	60 93 75 03 	sts	0x0375, r22	; 0x800375 <lcd0_DDR>
	lcd0_PIN = pin;
    19de:	50 93 6f 03 	sts	0x036F, r21	; 0x80036f <lcd0_PIN+0x1>
    19e2:	40 93 6e 03 	sts	0x036E, r20	; 0x80036e <lcd0_PIN>
	lcd0_PORT = port;
    19e6:	30 93 79 03 	sts	0x0379, r19	; 0x800379 <lcd0_PORT+0x1>
    19ea:	20 93 78 03 	sts	0x0378, r18	; 0x800378 <lcd0_PORT>
	// initialize variables
	*lcd0_DDR = 0x00;
    19ee:	fb 01       	movw	r30, r22
    19f0:	10 82       	st	Z, r1
	*lcd0_PORT = 0xFF;
    19f2:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <lcd0_PORT>
    19f6:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <lcd0_PORT+0x1>
    19fa:	8f ef       	ldi	r24, 0xFF	; 255
    19fc:	80 83       	st	Z, r24
	lcd0_detect = *lcd0_PIN & (1 << NC);
    19fe:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <lcd0_PIN>
    1a02:	f0 91 6f 03 	lds	r31, 0x036F	; 0x80036f <lcd0_PIN+0x1>
    1a06:	80 81       	ld	r24, Z
    1a08:	88 70       	andi	r24, 0x08	; 8
    1a0a:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <lcd0_detect>
	lcd0.hspace = LCD0_hspace;
	lcd0.clear = LCD0_clear;
	lcd0.gotoxy = LCD0_gotoxy;
	lcd0.reboot = LCD0_reboot;
	// LCD INIC
	LCD0_inic();
    1a0e:	78 df       	rcall	.-272    	; 0x1900 <LCD0_inic>
	//
	return lcd0;
    1a10:	85 ea       	ldi	r24, 0xA5	; 165
    1a12:	9a e0       	ldi	r25, 0x0A	; 10
    1a14:	99 83       	std	Y+1, r25	; 0x01
    1a16:	88 83       	st	Y, r24
    1a18:	8e e7       	ldi	r24, 0x7E	; 126
    1a1a:	9b e0       	ldi	r25, 0x0B	; 11
    1a1c:	9b 83       	std	Y+3, r25	; 0x03
    1a1e:	8a 83       	std	Y+2, r24	; 0x02
    1a20:	85 e0       	ldi	r24, 0x05	; 5
    1a22:	9c e0       	ldi	r25, 0x0C	; 12
    1a24:	9d 83       	std	Y+5, r25	; 0x05
    1a26:	8c 83       	std	Y+4, r24	; 0x04
    1a28:	83 e1       	ldi	r24, 0x13	; 19
    1a2a:	9c e0       	ldi	r25, 0x0C	; 12
    1a2c:	9f 83       	std	Y+7, r25	; 0x07
    1a2e:	8e 83       	std	Y+6, r24	; 0x06
    1a30:	89 e4       	ldi	r24, 0x49	; 73
    1a32:	9d e0       	ldi	r25, 0x0D	; 13
    1a34:	99 87       	std	Y+9, r25	; 0x09
    1a36:	88 87       	std	Y+8, r24	; 0x08
    1a38:	88 e1       	ldi	r24, 0x18	; 24
    1a3a:	9c e0       	ldi	r25, 0x0C	; 12
    1a3c:	9b 87       	std	Y+11, r25	; 0x0b
    1a3e:	8a 87       	std	Y+10, r24	; 0x0a
    1a40:	86 e2       	ldi	r24, 0x26	; 38
    1a42:	9c e0       	ldi	r25, 0x0C	; 12
    1a44:	9d 87       	std	Y+13, r25	; 0x0d
    1a46:	8c 87       	std	Y+12, r24	; 0x0c
    1a48:	8f e4       	ldi	r24, 0x4F	; 79
    1a4a:	9c e0       	ldi	r25, 0x0C	; 12
    1a4c:	9f 87       	std	Y+15, r25	; 0x0f
    1a4e:	8e 87       	std	Y+14, r24	; 0x0e
    1a50:	83 e7       	ldi	r24, 0x73	; 115
    1a52:	9b e0       	ldi	r25, 0x0B	; 11
    1a54:	99 8b       	std	Y+17, r25	; 0x11
    1a56:	88 8b       	std	Y+16, r24	; 0x10
    1a58:	89 e5       	ldi	r24, 0x59	; 89
    1a5a:	9c e0       	ldi	r25, 0x0C	; 12
    1a5c:	9b 8b       	std	Y+19, r25	; 0x13
    1a5e:	8a 8b       	std	Y+18, r24	; 0x12
    1a60:	88 e3       	ldi	r24, 0x38	; 56
    1a62:	9d e0       	ldi	r25, 0x0D	; 13
    1a64:	9d 8b       	std	Y+21, r25	; 0x15
    1a66:	8c 8b       	std	Y+20, r24	; 0x14
}
    1a68:	ce 01       	movw	r24, r28
    1a6a:	df 91       	pop	r29
    1a6c:	cf 91       	pop	r28
    1a6e:	08 95       	ret

00001a70 <LCD0_reboot>:
	*lcd0_PORT &= ~(1 << EN);
	LCD_ticks(num);
	*lcd0_PORT |= (1 << EN);
}
void LCD0_reboot(void)
{
    1a70:	cf 93       	push	r28
	// low high detect pin NC
	uint8_t i;
	uint8_t tmp;
	tmp = *lcd0_PIN & (1 << NC);
    1a72:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <lcd0_PIN>
    1a76:	f0 91 6f 03 	lds	r31, 0x036F	; 0x80036f <lcd0_PIN+0x1>
    1a7a:	c0 81       	ld	r28, Z
    1a7c:	c8 70       	andi	r28, 0x08	; 8
	i = tmp ^ lcd0_detect;
    1a7e:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <lcd0_detect>
    1a82:	8c 27       	eor	r24, r28
	i &= tmp;
	if(i)
    1a84:	8c 23       	and	r24, r28
    1a86:	09 f0       	breq	.+2      	; 0x1a8a <LCD0_reboot+0x1a>
		LCD0_inic();
    1a88:	3b df       	rcall	.-394    	; 0x1900 <LCD0_inic>
	lcd0_detect = tmp;
    1a8a:	c0 93 77 03 	sts	0x0377, r28	; 0x800377 <lcd0_detect>
}
    1a8e:	cf 91       	pop	r28
    1a90:	08 95       	ret

00001a92 <LCD0_getch>:
		if(i > 1)
			break;
	}
}
char LCD0_getch(void)
{
    1a92:	cf 93       	push	r28
	char c;
	c = LCD0_read(DATA);
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	31 de       	rcall	.-926    	; 0x16fc <LCD0_read>
    1a9a:	c8 2f       	mov	r28, r24
	LCD0_BF();
    1a9c:	b6 de       	rcall	.-660    	; 0x180a <LCD0_BF>
    1a9e:	8c 2f       	mov	r24, r28
	return c;
}
    1aa0:	cf 91       	pop	r28
    1aa2:	08 95       	ret

00001aa4 <LFSMquant>:
    1aa4:	af 92       	push	r10
	}// End switch
	return status;
}
// uint16_t LFSMquant(struct lfsm *r)
uint16_t LFSMquant(struct lfsm *r)
{
    1aa6:	bf 92       	push	r11
    1aa8:	cf 92       	push	r12
    1aaa:	df 92       	push	r13
    1aac:	ef 92       	push	r14
    1aae:	ff 92       	push	r15
    1ab0:	0f 93       	push	r16
    1ab2:	1f 93       	push	r17
    1ab4:	cf 93       	push	r28
    1ab6:	df 93       	push	r29
	uint16_t i1;
	uint8_t sizeblock = r->sizeblock;
    1ab8:	dc 01       	movw	r26, r24
    1aba:	14 96       	adiw	r26, 0x04	; 4
    1abc:	cc 90       	ld	r12, X
    1abe:	14 97       	sbiw	r26, 0x04	; 4
	struct lfsmdata* pdata = &data;
	uint16_t programmed;
	for(i1 = 0, programmed = 0; i1 < r->sizeeeprom; i1++){
    1ac0:	12 96       	adiw	r26, 0x02	; 2
    1ac2:	2d 91       	ld	r18, X+
    1ac4:	3c 91       	ld	r19, X
    1ac6:	13 97       	sbiw	r26, 0x03	; 3
    1ac8:	23 2b       	or	r18, r19
    1aca:	21 f1       	breq	.+72     	; 0x1b14 <LFSMquant+0x70>
    1acc:	7c 01       	movw	r14, r24
    1ace:	d1 2c       	mov	r13, r1
    1ad0:	00 e0       	ldi	r16, 0x00	; 0
    1ad2:	10 e0       	ldi	r17, 0x00	; 0
    1ad4:	a1 2c       	mov	r10, r1
    1ad6:	b1 2c       	mov	r11, r1
    1ad8:	c0 e0       	ldi	r28, 0x00	; 0
    1ada:	d0 e0       	ldi	r29, 0x00	; 0
		r->eprom->read_block(pdata, (const void*)(i1 * sizeblock), sizeblock);
    1adc:	d7 01       	movw	r26, r14
    1ade:	ed 91       	ld	r30, X+
    1ae0:	fc 91       	ld	r31, X
    1ae2:	00 8c       	ldd	r0, Z+24	; 0x18
    1ae4:	f1 8d       	ldd	r31, Z+25	; 0x19
    1ae6:	e0 2d       	mov	r30, r0
    1ae8:	a6 01       	movw	r20, r12
    1aea:	b8 01       	movw	r22, r16
    1aec:	87 e8       	ldi	r24, 0x87	; 135
    1aee:	93 e0       	ldi	r25, 0x03	; 3
    1af0:	09 95       	icall
		if(pdata->page != 0){ // Count memory used
    1af2:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <data>
    1af6:	88 23       	and	r24, r24
    1af8:	19 f0       	breq	.+6      	; 0x1b00 <LFSMquant+0x5c>
			programmed++;
    1afa:	bf ef       	ldi	r27, 0xFF	; 255
    1afc:	ab 1a       	sub	r10, r27
    1afe:	bb 0a       	sbc	r11, r27
{
	uint16_t i1;
	uint8_t sizeblock = r->sizeblock;
	struct lfsmdata* pdata = &data;
	uint16_t programmed;
	for(i1 = 0, programmed = 0; i1 < r->sizeeeprom; i1++){
    1b00:	21 96       	adiw	r28, 0x01	; 1
    1b02:	0c 0d       	add	r16, r12
    1b04:	1d 1d       	adc	r17, r13
    1b06:	f7 01       	movw	r30, r14
    1b08:	82 81       	ldd	r24, Z+2	; 0x02
    1b0a:	93 81       	ldd	r25, Z+3	; 0x03
    1b0c:	c8 17       	cp	r28, r24
    1b0e:	d9 07       	cpc	r29, r25
    1b10:	28 f3       	brcs	.-54     	; 0x1adc <LFSMquant+0x38>
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <LFSMquant+0x74>
    1b14:	a1 2c       	mov	r10, r1
    1b16:	b1 2c       	mov	r11, r1
		if(pdata->page != 0){ // Count memory used
			programmed++;
		}
	}
	return programmed;
}
    1b18:	c5 01       	movw	r24, r10
    1b1a:	df 91       	pop	r29
    1b1c:	cf 91       	pop	r28
    1b1e:	1f 91       	pop	r17
    1b20:	0f 91       	pop	r16
    1b22:	ff 90       	pop	r15
    1b24:	ef 90       	pop	r14
    1b26:	df 90       	pop	r13
    1b28:	cf 90       	pop	r12
    1b2a:	bf 90       	pop	r11
    1b2c:	af 90       	pop	r10
    1b2e:	08 95       	ret

00001b30 <LFSMdeleteall>:
	}
	return status;
}
// uint8_t LFSMdeleteall(struct lfsm *r)
uint8_t LFSMdeleteall(struct lfsm *r)
{
    1b30:	af 92       	push	r10
    1b32:	bf 92       	push	r11
    1b34:	cf 92       	push	r12
    1b36:	df 92       	push	r13
    1b38:	ef 92       	push	r14
    1b3a:	ff 92       	push	r15
    1b3c:	0f 93       	push	r16
    1b3e:	1f 93       	push	r17
    1b40:	cf 93       	push	r28
    1b42:	df 93       	push	r29
    1b44:	7c 01       	movw	r14, r24
	uint16_t i1;
	uint8_t status = 0;
	uint8_t sizeblock = r->sizeblock;
    1b46:	dc 01       	movw	r26, r24
    1b48:	14 96       	adiw	r26, 0x04	; 4
    1b4a:	cc 90       	ld	r12, X
    1b4c:	14 97       	sbiw	r26, 0x04	; 4
	struct lfsmdata* pdata = &data;
	for(i1 = 0; i1 < r->sizeeeprom; i1++){
    1b4e:	12 96       	adiw	r26, 0x02	; 2
    1b50:	8d 91       	ld	r24, X+
    1b52:	9c 91       	ld	r25, X
    1b54:	13 97       	sbiw	r26, 0x03	; 3
    1b56:	89 2b       	or	r24, r25
    1b58:	81 f1       	breq	.+96     	; 0x1bba <LFSMdeleteall+0x8a>
    1b5a:	d1 2c       	mov	r13, r1
    1b5c:	c0 e0       	ldi	r28, 0x00	; 0
    1b5e:	d0 e0       	ldi	r29, 0x00	; 0
    1b60:	a1 2c       	mov	r10, r1
    1b62:	00 e0       	ldi	r16, 0x00	; 0
    1b64:	10 e0       	ldi	r17, 0x00	; 0
		r->eprom->read_block(pdata, (const void*)(i1 * sizeblock), sizeblock);
		if(pdata->page){
			pdata->page = 0;
			r->eprom->update_block(pdata, (void*)(i1 * sizeblock), sizeblock);
			status = 1; // All deleted
    1b66:	bb 24       	eor	r11, r11
    1b68:	b3 94       	inc	r11
	uint16_t i1;
	uint8_t status = 0;
	uint8_t sizeblock = r->sizeblock;
	struct lfsmdata* pdata = &data;
	for(i1 = 0; i1 < r->sizeeeprom; i1++){
		r->eprom->read_block(pdata, (const void*)(i1 * sizeblock), sizeblock);
    1b6a:	d7 01       	movw	r26, r14
    1b6c:	ed 91       	ld	r30, X+
    1b6e:	fc 91       	ld	r31, X
    1b70:	00 8c       	ldd	r0, Z+24	; 0x18
    1b72:	f1 8d       	ldd	r31, Z+25	; 0x19
    1b74:	e0 2d       	mov	r30, r0
    1b76:	a6 01       	movw	r20, r12
    1b78:	be 01       	movw	r22, r28
    1b7a:	87 e8       	ldi	r24, 0x87	; 135
    1b7c:	93 e0       	ldi	r25, 0x03	; 3
    1b7e:	09 95       	icall
		if(pdata->page){
    1b80:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <data>
    1b84:	88 23       	and	r24, r24
    1b86:	71 f0       	breq	.+28     	; 0x1ba4 <LFSMdeleteall+0x74>
			pdata->page = 0;
    1b88:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <data>
			r->eprom->update_block(pdata, (void*)(i1 * sizeblock), sizeblock);
    1b8c:	d7 01       	movw	r26, r14
    1b8e:	ed 91       	ld	r30, X+
    1b90:	fc 91       	ld	r31, X
    1b92:	04 8c       	ldd	r0, Z+28	; 0x1c
    1b94:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1b96:	e0 2d       	mov	r30, r0
    1b98:	a6 01       	movw	r20, r12
    1b9a:	be 01       	movw	r22, r28
    1b9c:	87 e8       	ldi	r24, 0x87	; 135
    1b9e:	93 e0       	ldi	r25, 0x03	; 3
    1ba0:	09 95       	icall
			status = 1; // All deleted
    1ba2:	ab 2c       	mov	r10, r11
{
	uint16_t i1;
	uint8_t status = 0;
	uint8_t sizeblock = r->sizeblock;
	struct lfsmdata* pdata = &data;
	for(i1 = 0; i1 < r->sizeeeprom; i1++){
    1ba4:	0f 5f       	subi	r16, 0xFF	; 255
    1ba6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba8:	cc 0d       	add	r28, r12
    1baa:	dd 1d       	adc	r29, r13
    1bac:	f7 01       	movw	r30, r14
    1bae:	82 81       	ldd	r24, Z+2	; 0x02
    1bb0:	93 81       	ldd	r25, Z+3	; 0x03
    1bb2:	08 17       	cp	r16, r24
    1bb4:	19 07       	cpc	r17, r25
    1bb6:	c8 f2       	brcs	.-78     	; 0x1b6a <LFSMdeleteall+0x3a>
    1bb8:	01 c0       	rjmp	.+2      	; 0x1bbc <LFSMdeleteall+0x8c>
}
// uint8_t LFSMdeleteall(struct lfsm *r)
uint8_t LFSMdeleteall(struct lfsm *r)
{
	uint16_t i1;
	uint8_t status = 0;
    1bba:	a1 2c       	mov	r10, r1
			pdata->page = 0;
			r->eprom->update_block(pdata, (void*)(i1 * sizeblock), sizeblock);
			status = 1; // All deleted
		}
	}
	r->output = 0;
    1bbc:	d7 01       	movw	r26, r14
    1bbe:	18 96       	adiw	r26, 0x08	; 8
    1bc0:	1c 92       	st	X, r1
    1bc2:	1e 92       	st	-X, r1
    1bc4:	17 97       	sbiw	r26, 0x07	; 7
	r->status = 0;
    1bc6:	19 96       	adiw	r26, 0x09	; 9
    1bc8:	1c 92       	st	X, r1
	return status;
}
    1bca:	8a 2d       	mov	r24, r10
    1bcc:	df 91       	pop	r29
    1bce:	cf 91       	pop	r28
    1bd0:	1f 91       	pop	r17
    1bd2:	0f 91       	pop	r16
    1bd4:	ff 90       	pop	r15
    1bd6:	ef 90       	pop	r14
    1bd8:	df 90       	pop	r13
    1bda:	cf 90       	pop	r12
    1bdc:	bf 90       	pop	r11
    1bde:	af 90       	pop	r10
    1be0:	08 95       	ret

00001be2 <LFSMgetoutput>:
// uint16_t LFSMgetoutput(struct lfsm *r)
uint16_t LFSMgetoutput(struct lfsm *r)
{
	return r->output;
}
    1be2:	fc 01       	movw	r30, r24
    1be4:	87 81       	ldd	r24, Z+7	; 0x07
    1be6:	90 85       	ldd	r25, Z+8	; 0x08
    1be8:	08 95       	ret

00001bea <LFSMgetstatus>:
// uint8_t LFSMgetstatus(struct lfsm *r)
uint8_t LFSMgetstatus(struct lfsm *r)
{
	return r->status;
}
    1bea:	fc 01       	movw	r30, r24
    1bec:	81 85       	ldd	r24, Z+9	; 0x09
    1bee:	08 95       	ret

00001bf0 <LFSMsetoutput>:
// void LFSMsetoutput(struct lfsm *r, uint16_t output)
void LFSMsetoutput(struct lfsm *r, uint16_t output)
{
	r->output = output;
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	70 87       	std	Z+8, r23	; 0x08
    1bf4:	67 83       	std	Z+7, r22	; 0x07
	r->status = 0;
    1bf6:	11 86       	std	Z+9, r1	; 0x09
    1bf8:	08 95       	ret

00001bfa <LFSMgetpage>:
}
// uint8_t LFSMgetpage(struct lfsm *r)
uint8_t LFSMgetpage(struct lfsm *r)
{
	return r->page;
}
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	85 81       	ldd	r24, Z+5	; 0x05
    1bfe:	08 95       	ret

00001c00 <LFSMsetpage>:
// void LFSMsetpage(struct lfsm *r, uint8_t page)
void LFSMsetpage(struct lfsm *r, uint8_t page)
{
	r->page=page;
    1c00:	fc 01       	movw	r30, r24
    1c02:	65 83       	std	Z+5, r22	; 0x05
    1c04:	08 95       	ret

00001c06 <LFSMread>:
	r.setpage = LFSMsetpage;
	return r;
}
// uint8_t LFSMread(struct lfsm *r, uint8_t input)
uint8_t LFSMread(struct lfsm *r, uint8_t input)
{
    1c06:	2f 92       	push	r2
    1c08:	3f 92       	push	r3
    1c0a:	4f 92       	push	r4
    1c0c:	5f 92       	push	r5
    1c0e:	6f 92       	push	r6
    1c10:	7f 92       	push	r7
    1c12:	8f 92       	push	r8
    1c14:	9f 92       	push	r9
    1c16:	af 92       	push	r10
    1c18:	bf 92       	push	r11
    1c1a:	cf 92       	push	r12
    1c1c:	df 92       	push	r13
    1c1e:	ef 92       	push	r14
    1c20:	ff 92       	push	r15
    1c22:	0f 93       	push	r16
    1c24:	1f 93       	push	r17
    1c26:	cf 93       	push	r28
    1c28:	df 93       	push	r29
    1c2a:	8c 01       	movw	r16, r24
    1c2c:	76 2e       	mov	r7, r22
	struct lfsmdata* pdata = &data;
	int16_t n = 0;
	uint8_t n1 = NPAGES, n2 = NPAGES;
	uint8_t page = r->page;
	uint16_t HL, LH;
	HL = LFSMhl(r->input, input);
    1c2e:	dc 01       	movw	r26, r24
    1c30:	16 96       	adiw	r26, 0x06	; 6
    1c32:	cc 90       	ld	r12, X
    1c34:	a6 2e       	mov	r10, r22
    1c36:	ac 24       	eor	r10, r12
// uint16_t LFSMhl(uint16_t xi, uint16_t xf)
uint16_t LFSMhl(uint16_t xi, uint16_t xf)
{
	uint16_t i;
	i = xf ^ xi;
	i &= xi;
    1c38:	ca 20       	and	r12, r10
    1c3a:	d1 2c       	mov	r13, r1
// uint16_t LFSMlh(uint16_t xi, uint16_t xf)***/
uint16_t LFSMlh(uint16_t xi, uint16_t xf)
{
	uint16_t i;
	i = xf ^ xi;
	i &= xf;
    1c3c:	a6 22       	and	r10, r22
    1c3e:	b1 2c       	mov	r11, r1
	uint8_t n1 = NPAGES, n2 = NPAGES;
	uint8_t page = r->page;
	uint16_t HL, LH;
	HL = LFSMhl(r->input, input);
	LH = LFSMlh(r->input, input);
	if(HL || LH){ // To not waste time
    1c40:	c1 14       	cp	r12, r1
    1c42:	d1 04       	cpc	r13, r1
    1c44:	31 f0       	breq	.+12     	; 0x1c52 <LFSMread+0x4c>
		status = 1; // New entry
		for(i1 = 0; i1 < r->sizeeeprom; i1++){
    1c46:	f8 01       	movw	r30, r16
    1c48:	82 81       	ldd	r24, Z+2	; 0x02
    1c4a:	93 81       	ldd	r25, Z+3	; 0x03
    1c4c:	89 2b       	or	r24, r25
    1c4e:	29 f4       	brne	.+10     	; 0x1c5a <LFSMread+0x54>
    1c50:	b3 c0       	rjmp	.+358    	; 0x1db8 <LFSMread+0x1b2>
	uint8_t n1 = NPAGES, n2 = NPAGES;
	uint8_t page = r->page;
	uint16_t HL, LH;
	HL = LFSMhl(r->input, input);
	LH = LFSMlh(r->input, input);
	if(HL || LH){ // To not waste time
    1c52:	a1 14       	cp	r10, r1
    1c54:	b1 04       	cpc	r11, r1
    1c56:	b9 f7       	brne	.-18     	; 0x1c46 <LFSMread+0x40>
    1c58:	4a c1       	rjmp	.+660    	; 0x1eee <LFSMread+0x2e8>
// uint8_t LFSMread(struct lfsm *r, uint8_t input)
uint8_t LFSMread(struct lfsm *r, uint8_t input)
{
	uint16_t i1;
	uint8_t status = 0;
	uint8_t sizeblock = r->sizeblock;
    1c5a:	e4 80       	ldd	r14, Z+4	; 0x04
	struct lfsmdata* pdata = &data;
	int16_t n = 0;
	uint8_t n1 = NPAGES, n2 = NPAGES;
	uint8_t page = r->page;
    1c5c:	55 80       	ldd	r5, Z+5	; 0x05
    1c5e:	33 24       	eor	r3, r3
    1c60:	3a 94       	dec	r3
    1c62:	44 24       	eor	r4, r4
    1c64:	4a 94       	dec	r4
    1c66:	66 24       	eor	r6, r6
    1c68:	63 94       	inc	r6
    1c6a:	c0 e0       	ldi	r28, 0x00	; 0
    1c6c:	d0 e0       	ldi	r29, 0x00	; 0
	HL = LFSMhl(r->input, input);
	LH = LFSMlh(r->input, input);
	if(HL || LH){ // To not waste time
		status = 1; // New entry
		for(i1 = 0; i1 < r->sizeeeprom; i1++){
			r->eprom->read_block(pdata, (const void*)(i1 * sizeblock), sizeblock);
    1c6e:	f1 2c       	mov	r15, r1
							status = 2; // Global logic exist
					}
				break;
				default: // Local logic
					if( (pdata->feedback & pdata->mask) == (r->output & pdata->mask) && pdata->inhl == HL && pdata->inlh == LH ){
						n = pdata->page - page;	
    1c70:	85 2c       	mov	r8, r5
    1c72:	91 2c       	mov	r9, r1
					// Do nothing, continue search in status=1.
				break;
				case 1: // Global logic
					if( pdata->inhl == HL && pdata->inlh == LH ){
							i1 = r->sizeeeprom; // exit search
							status = 2; // Global logic exist
    1c74:	68 94       	set
    1c76:	22 24       	eor	r2, r2
    1c78:	21 f8       	bld	r2, 1
	HL = LFSMhl(r->input, input);
	LH = LFSMlh(r->input, input);
	if(HL || LH){ // To not waste time
		status = 1; // New entry
		for(i1 = 0; i1 < r->sizeeeprom; i1++){
			r->eprom->read_block(pdata, (const void*)(i1 * sizeblock), sizeblock);
    1c7a:	ec 9e       	mul	r14, r28
    1c7c:	b0 01       	movw	r22, r0
    1c7e:	ed 9e       	mul	r14, r29
    1c80:	70 0d       	add	r23, r0
    1c82:	fc 9e       	mul	r15, r28
    1c84:	70 0d       	add	r23, r0
    1c86:	11 24       	eor	r1, r1
    1c88:	d8 01       	movw	r26, r16
    1c8a:	ed 91       	ld	r30, X+
    1c8c:	fc 91       	ld	r31, X
    1c8e:	00 8c       	ldd	r0, Z+24	; 0x18
    1c90:	f1 8d       	ldd	r31, Z+25	; 0x19
    1c92:	e0 2d       	mov	r30, r0
    1c94:	a7 01       	movw	r20, r14
    1c96:	87 e8       	ldi	r24, 0x87	; 135
    1c98:	93 e0       	ldi	r25, 0x03	; 3
    1c9a:	09 95       	icall
			switch(pdata->page){
    1c9c:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <data>
    1ca0:	88 23       	and	r24, r24
    1ca2:	09 f4       	brne	.+2      	; 0x1ca6 <LFSMread+0xa0>
    1ca4:	70 c0       	rjmp	.+224    	; 0x1d86 <LFSMread+0x180>
    1ca6:	81 30       	cpi	r24, 0x01	; 1
    1ca8:	99 f4       	brne	.+38     	; 0x1cd0 <LFSMread+0xca>
				case 0:
					// Do nothing, continue search in status=1.
				break;
				case 1: // Global logic
					if( pdata->inhl == HL && pdata->inlh == LH ){
    1caa:	20 91 8a 03 	lds	r18, 0x038A	; 0x80038a <data+0x3>
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	2c 15       	cp	r18, r12
    1cb2:	3d 05       	cpc	r19, r13
    1cb4:	09 f0       	breq	.+2      	; 0x1cb8 <LFSMread+0xb2>
    1cb6:	67 c0       	rjmp	.+206    	; 0x1d86 <LFSMread+0x180>
    1cb8:	20 91 8b 03 	lds	r18, 0x038B	; 0x80038b <data+0x4>
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	2a 15       	cp	r18, r10
    1cc0:	3b 05       	cpc	r19, r11
    1cc2:	09 f0       	breq	.+2      	; 0x1cc6 <LFSMread+0xc0>
    1cc4:	60 c0       	rjmp	.+192    	; 0x1d86 <LFSMread+0x180>
							i1 = r->sizeeeprom; // exit search
    1cc6:	f8 01       	movw	r30, r16
    1cc8:	c2 81       	ldd	r28, Z+2	; 0x02
    1cca:	d3 81       	ldd	r29, Z+3	; 0x03
							status = 2; // Global logic exist
    1ccc:	62 2c       	mov	r6, r2
    1cce:	5b c0       	rjmp	.+182    	; 0x1d86 <LFSMread+0x180>
					}
				break;
				default: // Local logic
					if( (pdata->feedback & pdata->mask) == (r->output & pdata->mask) && pdata->inhl == HL && pdata->inlh == LH ){
    1cd0:	e7 e8       	ldi	r30, 0x87	; 135
    1cd2:	f3 e0       	ldi	r31, 0x03	; 3
    1cd4:	41 81       	ldd	r20, Z+1	; 0x01
    1cd6:	52 81       	ldd	r21, Z+2	; 0x02
    1cd8:	d8 01       	movw	r26, r16
    1cda:	17 96       	adiw	r26, 0x07	; 7
    1cdc:	2d 91       	ld	r18, X+
    1cde:	3c 91       	ld	r19, X
    1ce0:	18 97       	sbiw	r26, 0x08	; 8
    1ce2:	24 27       	eor	r18, r20
    1ce4:	35 27       	eor	r19, r21
    1ce6:	45 81       	ldd	r20, Z+5	; 0x05
    1ce8:	56 81       	ldd	r21, Z+6	; 0x06
    1cea:	24 23       	and	r18, r20
    1cec:	35 23       	and	r19, r21
    1cee:	23 2b       	or	r18, r19
    1cf0:	09 f0       	breq	.+2      	; 0x1cf4 <LFSMread+0xee>
    1cf2:	49 c0       	rjmp	.+146    	; 0x1d86 <LFSMread+0x180>
    1cf4:	20 91 8a 03 	lds	r18, 0x038A	; 0x80038a <data+0x3>
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	2c 15       	cp	r18, r12
    1cfc:	3d 05       	cpc	r19, r13
    1cfe:	09 f0       	breq	.+2      	; 0x1d02 <LFSMread+0xfc>
    1d00:	42 c0       	rjmp	.+132    	; 0x1d86 <LFSMread+0x180>
    1d02:	20 91 8b 03 	lds	r18, 0x038B	; 0x80038b <data+0x4>
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	2a 15       	cp	r18, r10
    1d0a:	3b 05       	cpc	r19, r11
    1d0c:	e1 f5       	brne	.+120    	; 0x1d86 <LFSMread+0x180>
						n = pdata->page - page;	
    1d0e:	28 2f       	mov	r18, r24
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	28 19       	sub	r18, r8
    1d14:	39 09       	sbc	r19, r9
						if(!n){
    1d16:	49 f4       	brne	.+18     	; 0x1d2a <LFSMread+0x124>
							i1 = r->sizeeeprom; // exit search
    1d18:	12 96       	adiw	r26, 0x02	; 2
    1d1a:	cd 91       	ld	r28, X+
    1d1c:	dc 91       	ld	r29, X
    1d1e:	13 97       	sbiw	r26, 0x03	; 3
							status = 3; // Local logic exist in present page
    1d20:	0f 2e       	mov	r0, r31
    1d22:	f3 e0       	ldi	r31, 0x03	; 3
    1d24:	6f 2e       	mov	r6, r31
    1d26:	f0 2d       	mov	r31, r0
							break;
    1d28:	2e c0       	rjmp	.+92     	; 0x1d86 <LFSMread+0x180>
						}
						if(n > 0){
    1d2a:	12 16       	cp	r1, r18
    1d2c:	13 06       	cpc	r1, r19
    1d2e:	9c f4       	brge	.+38     	; 0x1d56 <LFSMread+0x150>
							if(n < n1){
    1d30:	44 2d       	mov	r20, r4
    1d32:	50 e0       	ldi	r21, 0x00	; 0
    1d34:	24 17       	cp	r18, r20
    1d36:	35 07       	cpc	r19, r21
    1d38:	74 f4       	brge	.+28     	; 0x1d56 <LFSMread+0x150>
								tmp1 = *pdata;
    1d3a:	9b e0       	ldi	r25, 0x0B	; 11
    1d3c:	e7 e8       	ldi	r30, 0x87	; 135
    1d3e:	f3 e0       	ldi	r31, 0x03	; 3
    1d40:	a2 e9       	ldi	r26, 0x92	; 146
    1d42:	b3 e0       	ldi	r27, 0x03	; 3
    1d44:	01 90       	ld	r0, Z+
    1d46:	0d 92       	st	X+, r0
    1d48:	9a 95       	dec	r25
    1d4a:	e1 f7       	brne	.-8      	; 0x1d44 <LFSMread+0x13e>
    1d4c:	48 2e       	mov	r4, r24
    1d4e:	45 18       	sub	r4, r5
								n1 = n;
								status = 4; // Local logic exist in page above
    1d50:	68 94       	set
    1d52:	66 24       	eor	r6, r6
    1d54:	62 f8       	bld	r6, 2
							}
						}
						if(n < 0){
    1d56:	33 23       	and	r19, r19
    1d58:	b4 f4       	brge	.+44     	; 0x1d86 <LFSMread+0x180>
							if(n > -n2){
    1d5a:	43 2d       	mov	r20, r3
    1d5c:	50 e0       	ldi	r21, 0x00	; 0
    1d5e:	51 95       	neg	r21
    1d60:	41 95       	neg	r20
    1d62:	51 09       	sbc	r21, r1
    1d64:	42 17       	cp	r20, r18
    1d66:	53 07       	cpc	r21, r19
    1d68:	74 f4       	brge	.+28     	; 0x1d86 <LFSMread+0x180>
								tmp2 = *pdata;
    1d6a:	9b e0       	ldi	r25, 0x0B	; 11
    1d6c:	e7 e8       	ldi	r30, 0x87	; 135
    1d6e:	f3 e0       	ldi	r31, 0x03	; 3
    1d70:	ac e7       	ldi	r26, 0x7C	; 124
    1d72:	b3 e0       	ldi	r27, 0x03	; 3
    1d74:	01 90       	ld	r0, Z+
    1d76:	0d 92       	st	X+, r0
    1d78:	9a 95       	dec	r25
    1d7a:	e1 f7       	brne	.-8      	; 0x1d74 <LFSMread+0x16e>
								n2 = -n;
    1d7c:	35 2c       	mov	r3, r5
    1d7e:	38 1a       	sub	r3, r24
								status = 4; // Local logic exist in page bellow
    1d80:	68 94       	set
    1d82:	66 24       	eor	r6, r6
    1d84:	62 f8       	bld	r6, 2
	uint16_t HL, LH;
	HL = LFSMhl(r->input, input);
	LH = LFSMlh(r->input, input);
	if(HL || LH){ // To not waste time
		status = 1; // New entry
		for(i1 = 0; i1 < r->sizeeeprom; i1++){
    1d86:	21 96       	adiw	r28, 0x01	; 1
    1d88:	f8 01       	movw	r30, r16
    1d8a:	22 81       	ldd	r18, Z+2	; 0x02
    1d8c:	33 81       	ldd	r19, Z+3	; 0x03
    1d8e:	c2 17       	cp	r28, r18
    1d90:	d3 07       	cpc	r29, r19
    1d92:	08 f4       	brcc	.+2      	; 0x1d96 <LFSMread+0x190>
    1d94:	72 cf       	rjmp	.-284    	; 0x1c7a <LFSMread+0x74>
				break;
			}
		}
	}
	// status confirmation
	switch (status){
    1d96:	f2 e0       	ldi	r31, 0x02	; 2
    1d98:	6f 16       	cp	r6, r31
    1d9a:	89 f0       	breq	.+34     	; 0x1dbe <LFSMread+0x1b8>
    1d9c:	f6 15       	cp	r31, r6
    1d9e:	20 f0       	brcs	.+8      	; 0x1da8 <LFSMread+0x1a2>
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	68 16       	cp	r6, r24
    1da4:	49 f0       	breq	.+18     	; 0x1db8 <LFSMread+0x1b2>
    1da6:	a3 c0       	rjmp	.+326    	; 0x1eee <LFSMread+0x2e8>
    1da8:	93 e0       	ldi	r25, 0x03	; 3
    1daa:	69 16       	cp	r6, r25
    1dac:	69 f1       	breq	.+90     	; 0x1e08 <LFSMread+0x202>
    1dae:	a4 e0       	ldi	r26, 0x04	; 4
    1db0:	6a 16       	cp	r6, r26
    1db2:	09 f4       	brne	.+2      	; 0x1db6 <LFSMread+0x1b0>
    1db4:	4b c0       	rjmp	.+150    	; 0x1e4c <LFSMread+0x246>
    1db6:	9b c0       	rjmp	.+310    	; 0x1eee <LFSMread+0x2e8>
		break;
		case 1: // New entry
			// Give warning and pause waiting for decision (very important).
			// To be implemented Learning on flight mode.
			// Serves has flag to main function.
			r->input = input; // Update
    1db8:	f8 01       	movw	r30, r16
    1dba:	76 82       	std	Z+6, r7	; 0x06
		break;
    1dbc:	98 c0       	rjmp	.+304    	; 0x1eee <LFSMread+0x2e8>
		case 2: // Global logic exist
			r->page = pdata->page;
    1dbe:	d8 01       	movw	r26, r16
    1dc0:	15 96       	adiw	r26, 0x05	; 5
    1dc2:	8c 93       	st	X, r24
    1dc4:	15 97       	sbiw	r26, 0x05	; 5
			r->input = input; // Update
    1dc6:	16 96       	adiw	r26, 0x06	; 6
    1dc8:	7c 92       	st	X, r7
    1dca:	16 97       	sbiw	r26, 0x06	; 6
			r->output = LFSMoutputcalc(r->output, pdata->outhl, pdata->outlh, pdata->mask);
    1dcc:	e7 e8       	ldi	r30, 0x87	; 135
    1dce:	f3 e0       	ldi	r31, 0x03	; 3
    1dd0:	65 81       	ldd	r22, Z+5	; 0x05
    1dd2:	76 81       	ldd	r23, Z+6	; 0x06
}
**************************************************************************/
// uint16_t LFSMoutputcalc(uint16_t feedback, uint16_t hl, uint16_t lh, uint16_t mask)
uint16_t LFSMoutputcalc(uint16_t feedback, uint16_t hl, uint16_t lh, uint16_t mask)
{
	feedback |= (lh & mask);
    1dd4:	21 85       	ldd	r18, Z+9	; 0x09
    1dd6:	32 85       	ldd	r19, Z+10	; 0x0a
    1dd8:	26 23       	and	r18, r22
    1dda:	37 23       	and	r19, r23
    1ddc:	17 96       	adiw	r26, 0x07	; 7
    1dde:	4d 91       	ld	r20, X+
    1de0:	5c 91       	ld	r21, X
    1de2:	18 97       	sbiw	r26, 0x08	; 8
    1de4:	24 2b       	or	r18, r20
    1de6:	35 2b       	or	r19, r21
			r->input = input; // Update
		break;
		case 2: // Global logic exist
			r->page = pdata->page;
			r->input = input; // Update
			r->output = LFSMoutputcalc(r->output, pdata->outhl, pdata->outlh, pdata->mask);
    1de8:	87 81       	ldd	r24, Z+7	; 0x07
    1dea:	90 85       	ldd	r25, Z+8	; 0x08
    1dec:	86 23       	and	r24, r22
    1dee:	97 23       	and	r25, r23
    1df0:	80 95       	com	r24
    1df2:	90 95       	com	r25
    1df4:	82 23       	and	r24, r18
    1df6:	93 23       	and	r25, r19
    1df8:	18 96       	adiw	r26, 0x08	; 8
    1dfa:	9c 93       	st	X, r25
    1dfc:	8e 93       	st	-X, r24
    1dfe:	17 97       	sbiw	r26, 0x07	; 7
			r->status = 2;
    1e00:	82 e0       	ldi	r24, 0x02	; 2
    1e02:	19 96       	adiw	r26, 0x09	; 9
    1e04:	8c 93       	st	X, r24
		break;
    1e06:	73 c0       	rjmp	.+230    	; 0x1eee <LFSMread+0x2e8>
		case 3: // Local logic exist in present page
			r->page = pdata->page;
    1e08:	f8 01       	movw	r30, r16
    1e0a:	85 83       	std	Z+5, r24	; 0x05
			r->input = input; // Update
    1e0c:	76 82       	std	Z+6, r7	; 0x06
			r->output = LFSMoutputcalc(r->output, pdata->outhl, pdata->outlh, pdata->mask);
    1e0e:	e7 e8       	ldi	r30, 0x87	; 135
    1e10:	f3 e0       	ldi	r31, 0x03	; 3
    1e12:	65 81       	ldd	r22, Z+5	; 0x05
    1e14:	76 81       	ldd	r23, Z+6	; 0x06
}
**************************************************************************/
// uint16_t LFSMoutputcalc(uint16_t feedback, uint16_t hl, uint16_t lh, uint16_t mask)
uint16_t LFSMoutputcalc(uint16_t feedback, uint16_t hl, uint16_t lh, uint16_t mask)
{
	feedback |= (lh & mask);
    1e16:	21 85       	ldd	r18, Z+9	; 0x09
    1e18:	32 85       	ldd	r19, Z+10	; 0x0a
    1e1a:	26 23       	and	r18, r22
    1e1c:	37 23       	and	r19, r23
    1e1e:	d8 01       	movw	r26, r16
    1e20:	17 96       	adiw	r26, 0x07	; 7
    1e22:	4d 91       	ld	r20, X+
    1e24:	5c 91       	ld	r21, X
    1e26:	18 97       	sbiw	r26, 0x08	; 8
    1e28:	24 2b       	or	r18, r20
    1e2a:	35 2b       	or	r19, r21
			r->status = 2;
		break;
		case 3: // Local logic exist in present page
			r->page = pdata->page;
			r->input = input; // Update
			r->output = LFSMoutputcalc(r->output, pdata->outhl, pdata->outlh, pdata->mask);
    1e2c:	87 81       	ldd	r24, Z+7	; 0x07
    1e2e:	90 85       	ldd	r25, Z+8	; 0x08
    1e30:	86 23       	and	r24, r22
    1e32:	97 23       	and	r25, r23
    1e34:	80 95       	com	r24
    1e36:	90 95       	com	r25
    1e38:	82 23       	and	r24, r18
    1e3a:	93 23       	and	r25, r19
    1e3c:	18 96       	adiw	r26, 0x08	; 8
    1e3e:	9c 93       	st	X, r25
    1e40:	8e 93       	st	-X, r24
    1e42:	17 97       	sbiw	r26, 0x07	; 7
			r->status = 3;
    1e44:	83 e0       	ldi	r24, 0x03	; 3
    1e46:	19 96       	adiw	r26, 0x09	; 9
    1e48:	8c 93       	st	X, r24
		break;
    1e4a:	51 c0       	rjmp	.+162    	; 0x1eee <LFSMread+0x2e8>
		case 4: // Local logic exist in page above versus local logic exist in page bellow
			// Choose closest page above otherwise closest bellow.
			r->input = input; // update
    1e4c:	f8 01       	movw	r30, r16
    1e4e:	76 82       	std	Z+6, r7	; 0x06
			if(n1 > 0 && n1 < NPAGES){
    1e50:	8f ef       	ldi	r24, 0xFF	; 255
    1e52:	84 0d       	add	r24, r4
    1e54:	8e 3f       	cpi	r24, 0xFE	; 254
    1e56:	20 f5       	brcc	.+72     	; 0x1ea0 <LFSMread+0x29a>
				r->page = tmp1.page;
    1e58:	e2 e9       	ldi	r30, 0x92	; 146
    1e5a:	f3 e0       	ldi	r31, 0x03	; 3
    1e5c:	80 81       	ld	r24, Z
    1e5e:	d8 01       	movw	r26, r16
    1e60:	15 96       	adiw	r26, 0x05	; 5
    1e62:	8c 93       	st	X, r24
    1e64:	15 97       	sbiw	r26, 0x05	; 5
				r->output = LFSMoutputcalc(r->output, tmp1.outhl, tmp1.outlh, tmp1.mask);
    1e66:	65 81       	ldd	r22, Z+5	; 0x05
    1e68:	76 81       	ldd	r23, Z+6	; 0x06
}
**************************************************************************/
// uint16_t LFSMoutputcalc(uint16_t feedback, uint16_t hl, uint16_t lh, uint16_t mask)
uint16_t LFSMoutputcalc(uint16_t feedback, uint16_t hl, uint16_t lh, uint16_t mask)
{
	feedback |= (lh & mask);
    1e6a:	21 85       	ldd	r18, Z+9	; 0x09
    1e6c:	32 85       	ldd	r19, Z+10	; 0x0a
    1e6e:	ab 01       	movw	r20, r22
    1e70:	42 23       	and	r20, r18
    1e72:	53 23       	and	r21, r19
    1e74:	17 96       	adiw	r26, 0x07	; 7
    1e76:	2d 91       	ld	r18, X+
    1e78:	3c 91       	ld	r19, X
    1e7a:	18 97       	sbiw	r26, 0x08	; 8
    1e7c:	24 2b       	or	r18, r20
    1e7e:	35 2b       	or	r19, r21
		case 4: // Local logic exist in page above versus local logic exist in page bellow
			// Choose closest page above otherwise closest bellow.
			r->input = input; // update
			if(n1 > 0 && n1 < NPAGES){
				r->page = tmp1.page;
				r->output = LFSMoutputcalc(r->output, tmp1.outhl, tmp1.outlh, tmp1.mask);
    1e80:	87 81       	ldd	r24, Z+7	; 0x07
    1e82:	90 85       	ldd	r25, Z+8	; 0x08
    1e84:	86 23       	and	r24, r22
    1e86:	97 23       	and	r25, r23
    1e88:	80 95       	com	r24
    1e8a:	90 95       	com	r25
    1e8c:	82 23       	and	r24, r18
    1e8e:	93 23       	and	r25, r19
    1e90:	18 96       	adiw	r26, 0x08	; 8
    1e92:	9c 93       	st	X, r25
    1e94:	8e 93       	st	-X, r24
    1e96:	17 97       	sbiw	r26, 0x07	; 7
				r->status = 41;
    1e98:	89 e2       	ldi	r24, 0x29	; 41
    1e9a:	19 96       	adiw	r26, 0x09	; 9
    1e9c:	8c 93       	st	X, r24
    1e9e:	27 c0       	rjmp	.+78     	; 0x1eee <LFSMread+0x2e8>
			}
			else if(n2 > 0 && n2 < NPAGES){
    1ea0:	8f ef       	ldi	r24, 0xFF	; 255
    1ea2:	83 0d       	add	r24, r3
    1ea4:	8e 3f       	cpi	r24, 0xFE	; 254
    1ea6:	18 f5       	brcc	.+70     	; 0x1eee <LFSMread+0x2e8>
				r->page = tmp2.page;
    1ea8:	ec e7       	ldi	r30, 0x7C	; 124
    1eaa:	f3 e0       	ldi	r31, 0x03	; 3
    1eac:	80 81       	ld	r24, Z
    1eae:	d8 01       	movw	r26, r16
    1eb0:	15 96       	adiw	r26, 0x05	; 5
    1eb2:	8c 93       	st	X, r24
    1eb4:	15 97       	sbiw	r26, 0x05	; 5
				r->output = LFSMoutputcalc(r->output, tmp2.outhl, tmp2.outlh, tmp2.mask);
    1eb6:	65 81       	ldd	r22, Z+5	; 0x05
    1eb8:	76 81       	ldd	r23, Z+6	; 0x06
}
**************************************************************************/
// uint16_t LFSMoutputcalc(uint16_t feedback, uint16_t hl, uint16_t lh, uint16_t mask)
uint16_t LFSMoutputcalc(uint16_t feedback, uint16_t hl, uint16_t lh, uint16_t mask)
{
	feedback |= (lh & mask);
    1eba:	21 85       	ldd	r18, Z+9	; 0x09
    1ebc:	32 85       	ldd	r19, Z+10	; 0x0a
    1ebe:	ab 01       	movw	r20, r22
    1ec0:	42 23       	and	r20, r18
    1ec2:	53 23       	and	r21, r19
    1ec4:	17 96       	adiw	r26, 0x07	; 7
    1ec6:	2d 91       	ld	r18, X+
    1ec8:	3c 91       	ld	r19, X
    1eca:	18 97       	sbiw	r26, 0x08	; 8
    1ecc:	24 2b       	or	r18, r20
    1ece:	35 2b       	or	r19, r21
				r->output = LFSMoutputcalc(r->output, tmp1.outhl, tmp1.outlh, tmp1.mask);
				r->status = 41;
			}
			else if(n2 > 0 && n2 < NPAGES){
				r->page = tmp2.page;
				r->output = LFSMoutputcalc(r->output, tmp2.outhl, tmp2.outlh, tmp2.mask);
    1ed0:	87 81       	ldd	r24, Z+7	; 0x07
    1ed2:	90 85       	ldd	r25, Z+8	; 0x08
    1ed4:	86 23       	and	r24, r22
    1ed6:	97 23       	and	r25, r23
    1ed8:	80 95       	com	r24
    1eda:	90 95       	com	r25
    1edc:	82 23       	and	r24, r18
    1ede:	93 23       	and	r25, r19
    1ee0:	18 96       	adiw	r26, 0x08	; 8
    1ee2:	9c 93       	st	X, r25
    1ee4:	8e 93       	st	-X, r24
    1ee6:	17 97       	sbiw	r26, 0x07	; 7
				r->status = 42;
    1ee8:	8a e2       	ldi	r24, 0x2A	; 42
    1eea:	19 96       	adiw	r26, 0x09	; 9
    1eec:	8c 93       	st	X, r24
		break;
		default:
		break;
	}
	return r->status;
}
    1eee:	f8 01       	movw	r30, r16
    1ef0:	81 85       	ldd	r24, Z+9	; 0x09
    1ef2:	df 91       	pop	r29
    1ef4:	cf 91       	pop	r28
    1ef6:	1f 91       	pop	r17
    1ef8:	0f 91       	pop	r16
    1efa:	ff 90       	pop	r15
    1efc:	ef 90       	pop	r14
    1efe:	df 90       	pop	r13
    1f00:	cf 90       	pop	r12
    1f02:	bf 90       	pop	r11
    1f04:	af 90       	pop	r10
    1f06:	9f 90       	pop	r9
    1f08:	8f 90       	pop	r8
    1f0a:	7f 90       	pop	r7
    1f0c:	6f 90       	pop	r6
    1f0e:	5f 90       	pop	r5
    1f10:	4f 90       	pop	r4
    1f12:	3f 90       	pop	r3
    1f14:	2f 90       	pop	r2
    1f16:	08 95       	ret

00001f18 <LFSMpremove>:
	}
	return status;
}
// uint8_t LFSMpremove(struct lfsm *r, uint8_t input)
uint8_t LFSMpremove(struct lfsm *r, uint8_t input, uint8_t page)
{
    1f18:	2f 92       	push	r2
    1f1a:	3f 92       	push	r3
    1f1c:	4f 92       	push	r4
    1f1e:	5f 92       	push	r5
    1f20:	6f 92       	push	r6
    1f22:	7f 92       	push	r7
    1f24:	8f 92       	push	r8
    1f26:	9f 92       	push	r9
    1f28:	af 92       	push	r10
    1f2a:	bf 92       	push	r11
    1f2c:	cf 92       	push	r12
    1f2e:	df 92       	push	r13
    1f30:	ef 92       	push	r14
    1f32:	ff 92       	push	r15
    1f34:	0f 93       	push	r16
    1f36:	1f 93       	push	r17
    1f38:	cf 93       	push	r28
    1f3a:	df 93       	push	r29
	uint16_t k, k1, k2, i1;
	k = k1 = k2 = 0;
	uint8_t status = 0;
	uint8_t sizeblock = r->sizeblock;
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	14 96       	adiw	r26, 0x04	; 4
    1f40:	0c 91       	ld	r16, X
    1f42:	14 97       	sbiw	r26, 0x04	; 4
	struct lfsmdata* pdata = &data;
	struct lfsmdata* ptmp1 = &tmp1;
	ptmp1->page = 0;
    1f44:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <tmp1>
	uint16_t HL,LH;
	HL = LFSMhl(r->input, input);
	LH = LFSMlh(r->input, input);
	if(page > 0){ // filter
    1f48:	44 23       	and	r20, r20
    1f4a:	09 f4       	brne	.+2      	; 0x1f4e <LFSMpremove+0x36>
    1f4c:	87 c0       	rjmp	.+270    	; 0x205c <LFSMpremove+0x144>
	uint8_t sizeblock = r->sizeblock;
	struct lfsmdata* pdata = &data;
	struct lfsmdata* ptmp1 = &tmp1;
	ptmp1->page = 0;
	uint16_t HL,LH;
	HL = LFSMhl(r->input, input);
    1f4e:	16 96       	adiw	r26, 0x06	; 6
    1f50:	ac 90       	ld	r10, X
    1f52:	26 2f       	mov	r18, r22
    1f54:	2a 25       	eor	r18, r10
// uint16_t LFSMhl(uint16_t xi, uint16_t xf)
uint16_t LFSMhl(uint16_t xi, uint16_t xf)
{
	uint16_t i;
	i = xf ^ xi;
	i &= xi;
    1f56:	a2 22       	and	r10, r18
    1f58:	b1 2c       	mov	r11, r1
// uint16_t LFSMlh(uint16_t xi, uint16_t xf)***/
uint16_t LFSMlh(uint16_t xi, uint16_t xf)
{
	uint16_t i;
	i = xf ^ xi;
	i &= xf;
    1f5a:	26 23       	and	r18, r22
    1f5c:	82 2e       	mov	r8, r18
    1f5e:	91 2c       	mov	r9, r1
	ptmp1->page = 0;
	uint16_t HL,LH;
	HL = LFSMhl(r->input, input);
	LH = LFSMlh(r->input, input);
	if(page > 0){ // filter
		if(HL || LH){ // input
    1f60:	a1 14       	cp	r10, r1
    1f62:	b1 04       	cpc	r11, r1
    1f64:	41 f0       	breq	.+16     	; 0x1f76 <LFSMpremove+0x5e>
			status = 1;
			for(i1 = 0; i1 < r->sizeeeprom; i1++){
    1f66:	fc 01       	movw	r30, r24
    1f68:	22 81       	ldd	r18, Z+2	; 0x02
    1f6a:	33 81       	ldd	r19, Z+3	; 0x03
    1f6c:	23 2b       	or	r18, r19
    1f6e:	41 f4       	brne	.+16     	; 0x1f80 <LFSMpremove+0x68>
    1f70:	44 24       	eor	r4, r4
    1f72:	43 94       	inc	r4
    1f74:	8d c0       	rjmp	.+282    	; 0x2090 <LFSMpremove+0x178>
	ptmp1->page = 0;
	uint16_t HL,LH;
	HL = LFSMhl(r->input, input);
	LH = LFSMlh(r->input, input);
	if(page > 0){ // filter
		if(HL || LH){ // input
    1f76:	81 14       	cp	r8, r1
    1f78:	91 04       	cpc	r9, r1
    1f7a:	a9 f7       	brne	.-22     	; 0x1f66 <LFSMpremove+0x4e>
// uint8_t LFSMpremove(struct lfsm *r, uint8_t input)
uint8_t LFSMpremove(struct lfsm *r, uint8_t input, uint8_t page)
{
	uint16_t k, k1, k2, i1;
	k = k1 = k2 = 0;
	uint8_t status = 0;
    1f7c:	41 2c       	mov	r4, r1
    1f7e:	88 c0       	rjmp	.+272    	; 0x2090 <LFSMpremove+0x178>
    1f80:	54 2e       	mov	r5, r20
    1f82:	7c 01       	movw	r14, r24
	HL = LFSMhl(r->input, input);
	LH = LFSMlh(r->input, input);
	if(page > 0){ // filter
		if(HL || LH){ // input
			status = 1;
			for(i1 = 0; i1 < r->sizeeeprom; i1++){
    1f84:	44 24       	eor	r4, r4
    1f86:	43 94       	inc	r4
    1f88:	c0 e0       	ldi	r28, 0x00	; 0
    1f8a:	d0 e0       	ldi	r29, 0x00	; 0
    1f8c:	61 2c       	mov	r6, r1
    1f8e:	71 2c       	mov	r7, r1
				r->eprom->read_block(pdata, (const void*)(i1 * sizeblock), sizeblock);
    1f90:	10 e0       	ldi	r17, 0x00	; 0
						i1 = r->sizeeeprom;
						status = 2; // Global logic exist
					}else if( (pdata->feedback & pdata->mask) == (r->output & pdata->mask) && pdata->inhl == HL && pdata->inlh == LH && pdata->page == page){
						k = i1;
						i1 = r->sizeeeprom;
						status = 3; // Local logic exist in present page
    1f92:	0f 2e       	mov	r0, r31
    1f94:	f3 e0       	ldi	r31, 0x03	; 3
    1f96:	3f 2e       	mov	r3, r31
    1f98:	f0 2d       	mov	r31, r0
				r->eprom->read_block(pdata, (const void*)(i1 * sizeblock), sizeblock);
				if(pdata->page == page){ // skip not desired
					if( pdata->inhl == HL && pdata->inlh == LH && page == 1){
						k = i1;
						i1 = r->sizeeeprom;
						status = 2; // Global logic exist
    1f9a:	68 94       	set
    1f9c:	22 24       	eor	r2, r2
    1f9e:	21 f8       	bld	r2, 1
	LH = LFSMlh(r->input, input);
	if(page > 0){ // filter
		if(HL || LH){ // input
			status = 1;
			for(i1 = 0; i1 < r->sizeeeprom; i1++){
				r->eprom->read_block(pdata, (const void*)(i1 * sizeblock), sizeblock);
    1fa0:	68 01       	movw	r12, r16
    1fa2:	0c 9f       	mul	r16, r28
    1fa4:	b0 01       	movw	r22, r0
    1fa6:	0d 9f       	mul	r16, r29
    1fa8:	70 0d       	add	r23, r0
    1faa:	1c 9f       	mul	r17, r28
    1fac:	70 0d       	add	r23, r0
    1fae:	11 24       	eor	r1, r1
    1fb0:	d7 01       	movw	r26, r14
    1fb2:	ed 91       	ld	r30, X+
    1fb4:	fc 91       	ld	r31, X
    1fb6:	00 8c       	ldd	r0, Z+24	; 0x18
    1fb8:	f1 8d       	ldd	r31, Z+25	; 0x19
    1fba:	e0 2d       	mov	r30, r0
    1fbc:	a8 01       	movw	r20, r16
    1fbe:	87 e8       	ldi	r24, 0x87	; 135
    1fc0:	93 e0       	ldi	r25, 0x03	; 3
    1fc2:	09 95       	icall
				if(pdata->page == page){ // skip not desired
    1fc4:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <data>
    1fc8:	58 12       	cpse	r5, r24
    1fca:	14 c0       	rjmp	.+40     	; 0x1ff4 <LFSMpremove+0xdc>
					if( pdata->inhl == HL && pdata->inlh == LH && page == 1){
    1fcc:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <data+0x3>
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	8a 15       	cp	r24, r10
    1fd4:	9b 05       	cpc	r25, r11
    1fd6:	71 f4       	brne	.+28     	; 0x1ff4 <LFSMpremove+0xdc>
    1fd8:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <data+0x4>
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	88 15       	cp	r24, r8
    1fe0:	99 05       	cpc	r25, r9
    1fe2:	41 f4       	brne	.+16     	; 0x1ff4 <LFSMpremove+0xdc>
    1fe4:	b1 e0       	ldi	r27, 0x01	; 1
    1fe6:	5b 12       	cpse	r5, r27
    1fe8:	41 c0       	rjmp	.+130    	; 0x206c <LFSMpremove+0x154>
						k = i1;
						i1 = r->sizeeeprom;
						status = 2; // Global logic exist
    1fea:	3e 01       	movw	r6, r28
			for(i1 = 0; i1 < r->sizeeeprom; i1++){
				r->eprom->read_block(pdata, (const void*)(i1 * sizeblock), sizeblock);
				if(pdata->page == page){ // skip not desired
					if( pdata->inhl == HL && pdata->inlh == LH && page == 1){
						k = i1;
						i1 = r->sizeeeprom;
    1fec:	f7 01       	movw	r30, r14
    1fee:	c2 81       	ldd	r28, Z+2	; 0x02
    1ff0:	d3 81       	ldd	r29, Z+3	; 0x03
						status = 2; // Global logic exist
    1ff2:	42 2c       	mov	r4, r2
	HL = LFSMhl(r->input, input);
	LH = LFSMlh(r->input, input);
	if(page > 0){ // filter
		if(HL || LH){ // input
			status = 1;
			for(i1 = 0; i1 < r->sizeeeprom; i1++){
    1ff4:	21 96       	adiw	r28, 0x01	; 1
    1ff6:	d7 01       	movw	r26, r14
    1ff8:	12 96       	adiw	r26, 0x02	; 2
    1ffa:	8d 91       	ld	r24, X+
    1ffc:	9c 91       	ld	r25, X
    1ffe:	13 97       	sbiw	r26, 0x03	; 3
    2000:	c8 17       	cp	r28, r24
    2002:	d9 07       	cpc	r29, r25
    2004:	68 f2       	brcs	.-102    	; 0x1fa0 <LFSMpremove+0x88>
				}
			}
		}
	}
	// status confirmation
	switch (status){
    2006:	b2 e0       	ldi	r27, 0x02	; 2
    2008:	4b 16       	cp	r4, r27
    200a:	21 f0       	breq	.+8      	; 0x2014 <LFSMpremove+0xfc>
    200c:	e3 e0       	ldi	r30, 0x03	; 3
    200e:	4e 16       	cp	r4, r30
    2010:	99 f0       	breq	.+38     	; 0x2038 <LFSMpremove+0x120>
    2012:	3e c0       	rjmp	.+124    	; 0x2090 <LFSMpremove+0x178>
		case 0: // No entry
		break;
		case 1: // Unknown entry
		break;
		case 2: // Global logic exist in present page
		r->eprom->update_block(ptmp1, (void*)(k * sizeblock), sizeblock);
    2014:	6c 9c       	mul	r6, r12
    2016:	b0 01       	movw	r22, r0
    2018:	6d 9c       	mul	r6, r13
    201a:	70 0d       	add	r23, r0
    201c:	7c 9c       	mul	r7, r12
    201e:	70 0d       	add	r23, r0
    2020:	11 24       	eor	r1, r1
    2022:	d7 01       	movw	r26, r14
    2024:	ed 91       	ld	r30, X+
    2026:	fc 91       	ld	r31, X
    2028:	04 8c       	ldd	r0, Z+28	; 0x1c
    202a:	f5 8d       	ldd	r31, Z+29	; 0x1d
    202c:	e0 2d       	mov	r30, r0
    202e:	a6 01       	movw	r20, r12
    2030:	82 e9       	ldi	r24, 0x92	; 146
    2032:	93 e0       	ldi	r25, 0x03	; 3
    2034:	09 95       	icall
		break;
    2036:	2c c0       	rjmp	.+88     	; 0x2090 <LFSMpremove+0x178>
		case 3: // Local logic exist in present page
		r->eprom->update_block(ptmp1, (void*)(k * sizeblock), sizeblock);
    2038:	6c 9c       	mul	r6, r12
    203a:	b0 01       	movw	r22, r0
    203c:	6d 9c       	mul	r6, r13
    203e:	70 0d       	add	r23, r0
    2040:	7c 9c       	mul	r7, r12
    2042:	70 0d       	add	r23, r0
    2044:	11 24       	eor	r1, r1
    2046:	d7 01       	movw	r26, r14
    2048:	ed 91       	ld	r30, X+
    204a:	fc 91       	ld	r31, X
    204c:	04 8c       	ldd	r0, Z+28	; 0x1c
    204e:	f5 8d       	ldd	r31, Z+29	; 0x1d
    2050:	e0 2d       	mov	r30, r0
    2052:	a6 01       	movw	r20, r12
    2054:	82 e9       	ldi	r24, 0x92	; 146
    2056:	93 e0       	ldi	r25, 0x03	; 3
    2058:	09 95       	icall
		break;
    205a:	1a c0       	rjmp	.+52     	; 0x2090 <LFSMpremove+0x178>
// uint8_t LFSMpremove(struct lfsm *r, uint8_t input)
uint8_t LFSMpremove(struct lfsm *r, uint8_t input, uint8_t page)
{
	uint16_t k, k1, k2, i1;
	k = k1 = k2 = 0;
	uint8_t status = 0;
    205c:	41 2c       	mov	r4, r1
		r->eprom->update_block(ptmp1, (void*)(k * sizeblock), sizeblock);
		break;
		default:
		break;
	}
	return status;
    205e:	18 c0       	rjmp	.+48     	; 0x2090 <LFSMpremove+0x178>
						k = i1;
						i1 = r->sizeeeprom;
						status = 2; // Global logic exist
					}else if( (pdata->feedback & pdata->mask) == (r->output & pdata->mask) && pdata->inhl == HL && pdata->inlh == LH && pdata->page == page){
						k = i1;
						i1 = r->sizeeeprom;
    2060:	3e 01       	movw	r6, r28
    2062:	f7 01       	movw	r30, r14
    2064:	c2 81       	ldd	r28, Z+2	; 0x02
    2066:	d3 81       	ldd	r29, Z+3	; 0x03
						status = 3; // Local logic exist in present page
    2068:	43 2c       	mov	r4, r3
    206a:	c4 cf       	rjmp	.-120    	; 0x1ff4 <LFSMpremove+0xdc>
				if(pdata->page == page){ // skip not desired
					if( pdata->inhl == HL && pdata->inlh == LH && page == 1){
						k = i1;
						i1 = r->sizeeeprom;
						status = 2; // Global logic exist
					}else if( (pdata->feedback & pdata->mask) == (r->output & pdata->mask) && pdata->inhl == HL && pdata->inlh == LH && pdata->page == page){
    206c:	e7 e8       	ldi	r30, 0x87	; 135
    206e:	f3 e0       	ldi	r31, 0x03	; 3
    2070:	21 81       	ldd	r18, Z+1	; 0x01
    2072:	32 81       	ldd	r19, Z+2	; 0x02
    2074:	d7 01       	movw	r26, r14
    2076:	17 96       	adiw	r26, 0x07	; 7
    2078:	8d 91       	ld	r24, X+
    207a:	9c 91       	ld	r25, X
    207c:	18 97       	sbiw	r26, 0x08	; 8
    207e:	28 27       	eor	r18, r24
    2080:	39 27       	eor	r19, r25
    2082:	85 81       	ldd	r24, Z+5	; 0x05
    2084:	96 81       	ldd	r25, Z+6	; 0x06
    2086:	82 23       	and	r24, r18
    2088:	93 23       	and	r25, r19
    208a:	89 2b       	or	r24, r25
    208c:	49 f3       	breq	.-46     	; 0x2060 <LFSMpremove+0x148>
    208e:	b2 cf       	rjmp	.-156    	; 0x1ff4 <LFSMpremove+0xdc>
		break;
		default:
		break;
	}
	return status;
}
    2090:	84 2d       	mov	r24, r4
    2092:	df 91       	pop	r29
    2094:	cf 91       	pop	r28
    2096:	1f 91       	pop	r17
    2098:	0f 91       	pop	r16
    209a:	ff 90       	pop	r15
    209c:	ef 90       	pop	r14
    209e:	df 90       	pop	r13
    20a0:	cf 90       	pop	r12
    20a2:	bf 90       	pop	r11
    20a4:	af 90       	pop	r10
    20a6:	9f 90       	pop	r9
    20a8:	8f 90       	pop	r8
    20aa:	7f 90       	pop	r7
    20ac:	6f 90       	pop	r6
    20ae:	5f 90       	pop	r5
    20b0:	4f 90       	pop	r4
    20b2:	3f 90       	pop	r3
    20b4:	2f 90       	pop	r2
    20b6:	08 95       	ret

000020b8 <LFSMremove>:
	}
	return programmed;
}
// uint8_t LFSMremove(struct lfsm *r, uint8_t input)
uint8_t LFSMremove(struct lfsm *r, uint8_t input)
{
    20b8:	2f 92       	push	r2
    20ba:	3f 92       	push	r3
    20bc:	4f 92       	push	r4
    20be:	5f 92       	push	r5
    20c0:	6f 92       	push	r6
    20c2:	7f 92       	push	r7
    20c4:	8f 92       	push	r8
    20c6:	9f 92       	push	r9
    20c8:	af 92       	push	r10
    20ca:	bf 92       	push	r11
    20cc:	cf 92       	push	r12
    20ce:	df 92       	push	r13
    20d0:	ef 92       	push	r14
    20d2:	ff 92       	push	r15
    20d4:	0f 93       	push	r16
    20d6:	1f 93       	push	r17
    20d8:	cf 93       	push	r28
    20da:	df 93       	push	r29
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
    20e0:	29 97       	sbiw	r28, 0x09	; 9
    20e2:	0f b6       	in	r0, 0x3f	; 63
    20e4:	f8 94       	cli
    20e6:	de bf       	out	0x3e, r29	; 62
    20e8:	0f be       	out	0x3f, r0	; 63
    20ea:	cd bf       	out	0x3d, r28	; 61
    20ec:	fc 01       	movw	r30, r24
	uint16_t k, k1, k2, i1;
	k = k1 = k2 = 0;
	uint8_t status = 0;
	uint8_t sizeblock = r->sizeblock;
    20ee:	84 81       	ldd	r24, Z+4	; 0x04
    20f0:	8f 83       	std	Y+7, r24	; 0x07
	struct lfsmdata* pdata = &data;
	struct lfsmdata* ptmp1 = &tmp1;
	ptmp1->page = 0;
    20f2:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <tmp1>
	int16_t n = 0;
	uint8_t n1 = NPAGES, n2 = NPAGES;
	uint8_t page = r->page;
	uint16_t HL, LH;
	HL = LFSMhl(r->input, input);
    20f6:	e6 80       	ldd	r14, Z+6	; 0x06
    20f8:	96 2f       	mov	r25, r22
    20fa:	9e 25       	eor	r25, r14
// uint16_t LFSMhl(uint16_t xi, uint16_t xf)
uint16_t LFSMhl(uint16_t xi, uint16_t xf)
{
	uint16_t i;
	i = xf ^ xi;
	i &= xi;
    20fc:	e9 22       	and	r14, r25
    20fe:	f1 2c       	mov	r15, r1
// uint16_t LFSMlh(uint16_t xi, uint16_t xf)***/
uint16_t LFSMlh(uint16_t xi, uint16_t xf)
{
	uint16_t i;
	i = xf ^ xi;
	i &= xf;
    2100:	96 23       	and	r25, r22
    2102:	a9 2e       	mov	r10, r25
    2104:	b1 2c       	mov	r11, r1
	uint8_t n1 = NPAGES, n2 = NPAGES;
	uint8_t page = r->page;
	uint16_t HL, LH;
	HL = LFSMhl(r->input, input);
	LH = LFSMlh(r->input, input);
	if(HL || LH){ // To not waste time
    2106:	e1 14       	cp	r14, r1
    2108:	f1 04       	cpc	r15, r1
    210a:	39 f0       	breq	.+14     	; 0x211a <LFSMremove+0x62>
		status = 1; // New entry
		for(i1 = 0; i1 < r->sizeeeprom; i1++){
    210c:	82 81       	ldd	r24, Z+2	; 0x02
    210e:	93 81       	ldd	r25, Z+3	; 0x03
    2110:	89 2b       	or	r24, r25
    2112:	41 f4       	brne	.+16     	; 0x2124 <LFSMremove+0x6c>
    2114:	91 e0       	ldi	r25, 0x01	; 1
    2116:	99 83       	std	Y+1, r25	; 0x01
    2118:	fe c0       	rjmp	.+508    	; 0x2316 <LFSMremove+0x25e>
	uint8_t n1 = NPAGES, n2 = NPAGES;
	uint8_t page = r->page;
	uint16_t HL, LH;
	HL = LFSMhl(r->input, input);
	LH = LFSMlh(r->input, input);
	if(HL || LH){ // To not waste time
    211a:	a1 14       	cp	r10, r1
    211c:	b1 04       	cpc	r11, r1
    211e:	b1 f7       	brne	.-20     	; 0x210c <LFSMremove+0x54>
// uint8_t LFSMremove(struct lfsm *r, uint8_t input)
uint8_t LFSMremove(struct lfsm *r, uint8_t input)
{
	uint16_t k, k1, k2, i1;
	k = k1 = k2 = 0;
	uint8_t status = 0;
    2120:	19 82       	std	Y+1, r1	; 0x01
    2122:	f9 c0       	rjmp	.+498    	; 0x2316 <LFSMremove+0x25e>
    2124:	8f 01       	movw	r16, r30
	struct lfsmdata* pdata = &data;
	struct lfsmdata* ptmp1 = &tmp1;
	ptmp1->page = 0;
	int16_t n = 0;
	uint8_t n1 = NPAGES, n2 = NPAGES;
	uint8_t page = r->page;
    2126:	55 80       	ldd	r5, Z+5	; 0x05
    2128:	44 24       	eor	r4, r4
    212a:	4a 94       	dec	r4
    212c:	af ef       	ldi	r26, 0xFF	; 255
    212e:	aa 83       	std	Y+2, r26	; 0x02
    2130:	b1 e0       	ldi	r27, 0x01	; 1
    2132:	b9 83       	std	Y+1, r27	; 0x01
    2134:	81 2c       	mov	r8, r1
    2136:	91 2c       	mov	r9, r1
    2138:	1e 82       	std	Y+6, r1	; 0x06
    213a:	1d 82       	std	Y+5, r1	; 0x05
    213c:	1c 82       	std	Y+4, r1	; 0x04
    213e:	1b 82       	std	Y+3, r1	; 0x03
    2140:	21 2c       	mov	r2, r1
    2142:	31 2c       	mov	r3, r1
	HL = LFSMhl(r->input, input);
	LH = LFSMlh(r->input, input);
	if(HL || LH){ // To not waste time
		status = 1; // New entry
		for(i1 = 0; i1 < r->sizeeeprom; i1++){
			r->eprom->read_block(pdata, (const void*)(i1 * sizeblock), sizeblock);
    2144:	ff 81       	ldd	r31, Y+7	; 0x07
    2146:	ef 2f       	mov	r30, r31
    2148:	f0 e0       	ldi	r31, 0x00	; 0
						status = 2; // Global logic exist
					}
				break;
				default: // Local logic
					if( (pdata->feedback & pdata->mask) == (r->output & pdata->mask) && pdata->inhl == HL && pdata->inlh == LH ){
						n = pdata->page - page;
    214a:	65 2c       	mov	r6, r5
    214c:	71 2c       	mov	r7, r1
				break;
				case 1: // Global logic
					if( pdata->inhl == HL && pdata->inlh == LH ){
						k = i1;
						i1 = r->sizeeeprom;
						status = 2; // Global logic exist
    214e:	f9 87       	std	Y+9, r31	; 0x09
    2150:	e8 87       	std	Y+8, r30	; 0x08
	HL = LFSMhl(r->input, input);
	LH = LFSMlh(r->input, input);
	if(HL || LH){ // To not waste time
		status = 1; // New entry
		for(i1 = 0; i1 < r->sizeeeprom; i1++){
			r->eprom->read_block(pdata, (const void*)(i1 * sizeblock), sizeblock);
    2152:	c8 84       	ldd	r12, Y+8	; 0x08
    2154:	d9 84       	ldd	r13, Y+9	; 0x09
    2156:	c8 9c       	mul	r12, r8
    2158:	b0 01       	movw	r22, r0
    215a:	c9 9c       	mul	r12, r9
    215c:	70 0d       	add	r23, r0
    215e:	d8 9c       	mul	r13, r8
    2160:	70 0d       	add	r23, r0
    2162:	11 24       	eor	r1, r1
    2164:	d8 01       	movw	r26, r16
    2166:	ed 91       	ld	r30, X+
    2168:	fc 91       	ld	r31, X
    216a:	00 8c       	ldd	r0, Z+24	; 0x18
    216c:	f1 8d       	ldd	r31, Z+25	; 0x19
    216e:	e0 2d       	mov	r30, r0
    2170:	a6 01       	movw	r20, r12
    2172:	87 e8       	ldi	r24, 0x87	; 135
    2174:	93 e0       	ldi	r25, 0x03	; 3
    2176:	09 95       	icall
			switch(pdata->page){
    2178:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <data>
    217c:	88 23       	and	r24, r24
    217e:	09 f4       	brne	.+2      	; 0x2182 <LFSMremove+0xca>
    2180:	61 c0       	rjmp	.+194    	; 0x2244 <LFSMremove+0x18c>
    2182:	81 30       	cpi	r24, 0x01	; 1
    2184:	a9 f4       	brne	.+42     	; 0x21b0 <LFSMremove+0xf8>
				case 0:
					// Do nothing, continue search in status=1.
				break;
				case 1: // Global logic
					if( pdata->inhl == HL && pdata->inlh == LH ){
    2186:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <data+0x3>
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	8e 15       	cp	r24, r14
    218e:	9f 05       	cpc	r25, r15
    2190:	09 f0       	breq	.+2      	; 0x2194 <LFSMremove+0xdc>
    2192:	58 c0       	rjmp	.+176    	; 0x2244 <LFSMremove+0x18c>
    2194:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <data+0x4>
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	8a 15       	cp	r24, r10
    219c:	9b 05       	cpc	r25, r11
    219e:	09 f0       	breq	.+2      	; 0x21a2 <LFSMremove+0xea>
    21a0:	51 c0       	rjmp	.+162    	; 0x2244 <LFSMremove+0x18c>
						k = i1;
						i1 = r->sizeeeprom;
    21a2:	14 01       	movw	r2, r8
    21a4:	f8 01       	movw	r30, r16
    21a6:	82 80       	ldd	r8, Z+2	; 0x02
    21a8:	93 80       	ldd	r9, Z+3	; 0x03
						status = 2; // Global logic exist
    21aa:	f2 e0       	ldi	r31, 0x02	; 2
    21ac:	f9 83       	std	Y+1, r31	; 0x01
    21ae:	4a c0       	rjmp	.+148    	; 0x2244 <LFSMremove+0x18c>
					}
				break;
				default: // Local logic
					if( (pdata->feedback & pdata->mask) == (r->output & pdata->mask) && pdata->inhl == HL && pdata->inlh == LH ){
    21b0:	e7 e8       	ldi	r30, 0x87	; 135
    21b2:	f3 e0       	ldi	r31, 0x03	; 3
    21b4:	41 81       	ldd	r20, Z+1	; 0x01
    21b6:	52 81       	ldd	r21, Z+2	; 0x02
    21b8:	d8 01       	movw	r26, r16
    21ba:	17 96       	adiw	r26, 0x07	; 7
    21bc:	2d 91       	ld	r18, X+
    21be:	3c 91       	ld	r19, X
    21c0:	18 97       	sbiw	r26, 0x08	; 8
    21c2:	24 27       	eor	r18, r20
    21c4:	35 27       	eor	r19, r21
    21c6:	45 81       	ldd	r20, Z+5	; 0x05
    21c8:	56 81       	ldd	r21, Z+6	; 0x06
    21ca:	24 23       	and	r18, r20
    21cc:	35 23       	and	r19, r21
    21ce:	23 2b       	or	r18, r19
    21d0:	c9 f5       	brne	.+114    	; 0x2244 <LFSMremove+0x18c>
    21d2:	20 91 8a 03 	lds	r18, 0x038A	; 0x80038a <data+0x3>
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	2e 15       	cp	r18, r14
    21da:	3f 05       	cpc	r19, r15
    21dc:	99 f5       	brne	.+102    	; 0x2244 <LFSMremove+0x18c>
    21de:	20 91 8b 03 	lds	r18, 0x038B	; 0x80038b <data+0x4>
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	2a 15       	cp	r18, r10
    21e6:	3b 05       	cpc	r19, r11
    21e8:	69 f5       	brne	.+90     	; 0x2244 <LFSMremove+0x18c>
						n = pdata->page - page;
    21ea:	28 2f       	mov	r18, r24
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	26 19       	sub	r18, r6
    21f0:	37 09       	sbc	r19, r7
						if(!n){
    21f2:	41 f4       	brne	.+16     	; 0x2204 <LFSMremove+0x14c>
							k = i1;
							i1 = r->sizeeeprom;
							status = 3; // Local logic exist in present page
							break;
    21f4:	14 01       	movw	r2, r8
				default: // Local logic
					if( (pdata->feedback & pdata->mask) == (r->output & pdata->mask) && pdata->inhl == HL && pdata->inlh == LH ){
						n = pdata->page - page;
						if(!n){
							k = i1;
							i1 = r->sizeeeprom;
    21f6:	12 96       	adiw	r26, 0x02	; 2
    21f8:	8d 90       	ld	r8, X+
    21fa:	9c 90       	ld	r9, X
    21fc:	13 97       	sbiw	r26, 0x03	; 3
							status = 3; // Local logic exist in present page
    21fe:	b3 e0       	ldi	r27, 0x03	; 3
    2200:	b9 83       	std	Y+1, r27	; 0x01
							break;
    2202:	20 c0       	rjmp	.+64     	; 0x2244 <LFSMremove+0x18c>
						}
						if(n > 0){
    2204:	12 16       	cp	r1, r18
    2206:	13 06       	cpc	r1, r19
    2208:	6c f4       	brge	.+26     	; 0x2224 <LFSMremove+0x16c>
							if(n < n1){
    220a:	ea 81       	ldd	r30, Y+2	; 0x02
    220c:	4e 2f       	mov	r20, r30
    220e:	50 e0       	ldi	r21, 0x00	; 0
    2210:	24 17       	cp	r18, r20
    2212:	35 07       	cpc	r19, r21
    2214:	3c f4       	brge	.+14     	; 0x2224 <LFSMremove+0x16c>
    2216:	f8 2f       	mov	r31, r24
    2218:	f5 19       	sub	r31, r5
    221a:	fa 83       	std	Y+2, r31	; 0x02
    221c:	9c 82       	std	Y+4, r9	; 0x04
    221e:	8b 82       	std	Y+3, r8	; 0x03
								k1 = i1;
								n1 = n;
								status = 4; // Local logic exist in page above
    2220:	94 e0       	ldi	r25, 0x04	; 4
    2222:	99 83       	std	Y+1, r25	; 0x01
							}
						}
						if(n < 0){
    2224:	33 23       	and	r19, r19
    2226:	74 f4       	brge	.+28     	; 0x2244 <LFSMremove+0x18c>
							if(n > -n2){
    2228:	44 2d       	mov	r20, r4
    222a:	50 e0       	ldi	r21, 0x00	; 0
    222c:	51 95       	neg	r21
    222e:	41 95       	neg	r20
    2230:	51 09       	sbc	r21, r1
    2232:	42 17       	cp	r20, r18
    2234:	53 07       	cpc	r21, r19
    2236:	34 f4       	brge	.+12     	; 0x2244 <LFSMremove+0x18c>
								k2 = i1;
								n2 = -n;
    2238:	45 2c       	mov	r4, r5
    223a:	48 1a       	sub	r4, r24
    223c:	9e 82       	std	Y+6, r9	; 0x06
    223e:	8d 82       	std	Y+5, r8	; 0x05
								status = 4; // Local logic exist in page bellow
    2240:	a4 e0       	ldi	r26, 0x04	; 4
    2242:	a9 83       	std	Y+1, r26	; 0x01
	uint16_t HL, LH;
	HL = LFSMhl(r->input, input);
	LH = LFSMlh(r->input, input);
	if(HL || LH){ // To not waste time
		status = 1; // New entry
		for(i1 = 0; i1 < r->sizeeeprom; i1++){
    2244:	bf ef       	ldi	r27, 0xFF	; 255
    2246:	8b 1a       	sub	r8, r27
    2248:	9b 0a       	sbc	r9, r27
    224a:	f8 01       	movw	r30, r16
    224c:	82 81       	ldd	r24, Z+2	; 0x02
    224e:	93 81       	ldd	r25, Z+3	; 0x03
    2250:	88 16       	cp	r8, r24
    2252:	99 06       	cpc	r9, r25
    2254:	08 f4       	brcc	.+2      	; 0x2258 <LFSMremove+0x1a0>
    2256:	7d cf       	rjmp	.-262    	; 0x2152 <LFSMremove+0x9a>
				break;
			}
		}
	}
	// status confirmation
	switch (status){
    2258:	f9 81       	ldd	r31, Y+1	; 0x01
    225a:	f3 30       	cpi	r31, 0x03	; 3
    225c:	b9 f0       	breq	.+46     	; 0x228c <LFSMremove+0x1d4>
    225e:	f4 30       	cpi	r31, 0x04	; 4
    2260:	39 f1       	breq	.+78     	; 0x22b0 <LFSMremove+0x1f8>
    2262:	f2 30       	cpi	r31, 0x02	; 2
    2264:	09 f0       	breq	.+2      	; 0x2268 <LFSMremove+0x1b0>
    2266:	57 c0       	rjmp	.+174    	; 0x2316 <LFSMremove+0x25e>
		case 0: // No entry
		break;
		case 1: // Unknown entry
		break;
		case 2: // Global logic exist
			r->eprom->update_block(ptmp1, (void*)(k * sizeblock), sizeblock);
    2268:	2c 9c       	mul	r2, r12
    226a:	b0 01       	movw	r22, r0
    226c:	2d 9c       	mul	r2, r13
    226e:	70 0d       	add	r23, r0
    2270:	3c 9c       	mul	r3, r12
    2272:	70 0d       	add	r23, r0
    2274:	11 24       	eor	r1, r1
    2276:	d8 01       	movw	r26, r16
    2278:	ed 91       	ld	r30, X+
    227a:	fc 91       	ld	r31, X
    227c:	04 8c       	ldd	r0, Z+28	; 0x1c
    227e:	f5 8d       	ldd	r31, Z+29	; 0x1d
    2280:	e0 2d       	mov	r30, r0
    2282:	a6 01       	movw	r20, r12
    2284:	82 e9       	ldi	r24, 0x92	; 146
    2286:	93 e0       	ldi	r25, 0x03	; 3
    2288:	09 95       	icall
		break;
    228a:	45 c0       	rjmp	.+138    	; 0x2316 <LFSMremove+0x25e>
		case 3: // Local logic exist in present page
			r->eprom->update_block(ptmp1, (void*)(k * sizeblock), sizeblock);
    228c:	2c 9c       	mul	r2, r12
    228e:	b0 01       	movw	r22, r0
    2290:	2d 9c       	mul	r2, r13
    2292:	70 0d       	add	r23, r0
    2294:	3c 9c       	mul	r3, r12
    2296:	70 0d       	add	r23, r0
    2298:	11 24       	eor	r1, r1
    229a:	d8 01       	movw	r26, r16
    229c:	ed 91       	ld	r30, X+
    229e:	fc 91       	ld	r31, X
    22a0:	04 8c       	ldd	r0, Z+28	; 0x1c
    22a2:	f5 8d       	ldd	r31, Z+29	; 0x1d
    22a4:	e0 2d       	mov	r30, r0
    22a6:	a6 01       	movw	r20, r12
    22a8:	82 e9       	ldi	r24, 0x92	; 146
    22aa:	93 e0       	ldi	r25, 0x03	; 3
    22ac:	09 95       	icall
		break;
    22ae:	33 c0       	rjmp	.+102    	; 0x2316 <LFSMremove+0x25e>
		case 4: // Local logic exist in page above versus local logic exist in page bellow
			// choose closest page above otherwise closest bellow.
			if(n1 > 0 && n1 < NPAGES){
    22b0:	8a 81       	ldd	r24, Y+2	; 0x02
    22b2:	81 50       	subi	r24, 0x01	; 1
    22b4:	8e 3f       	cpi	r24, 0xFE	; 254
    22b6:	b0 f4       	brcc	.+44     	; 0x22e4 <LFSMremove+0x22c>
				r->eprom->update_block(ptmp1, (void*)(k1 * sizeblock), sizeblock);
    22b8:	eb 81       	ldd	r30, Y+3	; 0x03
    22ba:	fc 81       	ldd	r31, Y+4	; 0x04
    22bc:	ec 9d       	mul	r30, r12
    22be:	b0 01       	movw	r22, r0
    22c0:	ed 9d       	mul	r30, r13
    22c2:	70 0d       	add	r23, r0
    22c4:	fc 9d       	mul	r31, r12
    22c6:	70 0d       	add	r23, r0
    22c8:	11 24       	eor	r1, r1
    22ca:	d8 01       	movw	r26, r16
    22cc:	ed 91       	ld	r30, X+
    22ce:	fc 91       	ld	r31, X
    22d0:	04 8c       	ldd	r0, Z+28	; 0x1c
    22d2:	f5 8d       	ldd	r31, Z+29	; 0x1d
    22d4:	e0 2d       	mov	r30, r0
    22d6:	a6 01       	movw	r20, r12
    22d8:	82 e9       	ldi	r24, 0x92	; 146
    22da:	93 e0       	ldi	r25, 0x03	; 3
    22dc:	09 95       	icall
				status = 41;
    22de:	b9 e2       	ldi	r27, 0x29	; 41
    22e0:	b9 83       	std	Y+1, r27	; 0x01
    22e2:	19 c0       	rjmp	.+50     	; 0x2316 <LFSMremove+0x25e>
			}
			else if(n2 > 0 && n2 < NPAGES){
    22e4:	8f ef       	ldi	r24, 0xFF	; 255
    22e6:	84 0d       	add	r24, r4
    22e8:	8e 3f       	cpi	r24, 0xFE	; 254
    22ea:	a8 f4       	brcc	.+42     	; 0x2316 <LFSMremove+0x25e>
				r->eprom->update_block(ptmp1, (void*)(k2 * sizeblock), sizeblock);
    22ec:	ed 81       	ldd	r30, Y+5	; 0x05
    22ee:	fe 81       	ldd	r31, Y+6	; 0x06
    22f0:	ec 9d       	mul	r30, r12
    22f2:	b0 01       	movw	r22, r0
    22f4:	ed 9d       	mul	r30, r13
    22f6:	70 0d       	add	r23, r0
    22f8:	fc 9d       	mul	r31, r12
    22fa:	70 0d       	add	r23, r0
    22fc:	11 24       	eor	r1, r1
    22fe:	d8 01       	movw	r26, r16
    2300:	ed 91       	ld	r30, X+
    2302:	fc 91       	ld	r31, X
    2304:	04 8c       	ldd	r0, Z+28	; 0x1c
    2306:	f5 8d       	ldd	r31, Z+29	; 0x1d
    2308:	e0 2d       	mov	r30, r0
    230a:	a6 01       	movw	r20, r12
    230c:	82 e9       	ldi	r24, 0x92	; 146
    230e:	93 e0       	ldi	r25, 0x03	; 3
    2310:	09 95       	icall
				status = 42;
    2312:	ba e2       	ldi	r27, 0x2A	; 42
    2314:	b9 83       	std	Y+1, r27	; 0x01
		break;
		default:
		break;
	}
	return status;
}
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	29 96       	adiw	r28, 0x09	; 9
    231a:	0f b6       	in	r0, 0x3f	; 63
    231c:	f8 94       	cli
    231e:	de bf       	out	0x3e, r29	; 62
    2320:	0f be       	out	0x3f, r0	; 63
    2322:	cd bf       	out	0x3d, r28	; 61
    2324:	df 91       	pop	r29
    2326:	cf 91       	pop	r28
    2328:	1f 91       	pop	r17
    232a:	0f 91       	pop	r16
    232c:	ff 90       	pop	r15
    232e:	ef 90       	pop	r14
    2330:	df 90       	pop	r13
    2332:	cf 90       	pop	r12
    2334:	bf 90       	pop	r11
    2336:	af 90       	pop	r10
    2338:	9f 90       	pop	r9
    233a:	8f 90       	pop	r8
    233c:	7f 90       	pop	r7
    233e:	6f 90       	pop	r6
    2340:	5f 90       	pop	r5
    2342:	4f 90       	pop	r4
    2344:	3f 90       	pop	r3
    2346:	2f 90       	pop	r2
    2348:	08 95       	ret

0000234a <LFSMlearn>:
	}
	return r->status;
}
// uint8_t LFSMlearn(struct lfsm *r, const uint8_t input, const uint16_t next, const uint16_t mask, const uint8_t page)
uint8_t LFSMlearn(struct lfsm *r, const uint8_t input, const uint16_t next, const uint16_t mask, const uint8_t page)
{
    234a:	2f 92       	push	r2
    234c:	3f 92       	push	r3
    234e:	4f 92       	push	r4
    2350:	5f 92       	push	r5
    2352:	6f 92       	push	r6
    2354:	7f 92       	push	r7
    2356:	8f 92       	push	r8
    2358:	9f 92       	push	r9
    235a:	af 92       	push	r10
    235c:	bf 92       	push	r11
    235e:	cf 92       	push	r12
    2360:	df 92       	push	r13
    2362:	ef 92       	push	r14
    2364:	ff 92       	push	r15
    2366:	0f 93       	push	r16
    2368:	1f 93       	push	r17
    236a:	cf 93       	push	r28
    236c:	df 93       	push	r29
    236e:	00 d0       	rcall	.+0      	; 0x2370 <LFSMlearn+0x26>
    2370:	1f 92       	push	r1
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
    2376:	49 01       	movw	r8, r18
	struct lfsmdata* pdata = &data;
	struct lfsmdata* ptmp1 = &tmp1;
	uint16_t HL, LH;
	HL = LFSMhl(r->input, input);
	LH = LFSMlh(r->input, input);
	if(page > 0){ // Enable
    2378:	00 23       	and	r16, r16
    237a:	09 f4       	brne	.+2      	; 0x237e <LFSMlearn+0x34>
    237c:	c2 c0       	rjmp	.+388    	; 0x2502 <LFSMlearn+0x1b8>
	uint8_t status = 0;
	uint8_t sizeblock = r->sizeblock;
	struct lfsmdata* pdata = &data;
	struct lfsmdata* ptmp1 = &tmp1;
	uint16_t HL, LH;
	HL = LFSMhl(r->input, input);
    237e:	dc 01       	movw	r26, r24
    2380:	16 96       	adiw	r26, 0x06	; 6
    2382:	1c 91       	ld	r17, X
    2384:	36 2f       	mov	r19, r22
    2386:	31 27       	eor	r19, r17
    2388:	13 23       	and	r17, r19
// uint16_t LFSMhl(uint16_t xi, uint16_t xf)
uint16_t LFSMhl(uint16_t xi, uint16_t xf)
{
	uint16_t i;
	i = xf ^ xi;
	i &= xi;
    238a:	61 2e       	mov	r6, r17
    238c:	71 2c       	mov	r7, r1
    238e:	63 23       	and	r22, r19
    2390:	69 83       	std	Y+1, r22	; 0x01
// uint16_t LFSMlh(uint16_t xi, uint16_t xf)***/
uint16_t LFSMlh(uint16_t xi, uint16_t xf)
{
	uint16_t i;
	i = xf ^ xi;
	i &= xf;
    2392:	26 2e       	mov	r2, r22
    2394:	31 2c       	mov	r3, r1
	struct lfsmdata* ptmp1 = &tmp1;
	uint16_t HL, LH;
	HL = LFSMhl(r->input, input);
	LH = LFSMlh(r->input, input);
	if(page > 0){ // Enable
		if(HL || LH){ // There is a change ?
    2396:	61 14       	cp	r6, r1
    2398:	71 04       	cpc	r7, r1
    239a:	39 f0       	breq	.+14     	; 0x23aa <LFSMlearn+0x60>
			for(i1 = 0; i1 < r->sizeeeprom; i1++){
    239c:	fc 01       	movw	r30, r24
    239e:	22 81       	ldd	r18, Z+2	; 0x02
    23a0:	33 81       	ldd	r19, Z+3	; 0x03
    23a2:	23 2b       	or	r18, r19
    23a4:	39 f4       	brne	.+14     	; 0x23b4 <LFSMlearn+0x6a>
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	c4 c0       	rjmp	.+392    	; 0x2532 <LFSMlearn+0x1e8>
	struct lfsmdata* ptmp1 = &tmp1;
	uint16_t HL, LH;
	HL = LFSMhl(r->input, input);
	LH = LFSMlh(r->input, input);
	if(page > 0){ // Enable
		if(HL || LH){ // There is a change ?
    23aa:	21 14       	cp	r2, r1
    23ac:	31 04       	cpc	r3, r1
    23ae:	b1 f7       	brne	.-20     	; 0x239c <LFSMlearn+0x52>
}
// uint8_t LFSMlearn(struct lfsm *r, const uint8_t input, const uint16_t next, const uint16_t mask, const uint8_t page)
uint8_t LFSMlearn(struct lfsm *r, const uint8_t input, const uint16_t next, const uint16_t mask, const uint8_t page)
{
	uint16_t i1;
	uint8_t status = 0;
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	bf c0       	rjmp	.+382    	; 0x2532 <LFSMlearn+0x1e8>
    23b4:	2a 01       	movw	r4, r20
    23b6:	9b 83       	std	Y+3, r25	; 0x03
    23b8:	8a 83       	std	Y+2, r24	; 0x02
    23ba:	e4 80       	ldd	r14, Z+4	; 0x04
    23bc:	f1 2c       	mov	r15, r1
	uint8_t sizeblock = r->sizeblock;
    23be:	c1 2c       	mov	r12, r1
    23c0:	d1 2c       	mov	r13, r1
    23c2:	a1 2c       	mov	r10, r1
    23c4:	b1 2c       	mov	r11, r1
	HL = LFSMhl(r->input, input);
	LH = LFSMlh(r->input, input);
	if(page > 0){ // Enable
		if(HL || LH){ // There is a change ?
			for(i1 = 0; i1 < r->sizeeeprom; i1++){
				r->eprom->read_block(pdata, (const void*)(i1 * sizeblock), sizeblock);
    23c6:	aa 81       	ldd	r26, Y+2	; 0x02
    23c8:	bb 81       	ldd	r27, Y+3	; 0x03
    23ca:	ed 91       	ld	r30, X+
    23cc:	fc 91       	ld	r31, X
    23ce:	00 8c       	ldd	r0, Z+24	; 0x18
    23d0:	f1 8d       	ldd	r31, Z+25	; 0x19
    23d2:	e0 2d       	mov	r30, r0
    23d4:	a7 01       	movw	r20, r14
    23d6:	b6 01       	movw	r22, r12
    23d8:	87 e8       	ldi	r24, 0x87	; 135
    23da:	93 e0       	ldi	r25, 0x03	; 3
    23dc:	09 95       	icall
				if(pdata->page){ // Find if it exists already
    23de:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <data>
    23e2:	88 23       	and	r24, r24
    23e4:	f9 f0       	breq	.+62     	; 0x2424 <LFSMlearn+0xda>
					if( (pdata->page == 1 && pdata->inhl == HL && pdata->inlh == LH)
    23e6:	81 30       	cpi	r24, 0x01	; 1
    23e8:	81 f0       	breq	.+32     	; 0x240a <LFSMlearn+0xc0>
					|| (pdata->page == page && (pdata->feedback & mask) == (r->output & mask) && pdata->inhl == HL && pdata->inlh == LH) ){
    23ea:	08 13       	cpse	r16, r24
    23ec:	1b c0       	rjmp	.+54     	; 0x2424 <LFSMlearn+0xda>
    23ee:	20 91 88 03 	lds	r18, 0x0388	; 0x800388 <data+0x1>
    23f2:	30 91 89 03 	lds	r19, 0x0389	; 0x800389 <data+0x2>
    23f6:	ea 81       	ldd	r30, Y+2	; 0x02
    23f8:	fb 81       	ldd	r31, Y+3	; 0x03
    23fa:	87 81       	ldd	r24, Z+7	; 0x07
    23fc:	90 85       	ldd	r25, Z+8	; 0x08
    23fe:	82 27       	eor	r24, r18
    2400:	93 27       	eor	r25, r19
    2402:	88 21       	and	r24, r8
    2404:	99 21       	and	r25, r9
    2406:	89 2b       	or	r24, r25
    2408:	69 f4       	brne	.+26     	; 0x2424 <LFSMlearn+0xda>
    240a:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <data+0x3>
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	86 15       	cp	r24, r6
    2412:	97 05       	cpc	r25, r7
    2414:	39 f4       	brne	.+14     	; 0x2424 <LFSMlearn+0xda>
    2416:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <data+0x4>
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	82 15       	cp	r24, r2
    241e:	93 05       	cpc	r25, r3
    2420:	09 f4       	brne	.+2      	; 0x2424 <LFSMlearn+0xda>
    2422:	71 c0       	rjmp	.+226    	; 0x2506 <LFSMlearn+0x1bc>
	uint16_t HL, LH;
	HL = LFSMhl(r->input, input);
	LH = LFSMlh(r->input, input);
	if(page > 0){ // Enable
		if(HL || LH){ // There is a change ?
			for(i1 = 0; i1 < r->sizeeeprom; i1++){
    2424:	ff ef       	ldi	r31, 0xFF	; 255
    2426:	af 1a       	sub	r10, r31
    2428:	bf 0a       	sbc	r11, r31
    242a:	ce 0c       	add	r12, r14
    242c:	df 1c       	adc	r13, r15
    242e:	aa 81       	ldd	r26, Y+2	; 0x02
    2430:	bb 81       	ldd	r27, Y+3	; 0x03
    2432:	12 96       	adiw	r26, 0x02	; 2
    2434:	8d 91       	ld	r24, X+
    2436:	9c 91       	ld	r25, X
    2438:	13 97       	sbiw	r26, 0x03	; 3
    243a:	a8 16       	cp	r10, r24
    243c:	b9 06       	cpc	r11, r25
    243e:	18 f2       	brcs	.-122    	; 0x23c6 <LFSMlearn+0x7c>
    2440:	64 c0       	rjmp	.+200    	; 0x250a <LFSMlearn+0x1c0>
			ptmp1->feedback = r->output;
			ptmp1->inhl = HL;
			ptmp1->inlh = LH;
			ptmp1->mask = mask;
			if(page > 1){ // Local logic
				ptmp1->outhl = LFSMhl(r->output, next) & mask;
    2442:	e2 e9       	ldi	r30, 0x92	; 146
    2444:	f3 e0       	ldi	r31, 0x03	; 3
    2446:	c9 01       	movw	r24, r18
    2448:	84 25       	eor	r24, r4
    244a:	95 25       	eor	r25, r5
    244c:	88 21       	and	r24, r8
    244e:	99 21       	and	r25, r9
    2450:	82 23       	and	r24, r18
    2452:	93 23       	and	r25, r19
    2454:	90 87       	std	Z+8, r25	; 0x08
    2456:	87 83       	std	Z+7, r24	; 0x07
				ptmp1->outlh = LFSMlh(r->output, next) & mask;
    2458:	aa 81       	ldd	r26, Y+2	; 0x02
    245a:	bb 81       	ldd	r27, Y+3	; 0x03
    245c:	17 96       	adiw	r26, 0x07	; 7
    245e:	2d 91       	ld	r18, X+
    2460:	3c 91       	ld	r19, X
    2462:	18 97       	sbiw	r26, 0x08	; 8
    2464:	24 25       	eor	r18, r4
    2466:	35 25       	eor	r19, r5
    2468:	82 22       	and	r8, r18
    246a:	93 22       	and	r9, r19
    246c:	48 20       	and	r4, r8
    246e:	59 20       	and	r5, r9
    2470:	52 86       	std	Z+10, r5	; 0x0a
    2472:	41 86       	std	Z+9, r4	; 0x09
    2474:	0d c0       	rjmp	.+26     	; 0x2490 <LFSMlearn+0x146>
			}else{ // Global logic
				ptmp1->outhl = LFSMhl(BYTEH, next) & mask;
    2476:	e2 e9       	ldi	r30, 0x92	; 146
    2478:	f3 e0       	ldi	r31, 0x03	; 3
    247a:	c2 01       	movw	r24, r4
    247c:	80 95       	com	r24
    247e:	90 95       	com	r25
    2480:	88 21       	and	r24, r8
    2482:	99 21       	and	r25, r9
    2484:	90 87       	std	Z+8, r25	; 0x08
    2486:	87 83       	std	Z+7, r24	; 0x07
				ptmp1->outlh = LFSMlh(BYTEL, next) & mask;
    2488:	84 20       	and	r8, r4
    248a:	95 20       	and	r9, r5
    248c:	92 86       	std	Z+10, r9	; 0x0a
    248e:	81 86       	std	Z+9, r8	; 0x09
			}
			for(i1 = 0; i1 < r->sizeeeprom; i1++){ // upload to free space in memory
    2490:	ea 81       	ldd	r30, Y+2	; 0x02
    2492:	fb 81       	ldd	r31, Y+3	; 0x03
    2494:	82 81       	ldd	r24, Z+2	; 0x02
    2496:	93 81       	ldd	r25, Z+3	; 0x03
    2498:	89 2b       	or	r24, r25
    249a:	89 f1       	breq	.+98     	; 0x24fe <LFSMlearn+0x1b4>
    249c:	00 e0       	ldi	r16, 0x00	; 0
    249e:	10 e0       	ldi	r17, 0x00	; 0
    24a0:	c1 2c       	mov	r12, r1
    24a2:	d1 2c       	mov	r13, r1
				r->eprom->read_block(pdata, (const void*)(i1 * sizeblock), sizeblock);
    24a4:	aa 81       	ldd	r26, Y+2	; 0x02
    24a6:	bb 81       	ldd	r27, Y+3	; 0x03
    24a8:	ed 91       	ld	r30, X+
    24aa:	fc 91       	ld	r31, X
    24ac:	00 8c       	ldd	r0, Z+24	; 0x18
    24ae:	f1 8d       	ldd	r31, Z+25	; 0x19
    24b0:	e0 2d       	mov	r30, r0
    24b2:	a7 01       	movw	r20, r14
    24b4:	b8 01       	movw	r22, r16
    24b6:	87 e8       	ldi	r24, 0x87	; 135
    24b8:	93 e0       	ldi	r25, 0x03	; 3
    24ba:	09 95       	icall
				if(pdata->page == 0){
    24bc:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <data>
    24c0:	81 11       	cpse	r24, r1
    24c2:	0f c0       	rjmp	.+30     	; 0x24e2 <LFSMlearn+0x198>
					r->eprom->update_block(ptmp1, (void*)(i1 * sizeblock), sizeblock);
    24c4:	aa 81       	ldd	r26, Y+2	; 0x02
    24c6:	bb 81       	ldd	r27, Y+3	; 0x03
    24c8:	ed 91       	ld	r30, X+
    24ca:	fc 91       	ld	r31, X
    24cc:	04 8c       	ldd	r0, Z+28	; 0x1c
    24ce:	f5 8d       	ldd	r31, Z+29	; 0x1d
    24d0:	e0 2d       	mov	r30, r0
    24d2:	a7 01       	movw	r20, r14
    24d4:	60 2f       	mov	r22, r16
    24d6:	71 2f       	mov	r23, r17
    24d8:	82 e9       	ldi	r24, 0x92	; 146
    24da:	93 e0       	ldi	r25, 0x03	; 3
    24dc:	09 95       	icall
					status = 2; // Uploaded to eeprom
    24de:	82 e0       	ldi	r24, 0x02	; 2
					break;
    24e0:	28 c0       	rjmp	.+80     	; 0x2532 <LFSMlearn+0x1e8>
				ptmp1->outlh = LFSMlh(r->output, next) & mask;
			}else{ // Global logic
				ptmp1->outhl = LFSMhl(BYTEH, next) & mask;
				ptmp1->outlh = LFSMlh(BYTEL, next) & mask;
			}
			for(i1 = 0; i1 < r->sizeeeprom; i1++){ // upload to free space in memory
    24e2:	bf ef       	ldi	r27, 0xFF	; 255
    24e4:	cb 1a       	sub	r12, r27
    24e6:	db 0a       	sbc	r13, r27
    24e8:	0e 0d       	add	r16, r14
    24ea:	1f 1d       	adc	r17, r15
    24ec:	ea 81       	ldd	r30, Y+2	; 0x02
    24ee:	fb 81       	ldd	r31, Y+3	; 0x03
    24f0:	82 81       	ldd	r24, Z+2	; 0x02
    24f2:	93 81       	ldd	r25, Z+3	; 0x03
    24f4:	c8 16       	cp	r12, r24
    24f6:	d9 06       	cpc	r13, r25
    24f8:	a8 f2       	brcs	.-86     	; 0x24a4 <LFSMlearn+0x15a>
				if(pdata->page == 0){
					r->eprom->update_block(ptmp1, (void*)(i1 * sizeblock), sizeblock);
					status = 2; // Uploaded to eeprom
					break;
				}
				status = 3; // Memory full
    24fa:	83 e0       	ldi	r24, 0x03	; 3
    24fc:	1a c0       	rjmp	.+52     	; 0x2532 <LFSMlearn+0x1e8>
				ptmp1->outlh = LFSMlh(r->output, next) & mask;
			}else{ // Global logic
				ptmp1->outhl = LFSMhl(BYTEH, next) & mask;
				ptmp1->outlh = LFSMlh(BYTEL, next) & mask;
			}
			for(i1 = 0; i1 < r->sizeeeprom; i1++){ // upload to free space in memory
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	18 c0       	rjmp	.+48     	; 0x2532 <LFSMlearn+0x1e8>
}
// uint8_t LFSMlearn(struct lfsm *r, const uint8_t input, const uint16_t next, const uint16_t mask, const uint8_t page)
uint8_t LFSMlearn(struct lfsm *r, const uint8_t input, const uint16_t next, const uint16_t mask, const uint8_t page)
{
	uint16_t i1;
	uint8_t status = 0;
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	16 c0       	rjmp	.+44     	; 0x2532 <LFSMlearn+0x1e8>
			for(i1 = 0; i1 < r->sizeeeprom; i1++){
				r->eprom->read_block(pdata, (const void*)(i1 * sizeblock), sizeblock);
				if(pdata->page){ // Find if it exists already
					if( (pdata->page == 1 && pdata->inhl == HL && pdata->inlh == LH)
					|| (pdata->page == page && (pdata->feedback & mask) == (r->output & mask) && pdata->inhl == HL && pdata->inlh == LH) ){
						status = 4; // Already exists
    2506:	84 e0       	ldi	r24, 0x04	; 4
		case 4: // Already exists
		break;
		default:
		break;
	}// End switch
	return status;
    2508:	14 c0       	rjmp	.+40     	; 0x2532 <LFSMlearn+0x1e8>
	}
	switch (status){
		case 0: // Not enabled
		break;
		case 1: // Record new entry
			ptmp1->page = page;
    250a:	e2 e9       	ldi	r30, 0x92	; 146
    250c:	f3 e0       	ldi	r31, 0x03	; 3
    250e:	00 83       	st	Z, r16
			ptmp1->feedback = r->output;
    2510:	aa 81       	ldd	r26, Y+2	; 0x02
    2512:	bb 81       	ldd	r27, Y+3	; 0x03
    2514:	17 96       	adiw	r26, 0x07	; 7
    2516:	2d 91       	ld	r18, X+
    2518:	3c 91       	ld	r19, X
    251a:	18 97       	sbiw	r26, 0x08	; 8
    251c:	32 83       	std	Z+2, r19	; 0x02
    251e:	21 83       	std	Z+1, r18	; 0x01
			ptmp1->inhl = HL;
    2520:	13 83       	std	Z+3, r17	; 0x03
			ptmp1->inlh = LH;
    2522:	b9 81       	ldd	r27, Y+1	; 0x01
    2524:	b4 83       	std	Z+4, r27	; 0x04
			ptmp1->mask = mask;
    2526:	96 82       	std	Z+6, r9	; 0x06
    2528:	85 82       	std	Z+5, r8	; 0x05
			if(page > 1){ // Local logic
    252a:	02 30       	cpi	r16, 0x02	; 2
    252c:	08 f0       	brcs	.+2      	; 0x2530 <LFSMlearn+0x1e6>
    252e:	89 cf       	rjmp	.-238    	; 0x2442 <LFSMlearn+0xf8>
    2530:	a2 cf       	rjmp	.-188    	; 0x2476 <LFSMlearn+0x12c>
		break;
		default:
		break;
	}// End switch
	return status;
}
    2532:	0f 90       	pop	r0
    2534:	0f 90       	pop	r0
    2536:	0f 90       	pop	r0
    2538:	df 91       	pop	r29
    253a:	cf 91       	pop	r28
    253c:	1f 91       	pop	r17
    253e:	0f 91       	pop	r16
    2540:	ff 90       	pop	r15
    2542:	ef 90       	pop	r14
    2544:	df 90       	pop	r13
    2546:	cf 90       	pop	r12
    2548:	bf 90       	pop	r11
    254a:	af 90       	pop	r10
    254c:	9f 90       	pop	r9
    254e:	8f 90       	pop	r8
    2550:	7f 90       	pop	r7
    2552:	6f 90       	pop	r6
    2554:	5f 90       	pop	r5
    2556:	4f 90       	pop	r4
    2558:	3f 90       	pop	r3
    255a:	2f 90       	pop	r2
    255c:	08 95       	ret

0000255e <LFSMenable>:
uint16_t LFSMoutputcalc(uint16_t feedback, uint16_t hl, uint16_t lh, uint16_t mask);

/*** Procedure & Function ***/
// LFSM LFSMenable(EEPROM* eeprom, const uint16_t sizeeeprom)
LFSM LFSMenable(EEPROM* eeprom, const uint16_t sizeeeprom)
{
    255e:	fc 01       	movw	r30, r24
	r.getoutput = LFSMgetoutput;
	r.getstatus = LFSMgetstatus;
	r.setoutput = LFSMsetoutput;
	r.getpage = LFSMgetpage;
	r.setpage = LFSMsetpage;
	return r;
    2560:	71 83       	std	Z+1, r23	; 0x01
    2562:	60 83       	st	Z, r22
    2564:	53 83       	std	Z+3, r21	; 0x03
    2566:	42 83       	std	Z+2, r20	; 0x02
    2568:	8b e0       	ldi	r24, 0x0B	; 11
    256a:	84 83       	std	Z+4, r24	; 0x04
    256c:	15 82       	std	Z+5, r1	; 0x05
    256e:	10 86       	std	Z+8, r1	; 0x08
    2570:	17 82       	std	Z+7, r1	; 0x07
    2572:	83 e0       	ldi	r24, 0x03	; 3
    2574:	9e e0       	ldi	r25, 0x0E	; 14
    2576:	93 87       	std	Z+11, r25	; 0x0b
    2578:	82 87       	std	Z+10, r24	; 0x0a
    257a:	85 ea       	ldi	r24, 0xA5	; 165
    257c:	91 e1       	ldi	r25, 0x11	; 17
    257e:	95 87       	std	Z+13, r25	; 0x0d
    2580:	84 87       	std	Z+12, r24	; 0x0c
    2582:	82 e5       	ldi	r24, 0x52	; 82
    2584:	9d e0       	ldi	r25, 0x0D	; 13
    2586:	97 87       	std	Z+15, r25	; 0x0f
    2588:	86 87       	std	Z+14, r24	; 0x0e
    258a:	8c e5       	ldi	r24, 0x5C	; 92
    258c:	90 e1       	ldi	r25, 0x10	; 16
    258e:	91 8b       	std	Z+17, r25	; 0x11
    2590:	80 8b       	std	Z+16, r24	; 0x10
    2592:	8c e8       	ldi	r24, 0x8C	; 140
    2594:	9f e0       	ldi	r25, 0x0F	; 15
    2596:	93 8b       	std	Z+19, r25	; 0x13
    2598:	82 8b       	std	Z+18, r24	; 0x12
    259a:	88 e9       	ldi	r24, 0x98	; 152
    259c:	9d e0       	ldi	r25, 0x0D	; 13
    259e:	95 8b       	std	Z+21, r25	; 0x15
    25a0:	84 8b       	std	Z+20, r24	; 0x14
    25a2:	81 ef       	ldi	r24, 0xF1	; 241
    25a4:	9d e0       	ldi	r25, 0x0D	; 13
    25a6:	97 8b       	std	Z+23, r25	; 0x17
    25a8:	86 8b       	std	Z+22, r24	; 0x16
    25aa:	85 ef       	ldi	r24, 0xF5	; 245
    25ac:	9d e0       	ldi	r25, 0x0D	; 13
    25ae:	91 8f       	std	Z+25, r25	; 0x19
    25b0:	80 8f       	std	Z+24, r24	; 0x18
    25b2:	88 ef       	ldi	r24, 0xF8	; 248
    25b4:	9d e0       	ldi	r25, 0x0D	; 13
    25b6:	93 8f       	std	Z+27, r25	; 0x1b
    25b8:	82 8f       	std	Z+26, r24	; 0x1a
    25ba:	8d ef       	ldi	r24, 0xFD	; 253
    25bc:	9d e0       	ldi	r25, 0x0D	; 13
    25be:	95 8f       	std	Z+29, r25	; 0x1d
    25c0:	84 8f       	std	Z+28, r24	; 0x1c
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	9e e0       	ldi	r25, 0x0E	; 14
    25c6:	97 8f       	std	Z+31, r25	; 0x1f
    25c8:	86 8f       	std	Z+30, r24	; 0x1e
}
    25ca:	cf 01       	movw	r24, r30
    25cc:	08 95       	ret

000025ce <PORTINIT>:
	}
}
/***Procedure & Function***/
void PORTINIT(void)
{
	DDRB=0X00; // Buttons
    25ce:	17 ba       	out	0x17, r1	; 23
	PORTB=0XFF; // Buttons PULLUP
    25d0:	8f ef       	ldi	r24, 0xFF	; 255
    25d2:	88 bb       	out	0x18, r24	; 24
	DDRC=0XFF; // Led
    25d4:	84 bb       	out	0x14, r24	; 20
	PORTC=0X00; // Led OFF
    25d6:	15 ba       	out	0x15, r1	; 21
    25d8:	08 95       	ret

000025da <main>:
char* string=NULL;
/***Header***/
void PORTINIT(void);
/***MAIN***MAIN***/
int main(void)
{
    25da:	cf 93       	push	r28
    25dc:	df 93       	push	r29
    25de:	cd b7       	in	r28, 0x3d	; 61
    25e0:	de b7       	in	r29, 0x3e	; 62
    25e2:	c6 5b       	subi	r28, 0xB6	; 182
    25e4:	d1 09       	sbc	r29, r1
    25e6:	0f b6       	in	r0, 0x3f	; 63
    25e8:	f8 94       	cli
    25ea:	de bf       	out	0x3e, r29	; 62
    25ec:	0f be       	out	0x3f, r0	; 63
    25ee:	cd bf       	out	0x3d, r28	; 61
	PORTINIT();
    25f0:	ee df       	rcall	.-36     	; 0x25ce <PORTINIT>
	keypadata keypadinput;
	uint16_t output=0;
	uint16_t mask=0;
	uint8_t page=0;
	uint16_t n;
	KEYPAD keypad = KEYPADenable(&DDRE,&PINE,&PORTE);
    25f2:	43 e2       	ldi	r20, 0x23	; 35
    25f4:	50 e0       	ldi	r21, 0x00	; 0
    25f6:	61 e2       	ldi	r22, 0x21	; 33
    25f8:	70 e0       	ldi	r23, 0x00	; 0
    25fa:	82 e2       	ldi	r24, 0x22	; 34
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	0e 94 3d 0a 	call	0x147a	; 0x147a <KEYPADenable>
    2602:	2e 83       	std	Y+6, r18	; 0x06
    2604:	3f 83       	std	Y+7, r19	; 0x07
    2606:	48 87       	std	Y+8, r20	; 0x08
    2608:	59 87       	std	Y+9, r21	; 0x09
    260a:	6a 87       	std	Y+10, r22	; 0x0a
    260c:	7b 87       	std	Y+11, r23	; 0x0b
    260e:	8c 87       	std	Y+12, r24	; 0x0c
    2610:	9d 87       	std	Y+13, r25	; 0x0d
    2612:	6c 84       	ldd	r6, Y+12	; 0x0c
    2614:	7d 84       	ldd	r7, Y+13	; 0x0d
	LCD0 lcd = LCD0enable(&DDRA,&PINA,&PORTA);
    2616:	2b e3       	ldi	r18, 0x3B	; 59
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	49 e3       	ldi	r20, 0x39	; 57
    261c:	50 e0       	ldi	r21, 0x00	; 0
    261e:	6a e3       	ldi	r22, 0x3A	; 58
    2620:	70 e0       	ldi	r23, 0x00	; 0
    2622:	ce 01       	movw	r24, r28
    2624:	0e 96       	adiw	r24, 0x0e	; 14
    2626:	d4 d9       	rcall	.-3160   	; 0x19d0 <LCD0enable>
    2628:	88 8d       	ldd	r24, Y+24	; 0x18
    262a:	99 8d       	ldd	r25, Y+25	; 0x19
    262c:	c4 55       	subi	r28, 0x54	; 84
    262e:	df 4f       	sbci	r29, 0xFF	; 255
    2630:	99 83       	std	Y+1, r25	; 0x01
    2632:	88 83       	st	Y, r24
    2634:	cc 5a       	subi	r28, 0xAC	; 172
    2636:	d0 40       	sbci	r29, 0x00	; 0
    2638:	ea 8c       	ldd	r14, Y+26	; 0x1a
    263a:	fb 8c       	ldd	r15, Y+27	; 0x1b
    263c:	ec 8d       	ldd	r30, Y+28	; 0x1c
    263e:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2640:	c6 55       	subi	r28, 0x56	; 86
    2642:	df 4f       	sbci	r29, 0xFF	; 255
    2644:	f9 83       	std	Y+1, r31	; 0x01
    2646:	e8 83       	st	Y, r30
    2648:	ca 5a       	subi	r28, 0xAA	; 170
    264a:	d0 40       	sbci	r29, 0x00	; 0
    264c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    264e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2650:	cb 54       	subi	r28, 0x4B	; 75
    2652:	df 4f       	sbci	r29, 0xFF	; 255
    2654:	99 83       	std	Y+1, r25	; 0x01
    2656:	88 83       	st	Y, r24
    2658:	c5 5b       	subi	r28, 0xB5	; 181
    265a:	d0 40       	sbci	r29, 0x00	; 0
    265c:	c8 a0       	ldd	r12, Y+32	; 0x20
    265e:	d9 a0       	ldd	r13, Y+33	; 0x21
	EEPROM eeprom = EEPROMenable();
    2660:	ce 01       	movw	r24, r28
    2662:	84 96       	adiw	r24, 0x24	; 36
    2664:	0e 94 1c 02 	call	0x438	; 0x438 <EEPROMenable>
	LFSM lfsm = LFSMenable(&eeprom,363);
    2668:	4b e6       	ldi	r20, 0x6B	; 107
    266a:	51 e0       	ldi	r21, 0x01	; 1
    266c:	be 01       	movw	r22, r28
    266e:	6c 5d       	subi	r22, 0xDC	; 220
    2670:	7f 4f       	sbci	r23, 0xFF	; 255
    2672:	ce 01       	movw	r24, r28
    2674:	8e 5b       	subi	r24, 0xBE	; 190
    2676:	9f 4f       	sbci	r25, 0xFF	; 255
    2678:	72 df       	rcall	.-284    	; 0x255e <LFSMenable>
	FUNC func = FUNCenable();
    267a:	ce 01       	movw	r24, r28
    267c:	8e 59       	subi	r24, 0x9E	; 158
    267e:	9f 4f       	sbci	r25, 0xFF	; 255
    2680:	0e 94 f6 06 	call	0xdec	; 0xdec <FUNCenable>
    2684:	e4 96       	adiw	r28, 0x34	; 52
    2686:	ae ac       	ldd	r10, Y+62	; 0x3e
    2688:	bf ac       	ldd	r11, Y+63	; 0x3f
    268a:	e4 97       	sbiw	r28, 0x34	; 52
    268c:	ee 96       	adiw	r28, 0x3e	; 62
    268e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2690:	ff ad       	ldd	r31, Y+63	; 0x3f
    2692:	ee 97       	sbiw	r28, 0x3e	; 62
    2694:	c2 55       	subi	r28, 0x52	; 82
    2696:	df 4f       	sbci	r29, 0xFF	; 255
    2698:	f9 83       	std	Y+1, r31	; 0x01
    269a:	e8 83       	st	Y, r30
    269c:	ce 5a       	subi	r28, 0xAE	; 174
    269e:	d0 40       	sbci	r29, 0x00	; 0
	//HC595 shift = HC595enable(&DDRG,&PORTG,2,0,1);
	/*****************************************************/
	lfsm.setoutput(&lfsm,0);
    26a0:	6e 96       	adiw	r28, 0x1e	; 30
    26a2:	ee ad       	ldd	r30, Y+62	; 0x3e
    26a4:	ff ad       	ldd	r31, Y+63	; 0x3f
    26a6:	6e 97       	sbiw	r28, 0x1e	; 30
    26a8:	60 e0       	ldi	r22, 0x00	; 0
    26aa:	70 e0       	ldi	r23, 0x00	; 0
    26ac:	ce 01       	movw	r24, r28
    26ae:	8e 5b       	subi	r24, 0xBE	; 190
    26b0:	9f 4f       	sbci	r25, 0xFF	; 255
    26b2:	09 95       	icall
	PORTINIT();
	uint8_t option=0; //Menu Jumper
	uint8_t input_tmp=0;
	keypadata keypadinput;
	uint16_t output=0;
	uint16_t mask=0;
    26b4:	cd 54       	subi	r28, 0x4D	; 77
    26b6:	df 4f       	sbci	r29, 0xFF	; 255
    26b8:	19 82       	std	Y+1, r1	; 0x01
    26ba:	18 82       	st	Y, r1
    26bc:	c3 5b       	subi	r28, 0xB3	; 179
    26be:	d0 40       	sbci	r29, 0x00	; 0
{
	PORTINIT();
	uint8_t option=0; //Menu Jumper
	uint8_t input_tmp=0;
	keypadata keypadinput;
	uint16_t output=0;
    26c0:	cf 54       	subi	r28, 0x4F	; 79
    26c2:	df 4f       	sbci	r29, 0xFF	; 255
    26c4:	19 82       	std	Y+1, r1	; 0x01
    26c6:	18 82       	st	Y, r1
    26c8:	c1 5b       	subi	r28, 0xB1	; 177
    26ca:	d0 40       	sbci	r29, 0x00	; 0
/***MAIN***MAIN***/
int main(void)
{
	PORTINIT();
	uint8_t option=0; //Menu Jumper
	uint8_t input_tmp=0;
    26cc:	c0 55       	subi	r28, 0x50	; 80
    26ce:	df 4f       	sbci	r29, 0xFF	; 255
    26d0:	18 82       	st	Y, r1
    26d2:	c0 5b       	subi	r28, 0xB0	; 176
    26d4:	d0 40       	sbci	r29, 0x00	; 0
void PORTINIT(void);
/***MAIN***MAIN***/
int main(void)
{
	PORTINIT();
	uint8_t option=0; //Menu Jumper
    26d6:	31 2c       	mov	r3, r1
					keypad.flush();
					option=0;
				}//End if
				if(keypadinput.character == 'C'){ // Repeat Remove Data Entry
					keypad.flush();
					option=8;
    26d8:	68 94       	set
    26da:	22 24       	eor	r2, r2
    26dc:	23 f8       	bld	r2, 3
	lfsm.setoutput(&lfsm,0);
	/*********Replace with your application code**********/
	while (True)
	{
		/***Preamble***/
		lcd.reboot();
    26de:	ea a1       	ldd	r30, Y+34	; 0x22
    26e0:	fb a1       	ldd	r31, Y+35	; 0x23
    26e2:	09 95       	icall
		keypad.read();
    26e4:	e8 85       	ldd	r30, Y+8	; 0x08
    26e6:	f9 85       	ldd	r31, Y+9	; 0x09
    26e8:	09 95       	icall
		/******Readings******/
		keypadinput = keypad.data();
    26ea:	ea 85       	ldd	r30, Y+10	; 0x0a
    26ec:	fb 85       	ldd	r31, Y+11	; 0x0b
    26ee:	09 95       	icall
    26f0:	29 83       	std	Y+1, r18	; 0x01
    26f2:	3a 83       	std	Y+2, r19	; 0x02
    26f4:	4b 83       	std	Y+3, r20	; 0x03
    26f6:	5c 83       	std	Y+4, r21	; 0x04
    26f8:	6d 83       	std	Y+5, r22	; 0x05
    26fa:	52 2e       	mov	r5, r18
    26fc:	0a 81       	ldd	r16, Y+2	; 0x02
    26fe:	1b 81       	ldd	r17, Y+3	; 0x03
    2700:	8c 80       	ldd	r8, Y+4	; 0x04
    2702:	9d 80       	ldd	r9, Y+5	; 0x05
		n=PINB; lcd.gotoxy(0,14); string=func.ui16toa(n);
    2704:	46 b2       	in	r4, 0x16	; 22
    2706:	6e e0       	ldi	r22, 0x0E	; 14
    2708:	70 e0       	ldi	r23, 0x00	; 0
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	f6 01       	movw	r30, r12
    2710:	09 95       	icall
    2712:	84 2d       	mov	r24, r4
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	f5 01       	movw	r30, r10
    2718:	09 95       	icall
    271a:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <string+0x1>
    271e:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <string>
		lcd.string_size(string,5);
    2722:	65 e0       	ldi	r22, 0x05	; 5
    2724:	f7 01       	movw	r30, r14
    2726:	09 95       	icall
		/******/
		switch(option){
    2728:	83 2d       	mov	r24, r3
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	8a 30       	cpi	r24, 0x0A	; 10
    272e:	91 05       	cpc	r25, r1
    2730:	08 f0       	brcs	.+2      	; 0x2734 <main+0x15a>
    2732:	4b c3       	rjmp	.+1686   	; 0x2dca <main+0x7f0>
    2734:	fc 01       	movw	r30, r24
    2736:	ea 5b       	subi	r30, 0xBA	; 186
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	5e c7       	rjmp	.+3772   	; 0x35f8 <__tablejump2__>
			case 0: // Main Menu
				lcd.gotoxy(0,0);
    273c:	60 e0       	ldi	r22, 0x00	; 0
    273e:	70 e0       	ldi	r23, 0x00	; 0
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	f6 01       	movw	r30, r12
    2746:	09 95       	icall
				lcd.string_size("Running ",8);
    2748:	62 2d       	mov	r22, r2
    274a:	80 e1       	ldi	r24, 0x10	; 16
    274c:	91 e0       	ldi	r25, 0x01	; 1
    274e:	f7 01       	movw	r30, r14
    2750:	09 95       	icall
				string=func.ui16toa(lfsm.getpage(&lfsm));
    2752:	a0 96       	adiw	r28, 0x20	; 32
    2754:	ee ad       	ldd	r30, Y+62	; 0x3e
    2756:	ff ad       	ldd	r31, Y+63	; 0x3f
    2758:	a0 97       	sbiw	r28, 0x20	; 32
    275a:	ce 01       	movw	r24, r28
    275c:	8e 5b       	subi	r24, 0xBE	; 190
    275e:	9f 4f       	sbci	r25, 0xFF	; 255
    2760:	09 95       	icall
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	f5 01       	movw	r30, r10
    2766:	09 95       	icall
    2768:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <string+0x1>
    276c:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <string>
				lcd.string_size(string,3);
    2770:	63 e0       	ldi	r22, 0x03	; 3
    2772:	f7 01       	movw	r30, r14
    2774:	09 95       	icall
				if(keypadinput.character == 'A'){ // Clear screen and empty buffer
    2776:	f1 e4       	ldi	r31, 0x41	; 65
    2778:	5f 12       	cpse	r5, r31
    277a:	0a c0       	rjmp	.+20     	; 0x2790 <main+0x1b6>
					lcd.clear();
    277c:	cb 54       	subi	r28, 0x4B	; 75
    277e:	df 4f       	sbci	r29, 0xFF	; 255
    2780:	e8 81       	ld	r30, Y
    2782:	f9 81       	ldd	r31, Y+1	; 0x01
    2784:	c5 5b       	subi	r28, 0xB5	; 181
    2786:	d0 40       	sbci	r29, 0x00	; 0
    2788:	09 95       	icall
					keypad.flush();
    278a:	f3 01       	movw	r30, r6
    278c:	09 95       	icall
					continue;
    278e:	a7 cf       	rjmp	.-178    	; 0x26de <main+0x104>
				}
				if(keypadinput.character == 'B'){ // Learn
    2790:	f2 e4       	ldi	r31, 0x42	; 66
    2792:	5f 12       	cpse	r5, r31
    2794:	0c c0       	rjmp	.+24     	; 0x27ae <main+0x1d4>
					lcd.clear();
    2796:	cb 54       	subi	r28, 0x4B	; 75
    2798:	df 4f       	sbci	r29, 0xFF	; 255
    279a:	e8 81       	ld	r30, Y
    279c:	f9 81       	ldd	r31, Y+1	; 0x01
    279e:	c5 5b       	subi	r28, 0xB5	; 181
    27a0:	d0 40       	sbci	r29, 0x00	; 0
    27a2:	09 95       	icall
					keypad.flush();
    27a4:	f3 01       	movw	r30, r6
    27a6:	09 95       	icall
					option=1;
    27a8:	33 24       	eor	r3, r3
    27aa:	33 94       	inc	r3
    27ac:	10 c0       	rjmp	.+32     	; 0x27ce <main+0x1f4>
				}
				if(keypadinput.character == 'C'){ // Delete or remove
    27ae:	f3 e4       	ldi	r31, 0x43	; 67
    27b0:	5f 12       	cpse	r5, r31
    27b2:	0d c0       	rjmp	.+26     	; 0x27ce <main+0x1f4>
					lcd.clear();
    27b4:	cb 54       	subi	r28, 0x4B	; 75
    27b6:	df 4f       	sbci	r29, 0xFF	; 255
    27b8:	e8 81       	ld	r30, Y
    27ba:	f9 81       	ldd	r31, Y+1	; 0x01
    27bc:	c5 5b       	subi	r28, 0xB5	; 181
    27be:	d0 40       	sbci	r29, 0x00	; 0
    27c0:	09 95       	icall
					keypad.flush();
    27c2:	f3 01       	movw	r30, r6
    27c4:	09 95       	icall
					option=6;
    27c6:	0f 2e       	mov	r0, r31
    27c8:	f6 e0       	ldi	r31, 0x06	; 6
    27ca:	3f 2e       	mov	r3, r31
    27cc:	f0 2d       	mov	r31, r0
				}
				lfsm.read(&lfsm,n); // Getting answer
    27ce:	2e 96       	adiw	r28, 0x0e	; 14
    27d0:	ee ad       	ldd	r30, Y+62	; 0x3e
    27d2:	ff ad       	ldd	r31, Y+63	; 0x3f
    27d4:	2e 97       	sbiw	r28, 0x0e	; 14
    27d6:	64 2d       	mov	r22, r4
    27d8:	ce 01       	movw	r24, r28
    27da:	8e 5b       	subi	r24, 0xBE	; 190
    27dc:	9f 4f       	sbci	r25, 0xFF	; 255
    27de:	09 95       	icall
				break;
    27e0:	f4 c2       	rjmp	.+1512   	; 0x2dca <main+0x7f0>
			case 1: // New Entry Menu
				// Menu
				lcd.gotoxy(0,0);
    27e2:	60 e0       	ldi	r22, 0x00	; 0
    27e4:	70 e0       	ldi	r23, 0x00	; 0
    27e6:	80 e0       	ldi	r24, 0x00	; 0
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	f6 01       	movw	r30, r12
    27ec:	09 95       	icall
				lcd.string_size("Enter: ",12);
    27ee:	6c e0       	ldi	r22, 0x0C	; 12
    27f0:	89 e1       	ldi	r24, 0x19	; 25
    27f2:	91 e0       	ldi	r25, 0x01	; 1
    27f4:	f7 01       	movw	r30, r14
    27f6:	09 95       	icall
				lcd.gotoxy(1,0);
    27f8:	60 e0       	ldi	r22, 0x00	; 0
    27fa:	70 e0       	ldi	r23, 0x00	; 0
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	f6 01       	movw	r30, r12
    2802:	09 95       	icall
				lcd.string_size("In  Out  Mask  Page",20);
    2804:	64 e1       	ldi	r22, 0x14	; 20
    2806:	81 e2       	ldi	r24, 0x21	; 33
    2808:	91 e0       	ldi	r25, 0x01	; 1
    280a:	f7 01       	movw	r30, r14
    280c:	09 95       	icall
				option=2;
    280e:	68 94       	set
    2810:	33 24       	eor	r3, r3
    2812:	31 f8       	bld	r3, 1
				break;
    2814:	da c2       	rjmp	.+1460   	; 0x2dca <main+0x7f0>
			case 2: // First entry [input]
				lcd.gotoxy(0,7);
    2816:	67 e0       	ldi	r22, 0x07	; 7
    2818:	70 e0       	ldi	r23, 0x00	; 0
    281a:	80 e0       	ldi	r24, 0x00	; 0
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	f6 01       	movw	r30, r12
    2820:	09 95       	icall
				lcd.string_size(keypadinput.print,4);
    2822:	64 e0       	ldi	r22, 0x04	; 4
    2824:	c8 01       	movw	r24, r16
    2826:	f7 01       	movw	r30, r14
    2828:	09 95       	icall
				if(keypadinput.character == 'D'){
    282a:	f4 e4       	ldi	r31, 0x44	; 68
    282c:	5f 12       	cpse	r5, r31
    282e:	2a c0       	rjmp	.+84     	; 0x2884 <main+0x2aa>
					input_tmp=func.strToInt(keypadinput.string);
    2830:	c4 01       	movw	r24, r8
    2832:	c2 55       	subi	r28, 0x52	; 82
    2834:	df 4f       	sbci	r29, 0xFF	; 255
    2836:	e8 81       	ld	r30, Y
    2838:	f9 81       	ldd	r31, Y+1	; 0x01
    283a:	ce 5a       	subi	r28, 0xAE	; 174
    283c:	d0 40       	sbci	r29, 0x00	; 0
    283e:	09 95       	icall
    2840:	8c 01       	movw	r16, r24
    2842:	c0 55       	subi	r28, 0x50	; 80
    2844:	df 4f       	sbci	r29, 0xFF	; 255
    2846:	88 83       	st	Y, r24
    2848:	c0 5b       	subi	r28, 0xB0	; 176
    284a:	d0 40       	sbci	r29, 0x00	; 0
					lcd.gotoxy(2,0);
    284c:	60 e0       	ldi	r22, 0x00	; 0
    284e:	70 e0       	ldi	r23, 0x00	; 0
    2850:	82 e0       	ldi	r24, 0x02	; 2
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	f6 01       	movw	r30, r12
    2856:	09 95       	icall
					string=func.ui16toa(input_tmp);
    2858:	c8 01       	movw	r24, r16
    285a:	99 27       	eor	r25, r25
    285c:	f5 01       	movw	r30, r10
    285e:	09 95       	icall
    2860:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <string+0x1>
    2864:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <string>
					lcd.string(string);
    2868:	c4 55       	subi	r28, 0x54	; 84
    286a:	df 4f       	sbci	r29, 0xFF	; 255
    286c:	e8 81       	ld	r30, Y
    286e:	f9 81       	ldd	r31, Y+1	; 0x01
    2870:	cc 5a       	subi	r28, 0xAC	; 172
    2872:	d0 40       	sbci	r29, 0x00	; 0
    2874:	09 95       	icall
					keypad.flush();
    2876:	f3 01       	movw	r30, r6
    2878:	09 95       	icall
					option=3;
    287a:	0f 2e       	mov	r0, r31
    287c:	f3 e0       	ldi	r31, 0x03	; 3
    287e:	3f 2e       	mov	r3, r31
    2880:	f0 2d       	mov	r31, r0
    2882:	a3 c2       	rjmp	.+1350   	; 0x2dca <main+0x7f0>
				}
				if(keypadinput.character == 'C'){
    2884:	f3 e4       	ldi	r31, 0x43	; 67
    2886:	5f 12       	cpse	r5, r31
    2888:	a0 c2       	rjmp	.+1344   	; 0x2dca <main+0x7f0>
					keypad.flush();
    288a:	f3 01       	movw	r30, r6
    288c:	09 95       	icall
    288e:	9d c2       	rjmp	.+1338   	; 0x2dca <main+0x7f0>
					option=2;
				}
				break;
			case 3: // Second Entry [output]
				lcd.gotoxy(0,7);
    2890:	67 e0       	ldi	r22, 0x07	; 7
    2892:	70 e0       	ldi	r23, 0x00	; 0
    2894:	80 e0       	ldi	r24, 0x00	; 0
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	f6 01       	movw	r30, r12
    289a:	09 95       	icall
				lcd.string_size(keypadinput.print,4);
    289c:	64 e0       	ldi	r22, 0x04	; 4
    289e:	c8 01       	movw	r24, r16
    28a0:	f7 01       	movw	r30, r14
    28a2:	09 95       	icall
				if(keypadinput.character == 'D'){
    28a4:	f4 e4       	ldi	r31, 0x44	; 68
    28a6:	5f 12       	cpse	r5, r31
    28a8:	2d c0       	rjmp	.+90     	; 0x2904 <main+0x32a>
					output=func.strToInt(keypadinput.string);
    28aa:	c4 01       	movw	r24, r8
    28ac:	c2 55       	subi	r28, 0x52	; 82
    28ae:	df 4f       	sbci	r29, 0xFF	; 255
    28b0:	e8 81       	ld	r30, Y
    28b2:	f9 81       	ldd	r31, Y+1	; 0x01
    28b4:	ce 5a       	subi	r28, 0xAE	; 174
    28b6:	d0 40       	sbci	r29, 0x00	; 0
    28b8:	09 95       	icall
    28ba:	cf 54       	subi	r28, 0x4F	; 79
    28bc:	df 4f       	sbci	r29, 0xFF	; 255
    28be:	99 83       	std	Y+1, r25	; 0x01
    28c0:	88 83       	st	Y, r24
    28c2:	c1 5b       	subi	r28, 0xB1	; 177
    28c4:	d0 40       	sbci	r29, 0x00	; 0
					lcd.gotoxy(2,5);
    28c6:	65 e0       	ldi	r22, 0x05	; 5
    28c8:	70 e0       	ldi	r23, 0x00	; 0
    28ca:	82 e0       	ldi	r24, 0x02	; 2
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	f6 01       	movw	r30, r12
    28d0:	09 95       	icall
					string=func.ui16toa(output);
    28d2:	cf 54       	subi	r28, 0x4F	; 79
    28d4:	df 4f       	sbci	r29, 0xFF	; 255
    28d6:	88 81       	ld	r24, Y
    28d8:	99 81       	ldd	r25, Y+1	; 0x01
    28da:	c1 5b       	subi	r28, 0xB1	; 177
    28dc:	d0 40       	sbci	r29, 0x00	; 0
    28de:	f5 01       	movw	r30, r10
    28e0:	09 95       	icall
    28e2:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <string+0x1>
    28e6:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <string>
					lcd.string(string);
    28ea:	c4 55       	subi	r28, 0x54	; 84
    28ec:	df 4f       	sbci	r29, 0xFF	; 255
    28ee:	e8 81       	ld	r30, Y
    28f0:	f9 81       	ldd	r31, Y+1	; 0x01
    28f2:	cc 5a       	subi	r28, 0xAC	; 172
    28f4:	d0 40       	sbci	r29, 0x00	; 0
    28f6:	09 95       	icall
					keypad.flush();
    28f8:	f3 01       	movw	r30, r6
    28fa:	09 95       	icall
					option=4;
    28fc:	68 94       	set
    28fe:	33 24       	eor	r3, r3
    2900:	32 f8       	bld	r3, 2
    2902:	63 c2       	rjmp	.+1222   	; 0x2dca <main+0x7f0>
				}
				if(keypadinput.character == 'C'){
    2904:	f3 e4       	ldi	r31, 0x43	; 67
    2906:	5f 12       	cpse	r5, r31
    2908:	60 c2       	rjmp	.+1216   	; 0x2dca <main+0x7f0>
					keypad.flush();
    290a:	f3 01       	movw	r30, r6
    290c:	09 95       	icall
    290e:	5d c2       	rjmp	.+1210   	; 0x2dca <main+0x7f0>
					option=3;
				}
				break;
			case 4: // Third Entry [mask]
				lcd.gotoxy(0,7);
    2910:	67 e0       	ldi	r22, 0x07	; 7
    2912:	70 e0       	ldi	r23, 0x00	; 0
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	f6 01       	movw	r30, r12
    291a:	09 95       	icall
				lcd.string_size(keypadinput.print,4);
    291c:	64 e0       	ldi	r22, 0x04	; 4
    291e:	c8 01       	movw	r24, r16
    2920:	f7 01       	movw	r30, r14
    2922:	09 95       	icall
				if(keypadinput.character == 'D'){
    2924:	f4 e4       	ldi	r31, 0x44	; 68
    2926:	5f 12       	cpse	r5, r31
    2928:	2e c0       	rjmp	.+92     	; 0x2986 <main+0x3ac>
					mask=func.strToInt(keypadinput.string);
    292a:	c4 01       	movw	r24, r8
    292c:	c2 55       	subi	r28, 0x52	; 82
    292e:	df 4f       	sbci	r29, 0xFF	; 255
    2930:	e8 81       	ld	r30, Y
    2932:	f9 81       	ldd	r31, Y+1	; 0x01
    2934:	ce 5a       	subi	r28, 0xAE	; 174
    2936:	d0 40       	sbci	r29, 0x00	; 0
    2938:	09 95       	icall
    293a:	cd 54       	subi	r28, 0x4D	; 77
    293c:	df 4f       	sbci	r29, 0xFF	; 255
    293e:	99 83       	std	Y+1, r25	; 0x01
    2940:	88 83       	st	Y, r24
    2942:	c3 5b       	subi	r28, 0xB3	; 179
    2944:	d0 40       	sbci	r29, 0x00	; 0
					lcd.gotoxy(2,10);
    2946:	6a e0       	ldi	r22, 0x0A	; 10
    2948:	70 e0       	ldi	r23, 0x00	; 0
    294a:	82 e0       	ldi	r24, 0x02	; 2
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	f6 01       	movw	r30, r12
    2950:	09 95       	icall
					string=func.ui16toa(mask);
    2952:	cd 54       	subi	r28, 0x4D	; 77
    2954:	df 4f       	sbci	r29, 0xFF	; 255
    2956:	88 81       	ld	r24, Y
    2958:	99 81       	ldd	r25, Y+1	; 0x01
    295a:	c3 5b       	subi	r28, 0xB3	; 179
    295c:	d0 40       	sbci	r29, 0x00	; 0
    295e:	f5 01       	movw	r30, r10
    2960:	09 95       	icall
    2962:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <string+0x1>
    2966:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <string>
					lcd.string(string);
    296a:	c4 55       	subi	r28, 0x54	; 84
    296c:	df 4f       	sbci	r29, 0xFF	; 255
    296e:	e8 81       	ld	r30, Y
    2970:	f9 81       	ldd	r31, Y+1	; 0x01
    2972:	cc 5a       	subi	r28, 0xAC	; 172
    2974:	d0 40       	sbci	r29, 0x00	; 0
    2976:	09 95       	icall
					keypad.flush();
    2978:	f3 01       	movw	r30, r6
    297a:	09 95       	icall
					option=5;
    297c:	0f 2e       	mov	r0, r31
    297e:	f5 e0       	ldi	r31, 0x05	; 5
    2980:	3f 2e       	mov	r3, r31
    2982:	f0 2d       	mov	r31, r0
    2984:	22 c2       	rjmp	.+1092   	; 0x2dca <main+0x7f0>
				}
				if(keypadinput.character == 'C'){
    2986:	f3 e4       	ldi	r31, 0x43	; 67
    2988:	5f 12       	cpse	r5, r31
    298a:	1f c2       	rjmp	.+1086   	; 0x2dca <main+0x7f0>
					keypad.flush();
    298c:	f3 01       	movw	r30, r6
    298e:	09 95       	icall
    2990:	1c c2       	rjmp	.+1080   	; 0x2dca <main+0x7f0>
					option=4;
				}
				break;
			case 5: // Fourth entry [page] and upload with reply
				lcd.gotoxy(0,7);
    2992:	67 e0       	ldi	r22, 0x07	; 7
    2994:	70 e0       	ldi	r23, 0x00	; 0
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	f6 01       	movw	r30, r12
    299c:	09 95       	icall
				lcd.string_size(keypadinput.print,4);
    299e:	64 e0       	ldi	r22, 0x04	; 4
    29a0:	c8 01       	movw	r24, r16
    29a2:	f7 01       	movw	r30, r14
    29a4:	09 95       	icall
				if(keypadinput.character == 'D'){ // D is the enter key on the keyboard
    29a6:	f4 e4       	ldi	r31, 0x44	; 68
    29a8:	5f 12       	cpse	r5, r31
    29aa:	75 c0       	rjmp	.+234    	; 0x2a96 <main+0x4bc>
					page=func.strToInt(keypadinput.string);
    29ac:	c4 01       	movw	r24, r8
    29ae:	c2 55       	subi	r28, 0x52	; 82
    29b0:	df 4f       	sbci	r29, 0xFF	; 255
    29b2:	e8 81       	ld	r30, Y
    29b4:	f9 81       	ldd	r31, Y+1	; 0x01
    29b6:	ce 5a       	subi	r28, 0xAE	; 174
    29b8:	d0 40       	sbci	r29, 0x00	; 0
    29ba:	09 95       	icall
    29bc:	8c 01       	movw	r16, r24
					lcd.gotoxy(2,15);
    29be:	6f e0       	ldi	r22, 0x0F	; 15
    29c0:	70 e0       	ldi	r23, 0x00	; 0
    29c2:	82 e0       	ldi	r24, 0x02	; 2
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	f6 01       	movw	r30, r12
    29c8:	09 95       	icall
					string=func.ui16toa(page);
    29ca:	c8 01       	movw	r24, r16
    29cc:	99 27       	eor	r25, r25
    29ce:	f5 01       	movw	r30, r10
    29d0:	09 95       	icall
    29d2:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <string+0x1>
    29d6:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <string>
					lcd.string(string);
    29da:	c4 55       	subi	r28, 0x54	; 84
    29dc:	df 4f       	sbci	r29, 0xFF	; 255
    29de:	e8 81       	ld	r30, Y
    29e0:	f9 81       	ldd	r31, Y+1	; 0x01
    29e2:	cc 5a       	subi	r28, 0xAC	; 172
    29e4:	d0 40       	sbci	r29, 0x00	; 0
    29e6:	09 95       	icall
					//lcd.gotoxy(1,0);
					//lcd.hspace(20);
					//lcd.gotoxy(2,0);
					//lcd.hspace(20);
					switch(lfsm.learn(&lfsm,input_tmp,output,mask,page)){
    29e8:	60 96       	adiw	r28, 0x10	; 16
    29ea:	ee ad       	ldd	r30, Y+62	; 0x3e
    29ec:	ff ad       	ldd	r31, Y+63	; 0x3f
    29ee:	60 97       	sbiw	r28, 0x10	; 16
    29f0:	cd 54       	subi	r28, 0x4D	; 77
    29f2:	df 4f       	sbci	r29, 0xFF	; 255
    29f4:	28 81       	ld	r18, Y
    29f6:	39 81       	ldd	r19, Y+1	; 0x01
    29f8:	c3 5b       	subi	r28, 0xB3	; 179
    29fa:	d0 40       	sbci	r29, 0x00	; 0
    29fc:	cf 54       	subi	r28, 0x4F	; 79
    29fe:	df 4f       	sbci	r29, 0xFF	; 255
    2a00:	48 81       	ld	r20, Y
    2a02:	59 81       	ldd	r21, Y+1	; 0x01
    2a04:	c1 5b       	subi	r28, 0xB1	; 177
    2a06:	d0 40       	sbci	r29, 0x00	; 0
    2a08:	c0 55       	subi	r28, 0x50	; 80
    2a0a:	df 4f       	sbci	r29, 0xFF	; 255
    2a0c:	68 81       	ld	r22, Y
    2a0e:	c0 5b       	subi	r28, 0xB0	; 176
    2a10:	d0 40       	sbci	r29, 0x00	; 0
    2a12:	ce 01       	movw	r24, r28
    2a14:	8e 5b       	subi	r24, 0xBE	; 190
    2a16:	9f 4f       	sbci	r25, 0xFF	; 255
    2a18:	09 95       	icall
    2a1a:	82 30       	cpi	r24, 0x02	; 2
    2a1c:	09 f1       	breq	.+66     	; 0x2a60 <main+0x486>
    2a1e:	18 f4       	brcc	.+6      	; 0x2a26 <main+0x44c>
    2a20:	88 23       	and	r24, r24
    2a22:	31 f0       	breq	.+12     	; 0x2a30 <main+0x456>
    2a24:	34 c0       	rjmp	.+104    	; 0x2a8e <main+0x4b4>
    2a26:	83 30       	cpi	r24, 0x03	; 3
    2a28:	39 f1       	breq	.+78     	; 0x2a78 <main+0x49e>
    2a2a:	84 30       	cpi	r24, 0x04	; 4
    2a2c:	69 f0       	breq	.+26     	; 0x2a48 <main+0x46e>
    2a2e:	2f c0       	rjmp	.+94     	; 0x2a8e <main+0x4b4>
						case 0: // Not used
							lcd.gotoxy(3,12);
    2a30:	6c e0       	ldi	r22, 0x0C	; 12
    2a32:	70 e0       	ldi	r23, 0x00	; 0
    2a34:	83 e0       	ldi	r24, 0x03	; 3
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	f6 01       	movw	r30, r12
    2a3a:	09 95       	icall
							lcd.string_size("disabled",7);
    2a3c:	67 e0       	ldi	r22, 0x07	; 7
    2a3e:	85 e3       	ldi	r24, 0x35	; 53
    2a40:	91 e0       	ldi	r25, 0x01	; 1
    2a42:	f7 01       	movw	r30, r14
    2a44:	09 95       	icall
							break;
    2a46:	23 c0       	rjmp	.+70     	; 0x2a8e <main+0x4b4>
						case 4: // already programmed
							lcd.gotoxy(3,12);
    2a48:	6c e0       	ldi	r22, 0x0C	; 12
    2a4a:	70 e0       	ldi	r23, 0x00	; 0
    2a4c:	83 e0       	ldi	r24, 0x03	; 3
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	f6 01       	movw	r30, r12
    2a52:	09 95       	icall
							lcd.string_size("exists",7);
    2a54:	67 e0       	ldi	r22, 0x07	; 7
    2a56:	8e e3       	ldi	r24, 0x3E	; 62
    2a58:	91 e0       	ldi	r25, 0x01	; 1
    2a5a:	f7 01       	movw	r30, r14
    2a5c:	09 95       	icall
							break;
    2a5e:	17 c0       	rjmp	.+46     	; 0x2a8e <main+0x4b4>
						case 2: // new entry added
							lcd.gotoxy(3,12);
    2a60:	6c e0       	ldi	r22, 0x0C	; 12
    2a62:	70 e0       	ldi	r23, 0x00	; 0
    2a64:	83 e0       	ldi	r24, 0x03	; 3
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	f6 01       	movw	r30, r12
    2a6a:	09 95       	icall
							lcd.string_size("upload",7);
    2a6c:	67 e0       	ldi	r22, 0x07	; 7
    2a6e:	85 e4       	ldi	r24, 0x45	; 69
    2a70:	91 e0       	ldi	r25, 0x01	; 1
    2a72:	f7 01       	movw	r30, r14
    2a74:	09 95       	icall
							break;
    2a76:	0b c0       	rjmp	.+22     	; 0x2a8e <main+0x4b4>
						case 3: // eeprom is full reject entry
							lcd.gotoxy(3,12);
    2a78:	6c e0       	ldi	r22, 0x0C	; 12
    2a7a:	70 e0       	ldi	r23, 0x00	; 0
    2a7c:	83 e0       	ldi	r24, 0x03	; 3
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	f6 01       	movw	r30, r12
    2a82:	09 95       	icall
							lcd.string_size("full",7);
    2a84:	67 e0       	ldi	r22, 0x07	; 7
    2a86:	8c e4       	ldi	r24, 0x4C	; 76
    2a88:	91 e0       	ldi	r25, 0x01	; 1
    2a8a:	f7 01       	movw	r30, r14
    2a8c:	09 95       	icall
						default:
							break;
					}//End switch
				/******/
				//lfsm.read(&lfsm,input_tmp);
				keypad.flush();
    2a8e:	f3 01       	movw	r30, r6
    2a90:	09 95       	icall
				option=0;
    2a92:	31 2c       	mov	r3, r1
    2a94:	9a c1       	rjmp	.+820    	; 0x2dca <main+0x7f0>
				}//End if
				if(keypadinput.character == 'C'){ // re-enter value [page] 
    2a96:	f3 e4       	ldi	r31, 0x43	; 67
    2a98:	5f 12       	cpse	r5, r31
    2a9a:	97 c1       	rjmp	.+814    	; 0x2dca <main+0x7f0>
					keypad.flush();
    2a9c:	f3 01       	movw	r30, r6
    2a9e:	09 95       	icall
    2aa0:	94 c1       	rjmp	.+808    	; 0x2dca <main+0x7f0>
					option=5;
				}
				break;
			case 6: // Delete or Remove or No action Menu
				lcd.gotoxy(1,0);
    2aa2:	60 e0       	ldi	r22, 0x00	; 0
    2aa4:	70 e0       	ldi	r23, 0x00	; 0
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	f6 01       	movw	r30, r12
    2aac:	09 95       	icall
				lcd.string_size("1-Delete 4-quant",16);
    2aae:	60 e1       	ldi	r22, 0x10	; 16
    2ab0:	81 e5       	ldi	r24, 0x51	; 81
    2ab2:	91 e0       	ldi	r25, 0x01	; 1
    2ab4:	f7 01       	movw	r30, r14
    2ab6:	09 95       	icall
				lcd.gotoxy(2,0);
    2ab8:	60 e0       	ldi	r22, 0x00	; 0
    2aba:	70 e0       	ldi	r23, 0x00	; 0
    2abc:	82 e0       	ldi	r24, 0x02	; 2
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	f6 01       	movw	r30, r12
    2ac2:	09 95       	icall
				lcd.string_size("2-Remove 3-Exit",16);
    2ac4:	60 e1       	ldi	r22, 0x10	; 16
    2ac6:	82 e6       	ldi	r24, 0x62	; 98
    2ac8:	91 e0       	ldi	r25, 0x01	; 1
    2aca:	f7 01       	movw	r30, r14
    2acc:	09 95       	icall
				option=7;
    2ace:	0f 2e       	mov	r0, r31
    2ad0:	f7 e0       	ldi	r31, 0x07	; 7
    2ad2:	3f 2e       	mov	r3, r31
    2ad4:	f0 2d       	mov	r31, r0
				break;
    2ad6:	79 c1       	rjmp	.+754    	; 0x2dca <main+0x7f0>
			case 7: // Delete or Remove or No action choice
				if(keypadinput.character == '1'){ // Delete
    2ad8:	f1 e3       	ldi	r31, 0x31	; 49
    2ada:	5f 12       	cpse	r5, r31
    2adc:	3c c0       	rjmp	.+120    	; 0x2b56 <main+0x57c>
					lcd.gotoxy(1,0);
    2ade:	60 e0       	ldi	r22, 0x00	; 0
    2ae0:	70 e0       	ldi	r23, 0x00	; 0
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	f6 01       	movw	r30, r12
    2ae8:	09 95       	icall
					lcd.hspace(17);
    2aea:	81 e1       	ldi	r24, 0x11	; 17
    2aec:	c6 55       	subi	r28, 0x56	; 86
    2aee:	df 4f       	sbci	r29, 0xFF	; 255
    2af0:	e8 81       	ld	r30, Y
    2af2:	f9 81       	ldd	r31, Y+1	; 0x01
    2af4:	ca 5a       	subi	r28, 0xAA	; 170
    2af6:	d0 40       	sbci	r29, 0x00	; 0
    2af8:	09 95       	icall
					lcd.gotoxy(2,0);
    2afa:	60 e0       	ldi	r22, 0x00	; 0
    2afc:	70 e0       	ldi	r23, 0x00	; 0
    2afe:	82 e0       	ldi	r24, 0x02	; 2
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	f6 01       	movw	r30, r12
    2b04:	09 95       	icall
					lcd.hspace(17);
    2b06:	81 e1       	ldi	r24, 0x11	; 17
    2b08:	c6 55       	subi	r28, 0x56	; 86
    2b0a:	df 4f       	sbci	r29, 0xFF	; 255
    2b0c:	e8 81       	ld	r30, Y
    2b0e:	f9 81       	ldd	r31, Y+1	; 0x01
    2b10:	ca 5a       	subi	r28, 0xAA	; 170
    2b12:	d0 40       	sbci	r29, 0x00	; 0
    2b14:	09 95       	icall
					lfsm.deleteall(&lfsm);
    2b16:	68 96       	adiw	r28, 0x18	; 24
    2b18:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b1a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b1c:	68 97       	sbiw	r28, 0x18	; 24
    2b1e:	ce 01       	movw	r24, r28
    2b20:	8e 5b       	subi	r24, 0xBE	; 190
    2b22:	9f 4f       	sbci	r25, 0xFF	; 255
    2b24:	09 95       	icall
					lfsm.setpage(&lfsm,0);
    2b26:	a2 96       	adiw	r28, 0x22	; 34
    2b28:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b2a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b2c:	a2 97       	sbiw	r28, 0x22	; 34
    2b2e:	60 e0       	ldi	r22, 0x00	; 0
    2b30:	ce 01       	movw	r24, r28
    2b32:	8e 5b       	subi	r24, 0xBE	; 190
    2b34:	9f 4f       	sbci	r25, 0xFF	; 255
    2b36:	09 95       	icall
					//lfsm.setoutput(&lfsm,0X00);
					keypad.flush();
    2b38:	f3 01       	movw	r30, r6
    2b3a:	09 95       	icall
					lcd.gotoxy(3,12);
    2b3c:	6c e0       	ldi	r22, 0x0C	; 12
    2b3e:	70 e0       	ldi	r23, 0x00	; 0
    2b40:	83 e0       	ldi	r24, 0x03	; 3
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	f6 01       	movw	r30, r12
    2b46:	09 95       	icall
					lcd.string_size("deleted",7);
    2b48:	67 e0       	ldi	r22, 0x07	; 7
    2b4a:	82 e7       	ldi	r24, 0x72	; 114
    2b4c:	91 e0       	ldi	r25, 0x01	; 1
    2b4e:	f7 01       	movw	r30, r14
    2b50:	09 95       	icall
					option=0;
    2b52:	31 2c       	mov	r3, r1
    2b54:	3a c1       	rjmp	.+628    	; 0x2dca <main+0x7f0>
				}else if(keypadinput.character == '2'){ // Remove
    2b56:	f2 e3       	ldi	r31, 0x32	; 50
    2b58:	5f 12       	cpse	r5, r31
    2b5a:	20 c0       	rjmp	.+64     	; 0x2b9c <main+0x5c2>
					lcd.gotoxy(1,0);
    2b5c:	60 e0       	ldi	r22, 0x00	; 0
    2b5e:	70 e0       	ldi	r23, 0x00	; 0
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	f6 01       	movw	r30, r12
    2b66:	09 95       	icall
					lcd.hspace(17);
    2b68:	81 e1       	ldi	r24, 0x11	; 17
    2b6a:	c6 55       	subi	r28, 0x56	; 86
    2b6c:	df 4f       	sbci	r29, 0xFF	; 255
    2b6e:	e8 81       	ld	r30, Y
    2b70:	f9 81       	ldd	r31, Y+1	; 0x01
    2b72:	ca 5a       	subi	r28, 0xAA	; 170
    2b74:	d0 40       	sbci	r29, 0x00	; 0
    2b76:	09 95       	icall
					lcd.gotoxy(2,0);
    2b78:	60 e0       	ldi	r22, 0x00	; 0
    2b7a:	70 e0       	ldi	r23, 0x00	; 0
    2b7c:	82 e0       	ldi	r24, 0x02	; 2
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	f6 01       	movw	r30, r12
    2b82:	09 95       	icall
					lcd.hspace(17);
    2b84:	81 e1       	ldi	r24, 0x11	; 17
    2b86:	c6 55       	subi	r28, 0x56	; 86
    2b88:	df 4f       	sbci	r29, 0xFF	; 255
    2b8a:	e8 81       	ld	r30, Y
    2b8c:	f9 81       	ldd	r31, Y+1	; 0x01
    2b8e:	ca 5a       	subi	r28, 0xAA	; 170
    2b90:	d0 40       	sbci	r29, 0x00	; 0
    2b92:	09 95       	icall
					keypad.flush();
    2b94:	f3 01       	movw	r30, r6
    2b96:	09 95       	icall
					option=8;
    2b98:	32 2c       	mov	r3, r2
    2b9a:	17 c1       	rjmp	.+558    	; 0x2dca <main+0x7f0>
				}else if(keypadinput.character == '3'){ // No action
    2b9c:	f3 e3       	ldi	r31, 0x33	; 51
    2b9e:	5f 12       	cpse	r5, r31
    2ba0:	20 c0       	rjmp	.+64     	; 0x2be2 <main+0x608>
					lcd.gotoxy(1,0);
    2ba2:	60 e0       	ldi	r22, 0x00	; 0
    2ba4:	70 e0       	ldi	r23, 0x00	; 0
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	f6 01       	movw	r30, r12
    2bac:	09 95       	icall
					lcd.hspace(17);
    2bae:	81 e1       	ldi	r24, 0x11	; 17
    2bb0:	c6 55       	subi	r28, 0x56	; 86
    2bb2:	df 4f       	sbci	r29, 0xFF	; 255
    2bb4:	e8 81       	ld	r30, Y
    2bb6:	f9 81       	ldd	r31, Y+1	; 0x01
    2bb8:	ca 5a       	subi	r28, 0xAA	; 170
    2bba:	d0 40       	sbci	r29, 0x00	; 0
    2bbc:	09 95       	icall
					lcd.gotoxy(2,0);
    2bbe:	60 e0       	ldi	r22, 0x00	; 0
    2bc0:	70 e0       	ldi	r23, 0x00	; 0
    2bc2:	82 e0       	ldi	r24, 0x02	; 2
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	f6 01       	movw	r30, r12
    2bc8:	09 95       	icall
					lcd.hspace(17);
    2bca:	81 e1       	ldi	r24, 0x11	; 17
    2bcc:	c6 55       	subi	r28, 0x56	; 86
    2bce:	df 4f       	sbci	r29, 0xFF	; 255
    2bd0:	e8 81       	ld	r30, Y
    2bd2:	f9 81       	ldd	r31, Y+1	; 0x01
    2bd4:	ca 5a       	subi	r28, 0xAA	; 170
    2bd6:	d0 40       	sbci	r29, 0x00	; 0
    2bd8:	09 95       	icall
					keypad.flush();
    2bda:	f3 01       	movw	r30, r6
    2bdc:	09 95       	icall
					option=0;
    2bde:	31 2c       	mov	r3, r1
    2be0:	f4 c0       	rjmp	.+488    	; 0x2dca <main+0x7f0>
				}else if(keypadinput.character == '4'){ // Quant
    2be2:	f4 e3       	ldi	r31, 0x34	; 52
    2be4:	5f 12       	cpse	r5, r31
    2be6:	f1 c0       	rjmp	.+482    	; 0x2dca <main+0x7f0>
					lcd.gotoxy(1,0);
    2be8:	60 e0       	ldi	r22, 0x00	; 0
    2bea:	70 e0       	ldi	r23, 0x00	; 0
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	f6 01       	movw	r30, r12
    2bf2:	09 95       	icall
					lcd.hspace(17);
    2bf4:	81 e1       	ldi	r24, 0x11	; 17
    2bf6:	c6 55       	subi	r28, 0x56	; 86
    2bf8:	df 4f       	sbci	r29, 0xFF	; 255
    2bfa:	e8 81       	ld	r30, Y
    2bfc:	f9 81       	ldd	r31, Y+1	; 0x01
    2bfe:	ca 5a       	subi	r28, 0xAA	; 170
    2c00:	d0 40       	sbci	r29, 0x00	; 0
    2c02:	09 95       	icall
					lcd.gotoxy(2,0);
    2c04:	60 e0       	ldi	r22, 0x00	; 0
    2c06:	70 e0       	ldi	r23, 0x00	; 0
    2c08:	82 e0       	ldi	r24, 0x02	; 2
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	f6 01       	movw	r30, r12
    2c0e:	09 95       	icall
					lcd.hspace(17);
    2c10:	81 e1       	ldi	r24, 0x11	; 17
    2c12:	c6 55       	subi	r28, 0x56	; 86
    2c14:	df 4f       	sbci	r29, 0xFF	; 255
    2c16:	e8 81       	ld	r30, Y
    2c18:	f9 81       	ldd	r31, Y+1	; 0x01
    2c1a:	ca 5a       	subi	r28, 0xAA	; 170
    2c1c:	d0 40       	sbci	r29, 0x00	; 0
    2c1e:	09 95       	icall
					lcd.gotoxy(3,12);
    2c20:	6c e0       	ldi	r22, 0x0C	; 12
    2c22:	70 e0       	ldi	r23, 0x00	; 0
    2c24:	83 e0       	ldi	r24, 0x03	; 3
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	f6 01       	movw	r30, r12
    2c2a:	09 95       	icall
					lcd.string_size(func.i16toa(lfsm.quant(&lfsm)),7);
    2c2c:	e2 96       	adiw	r28, 0x32	; 50
    2c2e:	0e ad       	ldd	r16, Y+62	; 0x3e
    2c30:	1f ad       	ldd	r17, Y+63	; 0x3f
    2c32:	e2 97       	sbiw	r28, 0x32	; 50
    2c34:	62 96       	adiw	r28, 0x12	; 18
    2c36:	ee ad       	ldd	r30, Y+62	; 0x3e
    2c38:	ff ad       	ldd	r31, Y+63	; 0x3f
    2c3a:	62 97       	sbiw	r28, 0x12	; 18
    2c3c:	ce 01       	movw	r24, r28
    2c3e:	8e 5b       	subi	r24, 0xBE	; 190
    2c40:	9f 4f       	sbci	r25, 0xFF	; 255
    2c42:	09 95       	icall
    2c44:	f8 01       	movw	r30, r16
    2c46:	09 95       	icall
    2c48:	67 e0       	ldi	r22, 0x07	; 7
    2c4a:	f7 01       	movw	r30, r14
    2c4c:	09 95       	icall
					keypad.flush();
    2c4e:	f3 01       	movw	r30, r6
    2c50:	09 95       	icall
					option=0;
    2c52:	31 2c       	mov	r3, r1
    2c54:	ba c0       	rjmp	.+372    	; 0x2dca <main+0x7f0>
				}
				break;
			case 8: // Remove Entry Data
				lcd.gotoxy(0,0);
    2c56:	60 e0       	ldi	r22, 0x00	; 0
    2c58:	70 e0       	ldi	r23, 0x00	; 0
    2c5a:	80 e0       	ldi	r24, 0x00	; 0
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	f6 01       	movw	r30, r12
    2c60:	09 95       	icall
				lcd.string_size("Enter: ",12);
    2c62:	6c e0       	ldi	r22, 0x0C	; 12
    2c64:	89 e1       	ldi	r24, 0x19	; 25
    2c66:	91 e0       	ldi	r25, 0x01	; 1
    2c68:	f7 01       	movw	r30, r14
    2c6a:	09 95       	icall
				lcd.gotoxy(1,0);
    2c6c:	60 e0       	ldi	r22, 0x00	; 0
    2c6e:	70 e0       	ldi	r23, 0x00	; 0
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	f6 01       	movw	r30, r12
    2c76:	09 95       	icall
				lcd.string_size("Input",20);
    2c78:	64 e1       	ldi	r22, 0x14	; 20
    2c7a:	8a e7       	ldi	r24, 0x7A	; 122
    2c7c:	91 e0       	ldi	r25, 0x01	; 1
    2c7e:	f7 01       	movw	r30, r14
    2c80:	09 95       	icall
				option=9;
    2c82:	0f 2e       	mov	r0, r31
    2c84:	f9 e0       	ldi	r31, 0x09	; 9
    2c86:	3f 2e       	mov	r3, r31
    2c88:	f0 2d       	mov	r31, r0
				break;
    2c8a:	9f c0       	rjmp	.+318    	; 0x2dca <main+0x7f0>
			case 9: // Remove Entry from EEprom
				lcd.gotoxy(0,7);
    2c8c:	67 e0       	ldi	r22, 0x07	; 7
    2c8e:	70 e0       	ldi	r23, 0x00	; 0
    2c90:	80 e0       	ldi	r24, 0x00	; 0
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	f6 01       	movw	r30, r12
    2c96:	09 95       	icall
				lcd.string_size(keypadinput.print,4);
    2c98:	64 e0       	ldi	r22, 0x04	; 4
    2c9a:	c8 01       	movw	r24, r16
    2c9c:	f7 01       	movw	r30, r14
    2c9e:	09 95       	icall
				if(keypadinput.character == 'D'){ // D is the enter key on the keyboard
    2ca0:	f4 e4       	ldi	r31, 0x44	; 68
    2ca2:	5f 12       	cpse	r5, r31
    2ca4:	8c c0       	rjmp	.+280    	; 0x2dbe <main+0x7e4>
					input_tmp=func.strToInt(keypadinput.string);
    2ca6:	c4 01       	movw	r24, r8
    2ca8:	c2 55       	subi	r28, 0x52	; 82
    2caa:	df 4f       	sbci	r29, 0xFF	; 255
    2cac:	e8 81       	ld	r30, Y
    2cae:	f9 81       	ldd	r31, Y+1	; 0x01
    2cb0:	ce 5a       	subi	r28, 0xAE	; 174
    2cb2:	d0 40       	sbci	r29, 0x00	; 0
    2cb4:	09 95       	icall
    2cb6:	8c 01       	movw	r16, r24
    2cb8:	c0 55       	subi	r28, 0x50	; 80
    2cba:	df 4f       	sbci	r29, 0xFF	; 255
    2cbc:	88 83       	st	Y, r24
    2cbe:	c0 5b       	subi	r28, 0xB0	; 176
    2cc0:	d0 40       	sbci	r29, 0x00	; 0
					lcd.gotoxy(2,0);
    2cc2:	60 e0       	ldi	r22, 0x00	; 0
    2cc4:	70 e0       	ldi	r23, 0x00	; 0
    2cc6:	82 e0       	ldi	r24, 0x02	; 2
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	f6 01       	movw	r30, r12
    2ccc:	09 95       	icall
					string=func.ui16toa(input_tmp);
    2cce:	c8 01       	movw	r24, r16
    2cd0:	99 27       	eor	r25, r25
    2cd2:	f5 01       	movw	r30, r10
    2cd4:	09 95       	icall
    2cd6:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <string+0x1>
    2cda:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <string>
					lcd.string(string);
    2cde:	c4 55       	subi	r28, 0x54	; 84
    2ce0:	df 4f       	sbci	r29, 0xFF	; 255
    2ce2:	e8 81       	ld	r30, Y
    2ce4:	f9 81       	ldd	r31, Y+1	; 0x01
    2ce6:	cc 5a       	subi	r28, 0xAC	; 172
    2ce8:	d0 40       	sbci	r29, 0x00	; 0
    2cea:	09 95       	icall
					switch(lfsm.remove(&lfsm,input_tmp)){ // feedback reply
    2cec:	64 96       	adiw	r28, 0x14	; 20
    2cee:	ee ad       	ldd	r30, Y+62	; 0x3e
    2cf0:	ff ad       	ldd	r31, Y+63	; 0x3f
    2cf2:	64 97       	sbiw	r28, 0x14	; 20
    2cf4:	60 2f       	mov	r22, r16
    2cf6:	ce 01       	movw	r24, r28
    2cf8:	8e 5b       	subi	r24, 0xBE	; 190
    2cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    2cfc:	09 95       	icall
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	8b 32       	cpi	r24, 0x2B	; 43
    2d02:	91 05       	cpc	r25, r1
    2d04:	08 f0       	brcs	.+2      	; 0x2d08 <main+0x72e>
    2d06:	57 c0       	rjmp	.+174    	; 0x2db6 <main+0x7dc>
    2d08:	fc 01       	movw	r30, r24
    2d0a:	e0 5b       	subi	r30, 0xB0	; 176
    2d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0e:	74 c4       	rjmp	.+2280   	; 0x35f8 <__tablejump2__>
						case 0:
							lcd.gotoxy(3,12);
    2d10:	6c e0       	ldi	r22, 0x0C	; 12
    2d12:	70 e0       	ldi	r23, 0x00	; 0
    2d14:	83 e0       	ldi	r24, 0x03	; 3
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	f6 01       	movw	r30, r12
    2d1a:	09 95       	icall
							lcd.string_size("Non",7);
    2d1c:	67 e0       	ldi	r22, 0x07	; 7
    2d1e:	80 e8       	ldi	r24, 0x80	; 128
    2d20:	91 e0       	ldi	r25, 0x01	; 1
    2d22:	f7 01       	movw	r30, r14
    2d24:	09 95       	icall
							break;
    2d26:	47 c0       	rjmp	.+142    	; 0x2db6 <main+0x7dc>
						case 1:
							lcd.gotoxy(3,12);
    2d28:	6c e0       	ldi	r22, 0x0C	; 12
    2d2a:	70 e0       	ldi	r23, 0x00	; 0
    2d2c:	83 e0       	ldi	r24, 0x03	; 3
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	f6 01       	movw	r30, r12
    2d32:	09 95       	icall
							lcd.string_size("Unknown",7);
    2d34:	67 e0       	ldi	r22, 0x07	; 7
    2d36:	84 e8       	ldi	r24, 0x84	; 132
    2d38:	91 e0       	ldi	r25, 0x01	; 1
    2d3a:	f7 01       	movw	r30, r14
    2d3c:	09 95       	icall
							break;
    2d3e:	3b c0       	rjmp	.+118    	; 0x2db6 <main+0x7dc>
						case 2:
							lcd.gotoxy(3,12);
    2d40:	6c e0       	ldi	r22, 0x0C	; 12
    2d42:	70 e0       	ldi	r23, 0x00	; 0
    2d44:	83 e0       	ldi	r24, 0x03	; 3
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	f6 01       	movw	r30, r12
    2d4a:	09 95       	icall
							lcd.string_size("g logic",7);
    2d4c:	67 e0       	ldi	r22, 0x07	; 7
    2d4e:	8c e8       	ldi	r24, 0x8C	; 140
    2d50:	91 e0       	ldi	r25, 0x01	; 1
    2d52:	f7 01       	movw	r30, r14
    2d54:	09 95       	icall
							break;
    2d56:	2f c0       	rjmp	.+94     	; 0x2db6 <main+0x7dc>
						case 3:
							lcd.gotoxy(3,12);
    2d58:	6c e0       	ldi	r22, 0x0C	; 12
    2d5a:	70 e0       	ldi	r23, 0x00	; 0
    2d5c:	83 e0       	ldi	r24, 0x03	; 3
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	f6 01       	movw	r30, r12
    2d62:	09 95       	icall
							lcd.string_size("l logic",7);
    2d64:	67 e0       	ldi	r22, 0x07	; 7
    2d66:	84 e9       	ldi	r24, 0x94	; 148
    2d68:	91 e0       	ldi	r25, 0x01	; 1
    2d6a:	f7 01       	movw	r30, r14
    2d6c:	09 95       	icall
							break;
    2d6e:	23 c0       	rjmp	.+70     	; 0x2db6 <main+0x7dc>
						case 4:
							lcd.gotoxy(3,12);
    2d70:	6c e0       	ldi	r22, 0x0C	; 12
    2d72:	70 e0       	ldi	r23, 0x00	; 0
    2d74:	83 e0       	ldi	r24, 0x03	; 3
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	f6 01       	movw	r30, r12
    2d7a:	09 95       	icall
							lcd.string_size("local",7);
    2d7c:	67 e0       	ldi	r22, 0x07	; 7
    2d7e:	8c e9       	ldi	r24, 0x9C	; 156
    2d80:	91 e0       	ldi	r25, 0x01	; 1
    2d82:	f7 01       	movw	r30, r14
    2d84:	09 95       	icall
							break;
    2d86:	17 c0       	rjmp	.+46     	; 0x2db6 <main+0x7dc>
						case 41:
							lcd.gotoxy(3,12);
    2d88:	6c e0       	ldi	r22, 0x0C	; 12
    2d8a:	70 e0       	ldi	r23, 0x00	; 0
    2d8c:	83 e0       	ldi	r24, 0x03	; 3
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	f6 01       	movw	r30, r12
    2d92:	09 95       	icall
							lcd.string_size("above",7);
    2d94:	67 e0       	ldi	r22, 0x07	; 7
    2d96:	82 ea       	ldi	r24, 0xA2	; 162
    2d98:	91 e0       	ldi	r25, 0x01	; 1
    2d9a:	f7 01       	movw	r30, r14
    2d9c:	09 95       	icall
							break;
    2d9e:	0b c0       	rjmp	.+22     	; 0x2db6 <main+0x7dc>
						case 42:
							lcd.gotoxy(3,12);
    2da0:	6c e0       	ldi	r22, 0x0C	; 12
    2da2:	70 e0       	ldi	r23, 0x00	; 0
    2da4:	83 e0       	ldi	r24, 0x03	; 3
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	f6 01       	movw	r30, r12
    2daa:	09 95       	icall
							lcd.string_size("bellow",7);
    2dac:	67 e0       	ldi	r22, 0x07	; 7
    2dae:	88 ea       	ldi	r24, 0xA8	; 168
    2db0:	91 e0       	ldi	r25, 0x01	; 1
    2db2:	f7 01       	movw	r30, r14
    2db4:	09 95       	icall
						default:
							break;
					}//End switch
					/******/
					//lfsm.read(&lfsm,input_tmp);
					keypad.flush();
    2db6:	f3 01       	movw	r30, r6
    2db8:	09 95       	icall
					option=0;
    2dba:	31 2c       	mov	r3, r1
    2dbc:	06 c0       	rjmp	.+12     	; 0x2dca <main+0x7f0>
				}//End if
				if(keypadinput.character == 'C'){ // Repeat Remove Data Entry
    2dbe:	f3 e4       	ldi	r31, 0x43	; 67
    2dc0:	5f 12       	cpse	r5, r31
    2dc2:	03 c0       	rjmp	.+6      	; 0x2dca <main+0x7f0>
					keypad.flush();
    2dc4:	f3 01       	movw	r30, r6
    2dc6:	09 95       	icall
					option=8;
    2dc8:	32 2c       	mov	r3, r2
				break;
			default:
				break;
		}//End switch
		/***DISPLAY***/
		lcd.gotoxy(3,0);
    2dca:	60 e0       	ldi	r22, 0x00	; 0
    2dcc:	70 e0       	ldi	r23, 0x00	; 0
    2dce:	83 e0       	ldi	r24, 0x03	; 3
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	f6 01       	movw	r30, r12
    2dd4:	09 95       	icall
		lcd.string_size("Output ",7);
    2dd6:	67 e0       	ldi	r22, 0x07	; 7
    2dd8:	8f ea       	ldi	r24, 0xAF	; 175
    2dda:	91 e0       	ldi	r25, 0x01	; 1
    2ddc:	f7 01       	movw	r30, r14
    2dde:	09 95       	icall
		string=func.ui16toa(lfsm.getoutput(&lfsm));
    2de0:	6a 96       	adiw	r28, 0x1a	; 26
    2de2:	ee ad       	ldd	r30, Y+62	; 0x3e
    2de4:	ff ad       	ldd	r31, Y+63	; 0x3f
    2de6:	6a 97       	sbiw	r28, 0x1a	; 26
    2de8:	ce 01       	movw	r24, r28
    2dea:	8e 5b       	subi	r24, 0xBE	; 190
    2dec:	9f 4f       	sbci	r25, 0xFF	; 255
    2dee:	09 95       	icall
    2df0:	f5 01       	movw	r30, r10
    2df2:	09 95       	icall
    2df4:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <string+0x1>
    2df8:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <string>
		lcd.string_size(string,4);
    2dfc:	64 e0       	ldi	r22, 0x04	; 4
    2dfe:	f7 01       	movw	r30, r14
    2e00:	09 95       	icall
		//lcd.hspace(2);
		//string=func.ui16toa(lfsm.getstatus(&lfsm));
		//lcd.string_size(string,4);
		//shift.byte(lfsm.getoutput(&lfsm));
		PORTC=~lfsm.getoutput(&lfsm);
    2e02:	6a 96       	adiw	r28, 0x1a	; 26
    2e04:	ee ad       	ldd	r30, Y+62	; 0x3e
    2e06:	ff ad       	ldd	r31, Y+63	; 0x3f
    2e08:	6a 97       	sbiw	r28, 0x1a	; 26
    2e0a:	ce 01       	movw	r24, r28
    2e0c:	8e 5b       	subi	r24, 0xBE	; 190
    2e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e10:	09 95       	icall
    2e12:	80 95       	com	r24
    2e14:	85 bb       	out	0x15, r24	; 21
    2e16:	63 cc       	rjmp	.-1850   	; 0x26de <main+0x104>

00002e18 <__subsf3>:
    2e18:	50 58       	subi	r21, 0x80	; 128

00002e1a <__addsf3>:
    2e1a:	bb 27       	eor	r27, r27
    2e1c:	aa 27       	eor	r26, r26
    2e1e:	0e d0       	rcall	.+28     	; 0x2e3c <__addsf3x>
    2e20:	75 c1       	rjmp	.+746    	; 0x310c <__fp_round>
    2e22:	66 d1       	rcall	.+716    	; 0x30f0 <__fp_pscA>
    2e24:	30 f0       	brcs	.+12     	; 0x2e32 <__addsf3+0x18>
    2e26:	6b d1       	rcall	.+726    	; 0x30fe <__fp_pscB>
    2e28:	20 f0       	brcs	.+8      	; 0x2e32 <__addsf3+0x18>
    2e2a:	31 f4       	brne	.+12     	; 0x2e38 <__addsf3+0x1e>
    2e2c:	9f 3f       	cpi	r25, 0xFF	; 255
    2e2e:	11 f4       	brne	.+4      	; 0x2e34 <__addsf3+0x1a>
    2e30:	1e f4       	brtc	.+6      	; 0x2e38 <__addsf3+0x1e>
    2e32:	5b c1       	rjmp	.+694    	; 0x30ea <__fp_nan>
    2e34:	0e f4       	brtc	.+2      	; 0x2e38 <__addsf3+0x1e>
    2e36:	e0 95       	com	r30
    2e38:	e7 fb       	bst	r30, 7
    2e3a:	51 c1       	rjmp	.+674    	; 0x30de <__fp_inf>

00002e3c <__addsf3x>:
    2e3c:	e9 2f       	mov	r30, r25
    2e3e:	77 d1       	rcall	.+750    	; 0x312e <__fp_split3>
    2e40:	80 f3       	brcs	.-32     	; 0x2e22 <__addsf3+0x8>
    2e42:	ba 17       	cp	r27, r26
    2e44:	62 07       	cpc	r22, r18
    2e46:	73 07       	cpc	r23, r19
    2e48:	84 07       	cpc	r24, r20
    2e4a:	95 07       	cpc	r25, r21
    2e4c:	18 f0       	brcs	.+6      	; 0x2e54 <__addsf3x+0x18>
    2e4e:	71 f4       	brne	.+28     	; 0x2e6c <__addsf3x+0x30>
    2e50:	9e f5       	brtc	.+102    	; 0x2eb8 <__addsf3x+0x7c>
    2e52:	8f c1       	rjmp	.+798    	; 0x3172 <__fp_zero>
    2e54:	0e f4       	brtc	.+2      	; 0x2e58 <__addsf3x+0x1c>
    2e56:	e0 95       	com	r30
    2e58:	0b 2e       	mov	r0, r27
    2e5a:	ba 2f       	mov	r27, r26
    2e5c:	a0 2d       	mov	r26, r0
    2e5e:	0b 01       	movw	r0, r22
    2e60:	b9 01       	movw	r22, r18
    2e62:	90 01       	movw	r18, r0
    2e64:	0c 01       	movw	r0, r24
    2e66:	ca 01       	movw	r24, r20
    2e68:	a0 01       	movw	r20, r0
    2e6a:	11 24       	eor	r1, r1
    2e6c:	ff 27       	eor	r31, r31
    2e6e:	59 1b       	sub	r21, r25
    2e70:	99 f0       	breq	.+38     	; 0x2e98 <__addsf3x+0x5c>
    2e72:	59 3f       	cpi	r21, 0xF9	; 249
    2e74:	50 f4       	brcc	.+20     	; 0x2e8a <__addsf3x+0x4e>
    2e76:	50 3e       	cpi	r21, 0xE0	; 224
    2e78:	68 f1       	brcs	.+90     	; 0x2ed4 <__addsf3x+0x98>
    2e7a:	1a 16       	cp	r1, r26
    2e7c:	f0 40       	sbci	r31, 0x00	; 0
    2e7e:	a2 2f       	mov	r26, r18
    2e80:	23 2f       	mov	r18, r19
    2e82:	34 2f       	mov	r19, r20
    2e84:	44 27       	eor	r20, r20
    2e86:	58 5f       	subi	r21, 0xF8	; 248
    2e88:	f3 cf       	rjmp	.-26     	; 0x2e70 <__addsf3x+0x34>
    2e8a:	46 95       	lsr	r20
    2e8c:	37 95       	ror	r19
    2e8e:	27 95       	ror	r18
    2e90:	a7 95       	ror	r26
    2e92:	f0 40       	sbci	r31, 0x00	; 0
    2e94:	53 95       	inc	r21
    2e96:	c9 f7       	brne	.-14     	; 0x2e8a <__addsf3x+0x4e>
    2e98:	7e f4       	brtc	.+30     	; 0x2eb8 <__addsf3x+0x7c>
    2e9a:	1f 16       	cp	r1, r31
    2e9c:	ba 0b       	sbc	r27, r26
    2e9e:	62 0b       	sbc	r22, r18
    2ea0:	73 0b       	sbc	r23, r19
    2ea2:	84 0b       	sbc	r24, r20
    2ea4:	ba f0       	brmi	.+46     	; 0x2ed4 <__addsf3x+0x98>
    2ea6:	91 50       	subi	r25, 0x01	; 1
    2ea8:	a1 f0       	breq	.+40     	; 0x2ed2 <__addsf3x+0x96>
    2eaa:	ff 0f       	add	r31, r31
    2eac:	bb 1f       	adc	r27, r27
    2eae:	66 1f       	adc	r22, r22
    2eb0:	77 1f       	adc	r23, r23
    2eb2:	88 1f       	adc	r24, r24
    2eb4:	c2 f7       	brpl	.-16     	; 0x2ea6 <__addsf3x+0x6a>
    2eb6:	0e c0       	rjmp	.+28     	; 0x2ed4 <__addsf3x+0x98>
    2eb8:	ba 0f       	add	r27, r26
    2eba:	62 1f       	adc	r22, r18
    2ebc:	73 1f       	adc	r23, r19
    2ebe:	84 1f       	adc	r24, r20
    2ec0:	48 f4       	brcc	.+18     	; 0x2ed4 <__addsf3x+0x98>
    2ec2:	87 95       	ror	r24
    2ec4:	77 95       	ror	r23
    2ec6:	67 95       	ror	r22
    2ec8:	b7 95       	ror	r27
    2eca:	f7 95       	ror	r31
    2ecc:	9e 3f       	cpi	r25, 0xFE	; 254
    2ece:	08 f0       	brcs	.+2      	; 0x2ed2 <__addsf3x+0x96>
    2ed0:	b3 cf       	rjmp	.-154    	; 0x2e38 <__addsf3+0x1e>
    2ed2:	93 95       	inc	r25
    2ed4:	88 0f       	add	r24, r24
    2ed6:	08 f0       	brcs	.+2      	; 0x2eda <__addsf3x+0x9e>
    2ed8:	99 27       	eor	r25, r25
    2eda:	ee 0f       	add	r30, r30
    2edc:	97 95       	ror	r25
    2ede:	87 95       	ror	r24
    2ee0:	08 95       	ret

00002ee2 <__cmpsf2>:
    2ee2:	d9 d0       	rcall	.+434    	; 0x3096 <__fp_cmp>
    2ee4:	08 f4       	brcc	.+2      	; 0x2ee8 <__cmpsf2+0x6>
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	08 95       	ret

00002eea <__divsf3>:
    2eea:	0c d0       	rcall	.+24     	; 0x2f04 <__divsf3x>
    2eec:	0f c1       	rjmp	.+542    	; 0x310c <__fp_round>
    2eee:	07 d1       	rcall	.+526    	; 0x30fe <__fp_pscB>
    2ef0:	40 f0       	brcs	.+16     	; 0x2f02 <__divsf3+0x18>
    2ef2:	fe d0       	rcall	.+508    	; 0x30f0 <__fp_pscA>
    2ef4:	30 f0       	brcs	.+12     	; 0x2f02 <__divsf3+0x18>
    2ef6:	21 f4       	brne	.+8      	; 0x2f00 <__divsf3+0x16>
    2ef8:	5f 3f       	cpi	r21, 0xFF	; 255
    2efa:	19 f0       	breq	.+6      	; 0x2f02 <__divsf3+0x18>
    2efc:	f0 c0       	rjmp	.+480    	; 0x30de <__fp_inf>
    2efe:	51 11       	cpse	r21, r1
    2f00:	39 c1       	rjmp	.+626    	; 0x3174 <__fp_szero>
    2f02:	f3 c0       	rjmp	.+486    	; 0x30ea <__fp_nan>

00002f04 <__divsf3x>:
    2f04:	14 d1       	rcall	.+552    	; 0x312e <__fp_split3>
    2f06:	98 f3       	brcs	.-26     	; 0x2eee <__divsf3+0x4>

00002f08 <__divsf3_pse>:
    2f08:	99 23       	and	r25, r25
    2f0a:	c9 f3       	breq	.-14     	; 0x2efe <__divsf3+0x14>
    2f0c:	55 23       	and	r21, r21
    2f0e:	b1 f3       	breq	.-20     	; 0x2efc <__divsf3+0x12>
    2f10:	95 1b       	sub	r25, r21
    2f12:	55 0b       	sbc	r21, r21
    2f14:	bb 27       	eor	r27, r27
    2f16:	aa 27       	eor	r26, r26
    2f18:	62 17       	cp	r22, r18
    2f1a:	73 07       	cpc	r23, r19
    2f1c:	84 07       	cpc	r24, r20
    2f1e:	38 f0       	brcs	.+14     	; 0x2f2e <__divsf3_pse+0x26>
    2f20:	9f 5f       	subi	r25, 0xFF	; 255
    2f22:	5f 4f       	sbci	r21, 0xFF	; 255
    2f24:	22 0f       	add	r18, r18
    2f26:	33 1f       	adc	r19, r19
    2f28:	44 1f       	adc	r20, r20
    2f2a:	aa 1f       	adc	r26, r26
    2f2c:	a9 f3       	breq	.-22     	; 0x2f18 <__divsf3_pse+0x10>
    2f2e:	33 d0       	rcall	.+102    	; 0x2f96 <__divsf3_pse+0x8e>
    2f30:	0e 2e       	mov	r0, r30
    2f32:	3a f0       	brmi	.+14     	; 0x2f42 <__divsf3_pse+0x3a>
    2f34:	e0 e8       	ldi	r30, 0x80	; 128
    2f36:	30 d0       	rcall	.+96     	; 0x2f98 <__divsf3_pse+0x90>
    2f38:	91 50       	subi	r25, 0x01	; 1
    2f3a:	50 40       	sbci	r21, 0x00	; 0
    2f3c:	e6 95       	lsr	r30
    2f3e:	00 1c       	adc	r0, r0
    2f40:	ca f7       	brpl	.-14     	; 0x2f34 <__divsf3_pse+0x2c>
    2f42:	29 d0       	rcall	.+82     	; 0x2f96 <__divsf3_pse+0x8e>
    2f44:	fe 2f       	mov	r31, r30
    2f46:	27 d0       	rcall	.+78     	; 0x2f96 <__divsf3_pse+0x8e>
    2f48:	66 0f       	add	r22, r22
    2f4a:	77 1f       	adc	r23, r23
    2f4c:	88 1f       	adc	r24, r24
    2f4e:	bb 1f       	adc	r27, r27
    2f50:	26 17       	cp	r18, r22
    2f52:	37 07       	cpc	r19, r23
    2f54:	48 07       	cpc	r20, r24
    2f56:	ab 07       	cpc	r26, r27
    2f58:	b0 e8       	ldi	r27, 0x80	; 128
    2f5a:	09 f0       	breq	.+2      	; 0x2f5e <__divsf3_pse+0x56>
    2f5c:	bb 0b       	sbc	r27, r27
    2f5e:	80 2d       	mov	r24, r0
    2f60:	bf 01       	movw	r22, r30
    2f62:	ff 27       	eor	r31, r31
    2f64:	93 58       	subi	r25, 0x83	; 131
    2f66:	5f 4f       	sbci	r21, 0xFF	; 255
    2f68:	2a f0       	brmi	.+10     	; 0x2f74 <__divsf3_pse+0x6c>
    2f6a:	9e 3f       	cpi	r25, 0xFE	; 254
    2f6c:	51 05       	cpc	r21, r1
    2f6e:	68 f0       	brcs	.+26     	; 0x2f8a <__divsf3_pse+0x82>
    2f70:	b6 c0       	rjmp	.+364    	; 0x30de <__fp_inf>
    2f72:	00 c1       	rjmp	.+512    	; 0x3174 <__fp_szero>
    2f74:	5f 3f       	cpi	r21, 0xFF	; 255
    2f76:	ec f3       	brlt	.-6      	; 0x2f72 <__divsf3_pse+0x6a>
    2f78:	98 3e       	cpi	r25, 0xE8	; 232
    2f7a:	dc f3       	brlt	.-10     	; 0x2f72 <__divsf3_pse+0x6a>
    2f7c:	86 95       	lsr	r24
    2f7e:	77 95       	ror	r23
    2f80:	67 95       	ror	r22
    2f82:	b7 95       	ror	r27
    2f84:	f7 95       	ror	r31
    2f86:	9f 5f       	subi	r25, 0xFF	; 255
    2f88:	c9 f7       	brne	.-14     	; 0x2f7c <__divsf3_pse+0x74>
    2f8a:	88 0f       	add	r24, r24
    2f8c:	91 1d       	adc	r25, r1
    2f8e:	96 95       	lsr	r25
    2f90:	87 95       	ror	r24
    2f92:	97 f9       	bld	r25, 7
    2f94:	08 95       	ret
    2f96:	e1 e0       	ldi	r30, 0x01	; 1
    2f98:	66 0f       	add	r22, r22
    2f9a:	77 1f       	adc	r23, r23
    2f9c:	88 1f       	adc	r24, r24
    2f9e:	bb 1f       	adc	r27, r27
    2fa0:	62 17       	cp	r22, r18
    2fa2:	73 07       	cpc	r23, r19
    2fa4:	84 07       	cpc	r24, r20
    2fa6:	ba 07       	cpc	r27, r26
    2fa8:	20 f0       	brcs	.+8      	; 0x2fb2 <__divsf3_pse+0xaa>
    2faa:	62 1b       	sub	r22, r18
    2fac:	73 0b       	sbc	r23, r19
    2fae:	84 0b       	sbc	r24, r20
    2fb0:	ba 0b       	sbc	r27, r26
    2fb2:	ee 1f       	adc	r30, r30
    2fb4:	88 f7       	brcc	.-30     	; 0x2f98 <__divsf3_pse+0x90>
    2fb6:	e0 95       	com	r30
    2fb8:	08 95       	ret

00002fba <__fixsfsi>:
    2fba:	04 d0       	rcall	.+8      	; 0x2fc4 <__fixunssfsi>
    2fbc:	68 94       	set
    2fbe:	b1 11       	cpse	r27, r1
    2fc0:	d9 c0       	rjmp	.+434    	; 0x3174 <__fp_szero>
    2fc2:	08 95       	ret

00002fc4 <__fixunssfsi>:
    2fc4:	bc d0       	rcall	.+376    	; 0x313e <__fp_splitA>
    2fc6:	88 f0       	brcs	.+34     	; 0x2fea <__fixunssfsi+0x26>
    2fc8:	9f 57       	subi	r25, 0x7F	; 127
    2fca:	90 f0       	brcs	.+36     	; 0x2ff0 <__fixunssfsi+0x2c>
    2fcc:	b9 2f       	mov	r27, r25
    2fce:	99 27       	eor	r25, r25
    2fd0:	b7 51       	subi	r27, 0x17	; 23
    2fd2:	a0 f0       	brcs	.+40     	; 0x2ffc <__fixunssfsi+0x38>
    2fd4:	d1 f0       	breq	.+52     	; 0x300a <__fixunssfsi+0x46>
    2fd6:	66 0f       	add	r22, r22
    2fd8:	77 1f       	adc	r23, r23
    2fda:	88 1f       	adc	r24, r24
    2fdc:	99 1f       	adc	r25, r25
    2fde:	1a f0       	brmi	.+6      	; 0x2fe6 <__fixunssfsi+0x22>
    2fe0:	ba 95       	dec	r27
    2fe2:	c9 f7       	brne	.-14     	; 0x2fd6 <__fixunssfsi+0x12>
    2fe4:	12 c0       	rjmp	.+36     	; 0x300a <__fixunssfsi+0x46>
    2fe6:	b1 30       	cpi	r27, 0x01	; 1
    2fe8:	81 f0       	breq	.+32     	; 0x300a <__fixunssfsi+0x46>
    2fea:	c3 d0       	rcall	.+390    	; 0x3172 <__fp_zero>
    2fec:	b1 e0       	ldi	r27, 0x01	; 1
    2fee:	08 95       	ret
    2ff0:	c0 c0       	rjmp	.+384    	; 0x3172 <__fp_zero>
    2ff2:	67 2f       	mov	r22, r23
    2ff4:	78 2f       	mov	r23, r24
    2ff6:	88 27       	eor	r24, r24
    2ff8:	b8 5f       	subi	r27, 0xF8	; 248
    2ffa:	39 f0       	breq	.+14     	; 0x300a <__fixunssfsi+0x46>
    2ffc:	b9 3f       	cpi	r27, 0xF9	; 249
    2ffe:	cc f3       	brlt	.-14     	; 0x2ff2 <__fixunssfsi+0x2e>
    3000:	86 95       	lsr	r24
    3002:	77 95       	ror	r23
    3004:	67 95       	ror	r22
    3006:	b3 95       	inc	r27
    3008:	d9 f7       	brne	.-10     	; 0x3000 <__fixunssfsi+0x3c>
    300a:	3e f4       	brtc	.+14     	; 0x301a <__fixunssfsi+0x56>
    300c:	90 95       	com	r25
    300e:	80 95       	com	r24
    3010:	70 95       	com	r23
    3012:	61 95       	neg	r22
    3014:	7f 4f       	sbci	r23, 0xFF	; 255
    3016:	8f 4f       	sbci	r24, 0xFF	; 255
    3018:	9f 4f       	sbci	r25, 0xFF	; 255
    301a:	08 95       	ret

0000301c <__floatunsisf>:
    301c:	e8 94       	clt
    301e:	09 c0       	rjmp	.+18     	; 0x3032 <__floatsisf+0x12>

00003020 <__floatsisf>:
    3020:	97 fb       	bst	r25, 7
    3022:	3e f4       	brtc	.+14     	; 0x3032 <__floatsisf+0x12>
    3024:	90 95       	com	r25
    3026:	80 95       	com	r24
    3028:	70 95       	com	r23
    302a:	61 95       	neg	r22
    302c:	7f 4f       	sbci	r23, 0xFF	; 255
    302e:	8f 4f       	sbci	r24, 0xFF	; 255
    3030:	9f 4f       	sbci	r25, 0xFF	; 255
    3032:	99 23       	and	r25, r25
    3034:	a9 f0       	breq	.+42     	; 0x3060 <__floatsisf+0x40>
    3036:	f9 2f       	mov	r31, r25
    3038:	96 e9       	ldi	r25, 0x96	; 150
    303a:	bb 27       	eor	r27, r27
    303c:	93 95       	inc	r25
    303e:	f6 95       	lsr	r31
    3040:	87 95       	ror	r24
    3042:	77 95       	ror	r23
    3044:	67 95       	ror	r22
    3046:	b7 95       	ror	r27
    3048:	f1 11       	cpse	r31, r1
    304a:	f8 cf       	rjmp	.-16     	; 0x303c <__floatsisf+0x1c>
    304c:	fa f4       	brpl	.+62     	; 0x308c <__floatsisf+0x6c>
    304e:	bb 0f       	add	r27, r27
    3050:	11 f4       	brne	.+4      	; 0x3056 <__floatsisf+0x36>
    3052:	60 ff       	sbrs	r22, 0
    3054:	1b c0       	rjmp	.+54     	; 0x308c <__floatsisf+0x6c>
    3056:	6f 5f       	subi	r22, 0xFF	; 255
    3058:	7f 4f       	sbci	r23, 0xFF	; 255
    305a:	8f 4f       	sbci	r24, 0xFF	; 255
    305c:	9f 4f       	sbci	r25, 0xFF	; 255
    305e:	16 c0       	rjmp	.+44     	; 0x308c <__floatsisf+0x6c>
    3060:	88 23       	and	r24, r24
    3062:	11 f0       	breq	.+4      	; 0x3068 <__floatsisf+0x48>
    3064:	96 e9       	ldi	r25, 0x96	; 150
    3066:	11 c0       	rjmp	.+34     	; 0x308a <__floatsisf+0x6a>
    3068:	77 23       	and	r23, r23
    306a:	21 f0       	breq	.+8      	; 0x3074 <__floatsisf+0x54>
    306c:	9e e8       	ldi	r25, 0x8E	; 142
    306e:	87 2f       	mov	r24, r23
    3070:	76 2f       	mov	r23, r22
    3072:	05 c0       	rjmp	.+10     	; 0x307e <__floatsisf+0x5e>
    3074:	66 23       	and	r22, r22
    3076:	71 f0       	breq	.+28     	; 0x3094 <__floatsisf+0x74>
    3078:	96 e8       	ldi	r25, 0x86	; 134
    307a:	86 2f       	mov	r24, r22
    307c:	70 e0       	ldi	r23, 0x00	; 0
    307e:	60 e0       	ldi	r22, 0x00	; 0
    3080:	2a f0       	brmi	.+10     	; 0x308c <__floatsisf+0x6c>
    3082:	9a 95       	dec	r25
    3084:	66 0f       	add	r22, r22
    3086:	77 1f       	adc	r23, r23
    3088:	88 1f       	adc	r24, r24
    308a:	da f7       	brpl	.-10     	; 0x3082 <__floatsisf+0x62>
    308c:	88 0f       	add	r24, r24
    308e:	96 95       	lsr	r25
    3090:	87 95       	ror	r24
    3092:	97 f9       	bld	r25, 7
    3094:	08 95       	ret

00003096 <__fp_cmp>:
    3096:	99 0f       	add	r25, r25
    3098:	00 08       	sbc	r0, r0
    309a:	55 0f       	add	r21, r21
    309c:	aa 0b       	sbc	r26, r26
    309e:	e0 e8       	ldi	r30, 0x80	; 128
    30a0:	fe ef       	ldi	r31, 0xFE	; 254
    30a2:	16 16       	cp	r1, r22
    30a4:	17 06       	cpc	r1, r23
    30a6:	e8 07       	cpc	r30, r24
    30a8:	f9 07       	cpc	r31, r25
    30aa:	c0 f0       	brcs	.+48     	; 0x30dc <__fp_cmp+0x46>
    30ac:	12 16       	cp	r1, r18
    30ae:	13 06       	cpc	r1, r19
    30b0:	e4 07       	cpc	r30, r20
    30b2:	f5 07       	cpc	r31, r21
    30b4:	98 f0       	brcs	.+38     	; 0x30dc <__fp_cmp+0x46>
    30b6:	62 1b       	sub	r22, r18
    30b8:	73 0b       	sbc	r23, r19
    30ba:	84 0b       	sbc	r24, r20
    30bc:	95 0b       	sbc	r25, r21
    30be:	39 f4       	brne	.+14     	; 0x30ce <__fp_cmp+0x38>
    30c0:	0a 26       	eor	r0, r26
    30c2:	61 f0       	breq	.+24     	; 0x30dc <__fp_cmp+0x46>
    30c4:	23 2b       	or	r18, r19
    30c6:	24 2b       	or	r18, r20
    30c8:	25 2b       	or	r18, r21
    30ca:	21 f4       	brne	.+8      	; 0x30d4 <__fp_cmp+0x3e>
    30cc:	08 95       	ret
    30ce:	0a 26       	eor	r0, r26
    30d0:	09 f4       	brne	.+2      	; 0x30d4 <__fp_cmp+0x3e>
    30d2:	a1 40       	sbci	r26, 0x01	; 1
    30d4:	a6 95       	lsr	r26
    30d6:	8f ef       	ldi	r24, 0xFF	; 255
    30d8:	81 1d       	adc	r24, r1
    30da:	81 1d       	adc	r24, r1
    30dc:	08 95       	ret

000030de <__fp_inf>:
    30de:	97 f9       	bld	r25, 7
    30e0:	9f 67       	ori	r25, 0x7F	; 127
    30e2:	80 e8       	ldi	r24, 0x80	; 128
    30e4:	70 e0       	ldi	r23, 0x00	; 0
    30e6:	60 e0       	ldi	r22, 0x00	; 0
    30e8:	08 95       	ret

000030ea <__fp_nan>:
    30ea:	9f ef       	ldi	r25, 0xFF	; 255
    30ec:	80 ec       	ldi	r24, 0xC0	; 192
    30ee:	08 95       	ret

000030f0 <__fp_pscA>:
    30f0:	00 24       	eor	r0, r0
    30f2:	0a 94       	dec	r0
    30f4:	16 16       	cp	r1, r22
    30f6:	17 06       	cpc	r1, r23
    30f8:	18 06       	cpc	r1, r24
    30fa:	09 06       	cpc	r0, r25
    30fc:	08 95       	ret

000030fe <__fp_pscB>:
    30fe:	00 24       	eor	r0, r0
    3100:	0a 94       	dec	r0
    3102:	12 16       	cp	r1, r18
    3104:	13 06       	cpc	r1, r19
    3106:	14 06       	cpc	r1, r20
    3108:	05 06       	cpc	r0, r21
    310a:	08 95       	ret

0000310c <__fp_round>:
    310c:	09 2e       	mov	r0, r25
    310e:	03 94       	inc	r0
    3110:	00 0c       	add	r0, r0
    3112:	11 f4       	brne	.+4      	; 0x3118 <__fp_round+0xc>
    3114:	88 23       	and	r24, r24
    3116:	52 f0       	brmi	.+20     	; 0x312c <__fp_round+0x20>
    3118:	bb 0f       	add	r27, r27
    311a:	40 f4       	brcc	.+16     	; 0x312c <__fp_round+0x20>
    311c:	bf 2b       	or	r27, r31
    311e:	11 f4       	brne	.+4      	; 0x3124 <__fp_round+0x18>
    3120:	60 ff       	sbrs	r22, 0
    3122:	04 c0       	rjmp	.+8      	; 0x312c <__fp_round+0x20>
    3124:	6f 5f       	subi	r22, 0xFF	; 255
    3126:	7f 4f       	sbci	r23, 0xFF	; 255
    3128:	8f 4f       	sbci	r24, 0xFF	; 255
    312a:	9f 4f       	sbci	r25, 0xFF	; 255
    312c:	08 95       	ret

0000312e <__fp_split3>:
    312e:	57 fd       	sbrc	r21, 7
    3130:	90 58       	subi	r25, 0x80	; 128
    3132:	44 0f       	add	r20, r20
    3134:	55 1f       	adc	r21, r21
    3136:	59 f0       	breq	.+22     	; 0x314e <__fp_splitA+0x10>
    3138:	5f 3f       	cpi	r21, 0xFF	; 255
    313a:	71 f0       	breq	.+28     	; 0x3158 <__fp_splitA+0x1a>
    313c:	47 95       	ror	r20

0000313e <__fp_splitA>:
    313e:	88 0f       	add	r24, r24
    3140:	97 fb       	bst	r25, 7
    3142:	99 1f       	adc	r25, r25
    3144:	61 f0       	breq	.+24     	; 0x315e <__fp_splitA+0x20>
    3146:	9f 3f       	cpi	r25, 0xFF	; 255
    3148:	79 f0       	breq	.+30     	; 0x3168 <__fp_splitA+0x2a>
    314a:	87 95       	ror	r24
    314c:	08 95       	ret
    314e:	12 16       	cp	r1, r18
    3150:	13 06       	cpc	r1, r19
    3152:	14 06       	cpc	r1, r20
    3154:	55 1f       	adc	r21, r21
    3156:	f2 cf       	rjmp	.-28     	; 0x313c <__fp_split3+0xe>
    3158:	46 95       	lsr	r20
    315a:	f1 df       	rcall	.-30     	; 0x313e <__fp_splitA>
    315c:	08 c0       	rjmp	.+16     	; 0x316e <__fp_splitA+0x30>
    315e:	16 16       	cp	r1, r22
    3160:	17 06       	cpc	r1, r23
    3162:	18 06       	cpc	r1, r24
    3164:	99 1f       	adc	r25, r25
    3166:	f1 cf       	rjmp	.-30     	; 0x314a <__fp_splitA+0xc>
    3168:	86 95       	lsr	r24
    316a:	71 05       	cpc	r23, r1
    316c:	61 05       	cpc	r22, r1
    316e:	08 94       	sec
    3170:	08 95       	ret

00003172 <__fp_zero>:
    3172:	e8 94       	clt

00003174 <__fp_szero>:
    3174:	bb 27       	eor	r27, r27
    3176:	66 27       	eor	r22, r22
    3178:	77 27       	eor	r23, r23
    317a:	cb 01       	movw	r24, r22
    317c:	97 f9       	bld	r25, 7
    317e:	08 95       	ret

00003180 <__mulsf3>:
    3180:	0b d0       	rcall	.+22     	; 0x3198 <__mulsf3x>
    3182:	c4 cf       	rjmp	.-120    	; 0x310c <__fp_round>
    3184:	b5 df       	rcall	.-150    	; 0x30f0 <__fp_pscA>
    3186:	28 f0       	brcs	.+10     	; 0x3192 <__mulsf3+0x12>
    3188:	ba df       	rcall	.-140    	; 0x30fe <__fp_pscB>
    318a:	18 f0       	brcs	.+6      	; 0x3192 <__mulsf3+0x12>
    318c:	95 23       	and	r25, r21
    318e:	09 f0       	breq	.+2      	; 0x3192 <__mulsf3+0x12>
    3190:	a6 cf       	rjmp	.-180    	; 0x30de <__fp_inf>
    3192:	ab cf       	rjmp	.-170    	; 0x30ea <__fp_nan>
    3194:	11 24       	eor	r1, r1
    3196:	ee cf       	rjmp	.-36     	; 0x3174 <__fp_szero>

00003198 <__mulsf3x>:
    3198:	ca df       	rcall	.-108    	; 0x312e <__fp_split3>
    319a:	a0 f3       	brcs	.-24     	; 0x3184 <__mulsf3+0x4>

0000319c <__mulsf3_pse>:
    319c:	95 9f       	mul	r25, r21
    319e:	d1 f3       	breq	.-12     	; 0x3194 <__mulsf3+0x14>
    31a0:	95 0f       	add	r25, r21
    31a2:	50 e0       	ldi	r21, 0x00	; 0
    31a4:	55 1f       	adc	r21, r21
    31a6:	62 9f       	mul	r22, r18
    31a8:	f0 01       	movw	r30, r0
    31aa:	72 9f       	mul	r23, r18
    31ac:	bb 27       	eor	r27, r27
    31ae:	f0 0d       	add	r31, r0
    31b0:	b1 1d       	adc	r27, r1
    31b2:	63 9f       	mul	r22, r19
    31b4:	aa 27       	eor	r26, r26
    31b6:	f0 0d       	add	r31, r0
    31b8:	b1 1d       	adc	r27, r1
    31ba:	aa 1f       	adc	r26, r26
    31bc:	64 9f       	mul	r22, r20
    31be:	66 27       	eor	r22, r22
    31c0:	b0 0d       	add	r27, r0
    31c2:	a1 1d       	adc	r26, r1
    31c4:	66 1f       	adc	r22, r22
    31c6:	82 9f       	mul	r24, r18
    31c8:	22 27       	eor	r18, r18
    31ca:	b0 0d       	add	r27, r0
    31cc:	a1 1d       	adc	r26, r1
    31ce:	62 1f       	adc	r22, r18
    31d0:	73 9f       	mul	r23, r19
    31d2:	b0 0d       	add	r27, r0
    31d4:	a1 1d       	adc	r26, r1
    31d6:	62 1f       	adc	r22, r18
    31d8:	83 9f       	mul	r24, r19
    31da:	a0 0d       	add	r26, r0
    31dc:	61 1d       	adc	r22, r1
    31de:	22 1f       	adc	r18, r18
    31e0:	74 9f       	mul	r23, r20
    31e2:	33 27       	eor	r19, r19
    31e4:	a0 0d       	add	r26, r0
    31e6:	61 1d       	adc	r22, r1
    31e8:	23 1f       	adc	r18, r19
    31ea:	84 9f       	mul	r24, r20
    31ec:	60 0d       	add	r22, r0
    31ee:	21 1d       	adc	r18, r1
    31f0:	82 2f       	mov	r24, r18
    31f2:	76 2f       	mov	r23, r22
    31f4:	6a 2f       	mov	r22, r26
    31f6:	11 24       	eor	r1, r1
    31f8:	9f 57       	subi	r25, 0x7F	; 127
    31fa:	50 40       	sbci	r21, 0x00	; 0
    31fc:	8a f0       	brmi	.+34     	; 0x3220 <__mulsf3_pse+0x84>
    31fe:	e1 f0       	breq	.+56     	; 0x3238 <__mulsf3_pse+0x9c>
    3200:	88 23       	and	r24, r24
    3202:	4a f0       	brmi	.+18     	; 0x3216 <__mulsf3_pse+0x7a>
    3204:	ee 0f       	add	r30, r30
    3206:	ff 1f       	adc	r31, r31
    3208:	bb 1f       	adc	r27, r27
    320a:	66 1f       	adc	r22, r22
    320c:	77 1f       	adc	r23, r23
    320e:	88 1f       	adc	r24, r24
    3210:	91 50       	subi	r25, 0x01	; 1
    3212:	50 40       	sbci	r21, 0x00	; 0
    3214:	a9 f7       	brne	.-22     	; 0x3200 <__mulsf3_pse+0x64>
    3216:	9e 3f       	cpi	r25, 0xFE	; 254
    3218:	51 05       	cpc	r21, r1
    321a:	70 f0       	brcs	.+28     	; 0x3238 <__mulsf3_pse+0x9c>
    321c:	60 cf       	rjmp	.-320    	; 0x30de <__fp_inf>
    321e:	aa cf       	rjmp	.-172    	; 0x3174 <__fp_szero>
    3220:	5f 3f       	cpi	r21, 0xFF	; 255
    3222:	ec f3       	brlt	.-6      	; 0x321e <__mulsf3_pse+0x82>
    3224:	98 3e       	cpi	r25, 0xE8	; 232
    3226:	dc f3       	brlt	.-10     	; 0x321e <__mulsf3_pse+0x82>
    3228:	86 95       	lsr	r24
    322a:	77 95       	ror	r23
    322c:	67 95       	ror	r22
    322e:	b7 95       	ror	r27
    3230:	f7 95       	ror	r31
    3232:	e7 95       	ror	r30
    3234:	9f 5f       	subi	r25, 0xFF	; 255
    3236:	c1 f7       	brne	.-16     	; 0x3228 <__mulsf3_pse+0x8c>
    3238:	fe 2b       	or	r31, r30
    323a:	88 0f       	add	r24, r24
    323c:	91 1d       	adc	r25, r1
    323e:	96 95       	lsr	r25
    3240:	87 95       	ror	r24
    3242:	97 f9       	bld	r25, 7
    3244:	08 95       	ret

00003246 <pow>:
    3246:	fa 01       	movw	r30, r20
    3248:	ee 0f       	add	r30, r30
    324a:	ff 1f       	adc	r31, r31
    324c:	30 96       	adiw	r30, 0x00	; 0
    324e:	21 05       	cpc	r18, r1
    3250:	31 05       	cpc	r19, r1
    3252:	99 f1       	breq	.+102    	; 0x32ba <pow+0x74>
    3254:	61 15       	cp	r22, r1
    3256:	71 05       	cpc	r23, r1
    3258:	61 f4       	brne	.+24     	; 0x3272 <pow+0x2c>
    325a:	80 38       	cpi	r24, 0x80	; 128
    325c:	bf e3       	ldi	r27, 0x3F	; 63
    325e:	9b 07       	cpc	r25, r27
    3260:	49 f1       	breq	.+82     	; 0x32b4 <pow+0x6e>
    3262:	68 94       	set
    3264:	90 38       	cpi	r25, 0x80	; 128
    3266:	81 05       	cpc	r24, r1
    3268:	61 f0       	breq	.+24     	; 0x3282 <pow+0x3c>
    326a:	80 38       	cpi	r24, 0x80	; 128
    326c:	bf ef       	ldi	r27, 0xFF	; 255
    326e:	9b 07       	cpc	r25, r27
    3270:	41 f0       	breq	.+16     	; 0x3282 <pow+0x3c>
    3272:	99 23       	and	r25, r25
    3274:	42 f5       	brpl	.+80     	; 0x32c6 <pow+0x80>
    3276:	ff 3f       	cpi	r31, 0xFF	; 255
    3278:	e1 05       	cpc	r30, r1
    327a:	31 05       	cpc	r19, r1
    327c:	21 05       	cpc	r18, r1
    327e:	11 f1       	breq	.+68     	; 0x32c4 <pow+0x7e>
    3280:	e8 94       	clt
    3282:	08 94       	sec
    3284:	e7 95       	ror	r30
    3286:	d9 01       	movw	r26, r18
    3288:	aa 23       	and	r26, r26
    328a:	29 f4       	brne	.+10     	; 0x3296 <pow+0x50>
    328c:	ab 2f       	mov	r26, r27
    328e:	be 2f       	mov	r27, r30
    3290:	f8 5f       	subi	r31, 0xF8	; 248
    3292:	d0 f3       	brcs	.-12     	; 0x3288 <pow+0x42>
    3294:	10 c0       	rjmp	.+32     	; 0x32b6 <pow+0x70>
    3296:	ff 5f       	subi	r31, 0xFF	; 255
    3298:	70 f4       	brcc	.+28     	; 0x32b6 <pow+0x70>
    329a:	a6 95       	lsr	r26
    329c:	e0 f7       	brcc	.-8      	; 0x3296 <pow+0x50>
    329e:	f7 39       	cpi	r31, 0x97	; 151
    32a0:	50 f0       	brcs	.+20     	; 0x32b6 <pow+0x70>
    32a2:	19 f0       	breq	.+6      	; 0x32aa <pow+0x64>
    32a4:	ff 3a       	cpi	r31, 0xAF	; 175
    32a6:	38 f4       	brcc	.+14     	; 0x32b6 <pow+0x70>
    32a8:	9f 77       	andi	r25, 0x7F	; 127
    32aa:	9f 93       	push	r25
    32ac:	0c d0       	rcall	.+24     	; 0x32c6 <pow+0x80>
    32ae:	0f 90       	pop	r0
    32b0:	07 fc       	sbrc	r0, 7
    32b2:	90 58       	subi	r25, 0x80	; 128
    32b4:	08 95       	ret
    32b6:	3e f0       	brts	.+14     	; 0x32c6 <pow+0x80>
    32b8:	18 cf       	rjmp	.-464    	; 0x30ea <__fp_nan>
    32ba:	60 e0       	ldi	r22, 0x00	; 0
    32bc:	70 e0       	ldi	r23, 0x00	; 0
    32be:	80 e8       	ldi	r24, 0x80	; 128
    32c0:	9f e3       	ldi	r25, 0x3F	; 63
    32c2:	08 95       	ret
    32c4:	4f e7       	ldi	r20, 0x7F	; 127
    32c6:	9f 77       	andi	r25, 0x7F	; 127
    32c8:	5f 93       	push	r21
    32ca:	4f 93       	push	r20
    32cc:	3f 93       	push	r19
    32ce:	2f 93       	push	r18
    32d0:	9e d0       	rcall	.+316    	; 0x340e <log>
    32d2:	2f 91       	pop	r18
    32d4:	3f 91       	pop	r19
    32d6:	4f 91       	pop	r20
    32d8:	5f 91       	pop	r21
    32da:	52 df       	rcall	.-348    	; 0x3180 <__mulsf3>
    32dc:	05 c0       	rjmp	.+10     	; 0x32e8 <exp>
    32de:	19 f4       	brne	.+6      	; 0x32e6 <pow+0xa0>
    32e0:	0e f0       	brts	.+2      	; 0x32e4 <pow+0x9e>
    32e2:	fd ce       	rjmp	.-518    	; 0x30de <__fp_inf>
    32e4:	46 cf       	rjmp	.-372    	; 0x3172 <__fp_zero>
    32e6:	01 cf       	rjmp	.-510    	; 0x30ea <__fp_nan>

000032e8 <exp>:
    32e8:	2a df       	rcall	.-428    	; 0x313e <__fp_splitA>
    32ea:	c8 f3       	brcs	.-14     	; 0x32de <pow+0x98>
    32ec:	96 38       	cpi	r25, 0x86	; 134
    32ee:	c0 f7       	brcc	.-16     	; 0x32e0 <pow+0x9a>
    32f0:	07 f8       	bld	r0, 7
    32f2:	0f 92       	push	r0
    32f4:	e8 94       	clt
    32f6:	2b e3       	ldi	r18, 0x3B	; 59
    32f8:	3a ea       	ldi	r19, 0xAA	; 170
    32fa:	48 eb       	ldi	r20, 0xB8	; 184
    32fc:	5f e7       	ldi	r21, 0x7F	; 127
    32fe:	4e df       	rcall	.-356    	; 0x319c <__mulsf3_pse>
    3300:	0f 92       	push	r0
    3302:	0f 92       	push	r0
    3304:	0f 92       	push	r0
    3306:	4d b7       	in	r20, 0x3d	; 61
    3308:	5e b7       	in	r21, 0x3e	; 62
    330a:	0f 92       	push	r0
    330c:	c0 d0       	rcall	.+384    	; 0x348e <modf>
    330e:	e6 ef       	ldi	r30, 0xF6	; 246
    3310:	f0 e0       	ldi	r31, 0x00	; 0
    3312:	16 d0       	rcall	.+44     	; 0x3340 <__fp_powser>
    3314:	4f 91       	pop	r20
    3316:	5f 91       	pop	r21
    3318:	ef 91       	pop	r30
    331a:	ff 91       	pop	r31
    331c:	e5 95       	asr	r30
    331e:	ee 1f       	adc	r30, r30
    3320:	ff 1f       	adc	r31, r31
    3322:	49 f0       	breq	.+18     	; 0x3336 <exp+0x4e>
    3324:	fe 57       	subi	r31, 0x7E	; 126
    3326:	e0 68       	ori	r30, 0x80	; 128
    3328:	44 27       	eor	r20, r20
    332a:	ee 0f       	add	r30, r30
    332c:	44 1f       	adc	r20, r20
    332e:	fa 95       	dec	r31
    3330:	e1 f7       	brne	.-8      	; 0x332a <exp+0x42>
    3332:	41 95       	neg	r20
    3334:	55 0b       	sbc	r21, r21
    3336:	32 d0       	rcall	.+100    	; 0x339c <ldexp>
    3338:	0f 90       	pop	r0
    333a:	07 fe       	sbrs	r0, 7
    333c:	26 c0       	rjmp	.+76     	; 0x338a <inverse>
    333e:	08 95       	ret

00003340 <__fp_powser>:
    3340:	df 93       	push	r29
    3342:	cf 93       	push	r28
    3344:	1f 93       	push	r17
    3346:	0f 93       	push	r16
    3348:	ff 92       	push	r15
    334a:	ef 92       	push	r14
    334c:	df 92       	push	r13
    334e:	7b 01       	movw	r14, r22
    3350:	8c 01       	movw	r16, r24
    3352:	68 94       	set
    3354:	05 c0       	rjmp	.+10     	; 0x3360 <__fp_powser+0x20>
    3356:	da 2e       	mov	r13, r26
    3358:	ef 01       	movw	r28, r30
    335a:	1e df       	rcall	.-452    	; 0x3198 <__mulsf3x>
    335c:	fe 01       	movw	r30, r28
    335e:	e8 94       	clt
    3360:	a5 91       	lpm	r26, Z+
    3362:	25 91       	lpm	r18, Z+
    3364:	35 91       	lpm	r19, Z+
    3366:	45 91       	lpm	r20, Z+
    3368:	55 91       	lpm	r21, Z+
    336a:	ae f3       	brts	.-22     	; 0x3356 <__fp_powser+0x16>
    336c:	ef 01       	movw	r28, r30
    336e:	66 dd       	rcall	.-1332   	; 0x2e3c <__addsf3x>
    3370:	fe 01       	movw	r30, r28
    3372:	97 01       	movw	r18, r14
    3374:	a8 01       	movw	r20, r16
    3376:	da 94       	dec	r13
    3378:	79 f7       	brne	.-34     	; 0x3358 <__fp_powser+0x18>
    337a:	df 90       	pop	r13
    337c:	ef 90       	pop	r14
    337e:	ff 90       	pop	r15
    3380:	0f 91       	pop	r16
    3382:	1f 91       	pop	r17
    3384:	cf 91       	pop	r28
    3386:	df 91       	pop	r29
    3388:	08 95       	ret

0000338a <inverse>:
    338a:	9b 01       	movw	r18, r22
    338c:	ac 01       	movw	r20, r24
    338e:	60 e0       	ldi	r22, 0x00	; 0
    3390:	70 e0       	ldi	r23, 0x00	; 0
    3392:	80 e8       	ldi	r24, 0x80	; 128
    3394:	9f e3       	ldi	r25, 0x3F	; 63
    3396:	a9 cd       	rjmp	.-1198   	; 0x2eea <__divsf3>
    3398:	a2 ce       	rjmp	.-700    	; 0x30de <__fp_inf>
    339a:	ac c0       	rjmp	.+344    	; 0x34f4 <__fp_mpack>

0000339c <ldexp>:
    339c:	d0 de       	rcall	.-608    	; 0x313e <__fp_splitA>
    339e:	e8 f3       	brcs	.-6      	; 0x339a <inverse+0x10>
    33a0:	99 23       	and	r25, r25
    33a2:	d9 f3       	breq	.-10     	; 0x339a <inverse+0x10>
    33a4:	94 0f       	add	r25, r20
    33a6:	51 1d       	adc	r21, r1
    33a8:	bb f3       	brvs	.-18     	; 0x3398 <inverse+0xe>
    33aa:	91 50       	subi	r25, 0x01	; 1
    33ac:	50 40       	sbci	r21, 0x00	; 0
    33ae:	94 f0       	brlt	.+36     	; 0x33d4 <ldexp+0x38>
    33b0:	59 f0       	breq	.+22     	; 0x33c8 <ldexp+0x2c>
    33b2:	88 23       	and	r24, r24
    33b4:	32 f0       	brmi	.+12     	; 0x33c2 <ldexp+0x26>
    33b6:	66 0f       	add	r22, r22
    33b8:	77 1f       	adc	r23, r23
    33ba:	88 1f       	adc	r24, r24
    33bc:	91 50       	subi	r25, 0x01	; 1
    33be:	50 40       	sbci	r21, 0x00	; 0
    33c0:	c1 f7       	brne	.-16     	; 0x33b2 <ldexp+0x16>
    33c2:	9e 3f       	cpi	r25, 0xFE	; 254
    33c4:	51 05       	cpc	r21, r1
    33c6:	44 f7       	brge	.-48     	; 0x3398 <inverse+0xe>
    33c8:	88 0f       	add	r24, r24
    33ca:	91 1d       	adc	r25, r1
    33cc:	96 95       	lsr	r25
    33ce:	87 95       	ror	r24
    33d0:	97 f9       	bld	r25, 7
    33d2:	08 95       	ret
    33d4:	5f 3f       	cpi	r21, 0xFF	; 255
    33d6:	ac f0       	brlt	.+42     	; 0x3402 <ldexp+0x66>
    33d8:	98 3e       	cpi	r25, 0xE8	; 232
    33da:	9c f0       	brlt	.+38     	; 0x3402 <ldexp+0x66>
    33dc:	bb 27       	eor	r27, r27
    33de:	86 95       	lsr	r24
    33e0:	77 95       	ror	r23
    33e2:	67 95       	ror	r22
    33e4:	b7 95       	ror	r27
    33e6:	08 f4       	brcc	.+2      	; 0x33ea <ldexp+0x4e>
    33e8:	b1 60       	ori	r27, 0x01	; 1
    33ea:	93 95       	inc	r25
    33ec:	c1 f7       	brne	.-16     	; 0x33de <ldexp+0x42>
    33ee:	bb 0f       	add	r27, r27
    33f0:	58 f7       	brcc	.-42     	; 0x33c8 <ldexp+0x2c>
    33f2:	11 f4       	brne	.+4      	; 0x33f8 <ldexp+0x5c>
    33f4:	60 ff       	sbrs	r22, 0
    33f6:	e8 cf       	rjmp	.-48     	; 0x33c8 <ldexp+0x2c>
    33f8:	6f 5f       	subi	r22, 0xFF	; 255
    33fa:	7f 4f       	sbci	r23, 0xFF	; 255
    33fc:	8f 4f       	sbci	r24, 0xFF	; 255
    33fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3400:	e3 cf       	rjmp	.-58     	; 0x33c8 <ldexp+0x2c>
    3402:	b8 ce       	rjmp	.-656    	; 0x3174 <__fp_szero>
    3404:	0e f0       	brts	.+2      	; 0x3408 <ldexp+0x6c>
    3406:	76 c0       	rjmp	.+236    	; 0x34f4 <__fp_mpack>
    3408:	70 ce       	rjmp	.-800    	; 0x30ea <__fp_nan>
    340a:	68 94       	set
    340c:	68 ce       	rjmp	.-816    	; 0x30de <__fp_inf>

0000340e <log>:
    340e:	97 de       	rcall	.-722    	; 0x313e <__fp_splitA>
    3410:	c8 f3       	brcs	.-14     	; 0x3404 <ldexp+0x68>
    3412:	99 23       	and	r25, r25
    3414:	d1 f3       	breq	.-12     	; 0x340a <ldexp+0x6e>
    3416:	c6 f3       	brts	.-16     	; 0x3408 <ldexp+0x6c>
    3418:	df 93       	push	r29
    341a:	cf 93       	push	r28
    341c:	1f 93       	push	r17
    341e:	0f 93       	push	r16
    3420:	ff 92       	push	r15
    3422:	c9 2f       	mov	r28, r25
    3424:	dd 27       	eor	r29, r29
    3426:	88 23       	and	r24, r24
    3428:	2a f0       	brmi	.+10     	; 0x3434 <log+0x26>
    342a:	21 97       	sbiw	r28, 0x01	; 1
    342c:	66 0f       	add	r22, r22
    342e:	77 1f       	adc	r23, r23
    3430:	88 1f       	adc	r24, r24
    3432:	da f7       	brpl	.-10     	; 0x342a <log+0x1c>
    3434:	20 e0       	ldi	r18, 0x00	; 0
    3436:	30 e0       	ldi	r19, 0x00	; 0
    3438:	40 e8       	ldi	r20, 0x80	; 128
    343a:	5f eb       	ldi	r21, 0xBF	; 191
    343c:	9f e3       	ldi	r25, 0x3F	; 63
    343e:	88 39       	cpi	r24, 0x98	; 152
    3440:	20 f0       	brcs	.+8      	; 0x344a <log+0x3c>
    3442:	80 3e       	cpi	r24, 0xE0	; 224
    3444:	30 f0       	brcs	.+12     	; 0x3452 <log+0x44>
    3446:	21 96       	adiw	r28, 0x01	; 1
    3448:	8f 77       	andi	r24, 0x7F	; 127
    344a:	e7 dc       	rcall	.-1586   	; 0x2e1a <__addsf3>
    344c:	ee e1       	ldi	r30, 0x1E	; 30
    344e:	f1 e0       	ldi	r31, 0x01	; 1
    3450:	03 c0       	rjmp	.+6      	; 0x3458 <log+0x4a>
    3452:	e3 dc       	rcall	.-1594   	; 0x2e1a <__addsf3>
    3454:	eb e4       	ldi	r30, 0x4B	; 75
    3456:	f1 e0       	ldi	r31, 0x01	; 1
    3458:	73 df       	rcall	.-282    	; 0x3340 <__fp_powser>
    345a:	8b 01       	movw	r16, r22
    345c:	be 01       	movw	r22, r28
    345e:	ec 01       	movw	r28, r24
    3460:	fb 2e       	mov	r15, r27
    3462:	6f 57       	subi	r22, 0x7F	; 127
    3464:	71 09       	sbc	r23, r1
    3466:	75 95       	asr	r23
    3468:	77 1f       	adc	r23, r23
    346a:	88 0b       	sbc	r24, r24
    346c:	99 0b       	sbc	r25, r25
    346e:	d8 dd       	rcall	.-1104   	; 0x3020 <__floatsisf>
    3470:	28 e1       	ldi	r18, 0x18	; 24
    3472:	32 e7       	ldi	r19, 0x72	; 114
    3474:	41 e3       	ldi	r20, 0x31	; 49
    3476:	5f e3       	ldi	r21, 0x3F	; 63
    3478:	8f de       	rcall	.-738    	; 0x3198 <__mulsf3x>
    347a:	af 2d       	mov	r26, r15
    347c:	98 01       	movw	r18, r16
    347e:	ae 01       	movw	r20, r28
    3480:	ff 90       	pop	r15
    3482:	0f 91       	pop	r16
    3484:	1f 91       	pop	r17
    3486:	cf 91       	pop	r28
    3488:	df 91       	pop	r29
    348a:	d8 dc       	rcall	.-1616   	; 0x2e3c <__addsf3x>
    348c:	3f ce       	rjmp	.-898    	; 0x310c <__fp_round>

0000348e <modf>:
    348e:	fa 01       	movw	r30, r20
    3490:	dc 01       	movw	r26, r24
    3492:	aa 0f       	add	r26, r26
    3494:	bb 1f       	adc	r27, r27
    3496:	9b 01       	movw	r18, r22
    3498:	ac 01       	movw	r20, r24
    349a:	bf 57       	subi	r27, 0x7F	; 127
    349c:	28 f4       	brcc	.+10     	; 0x34a8 <modf+0x1a>
    349e:	22 27       	eor	r18, r18
    34a0:	33 27       	eor	r19, r19
    34a2:	44 27       	eor	r20, r20
    34a4:	50 78       	andi	r21, 0x80	; 128
    34a6:	1f c0       	rjmp	.+62     	; 0x34e6 <modf+0x58>
    34a8:	b7 51       	subi	r27, 0x17	; 23
    34aa:	88 f4       	brcc	.+34     	; 0x34ce <modf+0x40>
    34ac:	ab 2f       	mov	r26, r27
    34ae:	00 24       	eor	r0, r0
    34b0:	46 95       	lsr	r20
    34b2:	37 95       	ror	r19
    34b4:	27 95       	ror	r18
    34b6:	01 1c       	adc	r0, r1
    34b8:	a3 95       	inc	r26
    34ba:	d2 f3       	brmi	.-12     	; 0x34b0 <modf+0x22>
    34bc:	00 20       	and	r0, r0
    34be:	69 f0       	breq	.+26     	; 0x34da <modf+0x4c>
    34c0:	22 0f       	add	r18, r18
    34c2:	33 1f       	adc	r19, r19
    34c4:	44 1f       	adc	r20, r20
    34c6:	b3 95       	inc	r27
    34c8:	da f3       	brmi	.-10     	; 0x34c0 <modf+0x32>
    34ca:	0d d0       	rcall	.+26     	; 0x34e6 <modf+0x58>
    34cc:	a5 cc       	rjmp	.-1718   	; 0x2e18 <__subsf3>
    34ce:	61 30       	cpi	r22, 0x01	; 1
    34d0:	71 05       	cpc	r23, r1
    34d2:	a0 e8       	ldi	r26, 0x80	; 128
    34d4:	8a 07       	cpc	r24, r26
    34d6:	b9 46       	sbci	r27, 0x69	; 105
    34d8:	30 f4       	brcc	.+12     	; 0x34e6 <modf+0x58>
    34da:	9b 01       	movw	r18, r22
    34dc:	ac 01       	movw	r20, r24
    34de:	66 27       	eor	r22, r22
    34e0:	77 27       	eor	r23, r23
    34e2:	88 27       	eor	r24, r24
    34e4:	90 78       	andi	r25, 0x80	; 128
    34e6:	30 96       	adiw	r30, 0x00	; 0
    34e8:	21 f0       	breq	.+8      	; 0x34f2 <modf+0x64>
    34ea:	20 83       	st	Z, r18
    34ec:	31 83       	std	Z+1, r19	; 0x01
    34ee:	42 83       	std	Z+2, r20	; 0x02
    34f0:	53 83       	std	Z+3, r21	; 0x03
    34f2:	08 95       	ret

000034f4 <__fp_mpack>:
    34f4:	9f 3f       	cpi	r25, 0xFF	; 255
    34f6:	31 f0       	breq	.+12     	; 0x3504 <__fp_mpack_finite+0xc>

000034f8 <__fp_mpack_finite>:
    34f8:	91 50       	subi	r25, 0x01	; 1
    34fa:	20 f4       	brcc	.+8      	; 0x3504 <__fp_mpack_finite+0xc>
    34fc:	87 95       	ror	r24
    34fe:	77 95       	ror	r23
    3500:	67 95       	ror	r22
    3502:	b7 95       	ror	r27
    3504:	88 0f       	add	r24, r24
    3506:	91 1d       	adc	r25, r1
    3508:	96 95       	lsr	r25
    350a:	87 95       	ror	r24
    350c:	97 f9       	bld	r25, 7
    350e:	08 95       	ret

00003510 <__mulsi3>:
    3510:	db 01       	movw	r26, r22
    3512:	8f 93       	push	r24
    3514:	9f 93       	push	r25
    3516:	88 d0       	rcall	.+272    	; 0x3628 <__muluhisi3>
    3518:	bf 91       	pop	r27
    351a:	af 91       	pop	r26
    351c:	a2 9f       	mul	r26, r18
    351e:	80 0d       	add	r24, r0
    3520:	91 1d       	adc	r25, r1
    3522:	a3 9f       	mul	r26, r19
    3524:	90 0d       	add	r25, r0
    3526:	b2 9f       	mul	r27, r18
    3528:	90 0d       	add	r25, r0
    352a:	11 24       	eor	r1, r1
    352c:	08 95       	ret

0000352e <__udivmodhi4>:
    352e:	aa 1b       	sub	r26, r26
    3530:	bb 1b       	sub	r27, r27
    3532:	51 e1       	ldi	r21, 0x11	; 17
    3534:	07 c0       	rjmp	.+14     	; 0x3544 <__udivmodhi4_ep>

00003536 <__udivmodhi4_loop>:
    3536:	aa 1f       	adc	r26, r26
    3538:	bb 1f       	adc	r27, r27
    353a:	a6 17       	cp	r26, r22
    353c:	b7 07       	cpc	r27, r23
    353e:	10 f0       	brcs	.+4      	; 0x3544 <__udivmodhi4_ep>
    3540:	a6 1b       	sub	r26, r22
    3542:	b7 0b       	sbc	r27, r23

00003544 <__udivmodhi4_ep>:
    3544:	88 1f       	adc	r24, r24
    3546:	99 1f       	adc	r25, r25
    3548:	5a 95       	dec	r21
    354a:	a9 f7       	brne	.-22     	; 0x3536 <__udivmodhi4_loop>
    354c:	80 95       	com	r24
    354e:	90 95       	com	r25
    3550:	bc 01       	movw	r22, r24
    3552:	cd 01       	movw	r24, r26
    3554:	08 95       	ret

00003556 <__divmodhi4>:
    3556:	97 fb       	bst	r25, 7
    3558:	07 2e       	mov	r0, r23
    355a:	16 f4       	brtc	.+4      	; 0x3560 <__divmodhi4+0xa>
    355c:	00 94       	com	r0
    355e:	06 d0       	rcall	.+12     	; 0x356c <__divmodhi4_neg1>
    3560:	77 fd       	sbrc	r23, 7
    3562:	08 d0       	rcall	.+16     	; 0x3574 <__divmodhi4_neg2>
    3564:	e4 df       	rcall	.-56     	; 0x352e <__udivmodhi4>
    3566:	07 fc       	sbrc	r0, 7
    3568:	05 d0       	rcall	.+10     	; 0x3574 <__divmodhi4_neg2>
    356a:	3e f4       	brtc	.+14     	; 0x357a <__divmodhi4_exit>

0000356c <__divmodhi4_neg1>:
    356c:	90 95       	com	r25
    356e:	81 95       	neg	r24
    3570:	9f 4f       	sbci	r25, 0xFF	; 255
    3572:	08 95       	ret

00003574 <__divmodhi4_neg2>:
    3574:	70 95       	com	r23
    3576:	61 95       	neg	r22
    3578:	7f 4f       	sbci	r23, 0xFF	; 255

0000357a <__divmodhi4_exit>:
    357a:	08 95       	ret

0000357c <__udivmodsi4>:
    357c:	a1 e2       	ldi	r26, 0x21	; 33
    357e:	1a 2e       	mov	r1, r26
    3580:	aa 1b       	sub	r26, r26
    3582:	bb 1b       	sub	r27, r27
    3584:	fd 01       	movw	r30, r26
    3586:	0d c0       	rjmp	.+26     	; 0x35a2 <__udivmodsi4_ep>

00003588 <__udivmodsi4_loop>:
    3588:	aa 1f       	adc	r26, r26
    358a:	bb 1f       	adc	r27, r27
    358c:	ee 1f       	adc	r30, r30
    358e:	ff 1f       	adc	r31, r31
    3590:	a2 17       	cp	r26, r18
    3592:	b3 07       	cpc	r27, r19
    3594:	e4 07       	cpc	r30, r20
    3596:	f5 07       	cpc	r31, r21
    3598:	20 f0       	brcs	.+8      	; 0x35a2 <__udivmodsi4_ep>
    359a:	a2 1b       	sub	r26, r18
    359c:	b3 0b       	sbc	r27, r19
    359e:	e4 0b       	sbc	r30, r20
    35a0:	f5 0b       	sbc	r31, r21

000035a2 <__udivmodsi4_ep>:
    35a2:	66 1f       	adc	r22, r22
    35a4:	77 1f       	adc	r23, r23
    35a6:	88 1f       	adc	r24, r24
    35a8:	99 1f       	adc	r25, r25
    35aa:	1a 94       	dec	r1
    35ac:	69 f7       	brne	.-38     	; 0x3588 <__udivmodsi4_loop>
    35ae:	60 95       	com	r22
    35b0:	70 95       	com	r23
    35b2:	80 95       	com	r24
    35b4:	90 95       	com	r25
    35b6:	9b 01       	movw	r18, r22
    35b8:	ac 01       	movw	r20, r24
    35ba:	bd 01       	movw	r22, r26
    35bc:	cf 01       	movw	r24, r30
    35be:	08 95       	ret

000035c0 <__divmodsi4>:
    35c0:	05 2e       	mov	r0, r21
    35c2:	97 fb       	bst	r25, 7
    35c4:	16 f4       	brtc	.+4      	; 0x35ca <__divmodsi4+0xa>
    35c6:	00 94       	com	r0
    35c8:	0f d0       	rcall	.+30     	; 0x35e8 <__negsi2>
    35ca:	57 fd       	sbrc	r21, 7
    35cc:	05 d0       	rcall	.+10     	; 0x35d8 <__divmodsi4_neg2>
    35ce:	d6 df       	rcall	.-84     	; 0x357c <__udivmodsi4>
    35d0:	07 fc       	sbrc	r0, 7
    35d2:	02 d0       	rcall	.+4      	; 0x35d8 <__divmodsi4_neg2>
    35d4:	46 f4       	brtc	.+16     	; 0x35e6 <__divmodsi4_exit>
    35d6:	08 c0       	rjmp	.+16     	; 0x35e8 <__negsi2>

000035d8 <__divmodsi4_neg2>:
    35d8:	50 95       	com	r21
    35da:	40 95       	com	r20
    35dc:	30 95       	com	r19
    35de:	21 95       	neg	r18
    35e0:	3f 4f       	sbci	r19, 0xFF	; 255
    35e2:	4f 4f       	sbci	r20, 0xFF	; 255
    35e4:	5f 4f       	sbci	r21, 0xFF	; 255

000035e6 <__divmodsi4_exit>:
    35e6:	08 95       	ret

000035e8 <__negsi2>:
    35e8:	90 95       	com	r25
    35ea:	80 95       	com	r24
    35ec:	70 95       	com	r23
    35ee:	61 95       	neg	r22
    35f0:	7f 4f       	sbci	r23, 0xFF	; 255
    35f2:	8f 4f       	sbci	r24, 0xFF	; 255
    35f4:	9f 4f       	sbci	r25, 0xFF	; 255
    35f6:	08 95       	ret

000035f8 <__tablejump2__>:
    35f8:	ee 0f       	add	r30, r30
    35fa:	ff 1f       	adc	r31, r31
    35fc:	00 24       	eor	r0, r0
    35fe:	00 1c       	adc	r0, r0
    3600:	0b be       	out	0x3b, r0	; 59
    3602:	07 90       	elpm	r0, Z+
    3604:	f6 91       	elpm	r31, Z
    3606:	e0 2d       	mov	r30, r0
    3608:	09 94       	ijmp

0000360a <__umulhisi3>:
    360a:	a2 9f       	mul	r26, r18
    360c:	b0 01       	movw	r22, r0
    360e:	b3 9f       	mul	r27, r19
    3610:	c0 01       	movw	r24, r0
    3612:	a3 9f       	mul	r26, r19
    3614:	70 0d       	add	r23, r0
    3616:	81 1d       	adc	r24, r1
    3618:	11 24       	eor	r1, r1
    361a:	91 1d       	adc	r25, r1
    361c:	b2 9f       	mul	r27, r18
    361e:	70 0d       	add	r23, r0
    3620:	81 1d       	adc	r24, r1
    3622:	11 24       	eor	r1, r1
    3624:	91 1d       	adc	r25, r1
    3626:	08 95       	ret

00003628 <__muluhisi3>:
    3628:	f0 df       	rcall	.-32     	; 0x360a <__umulhisi3>
    362a:	a5 9f       	mul	r26, r21
    362c:	90 0d       	add	r25, r0
    362e:	b4 9f       	mul	r27, r20
    3630:	90 0d       	add	r25, r0
    3632:	a4 9f       	mul	r26, r20
    3634:	80 0d       	add	r24, r0
    3636:	91 1d       	adc	r25, r1
    3638:	11 24       	eor	r1, r1
    363a:	08 95       	ret

0000363c <vsnprintf>:
    363c:	0f 93       	push	r16
    363e:	1f 93       	push	r17
    3640:	cf 93       	push	r28
    3642:	df 93       	push	r29
    3644:	cd b7       	in	r28, 0x3d	; 61
    3646:	de b7       	in	r29, 0x3e	; 62
    3648:	2e 97       	sbiw	r28, 0x0e	; 14
    364a:	0f b6       	in	r0, 0x3f	; 63
    364c:	f8 94       	cli
    364e:	de bf       	out	0x3e, r29	; 62
    3650:	0f be       	out	0x3f, r0	; 63
    3652:	cd bf       	out	0x3d, r28	; 61
    3654:	8c 01       	movw	r16, r24
    3656:	fa 01       	movw	r30, r20
    3658:	86 e0       	ldi	r24, 0x06	; 6
    365a:	8c 83       	std	Y+4, r24	; 0x04
    365c:	1a 83       	std	Y+2, r17	; 0x02
    365e:	09 83       	std	Y+1, r16	; 0x01
    3660:	77 ff       	sbrs	r23, 7
    3662:	02 c0       	rjmp	.+4      	; 0x3668 <vsnprintf+0x2c>
    3664:	60 e0       	ldi	r22, 0x00	; 0
    3666:	70 e8       	ldi	r23, 0x80	; 128
    3668:	cb 01       	movw	r24, r22
    366a:	01 97       	sbiw	r24, 0x01	; 1
    366c:	9e 83       	std	Y+6, r25	; 0x06
    366e:	8d 83       	std	Y+5, r24	; 0x05
    3670:	a9 01       	movw	r20, r18
    3672:	bf 01       	movw	r22, r30
    3674:	ce 01       	movw	r24, r28
    3676:	01 96       	adiw	r24, 0x01	; 1
    3678:	19 d0       	rcall	.+50     	; 0x36ac <vfprintf>
    367a:	4d 81       	ldd	r20, Y+5	; 0x05
    367c:	5e 81       	ldd	r21, Y+6	; 0x06
    367e:	57 fd       	sbrc	r21, 7
    3680:	0a c0       	rjmp	.+20     	; 0x3696 <vsnprintf+0x5a>
    3682:	2f 81       	ldd	r18, Y+7	; 0x07
    3684:	38 85       	ldd	r19, Y+8	; 0x08
    3686:	42 17       	cp	r20, r18
    3688:	53 07       	cpc	r21, r19
    368a:	0c f4       	brge	.+2      	; 0x368e <vsnprintf+0x52>
    368c:	9a 01       	movw	r18, r20
    368e:	f8 01       	movw	r30, r16
    3690:	e2 0f       	add	r30, r18
    3692:	f3 1f       	adc	r31, r19
    3694:	10 82       	st	Z, r1
    3696:	2e 96       	adiw	r28, 0x0e	; 14
    3698:	0f b6       	in	r0, 0x3f	; 63
    369a:	f8 94       	cli
    369c:	de bf       	out	0x3e, r29	; 62
    369e:	0f be       	out	0x3f, r0	; 63
    36a0:	cd bf       	out	0x3d, r28	; 61
    36a2:	df 91       	pop	r29
    36a4:	cf 91       	pop	r28
    36a6:	1f 91       	pop	r17
    36a8:	0f 91       	pop	r16
    36aa:	08 95       	ret

000036ac <vfprintf>:
    36ac:	2f 92       	push	r2
    36ae:	3f 92       	push	r3
    36b0:	4f 92       	push	r4
    36b2:	5f 92       	push	r5
    36b4:	6f 92       	push	r6
    36b6:	7f 92       	push	r7
    36b8:	8f 92       	push	r8
    36ba:	9f 92       	push	r9
    36bc:	af 92       	push	r10
    36be:	bf 92       	push	r11
    36c0:	cf 92       	push	r12
    36c2:	df 92       	push	r13
    36c4:	ef 92       	push	r14
    36c6:	ff 92       	push	r15
    36c8:	0f 93       	push	r16
    36ca:	1f 93       	push	r17
    36cc:	cf 93       	push	r28
    36ce:	df 93       	push	r29
    36d0:	cd b7       	in	r28, 0x3d	; 61
    36d2:	de b7       	in	r29, 0x3e	; 62
    36d4:	2b 97       	sbiw	r28, 0x0b	; 11
    36d6:	0f b6       	in	r0, 0x3f	; 63
    36d8:	f8 94       	cli
    36da:	de bf       	out	0x3e, r29	; 62
    36dc:	0f be       	out	0x3f, r0	; 63
    36de:	cd bf       	out	0x3d, r28	; 61
    36e0:	6c 01       	movw	r12, r24
    36e2:	7b 01       	movw	r14, r22
    36e4:	8a 01       	movw	r16, r20
    36e6:	fc 01       	movw	r30, r24
    36e8:	17 82       	std	Z+7, r1	; 0x07
    36ea:	16 82       	std	Z+6, r1	; 0x06
    36ec:	83 81       	ldd	r24, Z+3	; 0x03
    36ee:	81 ff       	sbrs	r24, 1
    36f0:	bf c1       	rjmp	.+894    	; 0x3a70 <vfprintf+0x3c4>
    36f2:	ce 01       	movw	r24, r28
    36f4:	01 96       	adiw	r24, 0x01	; 1
    36f6:	3c 01       	movw	r6, r24
    36f8:	f6 01       	movw	r30, r12
    36fa:	93 81       	ldd	r25, Z+3	; 0x03
    36fc:	f7 01       	movw	r30, r14
    36fe:	93 fd       	sbrc	r25, 3
    3700:	85 91       	lpm	r24, Z+
    3702:	93 ff       	sbrs	r25, 3
    3704:	81 91       	ld	r24, Z+
    3706:	7f 01       	movw	r14, r30
    3708:	88 23       	and	r24, r24
    370a:	09 f4       	brne	.+2      	; 0x370e <vfprintf+0x62>
    370c:	ad c1       	rjmp	.+858    	; 0x3a68 <vfprintf+0x3bc>
    370e:	85 32       	cpi	r24, 0x25	; 37
    3710:	39 f4       	brne	.+14     	; 0x3720 <vfprintf+0x74>
    3712:	93 fd       	sbrc	r25, 3
    3714:	85 91       	lpm	r24, Z+
    3716:	93 ff       	sbrs	r25, 3
    3718:	81 91       	ld	r24, Z+
    371a:	7f 01       	movw	r14, r30
    371c:	85 32       	cpi	r24, 0x25	; 37
    371e:	21 f4       	brne	.+8      	; 0x3728 <vfprintf+0x7c>
    3720:	b6 01       	movw	r22, r12
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	d6 d1       	rcall	.+940    	; 0x3ad2 <fputc>
    3726:	e8 cf       	rjmp	.-48     	; 0x36f8 <vfprintf+0x4c>
    3728:	91 2c       	mov	r9, r1
    372a:	21 2c       	mov	r2, r1
    372c:	31 2c       	mov	r3, r1
    372e:	ff e1       	ldi	r31, 0x1F	; 31
    3730:	f3 15       	cp	r31, r3
    3732:	d8 f0       	brcs	.+54     	; 0x376a <vfprintf+0xbe>
    3734:	8b 32       	cpi	r24, 0x2B	; 43
    3736:	79 f0       	breq	.+30     	; 0x3756 <vfprintf+0xaa>
    3738:	38 f4       	brcc	.+14     	; 0x3748 <vfprintf+0x9c>
    373a:	80 32       	cpi	r24, 0x20	; 32
    373c:	79 f0       	breq	.+30     	; 0x375c <vfprintf+0xb0>
    373e:	83 32       	cpi	r24, 0x23	; 35
    3740:	a1 f4       	brne	.+40     	; 0x376a <vfprintf+0xbe>
    3742:	23 2d       	mov	r18, r3
    3744:	20 61       	ori	r18, 0x10	; 16
    3746:	1d c0       	rjmp	.+58     	; 0x3782 <vfprintf+0xd6>
    3748:	8d 32       	cpi	r24, 0x2D	; 45
    374a:	61 f0       	breq	.+24     	; 0x3764 <vfprintf+0xb8>
    374c:	80 33       	cpi	r24, 0x30	; 48
    374e:	69 f4       	brne	.+26     	; 0x376a <vfprintf+0xbe>
    3750:	23 2d       	mov	r18, r3
    3752:	21 60       	ori	r18, 0x01	; 1
    3754:	16 c0       	rjmp	.+44     	; 0x3782 <vfprintf+0xd6>
    3756:	83 2d       	mov	r24, r3
    3758:	82 60       	ori	r24, 0x02	; 2
    375a:	38 2e       	mov	r3, r24
    375c:	e3 2d       	mov	r30, r3
    375e:	e4 60       	ori	r30, 0x04	; 4
    3760:	3e 2e       	mov	r3, r30
    3762:	2a c0       	rjmp	.+84     	; 0x37b8 <vfprintf+0x10c>
    3764:	f3 2d       	mov	r31, r3
    3766:	f8 60       	ori	r31, 0x08	; 8
    3768:	1d c0       	rjmp	.+58     	; 0x37a4 <vfprintf+0xf8>
    376a:	37 fc       	sbrc	r3, 7
    376c:	2d c0       	rjmp	.+90     	; 0x37c8 <vfprintf+0x11c>
    376e:	20 ed       	ldi	r18, 0xD0	; 208
    3770:	28 0f       	add	r18, r24
    3772:	2a 30       	cpi	r18, 0x0A	; 10
    3774:	40 f0       	brcs	.+16     	; 0x3786 <vfprintf+0xda>
    3776:	8e 32       	cpi	r24, 0x2E	; 46
    3778:	b9 f4       	brne	.+46     	; 0x37a8 <vfprintf+0xfc>
    377a:	36 fc       	sbrc	r3, 6
    377c:	75 c1       	rjmp	.+746    	; 0x3a68 <vfprintf+0x3bc>
    377e:	23 2d       	mov	r18, r3
    3780:	20 64       	ori	r18, 0x40	; 64
    3782:	32 2e       	mov	r3, r18
    3784:	19 c0       	rjmp	.+50     	; 0x37b8 <vfprintf+0x10c>
    3786:	36 fe       	sbrs	r3, 6
    3788:	06 c0       	rjmp	.+12     	; 0x3796 <vfprintf+0xea>
    378a:	8a e0       	ldi	r24, 0x0A	; 10
    378c:	98 9e       	mul	r9, r24
    378e:	20 0d       	add	r18, r0
    3790:	11 24       	eor	r1, r1
    3792:	92 2e       	mov	r9, r18
    3794:	11 c0       	rjmp	.+34     	; 0x37b8 <vfprintf+0x10c>
    3796:	ea e0       	ldi	r30, 0x0A	; 10
    3798:	2e 9e       	mul	r2, r30
    379a:	20 0d       	add	r18, r0
    379c:	11 24       	eor	r1, r1
    379e:	22 2e       	mov	r2, r18
    37a0:	f3 2d       	mov	r31, r3
    37a2:	f0 62       	ori	r31, 0x20	; 32
    37a4:	3f 2e       	mov	r3, r31
    37a6:	08 c0       	rjmp	.+16     	; 0x37b8 <vfprintf+0x10c>
    37a8:	8c 36       	cpi	r24, 0x6C	; 108
    37aa:	21 f4       	brne	.+8      	; 0x37b4 <vfprintf+0x108>
    37ac:	83 2d       	mov	r24, r3
    37ae:	80 68       	ori	r24, 0x80	; 128
    37b0:	38 2e       	mov	r3, r24
    37b2:	02 c0       	rjmp	.+4      	; 0x37b8 <vfprintf+0x10c>
    37b4:	88 36       	cpi	r24, 0x68	; 104
    37b6:	41 f4       	brne	.+16     	; 0x37c8 <vfprintf+0x11c>
    37b8:	f7 01       	movw	r30, r14
    37ba:	93 fd       	sbrc	r25, 3
    37bc:	85 91       	lpm	r24, Z+
    37be:	93 ff       	sbrs	r25, 3
    37c0:	81 91       	ld	r24, Z+
    37c2:	7f 01       	movw	r14, r30
    37c4:	81 11       	cpse	r24, r1
    37c6:	b3 cf       	rjmp	.-154    	; 0x372e <vfprintf+0x82>
    37c8:	98 2f       	mov	r25, r24
    37ca:	9f 7d       	andi	r25, 0xDF	; 223
    37cc:	95 54       	subi	r25, 0x45	; 69
    37ce:	93 30       	cpi	r25, 0x03	; 3
    37d0:	28 f4       	brcc	.+10     	; 0x37dc <vfprintf+0x130>
    37d2:	0c 5f       	subi	r16, 0xFC	; 252
    37d4:	1f 4f       	sbci	r17, 0xFF	; 255
    37d6:	9f e3       	ldi	r25, 0x3F	; 63
    37d8:	99 83       	std	Y+1, r25	; 0x01
    37da:	0d c0       	rjmp	.+26     	; 0x37f6 <vfprintf+0x14a>
    37dc:	83 36       	cpi	r24, 0x63	; 99
    37de:	31 f0       	breq	.+12     	; 0x37ec <vfprintf+0x140>
    37e0:	83 37       	cpi	r24, 0x73	; 115
    37e2:	71 f0       	breq	.+28     	; 0x3800 <vfprintf+0x154>
    37e4:	83 35       	cpi	r24, 0x53	; 83
    37e6:	09 f0       	breq	.+2      	; 0x37ea <vfprintf+0x13e>
    37e8:	55 c0       	rjmp	.+170    	; 0x3894 <vfprintf+0x1e8>
    37ea:	20 c0       	rjmp	.+64     	; 0x382c <vfprintf+0x180>
    37ec:	f8 01       	movw	r30, r16
    37ee:	80 81       	ld	r24, Z
    37f0:	89 83       	std	Y+1, r24	; 0x01
    37f2:	0e 5f       	subi	r16, 0xFE	; 254
    37f4:	1f 4f       	sbci	r17, 0xFF	; 255
    37f6:	88 24       	eor	r8, r8
    37f8:	83 94       	inc	r8
    37fa:	91 2c       	mov	r9, r1
    37fc:	53 01       	movw	r10, r6
    37fe:	12 c0       	rjmp	.+36     	; 0x3824 <vfprintf+0x178>
    3800:	28 01       	movw	r4, r16
    3802:	f2 e0       	ldi	r31, 0x02	; 2
    3804:	4f 0e       	add	r4, r31
    3806:	51 1c       	adc	r5, r1
    3808:	f8 01       	movw	r30, r16
    380a:	a0 80       	ld	r10, Z
    380c:	b1 80       	ldd	r11, Z+1	; 0x01
    380e:	36 fe       	sbrs	r3, 6
    3810:	03 c0       	rjmp	.+6      	; 0x3818 <vfprintf+0x16c>
    3812:	69 2d       	mov	r22, r9
    3814:	70 e0       	ldi	r23, 0x00	; 0
    3816:	02 c0       	rjmp	.+4      	; 0x381c <vfprintf+0x170>
    3818:	6f ef       	ldi	r22, 0xFF	; 255
    381a:	7f ef       	ldi	r23, 0xFF	; 255
    381c:	c5 01       	movw	r24, r10
    381e:	4e d1       	rcall	.+668    	; 0x3abc <strnlen>
    3820:	4c 01       	movw	r8, r24
    3822:	82 01       	movw	r16, r4
    3824:	f3 2d       	mov	r31, r3
    3826:	ff 77       	andi	r31, 0x7F	; 127
    3828:	3f 2e       	mov	r3, r31
    382a:	15 c0       	rjmp	.+42     	; 0x3856 <vfprintf+0x1aa>
    382c:	28 01       	movw	r4, r16
    382e:	22 e0       	ldi	r18, 0x02	; 2
    3830:	42 0e       	add	r4, r18
    3832:	51 1c       	adc	r5, r1
    3834:	f8 01       	movw	r30, r16
    3836:	a0 80       	ld	r10, Z
    3838:	b1 80       	ldd	r11, Z+1	; 0x01
    383a:	36 fe       	sbrs	r3, 6
    383c:	03 c0       	rjmp	.+6      	; 0x3844 <vfprintf+0x198>
    383e:	69 2d       	mov	r22, r9
    3840:	70 e0       	ldi	r23, 0x00	; 0
    3842:	02 c0       	rjmp	.+4      	; 0x3848 <vfprintf+0x19c>
    3844:	6f ef       	ldi	r22, 0xFF	; 255
    3846:	7f ef       	ldi	r23, 0xFF	; 255
    3848:	c5 01       	movw	r24, r10
    384a:	2d d1       	rcall	.+602    	; 0x3aa6 <strnlen_P>
    384c:	4c 01       	movw	r8, r24
    384e:	f3 2d       	mov	r31, r3
    3850:	f0 68       	ori	r31, 0x80	; 128
    3852:	3f 2e       	mov	r3, r31
    3854:	82 01       	movw	r16, r4
    3856:	33 fc       	sbrc	r3, 3
    3858:	19 c0       	rjmp	.+50     	; 0x388c <vfprintf+0x1e0>
    385a:	82 2d       	mov	r24, r2
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	88 16       	cp	r8, r24
    3860:	99 06       	cpc	r9, r25
    3862:	a0 f4       	brcc	.+40     	; 0x388c <vfprintf+0x1e0>
    3864:	b6 01       	movw	r22, r12
    3866:	80 e2       	ldi	r24, 0x20	; 32
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	33 d1       	rcall	.+614    	; 0x3ad2 <fputc>
    386c:	2a 94       	dec	r2
    386e:	f5 cf       	rjmp	.-22     	; 0x385a <vfprintf+0x1ae>
    3870:	f5 01       	movw	r30, r10
    3872:	37 fc       	sbrc	r3, 7
    3874:	85 91       	lpm	r24, Z+
    3876:	37 fe       	sbrs	r3, 7
    3878:	81 91       	ld	r24, Z+
    387a:	5f 01       	movw	r10, r30
    387c:	b6 01       	movw	r22, r12
    387e:	90 e0       	ldi	r25, 0x00	; 0
    3880:	28 d1       	rcall	.+592    	; 0x3ad2 <fputc>
    3882:	21 10       	cpse	r2, r1
    3884:	2a 94       	dec	r2
    3886:	21 e0       	ldi	r18, 0x01	; 1
    3888:	82 1a       	sub	r8, r18
    388a:	91 08       	sbc	r9, r1
    388c:	81 14       	cp	r8, r1
    388e:	91 04       	cpc	r9, r1
    3890:	79 f7       	brne	.-34     	; 0x3870 <vfprintf+0x1c4>
    3892:	e1 c0       	rjmp	.+450    	; 0x3a56 <vfprintf+0x3aa>
    3894:	84 36       	cpi	r24, 0x64	; 100
    3896:	11 f0       	breq	.+4      	; 0x389c <vfprintf+0x1f0>
    3898:	89 36       	cpi	r24, 0x69	; 105
    389a:	39 f5       	brne	.+78     	; 0x38ea <vfprintf+0x23e>
    389c:	f8 01       	movw	r30, r16
    389e:	37 fe       	sbrs	r3, 7
    38a0:	07 c0       	rjmp	.+14     	; 0x38b0 <vfprintf+0x204>
    38a2:	60 81       	ld	r22, Z
    38a4:	71 81       	ldd	r23, Z+1	; 0x01
    38a6:	82 81       	ldd	r24, Z+2	; 0x02
    38a8:	93 81       	ldd	r25, Z+3	; 0x03
    38aa:	0c 5f       	subi	r16, 0xFC	; 252
    38ac:	1f 4f       	sbci	r17, 0xFF	; 255
    38ae:	08 c0       	rjmp	.+16     	; 0x38c0 <vfprintf+0x214>
    38b0:	60 81       	ld	r22, Z
    38b2:	71 81       	ldd	r23, Z+1	; 0x01
    38b4:	07 2e       	mov	r0, r23
    38b6:	00 0c       	add	r0, r0
    38b8:	88 0b       	sbc	r24, r24
    38ba:	99 0b       	sbc	r25, r25
    38bc:	0e 5f       	subi	r16, 0xFE	; 254
    38be:	1f 4f       	sbci	r17, 0xFF	; 255
    38c0:	f3 2d       	mov	r31, r3
    38c2:	ff 76       	andi	r31, 0x6F	; 111
    38c4:	3f 2e       	mov	r3, r31
    38c6:	97 ff       	sbrs	r25, 7
    38c8:	09 c0       	rjmp	.+18     	; 0x38dc <vfprintf+0x230>
    38ca:	90 95       	com	r25
    38cc:	80 95       	com	r24
    38ce:	70 95       	com	r23
    38d0:	61 95       	neg	r22
    38d2:	7f 4f       	sbci	r23, 0xFF	; 255
    38d4:	8f 4f       	sbci	r24, 0xFF	; 255
    38d6:	9f 4f       	sbci	r25, 0xFF	; 255
    38d8:	f0 68       	ori	r31, 0x80	; 128
    38da:	3f 2e       	mov	r3, r31
    38dc:	2a e0       	ldi	r18, 0x0A	; 10
    38de:	30 e0       	ldi	r19, 0x00	; 0
    38e0:	a3 01       	movw	r20, r6
    38e2:	33 d1       	rcall	.+614    	; 0x3b4a <__ultoa_invert>
    38e4:	88 2e       	mov	r8, r24
    38e6:	86 18       	sub	r8, r6
    38e8:	44 c0       	rjmp	.+136    	; 0x3972 <vfprintf+0x2c6>
    38ea:	85 37       	cpi	r24, 0x75	; 117
    38ec:	31 f4       	brne	.+12     	; 0x38fa <vfprintf+0x24e>
    38ee:	23 2d       	mov	r18, r3
    38f0:	2f 7e       	andi	r18, 0xEF	; 239
    38f2:	b2 2e       	mov	r11, r18
    38f4:	2a e0       	ldi	r18, 0x0A	; 10
    38f6:	30 e0       	ldi	r19, 0x00	; 0
    38f8:	25 c0       	rjmp	.+74     	; 0x3944 <vfprintf+0x298>
    38fa:	93 2d       	mov	r25, r3
    38fc:	99 7f       	andi	r25, 0xF9	; 249
    38fe:	b9 2e       	mov	r11, r25
    3900:	8f 36       	cpi	r24, 0x6F	; 111
    3902:	c1 f0       	breq	.+48     	; 0x3934 <vfprintf+0x288>
    3904:	18 f4       	brcc	.+6      	; 0x390c <vfprintf+0x260>
    3906:	88 35       	cpi	r24, 0x58	; 88
    3908:	79 f0       	breq	.+30     	; 0x3928 <vfprintf+0x27c>
    390a:	ae c0       	rjmp	.+348    	; 0x3a68 <vfprintf+0x3bc>
    390c:	80 37       	cpi	r24, 0x70	; 112
    390e:	19 f0       	breq	.+6      	; 0x3916 <vfprintf+0x26a>
    3910:	88 37       	cpi	r24, 0x78	; 120
    3912:	21 f0       	breq	.+8      	; 0x391c <vfprintf+0x270>
    3914:	a9 c0       	rjmp	.+338    	; 0x3a68 <vfprintf+0x3bc>
    3916:	e9 2f       	mov	r30, r25
    3918:	e0 61       	ori	r30, 0x10	; 16
    391a:	be 2e       	mov	r11, r30
    391c:	b4 fe       	sbrs	r11, 4
    391e:	0d c0       	rjmp	.+26     	; 0x393a <vfprintf+0x28e>
    3920:	fb 2d       	mov	r31, r11
    3922:	f4 60       	ori	r31, 0x04	; 4
    3924:	bf 2e       	mov	r11, r31
    3926:	09 c0       	rjmp	.+18     	; 0x393a <vfprintf+0x28e>
    3928:	34 fe       	sbrs	r3, 4
    392a:	0a c0       	rjmp	.+20     	; 0x3940 <vfprintf+0x294>
    392c:	29 2f       	mov	r18, r25
    392e:	26 60       	ori	r18, 0x06	; 6
    3930:	b2 2e       	mov	r11, r18
    3932:	06 c0       	rjmp	.+12     	; 0x3940 <vfprintf+0x294>
    3934:	28 e0       	ldi	r18, 0x08	; 8
    3936:	30 e0       	ldi	r19, 0x00	; 0
    3938:	05 c0       	rjmp	.+10     	; 0x3944 <vfprintf+0x298>
    393a:	20 e1       	ldi	r18, 0x10	; 16
    393c:	30 e0       	ldi	r19, 0x00	; 0
    393e:	02 c0       	rjmp	.+4      	; 0x3944 <vfprintf+0x298>
    3940:	20 e1       	ldi	r18, 0x10	; 16
    3942:	32 e0       	ldi	r19, 0x02	; 2
    3944:	f8 01       	movw	r30, r16
    3946:	b7 fe       	sbrs	r11, 7
    3948:	07 c0       	rjmp	.+14     	; 0x3958 <vfprintf+0x2ac>
    394a:	60 81       	ld	r22, Z
    394c:	71 81       	ldd	r23, Z+1	; 0x01
    394e:	82 81       	ldd	r24, Z+2	; 0x02
    3950:	93 81       	ldd	r25, Z+3	; 0x03
    3952:	0c 5f       	subi	r16, 0xFC	; 252
    3954:	1f 4f       	sbci	r17, 0xFF	; 255
    3956:	06 c0       	rjmp	.+12     	; 0x3964 <vfprintf+0x2b8>
    3958:	60 81       	ld	r22, Z
    395a:	71 81       	ldd	r23, Z+1	; 0x01
    395c:	80 e0       	ldi	r24, 0x00	; 0
    395e:	90 e0       	ldi	r25, 0x00	; 0
    3960:	0e 5f       	subi	r16, 0xFE	; 254
    3962:	1f 4f       	sbci	r17, 0xFF	; 255
    3964:	a3 01       	movw	r20, r6
    3966:	f1 d0       	rcall	.+482    	; 0x3b4a <__ultoa_invert>
    3968:	88 2e       	mov	r8, r24
    396a:	86 18       	sub	r8, r6
    396c:	fb 2d       	mov	r31, r11
    396e:	ff 77       	andi	r31, 0x7F	; 127
    3970:	3f 2e       	mov	r3, r31
    3972:	36 fe       	sbrs	r3, 6
    3974:	0d c0       	rjmp	.+26     	; 0x3990 <vfprintf+0x2e4>
    3976:	23 2d       	mov	r18, r3
    3978:	2e 7f       	andi	r18, 0xFE	; 254
    397a:	a2 2e       	mov	r10, r18
    397c:	89 14       	cp	r8, r9
    397e:	58 f4       	brcc	.+22     	; 0x3996 <vfprintf+0x2ea>
    3980:	34 fe       	sbrs	r3, 4
    3982:	0b c0       	rjmp	.+22     	; 0x399a <vfprintf+0x2ee>
    3984:	32 fc       	sbrc	r3, 2
    3986:	09 c0       	rjmp	.+18     	; 0x399a <vfprintf+0x2ee>
    3988:	83 2d       	mov	r24, r3
    398a:	8e 7e       	andi	r24, 0xEE	; 238
    398c:	a8 2e       	mov	r10, r24
    398e:	05 c0       	rjmp	.+10     	; 0x399a <vfprintf+0x2ee>
    3990:	b8 2c       	mov	r11, r8
    3992:	a3 2c       	mov	r10, r3
    3994:	03 c0       	rjmp	.+6      	; 0x399c <vfprintf+0x2f0>
    3996:	b8 2c       	mov	r11, r8
    3998:	01 c0       	rjmp	.+2      	; 0x399c <vfprintf+0x2f0>
    399a:	b9 2c       	mov	r11, r9
    399c:	a4 fe       	sbrs	r10, 4
    399e:	0f c0       	rjmp	.+30     	; 0x39be <vfprintf+0x312>
    39a0:	fe 01       	movw	r30, r28
    39a2:	e8 0d       	add	r30, r8
    39a4:	f1 1d       	adc	r31, r1
    39a6:	80 81       	ld	r24, Z
    39a8:	80 33       	cpi	r24, 0x30	; 48
    39aa:	21 f4       	brne	.+8      	; 0x39b4 <vfprintf+0x308>
    39ac:	9a 2d       	mov	r25, r10
    39ae:	99 7e       	andi	r25, 0xE9	; 233
    39b0:	a9 2e       	mov	r10, r25
    39b2:	09 c0       	rjmp	.+18     	; 0x39c6 <vfprintf+0x31a>
    39b4:	a2 fe       	sbrs	r10, 2
    39b6:	06 c0       	rjmp	.+12     	; 0x39c4 <vfprintf+0x318>
    39b8:	b3 94       	inc	r11
    39ba:	b3 94       	inc	r11
    39bc:	04 c0       	rjmp	.+8      	; 0x39c6 <vfprintf+0x31a>
    39be:	8a 2d       	mov	r24, r10
    39c0:	86 78       	andi	r24, 0x86	; 134
    39c2:	09 f0       	breq	.+2      	; 0x39c6 <vfprintf+0x31a>
    39c4:	b3 94       	inc	r11
    39c6:	a3 fc       	sbrc	r10, 3
    39c8:	10 c0       	rjmp	.+32     	; 0x39ea <vfprintf+0x33e>
    39ca:	a0 fe       	sbrs	r10, 0
    39cc:	06 c0       	rjmp	.+12     	; 0x39da <vfprintf+0x32e>
    39ce:	b2 14       	cp	r11, r2
    39d0:	80 f4       	brcc	.+32     	; 0x39f2 <vfprintf+0x346>
    39d2:	28 0c       	add	r2, r8
    39d4:	92 2c       	mov	r9, r2
    39d6:	9b 18       	sub	r9, r11
    39d8:	0d c0       	rjmp	.+26     	; 0x39f4 <vfprintf+0x348>
    39da:	b2 14       	cp	r11, r2
    39dc:	58 f4       	brcc	.+22     	; 0x39f4 <vfprintf+0x348>
    39de:	b6 01       	movw	r22, r12
    39e0:	80 e2       	ldi	r24, 0x20	; 32
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	76 d0       	rcall	.+236    	; 0x3ad2 <fputc>
    39e6:	b3 94       	inc	r11
    39e8:	f8 cf       	rjmp	.-16     	; 0x39da <vfprintf+0x32e>
    39ea:	b2 14       	cp	r11, r2
    39ec:	18 f4       	brcc	.+6      	; 0x39f4 <vfprintf+0x348>
    39ee:	2b 18       	sub	r2, r11
    39f0:	02 c0       	rjmp	.+4      	; 0x39f6 <vfprintf+0x34a>
    39f2:	98 2c       	mov	r9, r8
    39f4:	21 2c       	mov	r2, r1
    39f6:	a4 fe       	sbrs	r10, 4
    39f8:	0f c0       	rjmp	.+30     	; 0x3a18 <vfprintf+0x36c>
    39fa:	b6 01       	movw	r22, r12
    39fc:	80 e3       	ldi	r24, 0x30	; 48
    39fe:	90 e0       	ldi	r25, 0x00	; 0
    3a00:	68 d0       	rcall	.+208    	; 0x3ad2 <fputc>
    3a02:	a2 fe       	sbrs	r10, 2
    3a04:	16 c0       	rjmp	.+44     	; 0x3a32 <vfprintf+0x386>
    3a06:	a1 fc       	sbrc	r10, 1
    3a08:	03 c0       	rjmp	.+6      	; 0x3a10 <vfprintf+0x364>
    3a0a:	88 e7       	ldi	r24, 0x78	; 120
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	02 c0       	rjmp	.+4      	; 0x3a14 <vfprintf+0x368>
    3a10:	88 e5       	ldi	r24, 0x58	; 88
    3a12:	90 e0       	ldi	r25, 0x00	; 0
    3a14:	b6 01       	movw	r22, r12
    3a16:	0c c0       	rjmp	.+24     	; 0x3a30 <vfprintf+0x384>
    3a18:	8a 2d       	mov	r24, r10
    3a1a:	86 78       	andi	r24, 0x86	; 134
    3a1c:	51 f0       	breq	.+20     	; 0x3a32 <vfprintf+0x386>
    3a1e:	a1 fe       	sbrs	r10, 1
    3a20:	02 c0       	rjmp	.+4      	; 0x3a26 <vfprintf+0x37a>
    3a22:	8b e2       	ldi	r24, 0x2B	; 43
    3a24:	01 c0       	rjmp	.+2      	; 0x3a28 <vfprintf+0x37c>
    3a26:	80 e2       	ldi	r24, 0x20	; 32
    3a28:	a7 fc       	sbrc	r10, 7
    3a2a:	8d e2       	ldi	r24, 0x2D	; 45
    3a2c:	b6 01       	movw	r22, r12
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	50 d0       	rcall	.+160    	; 0x3ad2 <fputc>
    3a32:	89 14       	cp	r8, r9
    3a34:	30 f4       	brcc	.+12     	; 0x3a42 <vfprintf+0x396>
    3a36:	b6 01       	movw	r22, r12
    3a38:	80 e3       	ldi	r24, 0x30	; 48
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	4a d0       	rcall	.+148    	; 0x3ad2 <fputc>
    3a3e:	9a 94       	dec	r9
    3a40:	f8 cf       	rjmp	.-16     	; 0x3a32 <vfprintf+0x386>
    3a42:	8a 94       	dec	r8
    3a44:	f3 01       	movw	r30, r6
    3a46:	e8 0d       	add	r30, r8
    3a48:	f1 1d       	adc	r31, r1
    3a4a:	80 81       	ld	r24, Z
    3a4c:	b6 01       	movw	r22, r12
    3a4e:	90 e0       	ldi	r25, 0x00	; 0
    3a50:	40 d0       	rcall	.+128    	; 0x3ad2 <fputc>
    3a52:	81 10       	cpse	r8, r1
    3a54:	f6 cf       	rjmp	.-20     	; 0x3a42 <vfprintf+0x396>
    3a56:	22 20       	and	r2, r2
    3a58:	09 f4       	brne	.+2      	; 0x3a5c <vfprintf+0x3b0>
    3a5a:	4e ce       	rjmp	.-868    	; 0x36f8 <vfprintf+0x4c>
    3a5c:	b6 01       	movw	r22, r12
    3a5e:	80 e2       	ldi	r24, 0x20	; 32
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	37 d0       	rcall	.+110    	; 0x3ad2 <fputc>
    3a64:	2a 94       	dec	r2
    3a66:	f7 cf       	rjmp	.-18     	; 0x3a56 <vfprintf+0x3aa>
    3a68:	f6 01       	movw	r30, r12
    3a6a:	86 81       	ldd	r24, Z+6	; 0x06
    3a6c:	97 81       	ldd	r25, Z+7	; 0x07
    3a6e:	02 c0       	rjmp	.+4      	; 0x3a74 <vfprintf+0x3c8>
    3a70:	8f ef       	ldi	r24, 0xFF	; 255
    3a72:	9f ef       	ldi	r25, 0xFF	; 255
    3a74:	2b 96       	adiw	r28, 0x0b	; 11
    3a76:	0f b6       	in	r0, 0x3f	; 63
    3a78:	f8 94       	cli
    3a7a:	de bf       	out	0x3e, r29	; 62
    3a7c:	0f be       	out	0x3f, r0	; 63
    3a7e:	cd bf       	out	0x3d, r28	; 61
    3a80:	df 91       	pop	r29
    3a82:	cf 91       	pop	r28
    3a84:	1f 91       	pop	r17
    3a86:	0f 91       	pop	r16
    3a88:	ff 90       	pop	r15
    3a8a:	ef 90       	pop	r14
    3a8c:	df 90       	pop	r13
    3a8e:	cf 90       	pop	r12
    3a90:	bf 90       	pop	r11
    3a92:	af 90       	pop	r10
    3a94:	9f 90       	pop	r9
    3a96:	8f 90       	pop	r8
    3a98:	7f 90       	pop	r7
    3a9a:	6f 90       	pop	r6
    3a9c:	5f 90       	pop	r5
    3a9e:	4f 90       	pop	r4
    3aa0:	3f 90       	pop	r3
    3aa2:	2f 90       	pop	r2
    3aa4:	08 95       	ret

00003aa6 <strnlen_P>:
    3aa6:	fc 01       	movw	r30, r24
    3aa8:	05 90       	lpm	r0, Z+
    3aaa:	61 50       	subi	r22, 0x01	; 1
    3aac:	70 40       	sbci	r23, 0x00	; 0
    3aae:	01 10       	cpse	r0, r1
    3ab0:	d8 f7       	brcc	.-10     	; 0x3aa8 <strnlen_P+0x2>
    3ab2:	80 95       	com	r24
    3ab4:	90 95       	com	r25
    3ab6:	8e 0f       	add	r24, r30
    3ab8:	9f 1f       	adc	r25, r31
    3aba:	08 95       	ret

00003abc <strnlen>:
    3abc:	fc 01       	movw	r30, r24
    3abe:	61 50       	subi	r22, 0x01	; 1
    3ac0:	70 40       	sbci	r23, 0x00	; 0
    3ac2:	01 90       	ld	r0, Z+
    3ac4:	01 10       	cpse	r0, r1
    3ac6:	d8 f7       	brcc	.-10     	; 0x3abe <strnlen+0x2>
    3ac8:	80 95       	com	r24
    3aca:	90 95       	com	r25
    3acc:	8e 0f       	add	r24, r30
    3ace:	9f 1f       	adc	r25, r31
    3ad0:	08 95       	ret

00003ad2 <fputc>:
    3ad2:	0f 93       	push	r16
    3ad4:	1f 93       	push	r17
    3ad6:	cf 93       	push	r28
    3ad8:	df 93       	push	r29
    3ada:	fb 01       	movw	r30, r22
    3adc:	23 81       	ldd	r18, Z+3	; 0x03
    3ade:	21 fd       	sbrc	r18, 1
    3ae0:	03 c0       	rjmp	.+6      	; 0x3ae8 <fputc+0x16>
    3ae2:	8f ef       	ldi	r24, 0xFF	; 255
    3ae4:	9f ef       	ldi	r25, 0xFF	; 255
    3ae6:	2c c0       	rjmp	.+88     	; 0x3b40 <fputc+0x6e>
    3ae8:	22 ff       	sbrs	r18, 2
    3aea:	16 c0       	rjmp	.+44     	; 0x3b18 <fputc+0x46>
    3aec:	46 81       	ldd	r20, Z+6	; 0x06
    3aee:	57 81       	ldd	r21, Z+7	; 0x07
    3af0:	24 81       	ldd	r18, Z+4	; 0x04
    3af2:	35 81       	ldd	r19, Z+5	; 0x05
    3af4:	42 17       	cp	r20, r18
    3af6:	53 07       	cpc	r21, r19
    3af8:	44 f4       	brge	.+16     	; 0x3b0a <fputc+0x38>
    3afa:	a0 81       	ld	r26, Z
    3afc:	b1 81       	ldd	r27, Z+1	; 0x01
    3afe:	9d 01       	movw	r18, r26
    3b00:	2f 5f       	subi	r18, 0xFF	; 255
    3b02:	3f 4f       	sbci	r19, 0xFF	; 255
    3b04:	31 83       	std	Z+1, r19	; 0x01
    3b06:	20 83       	st	Z, r18
    3b08:	8c 93       	st	X, r24
    3b0a:	26 81       	ldd	r18, Z+6	; 0x06
    3b0c:	37 81       	ldd	r19, Z+7	; 0x07
    3b0e:	2f 5f       	subi	r18, 0xFF	; 255
    3b10:	3f 4f       	sbci	r19, 0xFF	; 255
    3b12:	37 83       	std	Z+7, r19	; 0x07
    3b14:	26 83       	std	Z+6, r18	; 0x06
    3b16:	14 c0       	rjmp	.+40     	; 0x3b40 <fputc+0x6e>
    3b18:	8b 01       	movw	r16, r22
    3b1a:	ec 01       	movw	r28, r24
    3b1c:	fb 01       	movw	r30, r22
    3b1e:	00 84       	ldd	r0, Z+8	; 0x08
    3b20:	f1 85       	ldd	r31, Z+9	; 0x09
    3b22:	e0 2d       	mov	r30, r0
    3b24:	09 95       	icall
    3b26:	89 2b       	or	r24, r25
    3b28:	e1 f6       	brne	.-72     	; 0x3ae2 <fputc+0x10>
    3b2a:	d8 01       	movw	r26, r16
    3b2c:	16 96       	adiw	r26, 0x06	; 6
    3b2e:	8d 91       	ld	r24, X+
    3b30:	9c 91       	ld	r25, X
    3b32:	17 97       	sbiw	r26, 0x07	; 7
    3b34:	01 96       	adiw	r24, 0x01	; 1
    3b36:	17 96       	adiw	r26, 0x07	; 7
    3b38:	9c 93       	st	X, r25
    3b3a:	8e 93       	st	-X, r24
    3b3c:	16 97       	sbiw	r26, 0x06	; 6
    3b3e:	ce 01       	movw	r24, r28
    3b40:	df 91       	pop	r29
    3b42:	cf 91       	pop	r28
    3b44:	1f 91       	pop	r17
    3b46:	0f 91       	pop	r16
    3b48:	08 95       	ret

00003b4a <__ultoa_invert>:
    3b4a:	fa 01       	movw	r30, r20
    3b4c:	aa 27       	eor	r26, r26
    3b4e:	28 30       	cpi	r18, 0x08	; 8
    3b50:	51 f1       	breq	.+84     	; 0x3ba6 <__ultoa_invert+0x5c>
    3b52:	20 31       	cpi	r18, 0x10	; 16
    3b54:	81 f1       	breq	.+96     	; 0x3bb6 <__ultoa_invert+0x6c>
    3b56:	e8 94       	clt
    3b58:	6f 93       	push	r22
    3b5a:	6e 7f       	andi	r22, 0xFE	; 254
    3b5c:	6e 5f       	subi	r22, 0xFE	; 254
    3b5e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b60:	8f 4f       	sbci	r24, 0xFF	; 255
    3b62:	9f 4f       	sbci	r25, 0xFF	; 255
    3b64:	af 4f       	sbci	r26, 0xFF	; 255
    3b66:	b1 e0       	ldi	r27, 0x01	; 1
    3b68:	3e d0       	rcall	.+124    	; 0x3be6 <__ultoa_invert+0x9c>
    3b6a:	b4 e0       	ldi	r27, 0x04	; 4
    3b6c:	3c d0       	rcall	.+120    	; 0x3be6 <__ultoa_invert+0x9c>
    3b6e:	67 0f       	add	r22, r23
    3b70:	78 1f       	adc	r23, r24
    3b72:	89 1f       	adc	r24, r25
    3b74:	9a 1f       	adc	r25, r26
    3b76:	a1 1d       	adc	r26, r1
    3b78:	68 0f       	add	r22, r24
    3b7a:	79 1f       	adc	r23, r25
    3b7c:	8a 1f       	adc	r24, r26
    3b7e:	91 1d       	adc	r25, r1
    3b80:	a1 1d       	adc	r26, r1
    3b82:	6a 0f       	add	r22, r26
    3b84:	71 1d       	adc	r23, r1
    3b86:	81 1d       	adc	r24, r1
    3b88:	91 1d       	adc	r25, r1
    3b8a:	a1 1d       	adc	r26, r1
    3b8c:	20 d0       	rcall	.+64     	; 0x3bce <__ultoa_invert+0x84>
    3b8e:	09 f4       	brne	.+2      	; 0x3b92 <__ultoa_invert+0x48>
    3b90:	68 94       	set
    3b92:	3f 91       	pop	r19
    3b94:	2a e0       	ldi	r18, 0x0A	; 10
    3b96:	26 9f       	mul	r18, r22
    3b98:	11 24       	eor	r1, r1
    3b9a:	30 19       	sub	r19, r0
    3b9c:	30 5d       	subi	r19, 0xD0	; 208
    3b9e:	31 93       	st	Z+, r19
    3ba0:	de f6       	brtc	.-74     	; 0x3b58 <__ultoa_invert+0xe>
    3ba2:	cf 01       	movw	r24, r30
    3ba4:	08 95       	ret
    3ba6:	46 2f       	mov	r20, r22
    3ba8:	47 70       	andi	r20, 0x07	; 7
    3baa:	40 5d       	subi	r20, 0xD0	; 208
    3bac:	41 93       	st	Z+, r20
    3bae:	b3 e0       	ldi	r27, 0x03	; 3
    3bb0:	0f d0       	rcall	.+30     	; 0x3bd0 <__ultoa_invert+0x86>
    3bb2:	c9 f7       	brne	.-14     	; 0x3ba6 <__ultoa_invert+0x5c>
    3bb4:	f6 cf       	rjmp	.-20     	; 0x3ba2 <__ultoa_invert+0x58>
    3bb6:	46 2f       	mov	r20, r22
    3bb8:	4f 70       	andi	r20, 0x0F	; 15
    3bba:	40 5d       	subi	r20, 0xD0	; 208
    3bbc:	4a 33       	cpi	r20, 0x3A	; 58
    3bbe:	18 f0       	brcs	.+6      	; 0x3bc6 <__ultoa_invert+0x7c>
    3bc0:	49 5d       	subi	r20, 0xD9	; 217
    3bc2:	31 fd       	sbrc	r19, 1
    3bc4:	40 52       	subi	r20, 0x20	; 32
    3bc6:	41 93       	st	Z+, r20
    3bc8:	02 d0       	rcall	.+4      	; 0x3bce <__ultoa_invert+0x84>
    3bca:	a9 f7       	brne	.-22     	; 0x3bb6 <__ultoa_invert+0x6c>
    3bcc:	ea cf       	rjmp	.-44     	; 0x3ba2 <__ultoa_invert+0x58>
    3bce:	b4 e0       	ldi	r27, 0x04	; 4
    3bd0:	a6 95       	lsr	r26
    3bd2:	97 95       	ror	r25
    3bd4:	87 95       	ror	r24
    3bd6:	77 95       	ror	r23
    3bd8:	67 95       	ror	r22
    3bda:	ba 95       	dec	r27
    3bdc:	c9 f7       	brne	.-14     	; 0x3bd0 <__ultoa_invert+0x86>
    3bde:	00 97       	sbiw	r24, 0x00	; 0
    3be0:	61 05       	cpc	r22, r1
    3be2:	71 05       	cpc	r23, r1
    3be4:	08 95       	ret
    3be6:	9b 01       	movw	r18, r22
    3be8:	ac 01       	movw	r20, r24
    3bea:	0a 2e       	mov	r0, r26
    3bec:	06 94       	lsr	r0
    3bee:	57 95       	ror	r21
    3bf0:	47 95       	ror	r20
    3bf2:	37 95       	ror	r19
    3bf4:	27 95       	ror	r18
    3bf6:	ba 95       	dec	r27
    3bf8:	c9 f7       	brne	.-14     	; 0x3bec <__ultoa_invert+0xa2>
    3bfa:	62 0f       	add	r22, r18
    3bfc:	73 1f       	adc	r23, r19
    3bfe:	84 1f       	adc	r24, r20
    3c00:	95 1f       	adc	r25, r21
    3c02:	a0 1d       	adc	r26, r0
    3c04:	08 95       	ret

00003c06 <eeprom_read_block>:
    3c06:	dc 01       	movw	r26, r24
    3c08:	cb 01       	movw	r24, r22

00003c0a <eeprom_read_blraw>:
    3c0a:	fc 01       	movw	r30, r24
    3c0c:	e1 99       	sbic	0x1c, 1	; 28
    3c0e:	fe cf       	rjmp	.-4      	; 0x3c0c <eeprom_read_blraw+0x2>
    3c10:	06 c0       	rjmp	.+12     	; 0x3c1e <eeprom_read_blraw+0x14>
    3c12:	ff bb       	out	0x1f, r31	; 31
    3c14:	ee bb       	out	0x1e, r30	; 30
    3c16:	e0 9a       	sbi	0x1c, 0	; 28
    3c18:	31 96       	adiw	r30, 0x01	; 1
    3c1a:	0d b2       	in	r0, 0x1d	; 29
    3c1c:	0d 92       	st	X+, r0
    3c1e:	41 50       	subi	r20, 0x01	; 1
    3c20:	50 40       	sbci	r21, 0x00	; 0
    3c22:	b8 f7       	brcc	.-18     	; 0x3c12 <eeprom_read_blraw+0x8>
    3c24:	08 95       	ret

00003c26 <eeprom_read_byte>:
    3c26:	e1 99       	sbic	0x1c, 1	; 28
    3c28:	fe cf       	rjmp	.-4      	; 0x3c26 <eeprom_read_byte>
    3c2a:	9f bb       	out	0x1f, r25	; 31
    3c2c:	8e bb       	out	0x1e, r24	; 30
    3c2e:	e0 9a       	sbi	0x1c, 0	; 28
    3c30:	99 27       	eor	r25, r25
    3c32:	8d b3       	in	r24, 0x1d	; 29
    3c34:	08 95       	ret

00003c36 <eeprom_read_word>:
    3c36:	a8 e1       	ldi	r26, 0x18	; 24
    3c38:	b0 e0       	ldi	r27, 0x00	; 0
    3c3a:	42 e0       	ldi	r20, 0x02	; 2
    3c3c:	50 e0       	ldi	r21, 0x00	; 0
    3c3e:	e5 cf       	rjmp	.-54     	; 0x3c0a <eeprom_read_blraw>

00003c40 <eeprom_update_block>:
    3c40:	dc 01       	movw	r26, r24
    3c42:	a4 0f       	add	r26, r20
    3c44:	b5 1f       	adc	r27, r21
    3c46:	41 50       	subi	r20, 0x01	; 1
    3c48:	50 40       	sbci	r21, 0x00	; 0
    3c4a:	40 f0       	brcs	.+16     	; 0x3c5c <eeprom_update_block+0x1c>
    3c4c:	cb 01       	movw	r24, r22
    3c4e:	84 0f       	add	r24, r20
    3c50:	95 1f       	adc	r25, r21
    3c52:	2e 91       	ld	r18, -X
    3c54:	05 d0       	rcall	.+10     	; 0x3c60 <eeprom_update_r18>
    3c56:	41 50       	subi	r20, 0x01	; 1
    3c58:	50 40       	sbci	r21, 0x00	; 0
    3c5a:	d8 f7       	brcc	.-10     	; 0x3c52 <eeprom_update_block+0x12>
    3c5c:	08 95       	ret

00003c5e <eeprom_update_byte>:
    3c5e:	26 2f       	mov	r18, r22

00003c60 <eeprom_update_r18>:
    3c60:	e1 99       	sbic	0x1c, 1	; 28
    3c62:	fe cf       	rjmp	.-4      	; 0x3c60 <eeprom_update_r18>
    3c64:	9f bb       	out	0x1f, r25	; 31
    3c66:	8e bb       	out	0x1e, r24	; 30
    3c68:	e0 9a       	sbi	0x1c, 0	; 28
    3c6a:	01 97       	sbiw	r24, 0x01	; 1
    3c6c:	0d b2       	in	r0, 0x1d	; 29
    3c6e:	02 16       	cp	r0, r18
    3c70:	31 f0       	breq	.+12     	; 0x3c7e <eeprom_update_r18+0x1e>
    3c72:	2d bb       	out	0x1d, r18	; 29
    3c74:	0f b6       	in	r0, 0x3f	; 63
    3c76:	f8 94       	cli
    3c78:	e2 9a       	sbi	0x1c, 2	; 28
    3c7a:	e1 9a       	sbi	0x1c, 1	; 28
    3c7c:	0f be       	out	0x3f, r0	; 63
    3c7e:	08 95       	ret

00003c80 <eeprom_update_dword>:
    3c80:	03 96       	adiw	r24, 0x03	; 3
    3c82:	27 2f       	mov	r18, r23
    3c84:	ed df       	rcall	.-38     	; 0x3c60 <eeprom_update_r18>
    3c86:	eb df       	rcall	.-42     	; 0x3c5e <eeprom_update_byte>
    3c88:	25 2f       	mov	r18, r21
    3c8a:	ea df       	rcall	.-44     	; 0x3c60 <eeprom_update_r18>
    3c8c:	24 2f       	mov	r18, r20
    3c8e:	e8 cf       	rjmp	.-48     	; 0x3c60 <eeprom_update_r18>

00003c90 <eeprom_update_word>:
    3c90:	01 96       	adiw	r24, 0x01	; 1
    3c92:	27 2f       	mov	r18, r23
    3c94:	e5 df       	rcall	.-54     	; 0x3c60 <eeprom_update_r18>
    3c96:	e3 cf       	rjmp	.-58     	; 0x3c5e <eeprom_update_byte>

00003c98 <eeprom_write_block>:
    3c98:	dc 01       	movw	r26, r24
    3c9a:	cb 01       	movw	r24, r22
    3c9c:	02 c0       	rjmp	.+4      	; 0x3ca2 <eeprom_write_block+0xa>
    3c9e:	2d 91       	ld	r18, X+
    3ca0:	05 d0       	rcall	.+10     	; 0x3cac <eeprom_write_r18>
    3ca2:	41 50       	subi	r20, 0x01	; 1
    3ca4:	50 40       	sbci	r21, 0x00	; 0
    3ca6:	d8 f7       	brcc	.-10     	; 0x3c9e <eeprom_write_block+0x6>
    3ca8:	08 95       	ret

00003caa <eeprom_write_byte>:
    3caa:	26 2f       	mov	r18, r22

00003cac <eeprom_write_r18>:
    3cac:	e1 99       	sbic	0x1c, 1	; 28
    3cae:	fe cf       	rjmp	.-4      	; 0x3cac <eeprom_write_r18>
    3cb0:	9f bb       	out	0x1f, r25	; 31
    3cb2:	8e bb       	out	0x1e, r24	; 30
    3cb4:	2d bb       	out	0x1d, r18	; 29
    3cb6:	0f b6       	in	r0, 0x3f	; 63
    3cb8:	f8 94       	cli
    3cba:	e2 9a       	sbi	0x1c, 2	; 28
    3cbc:	e1 9a       	sbi	0x1c, 1	; 28
    3cbe:	0f be       	out	0x3f, r0	; 63
    3cc0:	01 96       	adiw	r24, 0x01	; 1
    3cc2:	08 95       	ret

00003cc4 <eeprom_write_dword>:
    3cc4:	24 2f       	mov	r18, r20
    3cc6:	f2 df       	rcall	.-28     	; 0x3cac <eeprom_write_r18>
    3cc8:	25 2f       	mov	r18, r21
    3cca:	f0 df       	rcall	.-32     	; 0x3cac <eeprom_write_r18>
    3ccc:	00 c0       	rjmp	.+0      	; 0x3cce <eeprom_write_word>

00003cce <eeprom_write_word>:
    3cce:	ed df       	rcall	.-38     	; 0x3caa <eeprom_write_byte>
    3cd0:	27 2f       	mov	r18, r23
    3cd2:	ec cf       	rjmp	.-40     	; 0x3cac <eeprom_write_r18>

00003cd4 <_exit>:
    3cd4:	f8 94       	cli

00003cd6 <__stop_program>:
    3cd6:	ff cf       	rjmp	.-2      	; 0x3cd6 <__stop_program>
