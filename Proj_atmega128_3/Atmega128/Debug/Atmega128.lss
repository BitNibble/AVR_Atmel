
Atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  000061ea  0000627e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000061ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000027d  0080013a  0080013a  000062b8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000062b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006314  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000870  00000000  00000000  00006350  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012aa4  00000000  00000000  00006bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000026ec  00000000  00000000  00019664  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000051d9  00000000  00000000  0001bd50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001424  00000000  00000000  00020f2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001d9c  00000000  00000000  00022350  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006301  00000000  00000000  000240ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000620  00000000  00000000  0002a3ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	d4 c0       	rjmp	.+424    	; 0x1aa <__ctors_end>
       2:	00 00       	nop
       4:	f1 c0       	rjmp	.+482    	; 0x1e8 <__bad_interrupt>
       6:	00 00       	nop
       8:	ef c0       	rjmp	.+478    	; 0x1e8 <__bad_interrupt>
       a:	00 00       	nop
       c:	ed c0       	rjmp	.+474    	; 0x1e8 <__bad_interrupt>
       e:	00 00       	nop
      10:	eb c0       	rjmp	.+470    	; 0x1e8 <__bad_interrupt>
      12:	00 00       	nop
      14:	e9 c0       	rjmp	.+466    	; 0x1e8 <__bad_interrupt>
      16:	00 00       	nop
      18:	e7 c0       	rjmp	.+462    	; 0x1e8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	e5 c0       	rjmp	.+458    	; 0x1e8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	e3 c0       	rjmp	.+454    	; 0x1e8 <__bad_interrupt>
      22:	00 00       	nop
      24:	e1 c0       	rjmp	.+450    	; 0x1e8 <__bad_interrupt>
      26:	00 00       	nop
      28:	df c0       	rjmp	.+446    	; 0x1e8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	dd c0       	rjmp	.+442    	; 0x1e8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 a3 28 	jmp	0x5146	; 0x5146 <__vector_12>
      34:	d9 c0       	rjmp	.+434    	; 0x1e8 <__bad_interrupt>
      36:	00 00       	nop
      38:	d7 c0       	rjmp	.+430    	; 0x1e8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c 94 6f 28 	jmp	0x50de	; 0x50de <__vector_15>
      40:	d3 c0       	rjmp	.+422    	; 0x1e8 <__bad_interrupt>
      42:	00 00       	nop
      44:	d1 c0       	rjmp	.+418    	; 0x1e8 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 64 16 	jmp	0x2cc8	; 0x2cc8 <__vector_18>
      4c:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__vector_19>
      50:	cb c0       	rjmp	.+406    	; 0x1e8 <__bad_interrupt>
      52:	00 00       	nop
      54:	ff c1       	rjmp	.+1022   	; 0x454 <__vector_21>
      56:	00 00       	nop
      58:	c7 c0       	rjmp	.+398    	; 0x1e8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	c5 c0       	rjmp	.+394    	; 0x1e8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	c3 c0       	rjmp	.+390    	; 0x1e8 <__bad_interrupt>
      62:	00 00       	nop
      64:	c1 c0       	rjmp	.+386    	; 0x1e8 <__bad_interrupt>
      66:	00 00       	nop
      68:	bf c0       	rjmp	.+382    	; 0x1e8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	bd c0       	rjmp	.+378    	; 0x1e8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	bb c0       	rjmp	.+374    	; 0x1e8 <__bad_interrupt>
      72:	00 00       	nop
      74:	b9 c0       	rjmp	.+370    	; 0x1e8 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <__vector_30>
      7c:	0c 94 ef 16 	jmp	0x2dde	; 0x2dde <__vector_31>
      80:	b3 c0       	rjmp	.+358    	; 0x1e8 <__bad_interrupt>
      82:	00 00       	nop
      84:	b1 c0       	rjmp	.+354    	; 0x1e8 <__bad_interrupt>
      86:	00 00       	nop
      88:	af c0       	rjmp	.+350    	; 0x1e8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f2 02       	muls	r31, r18
      8e:	17 03       	mulsu	r17, r23
      90:	3c 03       	fmul	r19, r20
      92:	61 03       	mulsu	r22, r17
      94:	86 03       	fmuls	r16, r22
      96:	c4 03       	fmuls	r20, r20
      98:	02 04       	cpc	r0, r2
      9a:	40 04       	cpc	r4, r0
      9c:	8e 04       	cpc	r8, r14
      9e:	96 04       	cpc	r9, r6
      a0:	9e 04       	cpc	r9, r14
      a2:	a6 04       	cpc	r10, r6
      a4:	ae 04       	cpc	r10, r14
      a6:	b6 04       	cpc	r11, r6
      a8:	be 04       	cpc	r11, r14
      aa:	c6 04       	cpc	r12, r6
      ac:	de 04       	cpc	r13, r14
      ae:	ef 04       	cpc	r14, r15
      b0:	00 05       	cpc	r16, r0
      b2:	11 05       	cpc	r17, r1
      b4:	22 05       	cpc	r18, r2
      b6:	33 05       	cpc	r19, r3
      b8:	44 05       	cpc	r20, r4
      ba:	55 05       	cpc	r21, r5
      bc:	4f 0d       	add	r20, r15
      be:	57 0d       	add	r21, r7
      c0:	5f 0d       	add	r21, r15
      c2:	67 0d       	add	r22, r7
      c4:	6f 0d       	add	r22, r15
      c6:	80 0d       	add	r24, r0
      c8:	91 0d       	add	r25, r1
      ca:	a2 0d       	add	r26, r2
      cc:	aa 0d       	add	r26, r10
      ce:	bb 0d       	add	r27, r11
      d0:	cc 0d       	add	r28, r12
      d2:	dd 0d       	add	r29, r13
      d4:	e5 0d       	add	r30, r5
      d6:	f6 0d       	add	r31, r6
      d8:	07 0e       	add	r0, r23
      da:	3e 0e       	add	r3, r30
      dc:	4c 0e       	add	r4, r28
      de:	5a 0e       	add	r5, r26
      e0:	68 0e       	add	r6, r24
      e2:	73 0e       	add	r7, r19
      e4:	81 0e       	add	r8, r17
      e6:	8f 0e       	add	r8, r31
      e8:	9d 0e       	add	r9, r29
      ea:	b4 0e       	add	r11, r20
      ec:	c2 0e       	add	r12, r18
      ee:	d0 0e       	add	r13, r16
      f0:	e7 0e       	add	r14, r23
      f2:	48 10       	cpse	r4, r8
      f4:	4e 10       	cpse	r4, r14
      f6:	54 10       	cpse	r5, r4
      f8:	5a 10       	cpse	r5, r10
      fa:	60 10       	cpse	r6, r0
      fc:	69 10       	cpse	r6, r9
      fe:	72 10       	cpse	r7, r2
     100:	7b 10       	cpse	r7, r11
     102:	81 10       	cpse	r8, r1
     104:	8a 10       	cpse	r8, r10
     106:	93 10       	cpse	r9, r3
     108:	9c 10       	cpse	r9, r12
     10a:	a2 10       	cpse	r10, r2
     10c:	ab 10       	cpse	r10, r11
     10e:	b4 10       	cpse	r11, r4
     110:	d3 10       	cpse	r13, r3
     112:	de 10       	cpse	r13, r14
     114:	e9 10       	cpse	r14, r9
     116:	f4 10       	cpse	r15, r4
     118:	ff 10       	cpse	r15, r15
     11a:	0a 11       	cpse	r16, r10
     11c:	15 11       	cpse	r17, r5
     11e:	20 11       	cpse	r18, r0
     120:	2b 11       	cpse	r18, r11
     122:	36 11       	cpse	r19, r6
     124:	41 11       	cpse	r20, r1
     126:	4c 11       	cpse	r20, r12
     128:	07 63       	ori	r16, 0x37	; 55
     12a:	42 36       	cpi	r20, 0x62	; 98
     12c:	b7 9b       	sbis	0x16, 7	; 22
     12e:	d8 a7       	std	Y+40, r29	; 0x28
     130:	1a 39       	cpi	r17, 0x9A	; 154
     132:	68 56       	subi	r22, 0x68	; 104
     134:	18 ae       	std	Y+56, r1	; 0x38
     136:	ba ab       	std	Y+50, r27	; 0x32
     138:	55 8c       	ldd	r5, Z+29	; 0x1d
     13a:	1d 3c       	cpi	r17, 0xCD	; 205
     13c:	b7 cc       	rjmp	.-1682   	; 0xfffffaac <__eeprom_end+0xff7efaac>
     13e:	57 63       	ori	r21, 0x37	; 55
     140:	bd 6d       	ori	r27, 0xDD	; 221
     142:	ed fd       	.word	0xfded	; ????
     144:	75 3e       	cpi	r23, 0xE5	; 229
     146:	f6 17       	cp	r31, r22
     148:	72 31       	cpi	r23, 0x12	; 18
     14a:	bf 00       	.word	0x00bf	; ????
     14c:	00 00       	nop
     14e:	80 3f       	cpi	r24, 0xF0	; 240
     150:	08 00       	.word	0x0008	; ????
     152:	00 00       	nop
     154:	be 92       	st	-X, r11
     156:	24 49       	sbci	r18, 0x94	; 148
     158:	12 3e       	cpi	r17, 0xE2	; 226
     15a:	ab aa       	std	Y+51, r10	; 0x33
     15c:	aa 2a       	or	r10, r26
     15e:	be cd       	rjmp	.-1156   	; 0xfffffcdc <__eeprom_end+0xff7efcdc>
     160:	cc cc       	rjmp	.-1640   	; 0xfffffafa <__eeprom_end+0xff7efafa>
     162:	4c 3e       	cpi	r20, 0xEC	; 236
     164:	00 00       	nop
     166:	00 80       	ld	r0, Z
     168:	be ab       	std	Y+54, r27	; 0x36
     16a:	aa aa       	std	Y+50, r10	; 0x32
     16c:	aa 3e       	cpi	r26, 0xEA	; 234
     16e:	00 00       	nop
     170:	00 00       	nop
     172:	bf 00       	.word	0x00bf	; ????
     174:	00 00       	nop
     176:	80 3f       	cpi	r24, 0xF0	; 240
     178:	00 00       	nop
     17a:	00 00       	nop
     17c:	00 08       	sbc	r0, r0
     17e:	41 78       	andi	r20, 0x81	; 129
     180:	d3 bb       	out	0x13, r29	; 19
     182:	43 87       	std	Z+11, r20	; 0x0b
     184:	d1 13       	cpse	r29, r17
     186:	3d 19       	sub	r19, r13
     188:	0e 3c       	cpi	r16, 0xCE	; 206
     18a:	c3 bd       	out	0x23, r28	; 35
     18c:	42 82       	std	Z+2, r4	; 0x02
     18e:	ad 2b       	or	r26, r29
     190:	3e 68       	ori	r19, 0x8E	; 142
     192:	ec 82       	std	Y+4, r14	; 0x04
     194:	76 be       	out	0x36, r7	; 54
     196:	d9 8f       	std	Y+25, r29	; 0x19
     198:	e1 a9       	ldd	r30, Z+49	; 0x31
     19a:	3e 4c       	sbci	r19, 0xCE	; 206
     19c:	80 ef       	ldi	r24, 0xF0	; 240
     19e:	ff be       	out	0x3f, r15	; 63
     1a0:	01 c4       	rjmp	.+2050   	; 0x9a4 <INTERRUPT_off+0x9c>
     1a2:	ff 7f       	andi	r31, 0xFF	; 255
     1a4:	3f 00       	.word	0x003f	; ????
     1a6:	00 00       	nop
	...

000001aa <__ctors_end>:
     1aa:	11 24       	eor	r1, r1
     1ac:	1f be       	out	0x3f, r1	; 63
     1ae:	cf ef       	ldi	r28, 0xFF	; 255
     1b0:	d0 e1       	ldi	r29, 0x10	; 16
     1b2:	de bf       	out	0x3e, r29	; 62
     1b4:	cd bf       	out	0x3d, r28	; 61

000001b6 <__do_copy_data>:
     1b6:	11 e0       	ldi	r17, 0x01	; 1
     1b8:	a0 e0       	ldi	r26, 0x00	; 0
     1ba:	b1 e0       	ldi	r27, 0x01	; 1
     1bc:	ea ee       	ldi	r30, 0xEA	; 234
     1be:	f1 e6       	ldi	r31, 0x61	; 97
     1c0:	00 e0       	ldi	r16, 0x00	; 0
     1c2:	0b bf       	out	0x3b, r16	; 59
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <__do_copy_data+0x14>
     1c6:	07 90       	elpm	r0, Z+
     1c8:	0d 92       	st	X+, r0
     1ca:	aa 33       	cpi	r26, 0x3A	; 58
     1cc:	b1 07       	cpc	r27, r17
     1ce:	d9 f7       	brne	.-10     	; 0x1c6 <__do_copy_data+0x10>

000001d0 <__do_clear_bss>:
     1d0:	23 e0       	ldi	r18, 0x03	; 3
     1d2:	aa e3       	ldi	r26, 0x3A	; 58
     1d4:	b1 e0       	ldi	r27, 0x01	; 1
     1d6:	01 c0       	rjmp	.+2      	; 0x1da <.do_clear_bss_start>

000001d8 <.do_clear_bss_loop>:
     1d8:	1d 92       	st	X+, r1

000001da <.do_clear_bss_start>:
     1da:	a7 3b       	cpi	r26, 0xB7	; 183
     1dc:	b2 07       	cpc	r27, r18
     1de:	e1 f7       	brne	.-8      	; 0x1d8 <.do_clear_bss_loop>
     1e0:	0e 94 71 22 	call	0x44e2	; 0x44e2 <main>
     1e4:	0c 94 f3 30 	jmp	0x61e6	; 0x61e6 <_exit>

000001e8 <__bad_interrupt>:
     1e8:	0b cf       	rjmp	.-490    	; 0x0 <__vectors>

000001ea <ANALOG_read>:
int ANALOG_read(int selection)
// Returns selected Channel ADC_VALUE
{
	uint8_t ADSC_FLAG;
	ADSC_FLAG = (1 << ADSC);
	if( !(m.adc.reg->adcsra & ADSC_FLAG) ){
     1ea:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <m+0x4>
     1ee:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <m+0x5>
     1f2:	22 81       	ldd	r18, Z+2	; 0x02
     1f4:	26 fd       	sbrc	r18, 6
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <ANALOG_read+0x12>
		// ADC_SELECT
		
		m.adc.reg->adcsra |= (1 << ADSC);
     1f8:	20 64       	ori	r18, 0x40	; 64
     1fa:	22 83       	std	Z+2, r18	; 0x02
	}	
	return ADC_VALUE[selection];
     1fc:	fc 01       	movw	r30, r24
     1fe:	ee 0f       	add	r30, r30
     200:	ff 1f       	adc	r31, r31
     202:	e1 58       	subi	r30, 0x81	; 129
     204:	fe 4f       	sbci	r31, 0xFE	; 254
     206:	80 81       	ld	r24, Z
     208:	91 81       	ldd	r25, Z+1	; 0x01
}
     20a:	08 95       	ret

0000020c <ANALOGenable>:
int ANALOG_read(int selection);

/*** Procedure & Function ***/
ANALOG ANALOGenable( uint8_t Vreff, uint8_t Divfactor, int n_channel, ... )
// Interrupt running mode setup, and list of channels to be probed
{
     20c:	ef 92       	push	r14
     20e:	ff 92       	push	r15
     210:	0f 93       	push	r16
     212:	1f 93       	push	r17
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	cd b7       	in	r28, 0x3d	; 61
     21a:	de b7       	in	r29, 0x3e	; 62
     21c:	c0 55       	subi	r28, 0x50	; 80
     21e:	d1 09       	sbc	r29, r1
     220:	0f b6       	in	r0, 0x3f	; 63
     222:	f8 94       	cli
     224:	de bf       	out	0x3e, r29	; 62
     226:	0f be       	out	0x3f, r0	; 63
     228:	cd bf       	out	0x3d, r28	; 61
     22a:	6a 96       	adiw	r28, 0x1a	; 26
     22c:	0f ad       	ldd	r16, Y+63	; 0x3f
     22e:	6a 97       	sbiw	r28, 0x1a	; 26
     230:	6b 96       	adiw	r28, 0x1b	; 27
     232:	1f ad       	ldd	r17, Y+63	; 0x3f
     234:	6b 97       	sbiw	r28, 0x1b	; 27
     236:	6d 96       	adiw	r28, 0x1d	; 29
     238:	ee ac       	ldd	r14, Y+62	; 0x3e
     23a:	ff ac       	ldd	r15, Y+63	; 0x3f
     23c:	6d 97       	sbiw	r28, 0x1d	; 29
	// LOCAL VARIABLES
	va_list list;
	int i;
	// initialize variables
	// GLOBAL VARIABLES INICIALIZE
	ADC_N_CHANNEL = (n_channel & MUX_MASK);
     23e:	c7 01       	movw	r24, r14
     240:	8f 71       	andi	r24, 0x1F	; 31
     242:	99 27       	eor	r25, r25
     244:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <ADC_N_CHANNEL+0x1>
     248:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <ADC_N_CHANNEL>
	ADC_SELECTOR = 0;
     24c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <ADC_SELECTOR+0x1>
     250:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <ADC_SELECTOR>
	adc_n_sample = 0;
     254:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <__data_end>
	// PROTOTIPOS
	// int ANALOG_read(int channel);
	// ALLOCAÇÂO MEMORIA PARA Estrutura
	ANALOG analog;
	m = ATMEGA128enable();
     258:	ce 01       	movw	r24, r28
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	8a d4       	rcall	.+2324   	; 0xb72 <ATMEGA128enable>
     25e:	80 e5       	ldi	r24, 0x50	; 80
     260:	fe 01       	movw	r30, r28
     262:	31 96       	adiw	r30, 0x01	; 1
     264:	a6 e2       	ldi	r26, 0x26	; 38
     266:	b2 e0       	ldi	r27, 0x02	; 2
     268:	01 90       	ld	r0, Z+
     26a:	0d 92       	st	X+, r0
     26c:	8a 95       	dec	r24
     26e:	e1 f7       	brne	.-8      	; 0x268 <ANALOGenable+0x5c>
	// import parameters
	// initialize parameters
	// Direccionar apontadores para PROTOTIPOS
	analog.read = ANALOG_read;
		
		m.adc.reg->admux &= ~(3 << REFS0);
     270:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <m+0x4>
     274:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <m+0x5>
     278:	83 81       	ldd	r24, Z+3	; 0x03
     27a:	8f 73       	andi	r24, 0x3F	; 63
     27c:	83 83       	std	Z+3, r24	; 0x03
		switch( Vreff ){
     27e:	01 30       	cpi	r16, 0x01	; 1
     280:	19 f0       	breq	.+6      	; 0x288 <ANALOGenable+0x7c>
     282:	03 30       	cpi	r16, 0x03	; 3
     284:	51 f0       	breq	.+20     	; 0x29a <ANALOGenable+0x8e>
     286:	12 c0       	rjmp	.+36     	; 0x2ac <ANALOGenable+0xa0>
			case 0:
				analog.VREFF = 0;
			break;
			case 1:
				m.adc.reg->admux |= (1 << REFS0);
     288:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <m+0x4>
     28c:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <m+0x5>
     290:	83 81       	ldd	r24, Z+3	; 0x03
     292:	80 64       	ori	r24, 0x40	; 64
     294:	83 83       	std	Z+3, r24	; 0x03
				analog.VREFF = 1;
     296:	41 e0       	ldi	r20, 0x01	; 1
			break;
     298:	0a c0       	rjmp	.+20     	; 0x2ae <ANALOGenable+0xa2>
			case 3:
				m.adc.reg->admux |= (3 << REFS0);
     29a:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <m+0x4>
     29e:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <m+0x5>
     2a2:	83 81       	ldd	r24, Z+3	; 0x03
     2a4:	80 6c       	ori	r24, 0xC0	; 192
     2a6:	83 83       	std	Z+3, r24	; 0x03
				analog.VREFF = 3;
     2a8:	43 e0       	ldi	r20, 0x03	; 3
			break;
     2aa:	01 c0       	rjmp	.+2      	; 0x2ae <ANALOGenable+0xa2>
	analog.read = ANALOG_read;
		
		m.adc.reg->admux &= ~(3 << REFS0);
		switch( Vreff ){
			case 0:
				analog.VREFF = 0;
     2ac:	40 e0       	ldi	r20, 0x00	; 0
			default:
				analog.VREFF = 0;
			break;
		}
		
		m.adc.reg->admux &= ~(1 << ADLAR);
     2ae:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <m+0x4>
     2b2:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <m+0x5>
     2b6:	83 81       	ldd	r24, Z+3	; 0x03
     2b8:	8f 7d       	andi	r24, 0xDF	; 223
     2ba:	83 83       	std	Z+3, r24	; 0x03
		// m.adc->admux |= (1 << ADLAR);
		
		va_start(list, n_channel);
		for(i = 0; i < n_channel; i++){
     2bc:	1e 14       	cp	r1, r14
     2be:	1f 04       	cpc	r1, r15
     2c0:	94 f4       	brge	.+36     	; 0x2e6 <ANALOGenable+0xda>
     2c2:	de 01       	movw	r26, r28
     2c4:	a3 5a       	subi	r26, 0xA3	; 163
     2c6:	bf 4f       	sbci	r27, 0xFF	; 255
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	90 e0       	ldi	r25, 0x00	; 0
			ADC_CHANNEL_GAIN[i] = va_arg(list, int);
     2cc:	2d 91       	ld	r18, X+
     2ce:	3d 91       	ld	r19, X+
     2d0:	fc 01       	movw	r30, r24
     2d2:	ee 0f       	add	r30, r30
     2d4:	ff 1f       	adc	r31, r31
     2d6:	e1 5c       	subi	r30, 0xC1	; 193
     2d8:	fe 4f       	sbci	r31, 0xFE	; 254
     2da:	31 83       	std	Z+1, r19	; 0x01
     2dc:	20 83       	st	Z, r18
		
		m.adc.reg->admux &= ~(1 << ADLAR);
		// m.adc->admux |= (1 << ADLAR);
		
		va_start(list, n_channel);
		for(i = 0; i < n_channel; i++){
     2de:	01 96       	adiw	r24, 0x01	; 1
     2e0:	e8 16       	cp	r14, r24
     2e2:	f9 06       	cpc	r15, r25
     2e4:	99 f7       	brne	.-26     	; 0x2cc <ANALOGenable+0xc0>
			ADC_CHANNEL_GAIN[i] = va_arg(list, int);
		}
		va_end(list);
		m.adc.reg->admux &= ~MUX_MASK;
     2e6:	e6 e2       	ldi	r30, 0x26	; 38
     2e8:	f2 e0       	ldi	r31, 0x02	; 2
     2ea:	a4 81       	ldd	r26, Z+4	; 0x04
     2ec:	b5 81       	ldd	r27, Z+5	; 0x05
     2ee:	13 96       	adiw	r26, 0x03	; 3
     2f0:	8c 91       	ld	r24, X
     2f2:	13 97       	sbiw	r26, 0x03	; 3
     2f4:	80 7e       	andi	r24, 0xE0	; 224
     2f6:	13 96       	adiw	r26, 0x03	; 3
     2f8:	8c 93       	st	X, r24
		m.adc.reg->admux |= (MUX_MASK & ADC_CHANNEL_GAIN[ADC_SELECTOR]);
     2fa:	a0 91 3d 01 	lds	r26, 0x013D	; 0x80013d <ADC_SELECTOR>
     2fe:	b0 91 3e 01 	lds	r27, 0x013E	; 0x80013e <ADC_SELECTOR+0x1>
     302:	aa 0f       	add	r26, r26
     304:	bb 1f       	adc	r27, r27
     306:	a1 5c       	subi	r26, 0xC1	; 193
     308:	be 4f       	sbci	r27, 0xFE	; 254
     30a:	8d 91       	ld	r24, X+
     30c:	9c 91       	ld	r25, X
     30e:	a4 81       	ldd	r26, Z+4	; 0x04
     310:	b5 81       	ldd	r27, Z+5	; 0x05
     312:	8f 71       	andi	r24, 0x1F	; 31
     314:	99 27       	eor	r25, r25
     316:	13 96       	adiw	r26, 0x03	; 3
     318:	9c 91       	ld	r25, X
     31a:	13 97       	sbiw	r26, 0x03	; 3
     31c:	89 2b       	or	r24, r25
     31e:	13 96       	adiw	r26, 0x03	; 3
     320:	8c 93       	st	X, r24
		
		m.adc.reg->adcsra |= (1 << ADEN);
     322:	a4 81       	ldd	r26, Z+4	; 0x04
     324:	b5 81       	ldd	r27, Z+5	; 0x05
     326:	12 96       	adiw	r26, 0x02	; 2
     328:	8c 91       	ld	r24, X
     32a:	12 97       	sbiw	r26, 0x02	; 2
     32c:	80 68       	ori	r24, 0x80	; 128
     32e:	12 96       	adiw	r26, 0x02	; 2
     330:	8c 93       	st	X, r24
		m.adc.reg->adcsra |= (1 << ADSC);
     332:	a4 81       	ldd	r26, Z+4	; 0x04
     334:	b5 81       	ldd	r27, Z+5	; 0x05
     336:	12 96       	adiw	r26, 0x02	; 2
     338:	8c 91       	ld	r24, X
     33a:	12 97       	sbiw	r26, 0x02	; 2
     33c:	80 64       	ori	r24, 0x40	; 64
     33e:	12 96       	adiw	r26, 0x02	; 2
     340:	8c 93       	st	X, r24
		m.adc.reg->adcsra &= ~(1 << ADFR);
     342:	a4 81       	ldd	r26, Z+4	; 0x04
     344:	b5 81       	ldd	r27, Z+5	; 0x05
     346:	12 96       	adiw	r26, 0x02	; 2
     348:	8c 91       	ld	r24, X
     34a:	12 97       	sbiw	r26, 0x02	; 2
     34c:	8f 7d       	andi	r24, 0xDF	; 223
     34e:	12 96       	adiw	r26, 0x02	; 2
     350:	8c 93       	st	X, r24
		m.adc.reg->adcsra |= (1 << ADIE);
     352:	a4 81       	ldd	r26, Z+4	; 0x04
     354:	b5 81       	ldd	r27, Z+5	; 0x05
     356:	12 96       	adiw	r26, 0x02	; 2
     358:	8c 91       	ld	r24, X
     35a:	12 97       	sbiw	r26, 0x02	; 2
     35c:	88 60       	ori	r24, 0x08	; 8
     35e:	12 96       	adiw	r26, 0x02	; 2
     360:	8c 93       	st	X, r24
		
		m.adc.reg->adcsra &= ~(7 << ADPS0);
     362:	04 80       	ldd	r0, Z+4	; 0x04
     364:	f5 81       	ldd	r31, Z+5	; 0x05
     366:	e0 2d       	mov	r30, r0
     368:	82 81       	ldd	r24, Z+2	; 0x02
     36a:	88 7f       	andi	r24, 0xF8	; 248
     36c:	82 83       	std	Z+2, r24	; 0x02
		switch( Divfactor ){
     36e:	10 31       	cpi	r17, 0x10	; 16
     370:	61 f1       	breq	.+88     	; 0x3ca <ANALOGenable+0x1be>
     372:	40 f4       	brcc	.+16     	; 0x384 <ANALOGenable+0x178>
     374:	14 30       	cpi	r17, 0x04	; 4
     376:	b9 f0       	breq	.+46     	; 0x3a6 <ANALOGenable+0x19a>
     378:	18 30       	cpi	r17, 0x08	; 8
     37a:	f1 f0       	breq	.+60     	; 0x3b8 <ANALOGenable+0x1ac>
     37c:	12 30       	cpi	r17, 0x02	; 2
     37e:	09 f0       	breq	.+2      	; 0x382 <ANALOGenable+0x176>
     380:	48 c0       	rjmp	.+144    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     382:	08 c0       	rjmp	.+16     	; 0x394 <ANALOGenable+0x188>
     384:	10 34       	cpi	r17, 0x40	; 64
     386:	99 f1       	breq	.+102    	; 0x3ee <ANALOGenable+0x1e2>
     388:	10 38       	cpi	r17, 0x80	; 128
     38a:	d1 f1       	breq	.+116    	; 0x400 <__LOCK_REGION_LENGTH__>
     38c:	10 32       	cpi	r17, 0x20	; 32
     38e:	09 f0       	breq	.+2      	; 0x392 <ANALOGenable+0x186>
     390:	40 c0       	rjmp	.+128    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     392:	24 c0       	rjmp	.+72     	; 0x3dc <ANALOGenable+0x1d0>
			case 2: // 1
				m.adc.reg->adcsra |= (1 << ADPS0);
     394:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <m+0x4>
     398:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <m+0x5>
     39c:	82 81       	ldd	r24, Z+2	; 0x02
     39e:	81 60       	ori	r24, 0x01	; 1
     3a0:	82 83       	std	Z+2, r24	; 0x02
				analog.DIVISION_FACTOR = 2;
     3a2:	22 e0       	ldi	r18, 0x02	; 2
			break;
     3a4:	3e c0       	rjmp	.+124    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			case 4: // 2
				m.adc.reg->adcsra |= (1 << ADPS1);
     3a6:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <m+0x4>
     3aa:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <m+0x5>
     3ae:	82 81       	ldd	r24, Z+2	; 0x02
     3b0:	82 60       	ori	r24, 0x02	; 2
     3b2:	82 83       	std	Z+2, r24	; 0x02
				analog.DIVISION_FACTOR = 4;
     3b4:	24 e0       	ldi	r18, 0x04	; 4
			break;
     3b6:	35 c0       	rjmp	.+106    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			case 8: // 3
				m.adc.reg->adcsra |= (3 << ADPS0);
     3b8:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <m+0x4>
     3bc:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <m+0x5>
     3c0:	82 81       	ldd	r24, Z+2	; 0x02
     3c2:	83 60       	ori	r24, 0x03	; 3
     3c4:	82 83       	std	Z+2, r24	; 0x02
				analog.DIVISION_FACTOR = 8;
     3c6:	28 e0       	ldi	r18, 0x08	; 8
				break;
     3c8:	2c c0       	rjmp	.+88     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			case 16: // 4
				m.adc.reg->adcsra |= (1 << ADPS2);
     3ca:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <m+0x4>
     3ce:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <m+0x5>
     3d2:	82 81       	ldd	r24, Z+2	; 0x02
     3d4:	84 60       	ori	r24, 0x04	; 4
     3d6:	82 83       	std	Z+2, r24	; 0x02
				analog.DIVISION_FACTOR = 16;
     3d8:	20 e1       	ldi	r18, 0x10	; 16
			break;
     3da:	23 c0       	rjmp	.+70     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			case 32: // 5
				m.adc.reg->adcsra |= (5 << ADPS0);
     3dc:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <m+0x4>
     3e0:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <m+0x5>
     3e4:	82 81       	ldd	r24, Z+2	; 0x02
     3e6:	85 60       	ori	r24, 0x05	; 5
     3e8:	82 83       	std	Z+2, r24	; 0x02
				analog.DIVISION_FACTOR = 32;
     3ea:	20 e2       	ldi	r18, 0x20	; 32
			break;
     3ec:	1a c0       	rjmp	.+52     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			case 64: // 6
				m.adc.reg->adcsra |= (6 << ADPS0);
     3ee:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <m+0x4>
     3f2:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <m+0x5>
     3f6:	82 81       	ldd	r24, Z+2	; 0x02
     3f8:	86 60       	ori	r24, 0x06	; 6
     3fa:	82 83       	std	Z+2, r24	; 0x02
				analog.DIVISION_FACTOR = 64;
     3fc:	20 e4       	ldi	r18, 0x40	; 64
			break;
     3fe:	11 c0       	rjmp	.+34     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			case 128: // 7
				m.adc.reg->adcsra |= (7 << ADPS0);
     400:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <m+0x4>
     404:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <m+0x5>
     408:	82 81       	ldd	r24, Z+2	; 0x02
     40a:	87 60       	ori	r24, 0x07	; 7
     40c:	82 83       	std	Z+2, r24	; 0x02
				analog.DIVISION_FACTOR = 128;
     40e:	20 e8       	ldi	r18, 0x80	; 128
			break;
     410:	08 c0       	rjmp	.+16     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			default:
				m.adc.reg->adcsra |= (7 << ADPS0);
     412:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <m+0x4>
     416:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <m+0x5>
     41a:	82 81       	ldd	r24, Z+2	; 0x02
     41c:	87 60       	ori	r24, 0x07	; 7
     41e:	82 83       	std	Z+2, r24	; 0x02
				analog.DIVISION_FACTOR = 128;
     420:	20 e8       	ldi	r18, 0x80	; 128
			break;
		}
	
	m.cpu.reg->sreg |= (1 << GLOBAL_INTERRUPT_ENABLE);
     422:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <m+0xa>
     426:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <m+0xb>
     42a:	83 85       	ldd	r24, Z+11	; 0x0b
     42c:	80 68       	ori	r24, 0x80	; 128
     42e:	83 87       	std	Z+11, r24	; 0x0b
	return analog;
     430:	64 2f       	mov	r22, r20
     432:	72 2f       	mov	r23, r18
     434:	85 ef       	ldi	r24, 0xF5	; 245
     436:	90 e0       	ldi	r25, 0x00	; 0
}
     438:	c0 5b       	subi	r28, 0xB0	; 176
     43a:	df 4f       	sbci	r29, 0xFF	; 255
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	f8 94       	cli
     440:	de bf       	out	0x3e, r29	; 62
     442:	0f be       	out	0x3f, r0	; 63
     444:	cd bf       	out	0x3d, r28	; 61
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	ff 90       	pop	r15
     450:	ef 90       	pop	r14
     452:	08 95       	ret

00000454 <__vector_21>:

/*** File Interrupt ***/
ISR(ADC_vect)
// Function: ANALOG interrupt
// Purpose:  Read Analog Input
{
     454:	1f 92       	push	r1
     456:	0f 92       	push	r0
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	0f 92       	push	r0
     45c:	11 24       	eor	r1, r1
     45e:	0b b6       	in	r0, 0x3b	; 59
     460:	0f 92       	push	r0
     462:	2f 93       	push	r18
     464:	3f 93       	push	r19
     466:	4f 93       	push	r20
     468:	5f 93       	push	r21
     46a:	6f 93       	push	r22
     46c:	7f 93       	push	r23
     46e:	8f 93       	push	r24
     470:	9f 93       	push	r25
     472:	af 93       	push	r26
     474:	bf 93       	push	r27
     476:	ef 93       	push	r30
     478:	ff 93       	push	r31
	// adc_tmp = m.adc->adc.L; // ADCL
	// adc_tmp |= (m.adc->adc.H << 8); // (ADCH << 8);
	// adc_tmp = *((uint16_t*)&m.adc->adc); // more then one way to skin a rabbit.
	adc_tmp = ReadHLByte(m.adc.reg->adc);
     47a:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <m+0x4>
     47e:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <m+0x5>
     482:	80 81       	ld	r24, Z
     484:	91 81       	ldd	r25, Z+1	; 0x01
     486:	5c d3       	rcall	.+1720   	; 0xb40 <ReadHLByte>
     488:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <adc_tmp+0x1>
     48c:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <adc_tmp>
	if(adc_n_sample < (1 << ADC_NUMBER_SAMPLE)){
     490:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <__data_end>
     494:	24 30       	cpi	r18, 0x04	; 4
     496:	80 f4       	brcc	.+32     	; 0x4b8 <__vector_21+0x64>
		adc_n_sample++;
     498:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <__data_end>
     49c:	2f 5f       	subi	r18, 0xFF	; 255
     49e:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <__data_end>
		adc_sample += adc_tmp;
     4a2:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <adc_sample>
     4a6:	30 91 3c 01 	lds	r19, 0x013C	; 0x80013c <adc_sample+0x1>
     4aa:	82 0f       	add	r24, r18
     4ac:	93 1f       	adc	r25, r19
     4ae:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <adc_sample+0x1>
     4b2:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <adc_sample>
     4b6:	4d c0       	rjmp	.+154    	; 0x552 <__vector_21+0xfe>
	}else{
		ADC_VALUE[ADC_SELECTOR] = adc_sample >> ADC_NUMBER_SAMPLE;
     4b8:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <ADC_SELECTOR>
     4bc:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <ADC_SELECTOR+0x1>
     4c0:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <adc_sample>
     4c4:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <adc_sample+0x1>
     4c8:	95 95       	asr	r25
     4ca:	87 95       	ror	r24
     4cc:	95 95       	asr	r25
     4ce:	87 95       	ror	r24
     4d0:	ee 0f       	add	r30, r30
     4d2:	ff 1f       	adc	r31, r31
     4d4:	e1 58       	subi	r30, 0x81	; 129
     4d6:	fe 4f       	sbci	r31, 0xFE	; 254
     4d8:	91 83       	std	Z+1, r25	; 0x01
     4da:	80 83       	st	Z, r24
		adc_n_sample = adc_sample = 0;
     4dc:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <adc_sample+0x1>
     4e0:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <adc_sample>
     4e4:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <__data_end>
		
		if(ADC_SELECTOR < ADC_N_CHANNEL)
     4e8:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <ADC_SELECTOR>
     4ec:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <ADC_SELECTOR+0x1>
     4f0:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <ADC_N_CHANNEL>
     4f4:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <ADC_N_CHANNEL+0x1>
     4f8:	28 17       	cp	r18, r24
     4fa:	39 07       	cpc	r19, r25
     4fc:	54 f4       	brge	.+20     	; 0x512 <__vector_21+0xbe>
			ADC_SELECTOR++;
     4fe:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <ADC_SELECTOR>
     502:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <ADC_SELECTOR+0x1>
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <ADC_SELECTOR+0x1>
     50c:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <ADC_SELECTOR>
     510:	04 c0       	rjmp	.+8      	; 0x51a <__vector_21+0xc6>
		else
			ADC_SELECTOR = 0;
     512:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <ADC_SELECTOR+0x1>
     516:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <ADC_SELECTOR>
		m.adc.reg->admux &= ~MUX_MASK;
     51a:	a6 e2       	ldi	r26, 0x26	; 38
     51c:	b2 e0       	ldi	r27, 0x02	; 2
     51e:	14 96       	adiw	r26, 0x04	; 4
     520:	ed 91       	ld	r30, X+
     522:	fc 91       	ld	r31, X
     524:	15 97       	sbiw	r26, 0x05	; 5
     526:	83 81       	ldd	r24, Z+3	; 0x03
     528:	80 7e       	andi	r24, 0xE0	; 224
     52a:	83 83       	std	Z+3, r24	; 0x03
		m.adc.reg->admux |= (ADC_CHANNEL_GAIN[ADC_SELECTOR] & MUX_MASK);
     52c:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <ADC_SELECTOR>
     530:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <ADC_SELECTOR+0x1>
     534:	ee 0f       	add	r30, r30
     536:	ff 1f       	adc	r31, r31
     538:	e1 5c       	subi	r30, 0xC1	; 193
     53a:	fe 4f       	sbci	r31, 0xFE	; 254
     53c:	80 81       	ld	r24, Z
     53e:	91 81       	ldd	r25, Z+1	; 0x01
     540:	14 96       	adiw	r26, 0x04	; 4
     542:	ed 91       	ld	r30, X+
     544:	fc 91       	ld	r31, X
     546:	15 97       	sbiw	r26, 0x05	; 5
     548:	8f 71       	andi	r24, 0x1F	; 31
     54a:	99 27       	eor	r25, r25
     54c:	93 81       	ldd	r25, Z+3	; 0x03
     54e:	89 2b       	or	r24, r25
     550:	83 83       	std	Z+3, r24	; 0x03
	}
}
     552:	ff 91       	pop	r31
     554:	ef 91       	pop	r30
     556:	bf 91       	pop	r27
     558:	af 91       	pop	r26
     55a:	9f 91       	pop	r25
     55c:	8f 91       	pop	r24
     55e:	7f 91       	pop	r23
     560:	6f 91       	pop	r22
     562:	5f 91       	pop	r21
     564:	4f 91       	pop	r20
     566:	3f 91       	pop	r19
     568:	2f 91       	pop	r18
     56a:	0f 90       	pop	r0
     56c:	0b be       	out	0x3b, r0	; 59
     56e:	0f 90       	pop	r0
     570:	0f be       	out	0x3f, r0	; 63
     572:	0f 90       	pop	r0
     574:	1f 90       	pop	r1
     576:	18 95       	reti

00000578 <INTERRUPT_reset_status>:
	return interrupt;
}
uint8_t INTERRUPT_reset_status(void)
{
	uint8_t reset, ret = 0;
	reset = (m.cpu.reg->mcucsr & 0x1F);
     578:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <m+0xa>
     57c:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <m+0xb>
     580:	80 81       	ld	r24, Z
	switch(reset){
     582:	98 2f       	mov	r25, r24
     584:	9f 71       	andi	r25, 0x1F	; 31
     586:	94 30       	cpi	r25, 0x04	; 4
     588:	99 f0       	breq	.+38     	; 0x5b0 <INTERRUPT_reset_status+0x38>
     58a:	28 f4       	brcc	.+10     	; 0x596 <INTERRUPT_reset_status+0x1e>
     58c:	91 30       	cpi	r25, 0x01	; 1
     58e:	41 f0       	breq	.+16     	; 0x5a0 <INTERRUPT_reset_status+0x28>
     590:	92 30       	cpi	r25, 0x02	; 2
     592:	51 f0       	breq	.+20     	; 0x5a8 <INTERRUPT_reset_status+0x30>
     594:	19 c0       	rjmp	.+50     	; 0x5c8 <INTERRUPT_reset_status+0x50>
     596:	98 30       	cpi	r25, 0x08	; 8
     598:	79 f0       	breq	.+30     	; 0x5b8 <INTERRUPT_reset_status+0x40>
     59a:	90 31       	cpi	r25, 0x10	; 16
     59c:	89 f0       	breq	.+34     	; 0x5c0 <INTERRUPT_reset_status+0x48>
     59e:	14 c0       	rjmp	.+40     	; 0x5c8 <INTERRUPT_reset_status+0x50>
		case 1: // Power-On Reset Flag
			ret = 0;
			m.cpu.reg->mcucsr &= ~(1 << PORF);
     5a0:	8e 7f       	andi	r24, 0xFE	; 254
     5a2:	80 83       	st	Z, r24
{
	uint8_t reset, ret = 0;
	reset = (m.cpu.reg->mcucsr & 0x1F);
	switch(reset){
		case 1: // Power-On Reset Flag
			ret = 0;
     5a4:	80 e0       	ldi	r24, 0x00	; 0
			m.cpu.reg->mcucsr &= ~(1 << PORF);
		break;
     5a6:	08 95       	ret
		case 2: // External Reset Flag
			m.cpu.reg->mcucsr &= ~(1 << EXTRF);
     5a8:	8d 7f       	andi	r24, 0xFD	; 253
     5aa:	80 83       	st	Z, r24
			ret = 1;
     5ac:	81 e0       	ldi	r24, 0x01	; 1
		break;
     5ae:	08 95       	ret
		case 4: // Brown-out Reset Flag
			m.cpu.reg->mcucsr &= ~(1 << BORF);
     5b0:	8b 7f       	andi	r24, 0xFB	; 251
     5b2:	80 83       	st	Z, r24
			ret=2;
     5b4:	82 e0       	ldi	r24, 0x02	; 2
		break;
     5b6:	08 95       	ret
		case 8: // Watchdog Reset Flag
			m.cpu.reg->mcucsr &= ~(1 << WDRF);
     5b8:	87 7f       	andi	r24, 0xF7	; 247
     5ba:	80 83       	st	Z, r24
			ret = 3;
     5bc:	83 e0       	ldi	r24, 0x03	; 3
		break;
     5be:	08 95       	ret
		case 16: // JTAG Reset Flag
			m.cpu.reg->mcucsr &= ~(1 << JTRF);
     5c0:	8f 7e       	andi	r24, 0xEF	; 239
     5c2:	80 83       	st	Z, r24
			ret = 4;
     5c4:	84 e0       	ldi	r24, 0x04	; 4
		break;
     5c6:	08 95       	ret
		default: // clear all status
			m.cpu.reg->mcucsr &= ~(0x1F);
     5c8:	80 7e       	andi	r24, 0xE0	; 224
     5ca:	80 83       	st	Z, r24
	interrupt.reset_status = INTERRUPT_reset_status;
	return interrupt;
}
uint8_t INTERRUPT_reset_status(void)
{
	uint8_t reset, ret = 0;
     5cc:	80 e0       	ldi	r24, 0x00	; 0
		default: // clear all status
			m.cpu.reg->mcucsr &= ~(0x1F);
		break;
	}
	return ret;
}
     5ce:	08 95       	ret

000005d0 <INTERRUPT_set>:
void INTERRUPT_set(uint8_t channel, uint8_t sense)
{
	switch( channel ){
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	88 30       	cpi	r24, 0x08	; 8
     5d4:	91 05       	cpc	r25, r1
     5d6:	08 f0       	brcs	.+2      	; 0x5da <INTERRUPT_set+0xa>
     5d8:	91 c1       	rjmp	.+802    	; 0x8fc <INTERRUPT_set+0x32c>
     5da:	fc 01       	movw	r30, r24
     5dc:	ea 5b       	subi	r30, 0xBA	; 186
     5de:	ff 4f       	sbci	r31, 0xFF	; 255
     5e0:	0c 94 85 2d 	jmp	0x5b0a	; 0x5b0a <__tablejump2__>
		case 0: // PD0
			m.exint.reg->eimsk &= ~(1 << INT0);
     5e4:	e6 e2       	ldi	r30, 0x26	; 38
     5e6:	f2 e0       	ldi	r31, 0x02	; 2
     5e8:	a6 85       	ldd	r26, Z+14	; 0x0e
     5ea:	b7 85       	ldd	r27, Z+15	; 0x0f
     5ec:	11 96       	adiw	r26, 0x01	; 1
     5ee:	8c 91       	ld	r24, X
     5f0:	11 97       	sbiw	r26, 0x01	; 1
     5f2:	8e 7f       	andi	r24, 0xFE	; 254
     5f4:	11 96       	adiw	r26, 0x01	; 1
     5f6:	8c 93       	st	X, r24
			m.exint.reg->eicra &= ~((1 << ISC01) | (1 << ISC00));
     5f8:	06 84       	ldd	r0, Z+14	; 0x0e
     5fa:	f7 85       	ldd	r31, Z+15	; 0x0f
     5fc:	e0 2d       	mov	r30, r0
     5fe:	82 89       	ldd	r24, Z+18	; 0x12
     600:	8c 7f       	andi	r24, 0xFC	; 252
			switch(sense){
     602:	62 30       	cpi	r22, 0x02	; 2
     604:	21 f0       	breq	.+8      	; 0x60e <INTERRUPT_set+0x3e>
     606:	63 30       	cpi	r22, 0x03	; 3
     608:	29 f0       	breq	.+10     	; 0x614 <INTERRUPT_set+0x44>
void INTERRUPT_set(uint8_t channel, uint8_t sense)
{
	switch( channel ){
		case 0: // PD0
			m.exint.reg->eimsk &= ~(1 << INT0);
			m.exint.reg->eicra &= ~((1 << ISC01) | (1 << ISC00));
     60a:	82 8b       	std	Z+18, r24	; 0x12
     60c:	05 c0       	rjmp	.+10     	; 0x618 <INTERRUPT_set+0x48>
			switch(sense){
				case 0: // The low level of INTn generates an interrupt request.
				case 1: // The low level of INTn generates an interrupt request.
				break;
				case 2: // The falling edge of INTn generates asynchronously an interrupt request.
					m.exint.reg->eicra |= (1 << ISC01);
     60e:	82 60       	ori	r24, 0x02	; 2
     610:	82 8b       	std	Z+18, r24	; 0x12
				break;
     612:	02 c0       	rjmp	.+4      	; 0x618 <INTERRUPT_set+0x48>
				case 3: // The rising edge of INTn generates asynchronously an interrupt request.
					m.exint.reg->eicra |= ((1 << ISC01) | (1 << ISC00));
     614:	83 60       	ori	r24, 0x03	; 3
     616:	82 8b       	std	Z+18, r24	; 0x12
				break;
				default: // The low level of INTn generates an interrupt request.
				break;
			}
			m.exint.reg->eimsk |= (1 << INT0);
     618:	81 81       	ldd	r24, Z+1	; 0x01
     61a:	81 60       	ori	r24, 0x01	; 1
     61c:	81 83       	std	Z+1, r24	; 0x01
			m.cpu.reg->sreg |= (1 << GLOBAL_INTERRUPT_ENABLE);
     61e:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <m+0xa>
     622:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <m+0xb>
     626:	83 85       	ldd	r24, Z+11	; 0x0b
     628:	80 68       	ori	r24, 0x80	; 128
     62a:	83 87       	std	Z+11, r24	; 0x0b
		break;
     62c:	08 95       	ret
		case 1: // PD1
			m.exint.reg->eimsk &= ~(1 << INT1);
     62e:	e6 e2       	ldi	r30, 0x26	; 38
     630:	f2 e0       	ldi	r31, 0x02	; 2
     632:	a6 85       	ldd	r26, Z+14	; 0x0e
     634:	b7 85       	ldd	r27, Z+15	; 0x0f
     636:	11 96       	adiw	r26, 0x01	; 1
     638:	8c 91       	ld	r24, X
     63a:	11 97       	sbiw	r26, 0x01	; 1
     63c:	8d 7f       	andi	r24, 0xFD	; 253
     63e:	11 96       	adiw	r26, 0x01	; 1
     640:	8c 93       	st	X, r24
			m.exint.reg->eicra &= ~((1 << ISC11) | (1 << ISC10));
     642:	06 84       	ldd	r0, Z+14	; 0x0e
     644:	f7 85       	ldd	r31, Z+15	; 0x0f
     646:	e0 2d       	mov	r30, r0
     648:	82 89       	ldd	r24, Z+18	; 0x12
     64a:	83 7f       	andi	r24, 0xF3	; 243
			switch(sense){
     64c:	62 30       	cpi	r22, 0x02	; 2
     64e:	21 f0       	breq	.+8      	; 0x658 <INTERRUPT_set+0x88>
     650:	63 30       	cpi	r22, 0x03	; 3
     652:	29 f0       	breq	.+10     	; 0x65e <INTERRUPT_set+0x8e>
			m.exint.reg->eimsk |= (1 << INT0);
			m.cpu.reg->sreg |= (1 << GLOBAL_INTERRUPT_ENABLE);
		break;
		case 1: // PD1
			m.exint.reg->eimsk &= ~(1 << INT1);
			m.exint.reg->eicra &= ~((1 << ISC11) | (1 << ISC10));
     654:	82 8b       	std	Z+18, r24	; 0x12
     656:	05 c0       	rjmp	.+10     	; 0x662 <INTERRUPT_set+0x92>
			switch(sense){
				case 0: // The low level of INTn generates an interrupt request.
				case 1: // The low level of INTn generates an interrupt request.
				break;
				case 2: // The falling edge of INTn generates asynchronously an interrupt request.
					m.exint.reg->eicra |= (1 << ISC11);
     658:	88 60       	ori	r24, 0x08	; 8
     65a:	82 8b       	std	Z+18, r24	; 0x12
				break;
     65c:	02 c0       	rjmp	.+4      	; 0x662 <INTERRUPT_set+0x92>
				case 3: // The rising edge of INTn generates asynchronously an interrupt request.
					m.exint.reg->eicra |= ((1 << ISC11) | (1 << ISC10));
     65e:	8c 60       	ori	r24, 0x0C	; 12
     660:	82 8b       	std	Z+18, r24	; 0x12
				break;
				default: // The low level of INTn generates an interrupt request.
				break;
			}
			m.exint.reg->eimsk |= (1 << INT1);
     662:	81 81       	ldd	r24, Z+1	; 0x01
     664:	82 60       	ori	r24, 0x02	; 2
     666:	81 83       	std	Z+1, r24	; 0x01
			m.cpu.reg->sreg |= (1 << GLOBAL_INTERRUPT_ENABLE);
     668:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <m+0xa>
     66c:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <m+0xb>
     670:	83 85       	ldd	r24, Z+11	; 0x0b
     672:	80 68       	ori	r24, 0x80	; 128
     674:	83 87       	std	Z+11, r24	; 0x0b
		break;
     676:	08 95       	ret
		case 2: // PD2
			m.exint.reg->eimsk &= ~(1 << INT2);
     678:	e6 e2       	ldi	r30, 0x26	; 38
     67a:	f2 e0       	ldi	r31, 0x02	; 2
     67c:	a6 85       	ldd	r26, Z+14	; 0x0e
     67e:	b7 85       	ldd	r27, Z+15	; 0x0f
     680:	11 96       	adiw	r26, 0x01	; 1
     682:	8c 91       	ld	r24, X
     684:	11 97       	sbiw	r26, 0x01	; 1
     686:	8b 7f       	andi	r24, 0xFB	; 251
     688:	11 96       	adiw	r26, 0x01	; 1
     68a:	8c 93       	st	X, r24
			m.exint.reg->eicra &= ~((1 << ISC21) | (1 << ISC20));
     68c:	06 84       	ldd	r0, Z+14	; 0x0e
     68e:	f7 85       	ldd	r31, Z+15	; 0x0f
     690:	e0 2d       	mov	r30, r0
     692:	82 89       	ldd	r24, Z+18	; 0x12
     694:	8f 7c       	andi	r24, 0xCF	; 207
			switch(sense){
     696:	62 30       	cpi	r22, 0x02	; 2
     698:	21 f0       	breq	.+8      	; 0x6a2 <INTERRUPT_set+0xd2>
     69a:	63 30       	cpi	r22, 0x03	; 3
     69c:	29 f0       	breq	.+10     	; 0x6a8 <INTERRUPT_set+0xd8>
			m.exint.reg->eimsk |= (1 << INT1);
			m.cpu.reg->sreg |= (1 << GLOBAL_INTERRUPT_ENABLE);
		break;
		case 2: // PD2
			m.exint.reg->eimsk &= ~(1 << INT2);
			m.exint.reg->eicra &= ~((1 << ISC21) | (1 << ISC20));
     69e:	82 8b       	std	Z+18, r24	; 0x12
     6a0:	05 c0       	rjmp	.+10     	; 0x6ac <INTERRUPT_set+0xdc>
			switch(sense){
				case 0: // The low level of INTn generates an interrupt request.
				case 1: // The low level of INTn generates an interrupt request.
				break;
				case 2: // The falling edge of INTn generates asynchronously an interrupt request.
					m.exint.reg->eicra |= (1 << ISC21);
     6a2:	80 62       	ori	r24, 0x20	; 32
     6a4:	82 8b       	std	Z+18, r24	; 0x12
				break;
     6a6:	02 c0       	rjmp	.+4      	; 0x6ac <INTERRUPT_set+0xdc>
				case 3: // The rising edge of INTn generates asynchronously an interrupt request.
					m.exint.reg->eicra |= ((1 << ISC21) | (1 << ISC20));
     6a8:	80 63       	ori	r24, 0x30	; 48
     6aa:	82 8b       	std	Z+18, r24	; 0x12
				break;
				default: // The low level of INTn generates an interrupt request.
				break;
			}
			m.exint.reg->eimsk |= (1 << INT2);
     6ac:	81 81       	ldd	r24, Z+1	; 0x01
     6ae:	84 60       	ori	r24, 0x04	; 4
     6b0:	81 83       	std	Z+1, r24	; 0x01
			m.cpu.reg->sreg |= (1 << GLOBAL_INTERRUPT_ENABLE);
     6b2:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <m+0xa>
     6b6:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <m+0xb>
     6ba:	83 85       	ldd	r24, Z+11	; 0x0b
     6bc:	80 68       	ori	r24, 0x80	; 128
     6be:	83 87       	std	Z+11, r24	; 0x0b
		break;
     6c0:	08 95       	ret
		case 3: // PD3
			m.exint.reg->eimsk &= ~(1 << INT3);
     6c2:	e6 e2       	ldi	r30, 0x26	; 38
     6c4:	f2 e0       	ldi	r31, 0x02	; 2
     6c6:	a6 85       	ldd	r26, Z+14	; 0x0e
     6c8:	b7 85       	ldd	r27, Z+15	; 0x0f
     6ca:	11 96       	adiw	r26, 0x01	; 1
     6cc:	8c 91       	ld	r24, X
     6ce:	11 97       	sbiw	r26, 0x01	; 1
     6d0:	87 7f       	andi	r24, 0xF7	; 247
     6d2:	11 96       	adiw	r26, 0x01	; 1
     6d4:	8c 93       	st	X, r24
			m.exint.reg->eicra &= ~((1 << ISC31) | (1 << ISC30));
     6d6:	06 84       	ldd	r0, Z+14	; 0x0e
     6d8:	f7 85       	ldd	r31, Z+15	; 0x0f
     6da:	e0 2d       	mov	r30, r0
     6dc:	82 89       	ldd	r24, Z+18	; 0x12
     6de:	8f 73       	andi	r24, 0x3F	; 63
			switch(sense){
     6e0:	62 30       	cpi	r22, 0x02	; 2
     6e2:	21 f0       	breq	.+8      	; 0x6ec <INTERRUPT_set+0x11c>
     6e4:	63 30       	cpi	r22, 0x03	; 3
     6e6:	29 f0       	breq	.+10     	; 0x6f2 <INTERRUPT_set+0x122>
			m.exint.reg->eimsk |= (1 << INT2);
			m.cpu.reg->sreg |= (1 << GLOBAL_INTERRUPT_ENABLE);
		break;
		case 3: // PD3
			m.exint.reg->eimsk &= ~(1 << INT3);
			m.exint.reg->eicra &= ~((1 << ISC31) | (1 << ISC30));
     6e8:	82 8b       	std	Z+18, r24	; 0x12
     6ea:	05 c0       	rjmp	.+10     	; 0x6f6 <INTERRUPT_set+0x126>
			switch(sense){
				case 0: // The low level of INTn generates an interrupt request.
				case 1: // The low level of INTn generates an interrupt request.
				break;
				case 2: // The falling edge of INTn generates asynchronously an interrupt request.
					m.exint.reg->eicra |= (1 << ISC31);
     6ec:	80 68       	ori	r24, 0x80	; 128
     6ee:	82 8b       	std	Z+18, r24	; 0x12
				break;
     6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <INTERRUPT_set+0x126>
				case 3: // The rising edge of INTn generates asynchronously an interrupt request.
					m.exint.reg->eicra |= ((1 << ISC31) | (1 << ISC30));
     6f2:	80 6c       	ori	r24, 0xC0	; 192
     6f4:	82 8b       	std	Z+18, r24	; 0x12
				break;
				default: // The low level of INTn generates an interrupt request.
				break;
			}
			m.exint.reg->eimsk |= (1 << INT3);
     6f6:	81 81       	ldd	r24, Z+1	; 0x01
     6f8:	88 60       	ori	r24, 0x08	; 8
     6fa:	81 83       	std	Z+1, r24	; 0x01
			m.cpu.reg->sreg |= (1 << GLOBAL_INTERRUPT_ENABLE);
     6fc:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <m+0xa>
     700:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <m+0xb>
     704:	83 85       	ldd	r24, Z+11	; 0x0b
     706:	80 68       	ori	r24, 0x80	; 128
     708:	83 87       	std	Z+11, r24	; 0x0b
		break;
     70a:	08 95       	ret
		case 4: // PE4
			m.exint.reg->eimsk &= ~(1 << INT4);
     70c:	e6 e2       	ldi	r30, 0x26	; 38
     70e:	f2 e0       	ldi	r31, 0x02	; 2
     710:	a6 85       	ldd	r26, Z+14	; 0x0e
     712:	b7 85       	ldd	r27, Z+15	; 0x0f
     714:	11 96       	adiw	r26, 0x01	; 1
     716:	8c 91       	ld	r24, X
     718:	11 97       	sbiw	r26, 0x01	; 1
     71a:	8f 7e       	andi	r24, 0xEF	; 239
     71c:	11 96       	adiw	r26, 0x01	; 1
     71e:	8c 93       	st	X, r24
			m.exint.reg->eicrb &= ~((1 << ISC41) | (1 << ISC40));
     720:	06 84       	ldd	r0, Z+14	; 0x0e
     722:	f7 85       	ldd	r31, Z+15	; 0x0f
     724:	e0 2d       	mov	r30, r0
     726:	82 81       	ldd	r24, Z+2	; 0x02
     728:	8c 7f       	andi	r24, 0xFC	; 252
     72a:	82 83       	std	Z+2, r24	; 0x02
			switch(sense){
     72c:	62 30       	cpi	r22, 0x02	; 2
     72e:	61 f0       	breq	.+24     	; 0x748 <INTERRUPT_set+0x178>
     730:	63 30       	cpi	r22, 0x03	; 3
     732:	91 f0       	breq	.+36     	; 0x758 <INTERRUPT_set+0x188>
     734:	61 30       	cpi	r22, 0x01	; 1
     736:	b9 f4       	brne	.+46     	; 0x766 <INTERRUPT_set+0x196>
				case 0: // The low level of INTn generates an interrupt request.
				break;
				case 1: // Any logical change on INTn generates an interrupt request
					m.exint.reg->eicrb |= (1 << ISC40);
     738:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <m+0xe>
     73c:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <m+0xf>
     740:	82 81       	ldd	r24, Z+2	; 0x02
     742:	81 60       	ori	r24, 0x01	; 1
     744:	82 83       	std	Z+2, r24	; 0x02
				break;
     746:	0f c0       	rjmp	.+30     	; 0x766 <INTERRUPT_set+0x196>
				case 2: // The falling edge between two samples of INTn generates an interrupt request.
					m.exint.reg->eicrb |= (1 << ISC41);
     748:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <m+0xe>
     74c:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <m+0xf>
     750:	82 81       	ldd	r24, Z+2	; 0x02
     752:	82 60       	ori	r24, 0x02	; 2
     754:	82 83       	std	Z+2, r24	; 0x02
				break;
     756:	07 c0       	rjmp	.+14     	; 0x766 <INTERRUPT_set+0x196>
				case 3: // The rising edge between two samples of INTn generates an interrupt request.
					m.exint.reg->eicrb |= ((1 << ISC41) | (1 << ISC40));
     758:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <m+0xe>
     75c:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <m+0xf>
     760:	82 81       	ldd	r24, Z+2	; 0x02
     762:	83 60       	ori	r24, 0x03	; 3
     764:	82 83       	std	Z+2, r24	; 0x02
				break;
				default: // The low level of INTn generates an interrupt request.
				break;
			}
			m.exint.reg->eimsk |= (1 << INT4);
     766:	e6 e2       	ldi	r30, 0x26	; 38
     768:	f2 e0       	ldi	r31, 0x02	; 2
     76a:	a6 85       	ldd	r26, Z+14	; 0x0e
     76c:	b7 85       	ldd	r27, Z+15	; 0x0f
     76e:	11 96       	adiw	r26, 0x01	; 1
     770:	8c 91       	ld	r24, X
     772:	11 97       	sbiw	r26, 0x01	; 1
     774:	80 61       	ori	r24, 0x10	; 16
     776:	11 96       	adiw	r26, 0x01	; 1
     778:	8c 93       	st	X, r24
			m.cpu.reg->sreg |= (1 << GLOBAL_INTERRUPT_ENABLE);
     77a:	02 84       	ldd	r0, Z+10	; 0x0a
     77c:	f3 85       	ldd	r31, Z+11	; 0x0b
     77e:	e0 2d       	mov	r30, r0
     780:	83 85       	ldd	r24, Z+11	; 0x0b
     782:	80 68       	ori	r24, 0x80	; 128
     784:	83 87       	std	Z+11, r24	; 0x0b
		break;
     786:	08 95       	ret
		case 5: // PE5
			m.exint.reg->eimsk &= ~(1 << INT5);
     788:	e6 e2       	ldi	r30, 0x26	; 38
     78a:	f2 e0       	ldi	r31, 0x02	; 2
     78c:	a6 85       	ldd	r26, Z+14	; 0x0e
     78e:	b7 85       	ldd	r27, Z+15	; 0x0f
     790:	11 96       	adiw	r26, 0x01	; 1
     792:	8c 91       	ld	r24, X
     794:	11 97       	sbiw	r26, 0x01	; 1
     796:	8f 7d       	andi	r24, 0xDF	; 223
     798:	11 96       	adiw	r26, 0x01	; 1
     79a:	8c 93       	st	X, r24
			m.exint.reg->eicrb &= ~((1 << ISC51) | (1 << ISC50));
     79c:	06 84       	ldd	r0, Z+14	; 0x0e
     79e:	f7 85       	ldd	r31, Z+15	; 0x0f
     7a0:	e0 2d       	mov	r30, r0
     7a2:	82 81       	ldd	r24, Z+2	; 0x02
     7a4:	83 7f       	andi	r24, 0xF3	; 243
     7a6:	82 83       	std	Z+2, r24	; 0x02
			switch(sense){
     7a8:	62 30       	cpi	r22, 0x02	; 2
     7aa:	61 f0       	breq	.+24     	; 0x7c4 <INTERRUPT_set+0x1f4>
     7ac:	63 30       	cpi	r22, 0x03	; 3
     7ae:	91 f0       	breq	.+36     	; 0x7d4 <INTERRUPT_set+0x204>
     7b0:	61 30       	cpi	r22, 0x01	; 1
     7b2:	b9 f4       	brne	.+46     	; 0x7e2 <INTERRUPT_set+0x212>
				case 0: // The low level of INTn generates an interrupt request.
				break;
				case 1: // Any logical change on INTn generates an interrupt request
					m.exint.reg->eicrb |= (1 << ISC50);
     7b4:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <m+0xe>
     7b8:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <m+0xf>
     7bc:	82 81       	ldd	r24, Z+2	; 0x02
     7be:	84 60       	ori	r24, 0x04	; 4
     7c0:	82 83       	std	Z+2, r24	; 0x02
				break;
     7c2:	0f c0       	rjmp	.+30     	; 0x7e2 <INTERRUPT_set+0x212>
				case 2: // The falling edge between two samples of INTn generates an interrupt request.
					m.exint.reg->eicrb |= (1 << ISC51);
     7c4:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <m+0xe>
     7c8:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <m+0xf>
     7cc:	82 81       	ldd	r24, Z+2	; 0x02
     7ce:	88 60       	ori	r24, 0x08	; 8
     7d0:	82 83       	std	Z+2, r24	; 0x02
				break;
     7d2:	07 c0       	rjmp	.+14     	; 0x7e2 <INTERRUPT_set+0x212>
				case 3: // The rising edge between two samples of INTn generates an interrupt request.
					m.exint.reg->eicrb |= ((1 << ISC51) | (1 << ISC50));
     7d4:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <m+0xe>
     7d8:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <m+0xf>
     7dc:	82 81       	ldd	r24, Z+2	; 0x02
     7de:	8c 60       	ori	r24, 0x0C	; 12
     7e0:	82 83       	std	Z+2, r24	; 0x02
				break;
				default: // The low level of INTn generates an interrupt request.
				break;
			}
			m.exint.reg->eimsk |= (1 << INT5);
     7e2:	e6 e2       	ldi	r30, 0x26	; 38
     7e4:	f2 e0       	ldi	r31, 0x02	; 2
     7e6:	a6 85       	ldd	r26, Z+14	; 0x0e
     7e8:	b7 85       	ldd	r27, Z+15	; 0x0f
     7ea:	11 96       	adiw	r26, 0x01	; 1
     7ec:	8c 91       	ld	r24, X
     7ee:	11 97       	sbiw	r26, 0x01	; 1
     7f0:	80 62       	ori	r24, 0x20	; 32
     7f2:	11 96       	adiw	r26, 0x01	; 1
     7f4:	8c 93       	st	X, r24
			m.cpu.reg->sreg |= (1 << GLOBAL_INTERRUPT_ENABLE);
     7f6:	02 84       	ldd	r0, Z+10	; 0x0a
     7f8:	f3 85       	ldd	r31, Z+11	; 0x0b
     7fa:	e0 2d       	mov	r30, r0
     7fc:	83 85       	ldd	r24, Z+11	; 0x0b
     7fe:	80 68       	ori	r24, 0x80	; 128
     800:	83 87       	std	Z+11, r24	; 0x0b
		break;
     802:	08 95       	ret
		case 6: // PE6
			m.exint.reg->eimsk &= ~(1 << INT6);
     804:	e6 e2       	ldi	r30, 0x26	; 38
     806:	f2 e0       	ldi	r31, 0x02	; 2
     808:	a6 85       	ldd	r26, Z+14	; 0x0e
     80a:	b7 85       	ldd	r27, Z+15	; 0x0f
     80c:	11 96       	adiw	r26, 0x01	; 1
     80e:	8c 91       	ld	r24, X
     810:	11 97       	sbiw	r26, 0x01	; 1
     812:	8f 7b       	andi	r24, 0xBF	; 191
     814:	11 96       	adiw	r26, 0x01	; 1
     816:	8c 93       	st	X, r24
			m.exint.reg->eicrb &= ~((1 << ISC61) | (1 << ISC60));
     818:	06 84       	ldd	r0, Z+14	; 0x0e
     81a:	f7 85       	ldd	r31, Z+15	; 0x0f
     81c:	e0 2d       	mov	r30, r0
     81e:	82 81       	ldd	r24, Z+2	; 0x02
     820:	8f 7c       	andi	r24, 0xCF	; 207
     822:	82 83       	std	Z+2, r24	; 0x02
			switch(sense){
     824:	62 30       	cpi	r22, 0x02	; 2
     826:	61 f0       	breq	.+24     	; 0x840 <INTERRUPT_set+0x270>
     828:	63 30       	cpi	r22, 0x03	; 3
     82a:	91 f0       	breq	.+36     	; 0x850 <INTERRUPT_set+0x280>
     82c:	61 30       	cpi	r22, 0x01	; 1
     82e:	b9 f4       	brne	.+46     	; 0x85e <INTERRUPT_set+0x28e>
				case 0: // The low level of INTn generates an interrupt request.
				break;
				case 1: // Any logical change on INTn generates an interrupt request
					m.exint.reg->eicrb |= (1 << ISC60);
     830:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <m+0xe>
     834:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <m+0xf>
     838:	82 81       	ldd	r24, Z+2	; 0x02
     83a:	80 61       	ori	r24, 0x10	; 16
     83c:	82 83       	std	Z+2, r24	; 0x02
				break;
     83e:	0f c0       	rjmp	.+30     	; 0x85e <INTERRUPT_set+0x28e>
				case 2: // The falling edge between two samples of INTn generates an interrupt request.
					m.exint.reg->eicrb |= (1 << ISC61);
     840:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <m+0xe>
     844:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <m+0xf>
     848:	82 81       	ldd	r24, Z+2	; 0x02
     84a:	80 62       	ori	r24, 0x20	; 32
     84c:	82 83       	std	Z+2, r24	; 0x02
				break;
     84e:	07 c0       	rjmp	.+14     	; 0x85e <INTERRUPT_set+0x28e>
				case 3: // The rising edge between two samples of INTn generates an interrupt request.
					m.exint.reg->eicrb |= ((1 << ISC61) | (1 << ISC60));
     850:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <m+0xe>
     854:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <m+0xf>
     858:	82 81       	ldd	r24, Z+2	; 0x02
     85a:	80 63       	ori	r24, 0x30	; 48
     85c:	82 83       	std	Z+2, r24	; 0x02
				break;
				default: // The low level of INTn generates an interrupt request.
				break;
			}
			m.exint.reg->eimsk |= (1 << INT6);
     85e:	e6 e2       	ldi	r30, 0x26	; 38
     860:	f2 e0       	ldi	r31, 0x02	; 2
     862:	a6 85       	ldd	r26, Z+14	; 0x0e
     864:	b7 85       	ldd	r27, Z+15	; 0x0f
     866:	11 96       	adiw	r26, 0x01	; 1
     868:	8c 91       	ld	r24, X
     86a:	11 97       	sbiw	r26, 0x01	; 1
     86c:	80 64       	ori	r24, 0x40	; 64
     86e:	11 96       	adiw	r26, 0x01	; 1
     870:	8c 93       	st	X, r24
			m.cpu.reg->sreg |= (1 << GLOBAL_INTERRUPT_ENABLE);
     872:	02 84       	ldd	r0, Z+10	; 0x0a
     874:	f3 85       	ldd	r31, Z+11	; 0x0b
     876:	e0 2d       	mov	r30, r0
     878:	83 85       	ldd	r24, Z+11	; 0x0b
     87a:	80 68       	ori	r24, 0x80	; 128
     87c:	83 87       	std	Z+11, r24	; 0x0b
		break;
     87e:	08 95       	ret
		case 7: // PE7
			m.exint.reg->eimsk &= ~(1 << INT7);
     880:	e6 e2       	ldi	r30, 0x26	; 38
     882:	f2 e0       	ldi	r31, 0x02	; 2
     884:	a6 85       	ldd	r26, Z+14	; 0x0e
     886:	b7 85       	ldd	r27, Z+15	; 0x0f
     888:	11 96       	adiw	r26, 0x01	; 1
     88a:	8c 91       	ld	r24, X
     88c:	11 97       	sbiw	r26, 0x01	; 1
     88e:	8f 77       	andi	r24, 0x7F	; 127
     890:	11 96       	adiw	r26, 0x01	; 1
     892:	8c 93       	st	X, r24
			m.exint.reg->eicrb &= ~((1 << ISC71) | (1 << ISC70));
     894:	06 84       	ldd	r0, Z+14	; 0x0e
     896:	f7 85       	ldd	r31, Z+15	; 0x0f
     898:	e0 2d       	mov	r30, r0
     89a:	82 81       	ldd	r24, Z+2	; 0x02
     89c:	8f 73       	andi	r24, 0x3F	; 63
     89e:	82 83       	std	Z+2, r24	; 0x02
			switch(sense){
     8a0:	62 30       	cpi	r22, 0x02	; 2
     8a2:	61 f0       	breq	.+24     	; 0x8bc <INTERRUPT_set+0x2ec>
     8a4:	63 30       	cpi	r22, 0x03	; 3
     8a6:	91 f0       	breq	.+36     	; 0x8cc <INTERRUPT_set+0x2fc>
     8a8:	61 30       	cpi	r22, 0x01	; 1
     8aa:	b9 f4       	brne	.+46     	; 0x8da <INTERRUPT_set+0x30a>
				case 0: // The low level of INTn generates an interrupt request.
				break;
				case 1: // Any logical change on INTn generates an interrupt request
					m.exint.reg->eicrb |= (1 << ISC70);
     8ac:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <m+0xe>
     8b0:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <m+0xf>
     8b4:	82 81       	ldd	r24, Z+2	; 0x02
     8b6:	80 64       	ori	r24, 0x40	; 64
     8b8:	82 83       	std	Z+2, r24	; 0x02
				break;
     8ba:	0f c0       	rjmp	.+30     	; 0x8da <INTERRUPT_set+0x30a>
				case 2: // The falling edge between two samples of INTn generates an interrupt request.
					m.exint.reg->eicrb |= (1 << ISC71);
     8bc:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <m+0xe>
     8c0:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <m+0xf>
     8c4:	82 81       	ldd	r24, Z+2	; 0x02
     8c6:	80 68       	ori	r24, 0x80	; 128
     8c8:	82 83       	std	Z+2, r24	; 0x02
				break;
     8ca:	07 c0       	rjmp	.+14     	; 0x8da <INTERRUPT_set+0x30a>
				case 3: // The rising edge between two samples of INTn generates an interrupt request.
					m.exint.reg->eicrb |= ((1 << ISC71) | (1 << ISC70));
     8cc:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <m+0xe>
     8d0:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <m+0xf>
     8d4:	82 81       	ldd	r24, Z+2	; 0x02
     8d6:	80 6c       	ori	r24, 0xC0	; 192
     8d8:	82 83       	std	Z+2, r24	; 0x02
				break;
				default: // The low level of INTn generates an interrupt request.
				break;
			}
			m.exint.reg->eimsk |= (1 << INT7);
     8da:	e6 e2       	ldi	r30, 0x26	; 38
     8dc:	f2 e0       	ldi	r31, 0x02	; 2
     8de:	a6 85       	ldd	r26, Z+14	; 0x0e
     8e0:	b7 85       	ldd	r27, Z+15	; 0x0f
     8e2:	11 96       	adiw	r26, 0x01	; 1
     8e4:	8c 91       	ld	r24, X
     8e6:	11 97       	sbiw	r26, 0x01	; 1
     8e8:	80 68       	ori	r24, 0x80	; 128
     8ea:	11 96       	adiw	r26, 0x01	; 1
     8ec:	8c 93       	st	X, r24
			m.cpu.reg->sreg |= (1 << GLOBAL_INTERRUPT_ENABLE);
     8ee:	02 84       	ldd	r0, Z+10	; 0x0a
     8f0:	f3 85       	ldd	r31, Z+11	; 0x0b
     8f2:	e0 2d       	mov	r30, r0
     8f4:	83 85       	ldd	r24, Z+11	; 0x0b
     8f6:	80 68       	ori	r24, 0x80	; 128
     8f8:	83 87       	std	Z+11, r24	; 0x0b
		break;
     8fa:	08 95       	ret
		default:
			m.exint.reg->eimsk = 0X00;
     8fc:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <m+0xe>
     900:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <m+0xf>
     904:	11 82       	std	Z+1, r1	; 0x01
     906:	08 95       	ret

00000908 <INTERRUPT_off>:
		break;
	}
}
void INTERRUPT_off(uint8_t channel)
{
	switch( channel ){
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	88 30       	cpi	r24, 0x08	; 8
     90c:	91 05       	cpc	r25, r1
     90e:	08 f0       	brcs	.+2      	; 0x912 <INTERRUPT_off+0xa>
     910:	45 c0       	rjmp	.+138    	; 0x99c <INTERRUPT_off+0x94>
     912:	fc 01       	movw	r30, r24
     914:	e2 5b       	subi	r30, 0xB2	; 178
     916:	ff 4f       	sbci	r31, 0xFF	; 255
     918:	0c 94 85 2d 	jmp	0x5b0a	; 0x5b0a <__tablejump2__>
		case 0: // disable
			m.exint.reg->eimsk &= ~(1 << INT0);
     91c:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <m+0xe>
     920:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <m+0xf>
     924:	81 81       	ldd	r24, Z+1	; 0x01
     926:	8e 7f       	andi	r24, 0xFE	; 254
     928:	81 83       	std	Z+1, r24	; 0x01
		break;
     92a:	08 95       	ret
		case 1: // disable
			m.exint.reg->eimsk &= ~(1 << INT1);
     92c:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <m+0xe>
     930:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <m+0xf>
     934:	81 81       	ldd	r24, Z+1	; 0x01
     936:	8d 7f       	andi	r24, 0xFD	; 253
     938:	81 83       	std	Z+1, r24	; 0x01
		break;
     93a:	08 95       	ret
		case 2: // disable
			m.exint.reg->eimsk &= ~(1 << INT2);
     93c:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <m+0xe>
     940:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <m+0xf>
     944:	81 81       	ldd	r24, Z+1	; 0x01
     946:	8b 7f       	andi	r24, 0xFB	; 251
     948:	81 83       	std	Z+1, r24	; 0x01
		break;
     94a:	08 95       	ret
		case 3: // disable
			m.exint.reg->eimsk &= ~(1 << INT3);
     94c:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <m+0xe>
     950:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <m+0xf>
     954:	81 81       	ldd	r24, Z+1	; 0x01
     956:	87 7f       	andi	r24, 0xF7	; 247
     958:	81 83       	std	Z+1, r24	; 0x01
		break;
     95a:	08 95       	ret
		case 4: // disable
			m.exint.reg->eimsk &= ~(1 <<INT4);
     95c:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <m+0xe>
     960:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <m+0xf>
     964:	81 81       	ldd	r24, Z+1	; 0x01
     966:	8f 7e       	andi	r24, 0xEF	; 239
     968:	81 83       	std	Z+1, r24	; 0x01
		break;
     96a:	08 95       	ret
		case 5: // disable
			m.exint.reg->eimsk &= ~(1 << INT5);
     96c:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <m+0xe>
     970:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <m+0xf>
     974:	81 81       	ldd	r24, Z+1	; 0x01
     976:	8f 7d       	andi	r24, 0xDF	; 223
     978:	81 83       	std	Z+1, r24	; 0x01
		break;
     97a:	08 95       	ret
		case 6: // disable
			m.exint.reg->eimsk &= ~(1 << INT6);
     97c:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <m+0xe>
     980:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <m+0xf>
     984:	81 81       	ldd	r24, Z+1	; 0x01
     986:	8f 7b       	andi	r24, 0xBF	; 191
     988:	81 83       	std	Z+1, r24	; 0x01
		break;
     98a:	08 95       	ret
		case 7: // disable
			m.exint.reg->eimsk &= ~(1 << INT7);
     98c:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <m+0xe>
     990:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <m+0xf>
     994:	81 81       	ldd	r24, Z+1	; 0x01
     996:	8f 77       	andi	r24, 0x7F	; 127
     998:	81 83       	std	Z+1, r24	; 0x01
		break;
     99a:	08 95       	ret
		default: // all disable
			m.exint.reg->eimsk = 0X00;
     99c:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <m+0xe>
     9a0:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <m+0xf>
     9a4:	11 82       	std	Z+1, r1	; 0x01
     9a6:	08 95       	ret

000009a8 <INTERRUPT_on>:
		break;
	}
}
void INTERRUPT_on(uint8_t channel)
{
	switch( channel ){
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	88 30       	cpi	r24, 0x08	; 8
     9ac:	91 05       	cpc	r25, r1
     9ae:	08 f0       	brcs	.+2      	; 0x9b2 <INTERRUPT_on+0xa>
     9b0:	8c c0       	rjmp	.+280    	; 0xaca <INTERRUPT_on+0x122>
     9b2:	fc 01       	movw	r30, r24
     9b4:	ea 5a       	subi	r30, 0xAA	; 170
     9b6:	ff 4f       	sbci	r31, 0xFF	; 255
     9b8:	0c 94 85 2d 	jmp	0x5b0a	; 0x5b0a <__tablejump2__>
		case 0:
			m.exint.reg->eimsk |= (1<<INT0);
     9bc:	e6 e2       	ldi	r30, 0x26	; 38
     9be:	f2 e0       	ldi	r31, 0x02	; 2
     9c0:	a6 85       	ldd	r26, Z+14	; 0x0e
     9c2:	b7 85       	ldd	r27, Z+15	; 0x0f
     9c4:	11 96       	adiw	r26, 0x01	; 1
     9c6:	8c 91       	ld	r24, X
     9c8:	11 97       	sbiw	r26, 0x01	; 1
     9ca:	81 60       	ori	r24, 0x01	; 1
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	8c 93       	st	X, r24
			m.cpu.reg->sreg |= (1 << GLOBAL_INTERRUPT_ENABLE);
     9d0:	02 84       	ldd	r0, Z+10	; 0x0a
     9d2:	f3 85       	ldd	r31, Z+11	; 0x0b
     9d4:	e0 2d       	mov	r30, r0
     9d6:	83 85       	ldd	r24, Z+11	; 0x0b
     9d8:	80 68       	ori	r24, 0x80	; 128
     9da:	83 87       	std	Z+11, r24	; 0x0b
		break;
     9dc:	08 95       	ret
		case 1:
			m.exint.reg->eimsk |= (1 << INT1);
     9de:	e6 e2       	ldi	r30, 0x26	; 38
     9e0:	f2 e0       	ldi	r31, 0x02	; 2
     9e2:	a6 85       	ldd	r26, Z+14	; 0x0e
     9e4:	b7 85       	ldd	r27, Z+15	; 0x0f
     9e6:	11 96       	adiw	r26, 0x01	; 1
     9e8:	8c 91       	ld	r24, X
     9ea:	11 97       	sbiw	r26, 0x01	; 1
     9ec:	82 60       	ori	r24, 0x02	; 2
     9ee:	11 96       	adiw	r26, 0x01	; 1
     9f0:	8c 93       	st	X, r24
			m.cpu.reg->sreg |= (1 << GLOBAL_INTERRUPT_ENABLE);
     9f2:	02 84       	ldd	r0, Z+10	; 0x0a
     9f4:	f3 85       	ldd	r31, Z+11	; 0x0b
     9f6:	e0 2d       	mov	r30, r0
     9f8:	83 85       	ldd	r24, Z+11	; 0x0b
     9fa:	80 68       	ori	r24, 0x80	; 128
     9fc:	83 87       	std	Z+11, r24	; 0x0b
		break;
     9fe:	08 95       	ret
		case 2:
			m.exint.reg->eimsk |= (1 << INT2);
     a00:	e6 e2       	ldi	r30, 0x26	; 38
     a02:	f2 e0       	ldi	r31, 0x02	; 2
     a04:	a6 85       	ldd	r26, Z+14	; 0x0e
     a06:	b7 85       	ldd	r27, Z+15	; 0x0f
     a08:	11 96       	adiw	r26, 0x01	; 1
     a0a:	8c 91       	ld	r24, X
     a0c:	11 97       	sbiw	r26, 0x01	; 1
     a0e:	84 60       	ori	r24, 0x04	; 4
     a10:	11 96       	adiw	r26, 0x01	; 1
     a12:	8c 93       	st	X, r24
			m.cpu.reg->sreg |= (1 << GLOBAL_INTERRUPT_ENABLE);
     a14:	02 84       	ldd	r0, Z+10	; 0x0a
     a16:	f3 85       	ldd	r31, Z+11	; 0x0b
     a18:	e0 2d       	mov	r30, r0
     a1a:	83 85       	ldd	r24, Z+11	; 0x0b
     a1c:	80 68       	ori	r24, 0x80	; 128
     a1e:	83 87       	std	Z+11, r24	; 0x0b
		break;
     a20:	08 95       	ret
		case 3:
			m.exint.reg->eimsk |= (1 << INT3);
     a22:	e6 e2       	ldi	r30, 0x26	; 38
     a24:	f2 e0       	ldi	r31, 0x02	; 2
     a26:	a6 85       	ldd	r26, Z+14	; 0x0e
     a28:	b7 85       	ldd	r27, Z+15	; 0x0f
     a2a:	11 96       	adiw	r26, 0x01	; 1
     a2c:	8c 91       	ld	r24, X
     a2e:	11 97       	sbiw	r26, 0x01	; 1
     a30:	88 60       	ori	r24, 0x08	; 8
     a32:	11 96       	adiw	r26, 0x01	; 1
     a34:	8c 93       	st	X, r24
			m.cpu.reg->sreg |= (1 << GLOBAL_INTERRUPT_ENABLE);
     a36:	02 84       	ldd	r0, Z+10	; 0x0a
     a38:	f3 85       	ldd	r31, Z+11	; 0x0b
     a3a:	e0 2d       	mov	r30, r0
     a3c:	83 85       	ldd	r24, Z+11	; 0x0b
     a3e:	80 68       	ori	r24, 0x80	; 128
     a40:	83 87       	std	Z+11, r24	; 0x0b
		break;
     a42:	08 95       	ret
		case 4:
			m.exint.reg->eimsk |= (1 << INT4);
     a44:	e6 e2       	ldi	r30, 0x26	; 38
     a46:	f2 e0       	ldi	r31, 0x02	; 2
     a48:	a6 85       	ldd	r26, Z+14	; 0x0e
     a4a:	b7 85       	ldd	r27, Z+15	; 0x0f
     a4c:	11 96       	adiw	r26, 0x01	; 1
     a4e:	8c 91       	ld	r24, X
     a50:	11 97       	sbiw	r26, 0x01	; 1
     a52:	80 61       	ori	r24, 0x10	; 16
     a54:	11 96       	adiw	r26, 0x01	; 1
     a56:	8c 93       	st	X, r24
			m.cpu.reg->sreg |= (1 << GLOBAL_INTERRUPT_ENABLE);
     a58:	02 84       	ldd	r0, Z+10	; 0x0a
     a5a:	f3 85       	ldd	r31, Z+11	; 0x0b
     a5c:	e0 2d       	mov	r30, r0
     a5e:	83 85       	ldd	r24, Z+11	; 0x0b
     a60:	80 68       	ori	r24, 0x80	; 128
     a62:	83 87       	std	Z+11, r24	; 0x0b
		break;
     a64:	08 95       	ret
		case 5:
			m.exint.reg->eimsk |= (1 << INT5);
     a66:	e6 e2       	ldi	r30, 0x26	; 38
     a68:	f2 e0       	ldi	r31, 0x02	; 2
     a6a:	a6 85       	ldd	r26, Z+14	; 0x0e
     a6c:	b7 85       	ldd	r27, Z+15	; 0x0f
     a6e:	11 96       	adiw	r26, 0x01	; 1
     a70:	8c 91       	ld	r24, X
     a72:	11 97       	sbiw	r26, 0x01	; 1
     a74:	80 62       	ori	r24, 0x20	; 32
     a76:	11 96       	adiw	r26, 0x01	; 1
     a78:	8c 93       	st	X, r24
			m.cpu.reg->sreg |= (1 << GLOBAL_INTERRUPT_ENABLE);
     a7a:	02 84       	ldd	r0, Z+10	; 0x0a
     a7c:	f3 85       	ldd	r31, Z+11	; 0x0b
     a7e:	e0 2d       	mov	r30, r0
     a80:	83 85       	ldd	r24, Z+11	; 0x0b
     a82:	80 68       	ori	r24, 0x80	; 128
     a84:	83 87       	std	Z+11, r24	; 0x0b
		break;
     a86:	08 95       	ret
		case 6:
			m.exint.reg->eimsk |= (1 << INT6);
     a88:	e6 e2       	ldi	r30, 0x26	; 38
     a8a:	f2 e0       	ldi	r31, 0x02	; 2
     a8c:	a6 85       	ldd	r26, Z+14	; 0x0e
     a8e:	b7 85       	ldd	r27, Z+15	; 0x0f
     a90:	11 96       	adiw	r26, 0x01	; 1
     a92:	8c 91       	ld	r24, X
     a94:	11 97       	sbiw	r26, 0x01	; 1
     a96:	80 64       	ori	r24, 0x40	; 64
     a98:	11 96       	adiw	r26, 0x01	; 1
     a9a:	8c 93       	st	X, r24
			m.cpu.reg->sreg |= (1 << GLOBAL_INTERRUPT_ENABLE);
     a9c:	02 84       	ldd	r0, Z+10	; 0x0a
     a9e:	f3 85       	ldd	r31, Z+11	; 0x0b
     aa0:	e0 2d       	mov	r30, r0
     aa2:	83 85       	ldd	r24, Z+11	; 0x0b
     aa4:	80 68       	ori	r24, 0x80	; 128
     aa6:	83 87       	std	Z+11, r24	; 0x0b
		break;
     aa8:	08 95       	ret
		case 7:
			m.exint.reg->eimsk |= (1 << INT7);
     aaa:	e6 e2       	ldi	r30, 0x26	; 38
     aac:	f2 e0       	ldi	r31, 0x02	; 2
     aae:	a6 85       	ldd	r26, Z+14	; 0x0e
     ab0:	b7 85       	ldd	r27, Z+15	; 0x0f
     ab2:	11 96       	adiw	r26, 0x01	; 1
     ab4:	8c 91       	ld	r24, X
     ab6:	11 97       	sbiw	r26, 0x01	; 1
     ab8:	80 68       	ori	r24, 0x80	; 128
     aba:	11 96       	adiw	r26, 0x01	; 1
     abc:	8c 93       	st	X, r24
			m.cpu.reg->sreg |= (1 << GLOBAL_INTERRUPT_ENABLE);
     abe:	02 84       	ldd	r0, Z+10	; 0x0a
     ac0:	f3 85       	ldd	r31, Z+11	; 0x0b
     ac2:	e0 2d       	mov	r30, r0
     ac4:	83 85       	ldd	r24, Z+11	; 0x0b
     ac6:	80 68       	ori	r24, 0x80	; 128
     ac8:	83 87       	std	Z+11, r24	; 0x0b
     aca:	08 95       	ret

00000acc <INTERRUPTenable>:

/*** Procedure & Function ***/
INTERRUPT INTERRUPTenable(void)
// Setup blank

{
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	cd b7       	in	r28, 0x3d	; 61
     ad2:	de b7       	in	r29, 0x3e	; 62
     ad4:	c8 55       	subi	r28, 0x58	; 88
     ad6:	d1 09       	sbc	r29, r1
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	f8 94       	cli
     adc:	de bf       	out	0x3e, r29	; 62
     ade:	0f be       	out	0x3f, r0	; 63
     ae0:	cd bf       	out	0x3d, r28	; 61
	INTERRUPT interrupt;
	m = ATMEGA128enable();
     ae2:	ce 01       	movw	r24, r28
     ae4:	09 96       	adiw	r24, 0x09	; 9
     ae6:	45 d0       	rcall	.+138    	; 0xb72 <ATMEGA128enable>
     ae8:	80 e5       	ldi	r24, 0x50	; 80
     aea:	fe 01       	movw	r30, r28
     aec:	39 96       	adiw	r30, 0x09	; 9
     aee:	a6 e2       	ldi	r26, 0x26	; 38
     af0:	b2 e0       	ldi	r27, 0x02	; 2
     af2:	01 90       	ld	r0, Z+
     af4:	0d 92       	st	X+, r0
     af6:	8a 95       	dec	r24
     af8:	e1 f7       	brne	.-8      	; 0xaf2 <INTERRUPTenable+0x26>
	
	m.exint.reg->eimsk = 0x00;
     afa:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <m+0xe>
     afe:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <m+0xf>
     b02:	11 82       	std	Z+1, r1	; 0x01
	
	interrupt.set = INTERRUPT_set;
	interrupt.off = INTERRUPT_off;
	interrupt.on = INTERRUPT_on;
	interrupt.reset_status = INTERRUPT_reset_status;
	return interrupt;
     b04:	28 ee       	ldi	r18, 0xE8	; 232
     b06:	32 e0       	ldi	r19, 0x02	; 2
     b08:	3a 83       	std	Y+2, r19	; 0x02
     b0a:	29 83       	std	Y+1, r18	; 0x01
     b0c:	44 e8       	ldi	r20, 0x84	; 132
     b0e:	54 e0       	ldi	r21, 0x04	; 4
     b10:	5c 83       	std	Y+4, r21	; 0x04
     b12:	4b 83       	std	Y+3, r20	; 0x03
     b14:	64 ed       	ldi	r22, 0xD4	; 212
     b16:	74 e0       	ldi	r23, 0x04	; 4
     b18:	7e 83       	std	Y+6, r23	; 0x06
     b1a:	6d 83       	std	Y+5, r22	; 0x05
     b1c:	8c eb       	ldi	r24, 0xBC	; 188
     b1e:	92 e0       	ldi	r25, 0x02	; 2
     b20:	98 87       	std	Y+8, r25	; 0x08
     b22:	8f 83       	std	Y+7, r24	; 0x07
     b24:	3a 81       	ldd	r19, Y+2	; 0x02
     b26:	5c 81       	ldd	r21, Y+4	; 0x04
     b28:	7e 81       	ldd	r23, Y+6	; 0x06
}
     b2a:	98 85       	ldd	r25, Y+8	; 0x08
     b2c:	c8 5a       	subi	r28, 0xA8	; 168
     b2e:	df 4f       	sbci	r29, 0xFF	; 255
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	f8 94       	cli
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	cd bf       	out	0x3d, r28	; 61
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	08 95       	ret

00000b40 <ReadHLByte>:
}

// COMMON
uint16_t ReadHLByte(HighLowByte reg)
{
	return (reg.H << 8) | reg.L;
     b40:	29 2f       	mov	r18, r25
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	32 2f       	mov	r19, r18
     b46:	22 27       	eor	r18, r18
}
     b48:	a9 01       	movw	r20, r18
     b4a:	48 2b       	or	r20, r24
     b4c:	ca 01       	movw	r24, r20
     b4e:	08 95       	ret

00000b50 <ReadLHByte>:

uint16_t ReadLHByte(HighLowByte reg)
{
	return (reg.L << 8) | reg.H;
     b50:	28 2f       	mov	r18, r24
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	32 2f       	mov	r19, r18
     b56:	22 27       	eor	r18, r18
}
     b58:	a9 01       	movw	r20, r18
     b5a:	49 2b       	or	r20, r25
     b5c:	ca 01       	movw	r24, r20
     b5e:	08 95       	ret

00000b60 <WriteHLByte>:

HighLowByte WriteHLByte(uint16_t val)
{
	HighLowByte reg; reg.H = (val >> 8); reg.L = val;
	return reg;
}
     b60:	08 95       	ret

00000b62 <WriteLHByte>:

HighLowByte WriteLHByte(uint16_t val)
{
     b62:	28 2f       	mov	r18, r24
	HighLowByte reg; reg.L = (val >> 8); reg.H = val;
	return reg;
}
     b64:	89 2f       	mov	r24, r25
     b66:	92 2f       	mov	r25, r18
     b68:	08 95       	ret

00000b6a <SwapByte>:
uint16_t SwapByte(uint16_t num)
{
	uint16_t tp;
	tp = (num << 8);
	return (num >> 8) | tp;
}
     b6a:	98 27       	eor	r25, r24
     b6c:	89 27       	eor	r24, r25
     b6e:	98 27       	eor	r25, r24
     b70:	08 95       	ret

00000b72 <ATMEGA128enable>:
#define Usart0 0x0029
#define Usart1 0x0098
#define WatchdogTimer 0x0041

/*** Procedure & Function ***/
ATMEGA128 ATMEGA128enable(void){ 
     b72:	fc 01       	movw	r30, r24
	ret.readhlbyte = ReadHLByte;
	ret.readlhbyte = ReadLHByte;
	ret.writehlbyte = WriteHLByte;
	ret.writelhbyte = WriteLHByte;
	ret.swapbyte = SwapByte;
	return ret;
     b74:	11 82       	std	Z+1, r1	; 0x01
     b76:	10 82       	st	Z, r1
     b78:	88 e2       	ldi	r24, 0x28	; 40
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	93 83       	std	Z+3, r25	; 0x03
     b7e:	82 83       	std	Z+2, r24	; 0x02
     b80:	84 e2       	ldi	r24, 0x24	; 36
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	95 83       	std	Z+5, r25	; 0x05
     b86:	84 83       	std	Z+4, r24	; 0x04
     b88:	86 e0       	ldi	r24, 0x06	; 6
     b8a:	91 e0       	ldi	r25, 0x01	; 1
     b8c:	97 83       	std	Z+7, r25	; 0x07
     b8e:	86 83       	std	Z+6, r24	; 0x06
     b90:	88 e6       	ldi	r24, 0x68	; 104
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	91 87       	std	Z+9, r25	; 0x09
     b96:	80 87       	std	Z+8, r24	; 0x08
     b98:	84 e5       	ldi	r24, 0x54	; 84
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	93 87       	std	Z+11, r25	; 0x0b
     b9e:	82 87       	std	Z+10, r24	; 0x0a
     ba0:	8c e3       	ldi	r24, 0x3C	; 60
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	95 87       	std	Z+13, r25	; 0x0d
     ba6:	84 87       	std	Z+12, r24	; 0x0c
     ba8:	88 e5       	ldi	r24, 0x58	; 88
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	97 87       	std	Z+15, r25	; 0x0f
     bae:	86 87       	std	Z+14, r24	; 0x0e
     bb0:	86 e6       	ldi	r24, 0x66	; 102
     bb2:	95 e0       	ldi	r25, 0x05	; 5
     bb4:	91 8b       	std	Z+17, r25	; 0x11
     bb6:	80 8b       	std	Z+16, r24	; 0x10
     bb8:	89 e3       	ldi	r24, 0x39	; 57
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	93 8b       	std	Z+19, r25	; 0x13
     bbe:	82 8b       	std	Z+18, r24	; 0x12
     bc0:	86 e3       	ldi	r24, 0x36	; 54
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	95 8b       	std	Z+21, r25	; 0x15
     bc6:	84 8b       	std	Z+20, r24	; 0x14
     bc8:	83 e3       	ldi	r24, 0x33	; 51
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	97 8b       	std	Z+23, r25	; 0x17
     bce:	86 8b       	std	Z+22, r24	; 0x16
     bd0:	80 e3       	ldi	r24, 0x30	; 48
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	91 8f       	std	Z+25, r25	; 0x19
     bd6:	80 8f       	std	Z+24, r24	; 0x18
     bd8:	81 e2       	ldi	r24, 0x21	; 33
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	93 8f       	std	Z+27, r25	; 0x1b
     bde:	82 8f       	std	Z+26, r24	; 0x1a
     be0:	80 e2       	ldi	r24, 0x20	; 32
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	95 8f       	std	Z+29, r25	; 0x1d
     be6:	84 8f       	std	Z+28, r24	; 0x1c
     be8:	83 e6       	ldi	r24, 0x63	; 99
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	97 8f       	std	Z+31, r25	; 0x1f
     bee:	86 8f       	std	Z+30, r24	; 0x1e
     bf0:	82 e4       	ldi	r24, 0x42	; 66
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	91 a3       	std	Z+33, r25	; 0x21
     bf6:	80 a3       	std	Z+32, r24	; 0x20
     bf8:	80 e4       	ldi	r24, 0x40	; 64
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	93 a3       	std	Z+35, r25	; 0x23
     bfe:	82 a3       	std	Z+34, r24	; 0x22
     c00:	2d e2       	ldi	r18, 0x2D	; 45
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	35 a3       	std	Z+37, r19	; 0x25
     c06:	24 a3       	std	Z+36, r18	; 0x24
     c08:	22 ec       	ldi	r18, 0xC2	; 194
     c0a:	36 e0       	ldi	r19, 0x06	; 6
     c0c:	37 a3       	std	Z+39, r19	; 0x27
     c0e:	26 a3       	std	Z+38, r18	; 0x26
     c10:	91 a7       	std	Z+41, r25	; 0x29
     c12:	80 a7       	std	Z+40, r24	; 0x28
     c14:	21 e1       	ldi	r18, 0x11	; 17
     c16:	3d e0       	ldi	r19, 0x0D	; 13
     c18:	33 a7       	std	Z+43, r19	; 0x2b
     c1a:	22 a7       	std	Z+42, r18	; 0x2a
     c1c:	95 a7       	std	Z+45, r25	; 0x2d
     c1e:	84 a7       	std	Z+44, r24	; 0x2c
     c20:	2b e0       	ldi	r18, 0x0B	; 11
     c22:	30 e1       	ldi	r19, 0x10	; 16
     c24:	37 a7       	std	Z+47, r19	; 0x2f
     c26:	26 a7       	std	Z+46, r18	; 0x2e
     c28:	23 e4       	ldi	r18, 0x43	; 67
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	31 ab       	std	Z+49, r19	; 0x31
     c2e:	20 ab       	std	Z+48, r18	; 0x30
     c30:	23 e5       	ldi	r18, 0x53	; 83
     c32:	3f e0       	ldi	r19, 0x0F	; 15
     c34:	33 ab       	std	Z+51, r19	; 0x33
     c36:	22 ab       	std	Z+50, r18	; 0x32
     c38:	95 ab       	std	Z+53, r25	; 0x35
     c3a:	84 ab       	std	Z+52, r24	; 0x34
     c3c:	89 e5       	ldi	r24, 0x59	; 89
     c3e:	9c e0       	ldi	r25, 0x0C	; 12
     c40:	97 ab       	std	Z+55, r25	; 0x37
     c42:	86 ab       	std	Z+54, r24	; 0x36
     c44:	80 e7       	ldi	r24, 0x70	; 112
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	91 af       	std	Z+57, r25	; 0x39
     c4a:	80 af       	std	Z+56, r24	; 0x38
     c4c:	8e e2       	ldi	r24, 0x2E	; 46
     c4e:	92 e1       	ldi	r25, 0x12	; 18
     c50:	93 af       	std	Z+59, r25	; 0x3b
     c52:	82 af       	std	Z+58, r24	; 0x3a
     c54:	89 e2       	ldi	r24, 0x29	; 41
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	95 af       	std	Z+61, r25	; 0x3d
     c5a:	84 af       	std	Z+60, r24	; 0x3c
     c5c:	8c e5       	ldi	r24, 0x5C	; 92
     c5e:	93 e1       	ldi	r25, 0x13	; 19
     c60:	97 af       	std	Z+63, r25	; 0x3f
     c62:	86 af       	std	Z+62, r24	; 0x3e
     c64:	df 01       	movw	r26, r30
     c66:	a0 5c       	subi	r26, 0xC0	; 192
     c68:	bf 4f       	sbci	r27, 0xFF	; 255
     c6a:	88 e9       	ldi	r24, 0x98	; 152
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	11 96       	adiw	r26, 0x01	; 1
     c70:	9c 93       	st	X, r25
     c72:	8e 93       	st	-X, r24
     c74:	12 96       	adiw	r26, 0x02	; 2
     c76:	8e ee       	ldi	r24, 0xEE	; 238
     c78:	94 e1       	ldi	r25, 0x14	; 20
     c7a:	11 96       	adiw	r26, 0x01	; 1
     c7c:	9c 93       	st	X, r25
     c7e:	8e 93       	st	-X, r24
     c80:	12 96       	adiw	r26, 0x02	; 2
     c82:	81 e4       	ldi	r24, 0x41	; 65
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	11 96       	adiw	r26, 0x01	; 1
     c88:	9c 93       	st	X, r25
     c8a:	8e 93       	st	-X, r24
     c8c:	12 96       	adiw	r26, 0x02	; 2
     c8e:	80 ea       	ldi	r24, 0xA0	; 160
     c90:	95 e0       	ldi	r25, 0x05	; 5
     c92:	11 96       	adiw	r26, 0x01	; 1
     c94:	9c 93       	st	X, r25
     c96:	8e 93       	st	-X, r24
     c98:	12 96       	adiw	r26, 0x02	; 2
     c9a:	88 ea       	ldi	r24, 0xA8	; 168
     c9c:	95 e0       	ldi	r25, 0x05	; 5
     c9e:	11 96       	adiw	r26, 0x01	; 1
     ca0:	9c 93       	st	X, r25
     ca2:	8e 93       	st	-X, r24
     ca4:	12 96       	adiw	r26, 0x02	; 2
     ca6:	80 eb       	ldi	r24, 0xB0	; 176
     ca8:	95 e0       	ldi	r25, 0x05	; 5
     caa:	11 96       	adiw	r26, 0x01	; 1
     cac:	9c 93       	st	X, r25
     cae:	8e 93       	st	-X, r24
     cb0:	12 96       	adiw	r26, 0x02	; 2
     cb2:	81 eb       	ldi	r24, 0xB1	; 177
     cb4:	95 e0       	ldi	r25, 0x05	; 5
     cb6:	11 96       	adiw	r26, 0x01	; 1
     cb8:	9c 93       	st	X, r25
     cba:	8e 93       	st	-X, r24
     cbc:	12 96       	adiw	r26, 0x02	; 2
     cbe:	85 eb       	ldi	r24, 0xB5	; 181
     cc0:	95 e0       	ldi	r25, 0x05	; 5
     cc2:	8d 93       	st	X+, r24
     cc4:	9c 93       	st	X, r25
}
     cc6:	cf 01       	movw	r24, r30
     cc8:	08 95       	ret

00000cca <spi_transfer_sync>:
						(0 << CPHA));				// Clock Phase (0:leading / 1:trailing edge sampling)
    m.spi.reg->spsr	=	(1 << SPI2X);				// Double Clock Rate  
}
void spi_transfer_sync (uint8_t * dataout, uint8_t * datain, uint8_t len)
// Shift full array through target device
{
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
	uint8_t i;      
	for (i = 0; i < len; i++) {
     cd2:	44 23       	and	r20, r20
     cd4:	19 f1       	breq	.+70     	; 0xd1c <spi_transfer_sync+0x52>
     cd6:	fc 01       	movw	r30, r24
     cd8:	06 2f       	mov	r16, r22
     cda:	17 2f       	mov	r17, r23
     cdc:	41 50       	subi	r20, 0x01	; 1
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	4f 5f       	subi	r20, 0xFF	; 255
     ce2:	5f 4f       	sbci	r21, 0xFF	; 255
     ce4:	48 0f       	add	r20, r24
     ce6:	59 1f       	adc	r21, r25
		m.spi.reg->spdr = dataout[i];
     ce8:	26 e2       	ldi	r18, 0x26	; 38
     cea:	32 e0       	ldi	r19, 0x02	; 2
     cec:	d9 01       	movw	r26, r18
     cee:	94 96       	adiw	r26, 0x24	; 36
     cf0:	cd 91       	ld	r28, X+
     cf2:	dc 91       	ld	r29, X
     cf4:	95 97       	sbiw	r26, 0x25	; 37
     cf6:	91 91       	ld	r25, Z+
     cf8:	9a 83       	std	Y+2, r25	; 0x02
		while((m.spi.reg->spsr & (1 << SPIF)) == 0) ; // polling, serial transfer is complete interrupt.
     cfa:	94 96       	adiw	r26, 0x24	; 36
     cfc:	0d 90       	ld	r0, X+
     cfe:	bc 91       	ld	r27, X
     d00:	a0 2d       	mov	r26, r0
     d02:	11 96       	adiw	r26, 0x01	; 1
     d04:	9c 91       	ld	r25, X
     d06:	11 97       	sbiw	r26, 0x01	; 1
     d08:	99 23       	and	r25, r25
     d0a:	f4 f7       	brge	.-4      	; 0xd08 <spi_transfer_sync+0x3e>
		datain[i] = m.spi.reg->spdr;
     d0c:	12 96       	adiw	r26, 0x02	; 2
     d0e:	9c 91       	ld	r25, X
     d10:	e8 01       	movw	r28, r16
     d12:	99 93       	st	Y+, r25
     d14:	8e 01       	movw	r16, r28
}
void spi_transfer_sync (uint8_t * dataout, uint8_t * datain, uint8_t len)
// Shift full array through target device
{
	uint8_t i;      
	for (i = 0; i < len; i++) {
     d16:	e4 17       	cp	r30, r20
     d18:	f5 07       	cpc	r31, r21
     d1a:	41 f7       	brne	.-48     	; 0xcec <spi_transfer_sync+0x22>
		m.spi.reg->spdr = dataout[i];
		while((m.spi.reg->spsr & (1 << SPIF)) == 0) ; // polling, serial transfer is complete interrupt.
		datain[i] = m.spi.reg->spdr;
	}
}
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
     d24:	08 95       	ret

00000d26 <spi_transmit_sync>:
void spi_transmit_sync (uint8_t * dataout, uint8_t len)
// Shift full array to target device without receiving any byte
{
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
	uint8_t i;      
	for (i = 0; i < len; i++) {
     d2a:	66 23       	and	r22, r22
     d2c:	d1 f0       	breq	.+52     	; 0xd62 <spi_transmit_sync+0x3c>
     d2e:	fc 01       	movw	r30, r24
     d30:	61 50       	subi	r22, 0x01	; 1
     d32:	26 2f       	mov	r18, r22
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	2f 5f       	subi	r18, 0xFF	; 255
     d38:	3f 4f       	sbci	r19, 0xFF	; 255
     d3a:	28 0f       	add	r18, r24
     d3c:	39 1f       	adc	r19, r25
		m.spi.reg->spdr = dataout[i];
     d3e:	a6 e2       	ldi	r26, 0x26	; 38
     d40:	b2 e0       	ldi	r27, 0x02	; 2
     d42:	94 96       	adiw	r26, 0x24	; 36
     d44:	cd 91       	ld	r28, X+
     d46:	dc 91       	ld	r29, X
     d48:	95 97       	sbiw	r26, 0x25	; 37
     d4a:	91 91       	ld	r25, Z+
     d4c:	9a 83       	std	Y+2, r25	; 0x02
		while((m.spi.reg->spsr & (1 << SPIF)) == 0) ; // polling, serial transfer is complete interrupt.
     d4e:	94 96       	adiw	r26, 0x24	; 36
     d50:	cd 91       	ld	r28, X+
     d52:	dc 91       	ld	r29, X
     d54:	95 97       	sbiw	r26, 0x25	; 37
     d56:	99 81       	ldd	r25, Y+1	; 0x01
     d58:	99 23       	and	r25, r25
     d5a:	f4 f7       	brge	.-4      	; 0xd58 <spi_transmit_sync+0x32>
}
void spi_transmit_sync (uint8_t * dataout, uint8_t len)
// Shift full array to target device without receiving any byte
{
	uint8_t i;      
	for (i = 0; i < len; i++) {
     d5c:	e2 17       	cp	r30, r18
     d5e:	f3 07       	cpc	r31, r19
     d60:	81 f7       	brne	.-32     	; 0xd42 <spi_transmit_sync+0x1c>
		m.spi.reg->spdr = dataout[i];
		while((m.spi.reg->spsr & (1 << SPIF)) == 0) ; // polling, serial transfer is complete interrupt.
	}
}
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	08 95       	ret

00000d68 <spi_fast_shift>:
uint8_t spi_fast_shift (uint8_t data)
// Clocks only one byte to target device and returns the received one
{
	m.spi.reg->spdr = data;
     d68:	e6 e2       	ldi	r30, 0x26	; 38
     d6a:	f2 e0       	ldi	r31, 0x02	; 2
     d6c:	a4 a1       	ldd	r26, Z+36	; 0x24
     d6e:	b5 a1       	ldd	r27, Z+37	; 0x25
     d70:	12 96       	adiw	r26, 0x02	; 2
     d72:	8c 93       	st	X, r24
	while((m.spi.reg->spsr & (1 << SPIF)) == 0) ; // polling, serial transfer is complete interrupt.
     d74:	04 a0       	ldd	r0, Z+36	; 0x24
     d76:	f5 a1       	ldd	r31, Z+37	; 0x25
     d78:	e0 2d       	mov	r30, r0
     d7a:	81 81       	ldd	r24, Z+1	; 0x01
     d7c:	88 23       	and	r24, r24
     d7e:	f4 f7       	brge	.-4      	; 0xd7c <spi_fast_shift+0x14>
	return m.spi.reg->spdr;
}
     d80:	82 81       	ldd	r24, Z+2	; 0x02
     d82:	08 95       	ret

00000d84 <SPIenable>:
void spi_transmit_sync (uint8_t * dataout, uint8_t len);
uint8_t spi_fast_shift (uint8_t data);

/*** Procedure & Function ***/
SPI SPIenable(uint8_t master_slave_select, uint8_t data_order,  uint8_t data_modes, uint8_t prescaler)
{
     d84:	ef 92       	push	r14
     d86:	ff 92       	push	r15
     d88:	0f 93       	push	r16
     d8a:	1f 93       	push	r17
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	c6 55       	subi	r28, 0x56	; 86
     d96:	d1 09       	sbc	r29, r1
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	f8 94       	cli
     d9c:	de bf       	out	0x3e, r29	; 62
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	cd bf       	out	0x3d, r28	; 61
     da2:	f8 2e       	mov	r15, r24
     da4:	e6 2e       	mov	r14, r22
     da6:	04 2f       	mov	r16, r20
     da8:	12 2f       	mov	r17, r18
	SPI spi;
	m = ATMEGA128enable();
     daa:	ce 01       	movw	r24, r28
     dac:	07 96       	adiw	r24, 0x07	; 7
     dae:	e1 de       	rcall	.-574    	; 0xb72 <ATMEGA128enable>
     db0:	80 e5       	ldi	r24, 0x50	; 80
     db2:	fe 01       	movw	r30, r28
     db4:	37 96       	adiw	r30, 0x07	; 7
     db6:	a6 e2       	ldi	r26, 0x26	; 38
     db8:	b2 e0       	ldi	r27, 0x02	; 2
     dba:	01 90       	ld	r0, Z+
     dbc:	0d 92       	st	X+, r0
     dbe:	8a 95       	dec	r24
     dc0:	e1 f7       	brne	.-8      	; 0xdba <SPIenable+0x36>
	spi.transfer_sync = spi_transfer_sync;
	spi.transmit_sync = spi_transmit_sync;
	spi.fast_shift = spi_fast_shift;
	
	m.portb.reg->ddr &= ~((1 << DD_MOSI) | (1 << DD_MISO) | (1 << DD_SS) | (1 << DD_SCK));
     dc2:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <m+0x14>
     dc6:	f0 91 3b 02 	lds	r31, 0x023B	; 0x80023b <m+0x15>
     dca:	81 81       	ldd	r24, Z+1	; 0x01
     dcc:	80 7f       	andi	r24, 0xF0	; 240
     dce:	81 83       	std	Z+1, r24	; 0x01
	switch(master_slave_select){
     dd0:	ff 20       	and	r15, r15
     dd2:	c9 f0       	breq	.+50     	; 0xe06 <SPIenable+0x82>
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	f8 12       	cpse	r15, r24
     dd8:	24 c0       	rjmp	.+72     	; 0xe22 <SPIenable+0x9e>
		case SPI_MASTER_MODE:
			m.spi.reg->spcr |= (1 << MSTR);
     dda:	e6 e2       	ldi	r30, 0x26	; 38
     ddc:	f2 e0       	ldi	r31, 0x02	; 2
     dde:	a4 a1       	ldd	r26, Z+36	; 0x24
     de0:	b5 a1       	ldd	r27, Z+37	; 0x25
     de2:	8c 91       	ld	r24, X
     de4:	80 61       	ori	r24, 0x10	; 16
     de6:	8c 93       	st	X, r24
			m.portb.reg->ddr |= (1 << DD_SS) | (1 << DD_MOSI) | (1 << DD_SCK);
     de8:	a4 89       	ldd	r26, Z+20	; 0x14
     dea:	b5 89       	ldd	r27, Z+21	; 0x15
     dec:	11 96       	adiw	r26, 0x01	; 1
     dee:	8c 91       	ld	r24, X
     df0:	11 97       	sbiw	r26, 0x01	; 1
     df2:	87 60       	ori	r24, 0x07	; 7
     df4:	11 96       	adiw	r26, 0x01	; 1
     df6:	8c 93       	st	X, r24
			m.portb.reg->port |= (1 << DD_SS);
     df8:	04 88       	ldd	r0, Z+20	; 0x14
     dfa:	f5 89       	ldd	r31, Z+21	; 0x15
     dfc:	e0 2d       	mov	r30, r0
     dfe:	82 81       	ldd	r24, Z+2	; 0x02
     e00:	81 60       	ori	r24, 0x01	; 1
     e02:	82 83       	std	Z+2, r24	; 0x02
		break;
     e04:	1b c0       	rjmp	.+54     	; 0xe3c <SPIenable+0xb8>
		case SPI_SLAVE_MODE:
			m.spi.reg->spcr |= (1 << MSTR);
     e06:	e6 e2       	ldi	r30, 0x26	; 38
     e08:	f2 e0       	ldi	r31, 0x02	; 2
     e0a:	a4 a1       	ldd	r26, Z+36	; 0x24
     e0c:	b5 a1       	ldd	r27, Z+37	; 0x25
     e0e:	8c 91       	ld	r24, X
     e10:	80 61       	ori	r24, 0x10	; 16
     e12:	8c 93       	st	X, r24
			m.portb.reg->ddr |= (1 << DD_MISO);
     e14:	04 88       	ldd	r0, Z+20	; 0x14
     e16:	f5 89       	ldd	r31, Z+21	; 0x15
     e18:	e0 2d       	mov	r30, r0
     e1a:	81 81       	ldd	r24, Z+1	; 0x01
     e1c:	88 60       	ori	r24, 0x08	; 8
     e1e:	81 83       	std	Z+1, r24	; 0x01
		break;
     e20:	0d c0       	rjmp	.+26     	; 0xe3c <SPIenable+0xb8>
		default:
			m.spi.reg->spcr |= (1 << MSTR);
     e22:	e6 e2       	ldi	r30, 0x26	; 38
     e24:	f2 e0       	ldi	r31, 0x02	; 2
     e26:	a4 a1       	ldd	r26, Z+36	; 0x24
     e28:	b5 a1       	ldd	r27, Z+37	; 0x25
     e2a:	8c 91       	ld	r24, X
     e2c:	80 61       	ori	r24, 0x10	; 16
     e2e:	8c 93       	st	X, r24
			m.portb.reg->ddr |= (1 << DD_SS) | (1 << DD_MOSI) | (1 << DD_SCK);
     e30:	04 88       	ldd	r0, Z+20	; 0x14
     e32:	f5 89       	ldd	r31, Z+21	; 0x15
     e34:	e0 2d       	mov	r30, r0
     e36:	81 81       	ldd	r24, Z+1	; 0x01
     e38:	87 60       	ori	r24, 0x07	; 7
     e3a:	81 83       	std	Z+1, r24	; 0x01
		break;
	}
	switch(data_order){
     e3c:	ee 20       	and	r14, r14
     e3e:	59 f0       	breq	.+22     	; 0xe56 <SPIenable+0xd2>
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	e8 12       	cpse	r14, r24
     e44:	10 c0       	rjmp	.+32     	; 0xe66 <SPIenable+0xe2>
		case SPI_LSB_DATA_ORDER:
			m.spi.reg->spcr |= (1 << DORD);
     e46:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <m+0x24>
     e4a:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <m+0x25>
     e4e:	80 81       	ld	r24, Z
     e50:	80 62       	ori	r24, 0x20	; 32
     e52:	80 83       	st	Z, r24
		break;
     e54:	0f c0       	rjmp	.+30     	; 0xe74 <SPIenable+0xf0>
		case SPI_MSB_DATA_ORDER:
			m.spi.reg->spcr &= ~(1 << DORD);
     e56:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <m+0x24>
     e5a:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <m+0x25>
     e5e:	80 81       	ld	r24, Z
     e60:	8f 7d       	andi	r24, 0xDF	; 223
     e62:	80 83       	st	Z, r24
		break;
     e64:	07 c0       	rjmp	.+14     	; 0xe74 <SPIenable+0xf0>
		default:
			m.spi.reg->spcr &= ~(1 << DORD);
     e66:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <m+0x24>
     e6a:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <m+0x25>
     e6e:	80 81       	ld	r24, Z
     e70:	8f 7d       	andi	r24, 0xDF	; 223
     e72:	80 83       	st	Z, r24
		break;
	}
	switch(data_modes){
     e74:	01 30       	cpi	r16, 0x01	; 1
     e76:	71 f0       	breq	.+28     	; 0xe94 <SPIenable+0x110>
     e78:	28 f0       	brcs	.+10     	; 0xe84 <SPIenable+0x100>
     e7a:	02 30       	cpi	r16, 0x02	; 2
     e7c:	99 f0       	breq	.+38     	; 0xea4 <SPIenable+0x120>
     e7e:	03 30       	cpi	r16, 0x03	; 3
     e80:	c9 f0       	breq	.+50     	; 0xeb4 <SPIenable+0x130>
     e82:	20 c0       	rjmp	.+64     	; 0xec4 <SPIenable+0x140>
		case 0:
			m.spi.reg->spcr &= ~((1 << CPOL) | (1 << CPHA));
     e84:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <m+0x24>
     e88:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <m+0x25>
     e8c:	80 81       	ld	r24, Z
     e8e:	83 7f       	andi	r24, 0xF3	; 243
     e90:	80 83       	st	Z, r24
		break;
     e92:	1f c0       	rjmp	.+62     	; 0xed2 <SPIenable+0x14e>
		case 1:
			m.spi.reg->spcr |= (1 << CPHA);
     e94:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <m+0x24>
     e98:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <m+0x25>
     e9c:	80 81       	ld	r24, Z
     e9e:	84 60       	ori	r24, 0x04	; 4
     ea0:	80 83       	st	Z, r24
		break;
     ea2:	17 c0       	rjmp	.+46     	; 0xed2 <SPIenable+0x14e>
		case 2:
			m.spi.reg->spcr |= (1 << CPOL);
     ea4:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <m+0x24>
     ea8:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <m+0x25>
     eac:	80 81       	ld	r24, Z
     eae:	88 60       	ori	r24, 0x08	; 8
     eb0:	80 83       	st	Z, r24
		break;
     eb2:	0f c0       	rjmp	.+30     	; 0xed2 <SPIenable+0x14e>
		case 3:
			m.spi.reg->spcr |= (1 << CPOL) | (1 << CPHA);
     eb4:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <m+0x24>
     eb8:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <m+0x25>
     ebc:	80 81       	ld	r24, Z
     ebe:	8c 60       	ori	r24, 0x0C	; 12
     ec0:	80 83       	st	Z, r24
		break;
     ec2:	07 c0       	rjmp	.+14     	; 0xed2 <SPIenable+0x14e>
		default:
			m.spi.reg->spcr &= ~((1 << CPOL) | (1 << CPHA));
     ec4:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <m+0x24>
     ec8:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <m+0x25>
     ecc:	80 81       	ld	r24, Z
     ece:	83 7f       	andi	r24, 0xF3	; 243
     ed0:	80 83       	st	Z, r24
		break;
	}
	switch(prescaler){
     ed2:	10 31       	cpi	r17, 0x10	; 16
     ed4:	09 f4       	brne	.+2      	; 0xed8 <SPIenable+0x154>
     ed6:	46 c0       	rjmp	.+140    	; 0xf64 <SPIenable+0x1e0>
     ed8:	40 f4       	brcc	.+16     	; 0xeea <SPIenable+0x166>
     eda:	14 30       	cpi	r17, 0x04	; 4
     edc:	09 f1       	breq	.+66     	; 0xf20 <SPIenable+0x19c>
     ede:	18 30       	cpi	r17, 0x08	; 8
     ee0:	81 f1       	breq	.+96     	; 0xf42 <SPIenable+0x1be>
     ee2:	12 30       	cpi	r17, 0x02	; 2
     ee4:	09 f0       	breq	.+2      	; 0xee8 <SPIenable+0x164>
     ee6:	82 c0       	rjmp	.+260    	; 0xfec <SPIenable+0x268>
     ee8:	0a c0       	rjmp	.+20     	; 0xefe <SPIenable+0x17a>
     eea:	10 34       	cpi	r17, 0x40	; 64
     eec:	09 f4       	brne	.+2      	; 0xef0 <SPIenable+0x16c>
     eee:	5c c0       	rjmp	.+184    	; 0xfa8 <SPIenable+0x224>
     ef0:	10 38       	cpi	r17, 0x80	; 128
     ef2:	09 f4       	brne	.+2      	; 0xef6 <SPIenable+0x172>
     ef4:	6a c0       	rjmp	.+212    	; 0xfca <SPIenable+0x246>
     ef6:	10 32       	cpi	r17, 0x20	; 32
     ef8:	09 f0       	breq	.+2      	; 0xefc <SPIenable+0x178>
     efa:	78 c0       	rjmp	.+240    	; 0xfec <SPIenable+0x268>
     efc:	44 c0       	rjmp	.+136    	; 0xf86 <SPIenable+0x202>
		case 2:
			m.spi.reg->spsr |= (1 << SPI2X);
     efe:	e6 e2       	ldi	r30, 0x26	; 38
     f00:	f2 e0       	ldi	r31, 0x02	; 2
     f02:	a4 a1       	ldd	r26, Z+36	; 0x24
     f04:	b5 a1       	ldd	r27, Z+37	; 0x25
     f06:	11 96       	adiw	r26, 0x01	; 1
     f08:	8c 91       	ld	r24, X
     f0a:	11 97       	sbiw	r26, 0x01	; 1
     f0c:	81 60       	ori	r24, 0x01	; 1
     f0e:	11 96       	adiw	r26, 0x01	; 1
     f10:	8c 93       	st	X, r24
			m.spi.reg->spcr &= ~((1 << SPR1) | (1 << SPR0));
     f12:	04 a0       	ldd	r0, Z+36	; 0x24
     f14:	f5 a1       	ldd	r31, Z+37	; 0x25
     f16:	e0 2d       	mov	r30, r0
     f18:	80 81       	ld	r24, Z
     f1a:	8c 7f       	andi	r24, 0xFC	; 252
     f1c:	80 83       	st	Z, r24
		break;
     f1e:	76 c0       	rjmp	.+236    	; 0x100c <SPIenable+0x288>
		case 4:
			m.spi.reg->spsr &= ~(1 << SPI2X);
     f20:	e6 e2       	ldi	r30, 0x26	; 38
     f22:	f2 e0       	ldi	r31, 0x02	; 2
     f24:	a4 a1       	ldd	r26, Z+36	; 0x24
     f26:	b5 a1       	ldd	r27, Z+37	; 0x25
     f28:	11 96       	adiw	r26, 0x01	; 1
     f2a:	8c 91       	ld	r24, X
     f2c:	11 97       	sbiw	r26, 0x01	; 1
     f2e:	8e 7f       	andi	r24, 0xFE	; 254
     f30:	11 96       	adiw	r26, 0x01	; 1
     f32:	8c 93       	st	X, r24
			m.spi.reg->spcr &= ~((1 << SPR1) | (1 << SPR0));
     f34:	04 a0       	ldd	r0, Z+36	; 0x24
     f36:	f5 a1       	ldd	r31, Z+37	; 0x25
     f38:	e0 2d       	mov	r30, r0
     f3a:	80 81       	ld	r24, Z
     f3c:	8c 7f       	andi	r24, 0xFC	; 252
     f3e:	80 83       	st	Z, r24
		break;
     f40:	65 c0       	rjmp	.+202    	; 0x100c <SPIenable+0x288>
		case 8:
			m.spi.reg->spsr |= (1 << SPI2X);
     f42:	e6 e2       	ldi	r30, 0x26	; 38
     f44:	f2 e0       	ldi	r31, 0x02	; 2
     f46:	a4 a1       	ldd	r26, Z+36	; 0x24
     f48:	b5 a1       	ldd	r27, Z+37	; 0x25
     f4a:	11 96       	adiw	r26, 0x01	; 1
     f4c:	8c 91       	ld	r24, X
     f4e:	11 97       	sbiw	r26, 0x01	; 1
     f50:	81 60       	ori	r24, 0x01	; 1
     f52:	11 96       	adiw	r26, 0x01	; 1
     f54:	8c 93       	st	X, r24
			m.spi.reg->spcr |= (1 << SPR0);
     f56:	04 a0       	ldd	r0, Z+36	; 0x24
     f58:	f5 a1       	ldd	r31, Z+37	; 0x25
     f5a:	e0 2d       	mov	r30, r0
     f5c:	80 81       	ld	r24, Z
     f5e:	81 60       	ori	r24, 0x01	; 1
     f60:	80 83       	st	Z, r24
		break;
     f62:	54 c0       	rjmp	.+168    	; 0x100c <SPIenable+0x288>
		case 16:
			m.spi.reg->spsr &= ~(1 << SPI2X);
     f64:	e6 e2       	ldi	r30, 0x26	; 38
     f66:	f2 e0       	ldi	r31, 0x02	; 2
     f68:	a4 a1       	ldd	r26, Z+36	; 0x24
     f6a:	b5 a1       	ldd	r27, Z+37	; 0x25
     f6c:	11 96       	adiw	r26, 0x01	; 1
     f6e:	8c 91       	ld	r24, X
     f70:	11 97       	sbiw	r26, 0x01	; 1
     f72:	8e 7f       	andi	r24, 0xFE	; 254
     f74:	11 96       	adiw	r26, 0x01	; 1
     f76:	8c 93       	st	X, r24
			m.spi.reg->spcr |= (1 << SPR0);
     f78:	04 a0       	ldd	r0, Z+36	; 0x24
     f7a:	f5 a1       	ldd	r31, Z+37	; 0x25
     f7c:	e0 2d       	mov	r30, r0
     f7e:	80 81       	ld	r24, Z
     f80:	81 60       	ori	r24, 0x01	; 1
     f82:	80 83       	st	Z, r24
		break;
     f84:	43 c0       	rjmp	.+134    	; 0x100c <SPIenable+0x288>
		case 32:
			m.spi.reg->spsr |= (1 << SPI2X);
     f86:	e6 e2       	ldi	r30, 0x26	; 38
     f88:	f2 e0       	ldi	r31, 0x02	; 2
     f8a:	a4 a1       	ldd	r26, Z+36	; 0x24
     f8c:	b5 a1       	ldd	r27, Z+37	; 0x25
     f8e:	11 96       	adiw	r26, 0x01	; 1
     f90:	8c 91       	ld	r24, X
     f92:	11 97       	sbiw	r26, 0x01	; 1
     f94:	81 60       	ori	r24, 0x01	; 1
     f96:	11 96       	adiw	r26, 0x01	; 1
     f98:	8c 93       	st	X, r24
			m.spi.reg->spcr |= (1 << SPR1);
     f9a:	04 a0       	ldd	r0, Z+36	; 0x24
     f9c:	f5 a1       	ldd	r31, Z+37	; 0x25
     f9e:	e0 2d       	mov	r30, r0
     fa0:	80 81       	ld	r24, Z
     fa2:	82 60       	ori	r24, 0x02	; 2
     fa4:	80 83       	st	Z, r24
		break;
     fa6:	32 c0       	rjmp	.+100    	; 0x100c <SPIenable+0x288>
		case 64:
			m.spi.reg->spsr &= ~(1 << SPI2X);
     fa8:	e6 e2       	ldi	r30, 0x26	; 38
     faa:	f2 e0       	ldi	r31, 0x02	; 2
     fac:	a4 a1       	ldd	r26, Z+36	; 0x24
     fae:	b5 a1       	ldd	r27, Z+37	; 0x25
     fb0:	11 96       	adiw	r26, 0x01	; 1
     fb2:	8c 91       	ld	r24, X
     fb4:	11 97       	sbiw	r26, 0x01	; 1
     fb6:	8e 7f       	andi	r24, 0xFE	; 254
     fb8:	11 96       	adiw	r26, 0x01	; 1
     fba:	8c 93       	st	X, r24
			m.spi.reg->spcr |= (1 << SPR1);
     fbc:	04 a0       	ldd	r0, Z+36	; 0x24
     fbe:	f5 a1       	ldd	r31, Z+37	; 0x25
     fc0:	e0 2d       	mov	r30, r0
     fc2:	80 81       	ld	r24, Z
     fc4:	82 60       	ori	r24, 0x02	; 2
     fc6:	80 83       	st	Z, r24
		break;
     fc8:	21 c0       	rjmp	.+66     	; 0x100c <SPIenable+0x288>
		case 128:
			m.spi.reg->spsr &= (1 << SPI2X);
     fca:	e6 e2       	ldi	r30, 0x26	; 38
     fcc:	f2 e0       	ldi	r31, 0x02	; 2
     fce:	a4 a1       	ldd	r26, Z+36	; 0x24
     fd0:	b5 a1       	ldd	r27, Z+37	; 0x25
     fd2:	11 96       	adiw	r26, 0x01	; 1
     fd4:	8c 91       	ld	r24, X
     fd6:	11 97       	sbiw	r26, 0x01	; 1
     fd8:	81 70       	andi	r24, 0x01	; 1
     fda:	11 96       	adiw	r26, 0x01	; 1
     fdc:	8c 93       	st	X, r24
			m.spi.reg->spcr |= (1 << SPR1) | (1 << SPR0);
     fde:	04 a0       	ldd	r0, Z+36	; 0x24
     fe0:	f5 a1       	ldd	r31, Z+37	; 0x25
     fe2:	e0 2d       	mov	r30, r0
     fe4:	80 81       	ld	r24, Z
     fe6:	83 60       	ori	r24, 0x03	; 3
     fe8:	80 83       	st	Z, r24
		break;
     fea:	10 c0       	rjmp	.+32     	; 0x100c <SPIenable+0x288>
		default:
			m.spi.reg->spsr |= (1 << SPI2X);
     fec:	e6 e2       	ldi	r30, 0x26	; 38
     fee:	f2 e0       	ldi	r31, 0x02	; 2
     ff0:	a4 a1       	ldd	r26, Z+36	; 0x24
     ff2:	b5 a1       	ldd	r27, Z+37	; 0x25
     ff4:	11 96       	adiw	r26, 0x01	; 1
     ff6:	8c 91       	ld	r24, X
     ff8:	11 97       	sbiw	r26, 0x01	; 1
     ffa:	81 60       	ori	r24, 0x01	; 1
     ffc:	11 96       	adiw	r26, 0x01	; 1
     ffe:	8c 93       	st	X, r24
			m.spi.reg->spcr |= (1 << SPR0);
    1000:	04 a0       	ldd	r0, Z+36	; 0x24
    1002:	f5 a1       	ldd	r31, Z+37	; 0x25
    1004:	e0 2d       	mov	r30, r0
    1006:	80 81       	ld	r24, Z
    1008:	81 60       	ori	r24, 0x01	; 1
    100a:	80 83       	st	Z, r24
		break;
	}
	m.spi.reg->spcr |= (1 << SPE);
    100c:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <m+0x24>
    1010:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <m+0x25>
    1014:	80 81       	ld	r24, Z
    1016:	80 64       	ori	r24, 0x40	; 64
    1018:	80 83       	st	Z, r24
	return spi;
    101a:	25 e6       	ldi	r18, 0x65	; 101
    101c:	36 e0       	ldi	r19, 0x06	; 6
    101e:	3a 83       	std	Y+2, r19	; 0x02
    1020:	29 83       	std	Y+1, r18	; 0x01
    1022:	43 e9       	ldi	r20, 0x93	; 147
    1024:	56 e0       	ldi	r21, 0x06	; 6
    1026:	5c 83       	std	Y+4, r21	; 0x04
    1028:	4b 83       	std	Y+3, r20	; 0x03
    102a:	64 eb       	ldi	r22, 0xB4	; 180
    102c:	76 e0       	ldi	r23, 0x06	; 6
    102e:	7e 83       	std	Y+6, r23	; 0x06
    1030:	6d 83       	std	Y+5, r22	; 0x05
    1032:	3a 81       	ldd	r19, Y+2	; 0x02
    1034:	5c 81       	ldd	r21, Y+4	; 0x04
    1036:	7e 81       	ldd	r23, Y+6	; 0x06
}
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	ca 5a       	subi	r28, 0xAA	; 170
    103e:	df 4f       	sbci	r29, 0xFF	; 255
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	cd bf       	out	0x3d, r28	; 61
    104a:	df 91       	pop	r29
    104c:	cf 91       	pop	r28
    104e:	1f 91       	pop	r17
    1050:	0f 91       	pop	r16
    1052:	ff 90       	pop	r15
    1054:	ef 90       	pop	r14
    1056:	08 95       	ret

00001058 <TIMER_COUNTER0_start>:
// Frequency oscillator devision factor or prescaler.
// prescaler: clk T0S /(No prescaling); clk T0S /8 (From prescaler); clk T0S /32 (From prescaler);
// clk T0S /64 (From prescaler); clk T0S /128 (From prescaler); clk T 0 S /256 (From prescaler);
// clk T 0 S /1024 (From prescaler); default - clk T 0 S /1024 (From prescaler).
{
	if(!timer0_state){ // one shot
    1058:	20 91 79 02 	lds	r18, 0x0279	; 0x800279 <timer0_state>
    105c:	21 11       	cpse	r18, r1
    105e:	63 c0       	rjmp	.+198    	; 0x1126 <__stack+0x27>
		m.tc0.reg->tccr0 &= ~(7 << CS00); // No clock source. (Timer/Counter stopped)
    1060:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <m+0x34>
    1064:	f0 91 5b 02 	lds	r31, 0x025B	; 0x80025b <m+0x35>
    1068:	23 89       	ldd	r18, Z+19	; 0x13
    106a:	28 7f       	andi	r18, 0xF8	; 248
    106c:	23 8b       	std	Z+19, r18	; 0x13
		switch(prescaler){
    106e:	80 34       	cpi	r24, 0x40	; 64
    1070:	91 05       	cpc	r25, r1
    1072:	79 f1       	breq	.+94     	; 0x10d2 <TIMER_COUNTER0_start+0x7a>
    1074:	50 f4       	brcc	.+20     	; 0x108a <TIMER_COUNTER0_start+0x32>
    1076:	88 30       	cpi	r24, 0x08	; 8
    1078:	91 05       	cpc	r25, r1
    107a:	d9 f0       	breq	.+54     	; 0x10b2 <TIMER_COUNTER0_start+0x5a>
    107c:	80 32       	cpi	r24, 0x20	; 32
    107e:	91 05       	cpc	r25, r1
    1080:	01 f1       	breq	.+64     	; 0x10c2 <TIMER_COUNTER0_start+0x6a>
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	09 f0       	breq	.+2      	; 0x1088 <TIMER_COUNTER0_start+0x30>
    1086:	45 c0       	rjmp	.+138    	; 0x1112 <__stack+0x13>
    1088:	0c c0       	rjmp	.+24     	; 0x10a2 <TIMER_COUNTER0_start+0x4a>
    108a:	81 15       	cp	r24, r1
    108c:	21 e0       	ldi	r18, 0x01	; 1
    108e:	92 07       	cpc	r25, r18
    1090:	81 f1       	breq	.+96     	; 0x10f2 <TIMER_COUNTER0_start+0x9a>
    1092:	81 15       	cp	r24, r1
    1094:	24 e0       	ldi	r18, 0x04	; 4
    1096:	92 07       	cpc	r25, r18
    1098:	a1 f1       	breq	.+104    	; 0x1102 <__stack+0x3>
    109a:	80 38       	cpi	r24, 0x80	; 128
    109c:	91 05       	cpc	r25, r1
    109e:	c9 f5       	brne	.+114    	; 0x1112 <__stack+0x13>
    10a0:	20 c0       	rjmp	.+64     	; 0x10e2 <TIMER_COUNTER0_start+0x8a>
			//case 0: // No clock source. (Timer/Counter stopped)
			//break;
			case 1: // clk T0S /(No prescaler)
				m.tc0.reg->tccr0 |= (1 << CS00);
    10a2:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <m+0x34>
    10a6:	f0 91 5b 02 	lds	r31, 0x025B	; 0x80025b <m+0x35>
    10aa:	83 89       	ldd	r24, Z+19	; 0x13
    10ac:	81 60       	ori	r24, 0x01	; 1
    10ae:	83 8b       	std	Z+19, r24	; 0x13
			break;
    10b0:	37 c0       	rjmp	.+110    	; 0x1120 <__stack+0x21>
			case 8: // clk T0S /8 (From prescaler)
				m.tc0.reg->tccr0 |= (1 << CS01);
    10b2:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <m+0x34>
    10b6:	f0 91 5b 02 	lds	r31, 0x025B	; 0x80025b <m+0x35>
    10ba:	83 89       	ldd	r24, Z+19	; 0x13
    10bc:	82 60       	ori	r24, 0x02	; 2
    10be:	83 8b       	std	Z+19, r24	; 0x13
			break;
    10c0:	2f c0       	rjmp	.+94     	; 0x1120 <__stack+0x21>
			case 32: // clk T0S /32 (From prescaler)
				m.tc0.reg->tccr0 |=(3 << CS00);
    10c2:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <m+0x34>
    10c6:	f0 91 5b 02 	lds	r31, 0x025B	; 0x80025b <m+0x35>
    10ca:	83 89       	ldd	r24, Z+19	; 0x13
    10cc:	83 60       	ori	r24, 0x03	; 3
    10ce:	83 8b       	std	Z+19, r24	; 0x13
			break;
    10d0:	27 c0       	rjmp	.+78     	; 0x1120 <__stack+0x21>
			case 64: // clk T0S /64 (From prescaler)
				m.tc0.reg->tccr0 |= (4 << CS00);
    10d2:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <m+0x34>
    10d6:	f0 91 5b 02 	lds	r31, 0x025B	; 0x80025b <m+0x35>
    10da:	83 89       	ldd	r24, Z+19	; 0x13
    10dc:	84 60       	ori	r24, 0x04	; 4
    10de:	83 8b       	std	Z+19, r24	; 0x13
			break;
    10e0:	1f c0       	rjmp	.+62     	; 0x1120 <__stack+0x21>
			case 128: // clk T0S /128 (From prescaler)
				m.tc0.reg->tccr0 |= (5 << CS00);
    10e2:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <m+0x34>
    10e6:	f0 91 5b 02 	lds	r31, 0x025B	; 0x80025b <m+0x35>
    10ea:	83 89       	ldd	r24, Z+19	; 0x13
    10ec:	85 60       	ori	r24, 0x05	; 5
    10ee:	83 8b       	std	Z+19, r24	; 0x13
			break;
    10f0:	17 c0       	rjmp	.+46     	; 0x1120 <__stack+0x21>
			case 256: // clk T 0 S /256 (From prescaler)
				m.tc0.reg->tccr0 |= (6 << CS00);
    10f2:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <m+0x34>
    10f6:	f0 91 5b 02 	lds	r31, 0x025B	; 0x80025b <m+0x35>
    10fa:	83 89       	ldd	r24, Z+19	; 0x13
    10fc:	86 60       	ori	r24, 0x06	; 6
    10fe:	83 8b       	std	Z+19, r24	; 0x13
			break;
    1100:	0f c0       	rjmp	.+30     	; 0x1120 <__stack+0x21>
			case 1024: // clk T 0 S /1024 (From prescaler)
				m.tc0.reg->tccr0 |= (7 << CS00);
    1102:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <m+0x34>
    1106:	f0 91 5b 02 	lds	r31, 0x025B	; 0x80025b <m+0x35>
    110a:	83 89       	ldd	r24, Z+19	; 0x13
    110c:	87 60       	ori	r24, 0x07	; 7
    110e:	83 8b       	std	Z+19, r24	; 0x13
			break;
    1110:	07 c0       	rjmp	.+14     	; 0x1120 <__stack+0x21>
			default:
				m.tc0.reg->tccr0 |= (7 << CS00);
    1112:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <m+0x34>
    1116:	f0 91 5b 02 	lds	r31, 0x025B	; 0x80025b <m+0x35>
    111a:	83 89       	ldd	r24, Z+19	; 0x13
    111c:	87 60       	ori	r24, 0x07	; 7
    111e:	83 8b       	std	Z+19, r24	; 0x13
			break;
		}
		timer0_state = 85;
    1120:	85 e5       	ldi	r24, 0x55	; 85
    1122:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <timer0_state>
	}
	return timer0_state;
}
    1126:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <timer0_state>
    112a:	08 95       	ret

0000112c <TIMER_COUNTER0_compoutmode>:
// compoutmode: Normal port operation, OC0 disconnected; Toggle OC0 on compare match;
// Clear OC0 on compare match when up-counting. Set OC0 on compare match when downcounting. Clear OC0 on compare match;
// Set OC0 on compare match when up-counting. Clear OC0 on compare match when downcounting. Set OC0 on compare match ;
// default-Normal port operation, OC0 disconnected.
{
	m.tc0.reg->tccr0 &= ~((1 << COM00) | (1 << COM01));
    112c:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <m+0x34>
    1130:	f0 91 5b 02 	lds	r31, 0x025B	; 0x80025b <m+0x35>
    1134:	93 89       	ldd	r25, Z+19	; 0x13
    1136:	9f 7c       	andi	r25, 0xCF	; 207
    1138:	93 8b       	std	Z+19, r25	; 0x13
	switch(compoutmode){ // OC0  -->  PB4
    113a:	82 30       	cpi	r24, 0x02	; 2
    113c:	91 f0       	breq	.+36     	; 0x1162 <TIMER_COUNTER0_compoutmode+0x36>
    113e:	83 30       	cpi	r24, 0x03	; 3
    1140:	f1 f0       	breq	.+60     	; 0x117e <TIMER_COUNTER0_compoutmode+0x52>
    1142:	81 30       	cpi	r24, 0x01	; 1
    1144:	49 f5       	brne	.+82     	; 0x1198 <TIMER_COUNTER0_compoutmode+0x6c>
		case 0: // Normal port operation, OC0 disconnected.
		break;
		case 1: // Reserved
			// Toggle OC0 on compare match
			m.portb.reg->ddr = 0x10;
    1146:	e6 e2       	ldi	r30, 0x26	; 38
    1148:	f2 e0       	ldi	r31, 0x02	; 2
    114a:	a4 89       	ldd	r26, Z+20	; 0x14
    114c:	b5 89       	ldd	r27, Z+21	; 0x15
    114e:	80 e1       	ldi	r24, 0x10	; 16
    1150:	11 96       	adiw	r26, 0x01	; 1
    1152:	8c 93       	st	X, r24
			m.tc0.reg->tccr0 |= (1 << COM00);
    1154:	04 a8       	ldd	r0, Z+52	; 0x34
    1156:	f5 a9       	ldd	r31, Z+53	; 0x35
    1158:	e0 2d       	mov	r30, r0
    115a:	83 89       	ldd	r24, Z+19	; 0x13
    115c:	80 61       	ori	r24, 0x10	; 16
    115e:	83 8b       	std	Z+19, r24	; 0x13
		break;
    1160:	08 95       	ret
		case 2: // Clear OC0 on compare match when up-counting. Set OC0 on compare
			// match when down counting.
			m.portb.reg->ddr = 0x10;
    1162:	e6 e2       	ldi	r30, 0x26	; 38
    1164:	f2 e0       	ldi	r31, 0x02	; 2
    1166:	a4 89       	ldd	r26, Z+20	; 0x14
    1168:	b5 89       	ldd	r27, Z+21	; 0x15
    116a:	80 e1       	ldi	r24, 0x10	; 16
    116c:	11 96       	adiw	r26, 0x01	; 1
    116e:	8c 93       	st	X, r24
			m.tc0.reg->tccr0 |= (1 << COM01);
    1170:	04 a8       	ldd	r0, Z+52	; 0x34
    1172:	f5 a9       	ldd	r31, Z+53	; 0x35
    1174:	e0 2d       	mov	r30, r0
    1176:	83 89       	ldd	r24, Z+19	; 0x13
    1178:	80 62       	ori	r24, 0x20	; 32
    117a:	83 8b       	std	Z+19, r24	; 0x13
		break;
    117c:	08 95       	ret
		case 3: // Set OC0 on compare match when up-counting. Clear OC0 on compare
			// match when down counting.
			m.portb.reg->ddr = 0x10;
    117e:	e6 e2       	ldi	r30, 0x26	; 38
    1180:	f2 e0       	ldi	r31, 0x02	; 2
    1182:	a4 89       	ldd	r26, Z+20	; 0x14
    1184:	b5 89       	ldd	r27, Z+21	; 0x15
    1186:	80 e1       	ldi	r24, 0x10	; 16
    1188:	11 96       	adiw	r26, 0x01	; 1
    118a:	8c 93       	st	X, r24
			m.tc0.reg->tccr0 |= (1 << COM00) | (1 << COM01);
    118c:	04 a8       	ldd	r0, Z+52	; 0x34
    118e:	f5 a9       	ldd	r31, Z+53	; 0x35
    1190:	e0 2d       	mov	r30, r0
    1192:	83 89       	ldd	r24, Z+19	; 0x13
    1194:	80 63       	ori	r24, 0x30	; 48
    1196:	83 8b       	std	Z+19, r24	; 0x13
    1198:	08 95       	ret

0000119a <TIMER_COUNTER0_compare>:
		break;
	}
}
void TIMER_COUNTER0_compare(unsigned char compare)
{
	m.tc0.reg->ocr0 = compare;
    119a:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <m+0x34>
    119e:	f0 91 5b 02 	lds	r31, 0x025B	; 0x80025b <m+0x35>
    11a2:	81 8b       	std	Z+17, r24	; 0x11
    11a4:	08 95       	ret

000011a6 <TIMER_COUNTER0_stop>:
}
uint8_t TIMER_COUNTER0_stop(void)
// stops timer by setting prescaler to zero
{
	m.tc0.reg->tccr0 &= ~(7 << CS00); // No clock source. (Timer/Counter stopped)
    11a6:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <m+0x34>
    11aa:	f0 91 5b 02 	lds	r31, 0x025B	; 0x80025b <m+0x35>
    11ae:	83 89       	ldd	r24, Z+19	; 0x13
    11b0:	88 7f       	andi	r24, 0xF8	; 248
    11b2:	83 8b       	std	Z+19, r24	; 0x13
	timer0_state = 0;
    11b4:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <timer0_state>
	return timer0_state;
}
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	08 95       	ret

000011bc <TIMER_COUNTER1_start>:
// Frequency oscillator devision factor or prescaler.
// prescaler: clk T0S /(No prescaling); clk T0S /8 (From prescaler); clk T0S /64 (From prescaler);
// clk T0S /256 (From prescaler); clk T0S /1024 (From prescaler); External clock source on Tn pin. Clock on falling edge;
// External clock source on Tn pin. Clock on rising edge; default - clk T 0 S /1024 (From prescaler).
{
	if(!timer1_state){ // one shot
    11bc:	20 91 76 02 	lds	r18, 0x0276	; 0x800276 <timer1_state>
    11c0:	21 11       	cpse	r18, r1
    11c2:	61 c0       	rjmp	.+194    	; 0x1286 <TIMER_COUNTER1_start+0xca>
		m.tc1.reg->tccr1b &= ~(7 << CS10); // No clock source. (Timer/Counter stopped)
    11c4:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <m+0x28>
    11c8:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <m+0x29>
    11cc:	26 85       	ldd	r18, Z+14	; 0x0e
    11ce:	28 7f       	andi	r18, 0xF8	; 248
    11d0:	26 87       	std	Z+14, r18	; 0x0e
		switch(prescaler){
    11d2:	88 30       	cpi	r24, 0x08	; 8
    11d4:	91 05       	cpc	r25, r1
    11d6:	e9 f0       	breq	.+58     	; 0x1212 <TIMER_COUNTER1_start+0x56>
    11d8:	40 f4       	brcc	.+16     	; 0x11ea <TIMER_COUNTER1_start+0x2e>
    11da:	86 30       	cpi	r24, 0x06	; 6
    11dc:	91 05       	cpc	r25, r1
    11de:	c9 f1       	breq	.+114    	; 0x1252 <TIMER_COUNTER1_start+0x96>
    11e0:	08 f0       	brcs	.+2      	; 0x11e4 <TIMER_COUNTER1_start+0x28>
    11e2:	3f c0       	rjmp	.+126    	; 0x1262 <TIMER_COUNTER1_start+0xa6>
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	69 f0       	breq	.+26     	; 0x1202 <TIMER_COUNTER1_start+0x46>
    11e8:	44 c0       	rjmp	.+136    	; 0x1272 <TIMER_COUNTER1_start+0xb6>
    11ea:	81 15       	cp	r24, r1
    11ec:	21 e0       	ldi	r18, 0x01	; 1
    11ee:	92 07       	cpc	r25, r18
    11f0:	01 f1       	breq	.+64     	; 0x1232 <TIMER_COUNTER1_start+0x76>
    11f2:	81 15       	cp	r24, r1
    11f4:	24 e0       	ldi	r18, 0x04	; 4
    11f6:	92 07       	cpc	r25, r18
    11f8:	21 f1       	breq	.+72     	; 0x1242 <TIMER_COUNTER1_start+0x86>
    11fa:	80 34       	cpi	r24, 0x40	; 64
    11fc:	91 05       	cpc	r25, r1
    11fe:	c9 f5       	brne	.+114    	; 0x1272 <TIMER_COUNTER1_start+0xb6>
    1200:	10 c0       	rjmp	.+32     	; 0x1222 <TIMER_COUNTER1_start+0x66>
			//case 0: // No clock source. (Timer/Counter stopped)
			//break;
			case 1: // clkI/O/1 (No prescaler
				m.tc1.reg->tccr1b |= (1 << CS10);
    1202:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <m+0x28>
    1206:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <m+0x29>
    120a:	86 85       	ldd	r24, Z+14	; 0x0e
    120c:	81 60       	ori	r24, 0x01	; 1
    120e:	86 87       	std	Z+14, r24	; 0x0e
			break;
    1210:	37 c0       	rjmp	.+110    	; 0x1280 <TIMER_COUNTER1_start+0xc4>
			case 8: // clkI/O/8 (From prescaler)
				m.tc1.reg->tccr1b |= (1 << CS11);
    1212:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <m+0x28>
    1216:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <m+0x29>
    121a:	86 85       	ldd	r24, Z+14	; 0x0e
    121c:	82 60       	ori	r24, 0x02	; 2
    121e:	86 87       	std	Z+14, r24	; 0x0e
			break;
    1220:	2f c0       	rjmp	.+94     	; 0x1280 <TIMER_COUNTER1_start+0xc4>
			case 64: // clkI/O/64 (From prescaler)
				m.tc1.reg->tccr1b |= (3 << CS10);
    1222:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <m+0x28>
    1226:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <m+0x29>
    122a:	86 85       	ldd	r24, Z+14	; 0x0e
    122c:	83 60       	ori	r24, 0x03	; 3
    122e:	86 87       	std	Z+14, r24	; 0x0e
			break;
    1230:	27 c0       	rjmp	.+78     	; 0x1280 <TIMER_COUNTER1_start+0xc4>
			case 256: // clkI/O/256 (From prescaler)
				m.tc1.reg->tccr1b |= (1 << CS12);
    1232:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <m+0x28>
    1236:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <m+0x29>
    123a:	86 85       	ldd	r24, Z+14	; 0x0e
    123c:	84 60       	ori	r24, 0x04	; 4
    123e:	86 87       	std	Z+14, r24	; 0x0e
			break;
    1240:	1f c0       	rjmp	.+62     	; 0x1280 <TIMER_COUNTER1_start+0xc4>
			case 1024: // clkI/O/1024 (From prescaler)
				m.tc1.reg->tccr1b |= (5 << CS10);
    1242:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <m+0x28>
    1246:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <m+0x29>
    124a:	86 85       	ldd	r24, Z+14	; 0x0e
    124c:	85 60       	ori	r24, 0x05	; 5
    124e:	86 87       	std	Z+14, r24	; 0x0e
			break;
    1250:	17 c0       	rjmp	.+46     	; 0x1280 <TIMER_COUNTER1_start+0xc4>
			case 6: // External clock source on Tn pin. Clock on falling edge [PD6]
				m.tc1.reg->tccr1b |= (6 << CS10);
    1252:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <m+0x28>
    1256:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <m+0x29>
    125a:	86 85       	ldd	r24, Z+14	; 0x0e
    125c:	86 60       	ori	r24, 0x06	; 6
    125e:	86 87       	std	Z+14, r24	; 0x0e
			break;
    1260:	0f c0       	rjmp	.+30     	; 0x1280 <TIMER_COUNTER1_start+0xc4>
			case 7: // External clock source on Tn pin. Clock on rising edge [PD6]
				m.tc1.reg->tccr1b |= (7 << CS10);
    1262:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <m+0x28>
    1266:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <m+0x29>
    126a:	86 85       	ldd	r24, Z+14	; 0x0e
    126c:	87 60       	ori	r24, 0x07	; 7
    126e:	86 87       	std	Z+14, r24	; 0x0e
			break;
    1270:	07 c0       	rjmp	.+14     	; 0x1280 <TIMER_COUNTER1_start+0xc4>
			default: // clkI/O/1024 (From prescaler)
				m.tc1.reg->tccr1b |= (5 << CS10);
    1272:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <m+0x28>
    1276:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <m+0x29>
    127a:	86 85       	ldd	r24, Z+14	; 0x0e
    127c:	85 60       	ori	r24, 0x05	; 5
    127e:	86 87       	std	Z+14, r24	; 0x0e
			break;
		}
		timer1_state = 85;
    1280:	85 e5       	ldi	r24, 0x55	; 85
    1282:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <timer1_state>
	}
	return timer1_state;
}
    1286:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <timer1_state>
    128a:	08 95       	ret

0000128c <TIMER_COUNTER1_compoutmodeA>:
void TIMER_COUNTER1_compoutmodeA(unsigned char compoutmode)
{
	m.tc1.reg->tccr1a &= ~(3 << COM1A0);
    128c:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <m+0x28>
    1290:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <m+0x29>
    1294:	97 85       	ldd	r25, Z+15	; 0x0f
    1296:	9f 73       	andi	r25, 0x3F	; 63
    1298:	97 87       	std	Z+15, r25	; 0x0f
	switch(compoutmode){ // OC1A  -->  PB5
    129a:	82 30       	cpi	r24, 0x02	; 2
    129c:	a9 f0       	breq	.+42     	; 0x12c8 <TIMER_COUNTER1_compoutmodeA+0x3c>
    129e:	83 30       	cpi	r24, 0x03	; 3
    12a0:	21 f1       	breq	.+72     	; 0x12ea <TIMER_COUNTER1_compoutmodeA+0x5e>
    12a2:	81 30       	cpi	r24, 0x01	; 1
    12a4:	91 f5       	brne	.+100    	; 0x130a <TIMER_COUNTER1_compoutmodeA+0x7e>
		case 0: // Normal port operation, OC1A disconnected.
		break;
		case 1: // Reserved
			// Toggle OC1A on compare match
			m.portb.reg->ddr |= 0x20;
    12a6:	e6 e2       	ldi	r30, 0x26	; 38
    12a8:	f2 e0       	ldi	r31, 0x02	; 2
    12aa:	a4 89       	ldd	r26, Z+20	; 0x14
    12ac:	b5 89       	ldd	r27, Z+21	; 0x15
    12ae:	11 96       	adiw	r26, 0x01	; 1
    12b0:	8c 91       	ld	r24, X
    12b2:	11 97       	sbiw	r26, 0x01	; 1
    12b4:	80 62       	ori	r24, 0x20	; 32
    12b6:	11 96       	adiw	r26, 0x01	; 1
    12b8:	8c 93       	st	X, r24
			m.tc1.reg->tccr1a |= (1 << COM1A0);
    12ba:	00 a4       	ldd	r0, Z+40	; 0x28
    12bc:	f1 a5       	ldd	r31, Z+41	; 0x29
    12be:	e0 2d       	mov	r30, r0
    12c0:	87 85       	ldd	r24, Z+15	; 0x0f
    12c2:	80 64       	ori	r24, 0x40	; 64
    12c4:	87 87       	std	Z+15, r24	; 0x0f
		break;
    12c6:	08 95       	ret
		case 2: // Clear OC1A on compare match when up-counting. Set OC1A on compare
			// match when down counting.
			m.portb.reg->ddr |= 0x20;
    12c8:	e6 e2       	ldi	r30, 0x26	; 38
    12ca:	f2 e0       	ldi	r31, 0x02	; 2
    12cc:	a4 89       	ldd	r26, Z+20	; 0x14
    12ce:	b5 89       	ldd	r27, Z+21	; 0x15
    12d0:	11 96       	adiw	r26, 0x01	; 1
    12d2:	8c 91       	ld	r24, X
    12d4:	11 97       	sbiw	r26, 0x01	; 1
    12d6:	80 62       	ori	r24, 0x20	; 32
    12d8:	11 96       	adiw	r26, 0x01	; 1
    12da:	8c 93       	st	X, r24
			m.tc1.reg->tccr1a |= (1 << COM1A1);
    12dc:	00 a4       	ldd	r0, Z+40	; 0x28
    12de:	f1 a5       	ldd	r31, Z+41	; 0x29
    12e0:	e0 2d       	mov	r30, r0
    12e2:	87 85       	ldd	r24, Z+15	; 0x0f
    12e4:	80 68       	ori	r24, 0x80	; 128
    12e6:	87 87       	std	Z+15, r24	; 0x0f
		break;
    12e8:	08 95       	ret
		case 3: // Set OC1A on compare match when up-counting. Clear OC1A on compare
			// match when down counting.
			m.portb.reg->ddr |= 0x20;
    12ea:	e6 e2       	ldi	r30, 0x26	; 38
    12ec:	f2 e0       	ldi	r31, 0x02	; 2
    12ee:	a4 89       	ldd	r26, Z+20	; 0x14
    12f0:	b5 89       	ldd	r27, Z+21	; 0x15
    12f2:	11 96       	adiw	r26, 0x01	; 1
    12f4:	8c 91       	ld	r24, X
    12f6:	11 97       	sbiw	r26, 0x01	; 1
    12f8:	80 62       	ori	r24, 0x20	; 32
    12fa:	11 96       	adiw	r26, 0x01	; 1
    12fc:	8c 93       	st	X, r24
			m.tc1.reg->tccr1a |= (1 << COM1A0) | (1 << COM1A1);
    12fe:	00 a4       	ldd	r0, Z+40	; 0x28
    1300:	f1 a5       	ldd	r31, Z+41	; 0x29
    1302:	e0 2d       	mov	r30, r0
    1304:	87 85       	ldd	r24, Z+15	; 0x0f
    1306:	80 6c       	ori	r24, 0xC0	; 192
    1308:	87 87       	std	Z+15, r24	; 0x0f
    130a:	08 95       	ret

0000130c <TIMER_COUNTER1_compoutmodeB>:
		break;
	}
}
void TIMER_COUNTER1_compoutmodeB(unsigned char compoutmode)
{
	m.tc1.reg->tccr1a &= ~(3 << COM1B0);
    130c:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <m+0x28>
    1310:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <m+0x29>
    1314:	97 85       	ldd	r25, Z+15	; 0x0f
    1316:	9f 7c       	andi	r25, 0xCF	; 207
    1318:	97 87       	std	Z+15, r25	; 0x0f
	switch(compoutmode){ // OC1B  -->  PB6
    131a:	82 30       	cpi	r24, 0x02	; 2
    131c:	a9 f0       	breq	.+42     	; 0x1348 <TIMER_COUNTER1_compoutmodeB+0x3c>
    131e:	83 30       	cpi	r24, 0x03	; 3
    1320:	21 f1       	breq	.+72     	; 0x136a <TIMER_COUNTER1_compoutmodeB+0x5e>
    1322:	81 30       	cpi	r24, 0x01	; 1
    1324:	91 f5       	brne	.+100    	; 0x138a <TIMER_COUNTER1_compoutmodeB+0x7e>
		case 0: // Normal port operation, OC1B disconnected.
		break;
		case 1: // Reserved
			// Toggle OC1A or OC1B on compare match
			m.portb.reg->ddr |= 0x40;
    1326:	e6 e2       	ldi	r30, 0x26	; 38
    1328:	f2 e0       	ldi	r31, 0x02	; 2
    132a:	a4 89       	ldd	r26, Z+20	; 0x14
    132c:	b5 89       	ldd	r27, Z+21	; 0x15
    132e:	11 96       	adiw	r26, 0x01	; 1
    1330:	8c 91       	ld	r24, X
    1332:	11 97       	sbiw	r26, 0x01	; 1
    1334:	80 64       	ori	r24, 0x40	; 64
    1336:	11 96       	adiw	r26, 0x01	; 1
    1338:	8c 93       	st	X, r24
			m.tc1.reg->tccr1a |= (1 << COM1B0);
    133a:	00 a4       	ldd	r0, Z+40	; 0x28
    133c:	f1 a5       	ldd	r31, Z+41	; 0x29
    133e:	e0 2d       	mov	r30, r0
    1340:	87 85       	ldd	r24, Z+15	; 0x0f
    1342:	80 61       	ori	r24, 0x10	; 16
    1344:	87 87       	std	Z+15, r24	; 0x0f
		break;
    1346:	08 95       	ret
		case 2: // Clear OC1B on compare match when up-counting. Set OC1B on compare
			// match when down counting.
			m.portb.reg->ddr |= 0x40;
    1348:	e6 e2       	ldi	r30, 0x26	; 38
    134a:	f2 e0       	ldi	r31, 0x02	; 2
    134c:	a4 89       	ldd	r26, Z+20	; 0x14
    134e:	b5 89       	ldd	r27, Z+21	; 0x15
    1350:	11 96       	adiw	r26, 0x01	; 1
    1352:	8c 91       	ld	r24, X
    1354:	11 97       	sbiw	r26, 0x01	; 1
    1356:	80 64       	ori	r24, 0x40	; 64
    1358:	11 96       	adiw	r26, 0x01	; 1
    135a:	8c 93       	st	X, r24
			m.tc1.reg->tccr1a |= (1 << COM1B1);
    135c:	00 a4       	ldd	r0, Z+40	; 0x28
    135e:	f1 a5       	ldd	r31, Z+41	; 0x29
    1360:	e0 2d       	mov	r30, r0
    1362:	87 85       	ldd	r24, Z+15	; 0x0f
    1364:	80 62       	ori	r24, 0x20	; 32
    1366:	87 87       	std	Z+15, r24	; 0x0f
		break;
    1368:	08 95       	ret
		case 3: // Set OC1B on compare match when up-counting. Clear OC1B on compare
			// match when down counting.
			m.portb.reg->ddr |= 0x40;
    136a:	e6 e2       	ldi	r30, 0x26	; 38
    136c:	f2 e0       	ldi	r31, 0x02	; 2
    136e:	a4 89       	ldd	r26, Z+20	; 0x14
    1370:	b5 89       	ldd	r27, Z+21	; 0x15
    1372:	11 96       	adiw	r26, 0x01	; 1
    1374:	8c 91       	ld	r24, X
    1376:	11 97       	sbiw	r26, 0x01	; 1
    1378:	80 64       	ori	r24, 0x40	; 64
    137a:	11 96       	adiw	r26, 0x01	; 1
    137c:	8c 93       	st	X, r24
			m.tc1.reg->tccr1a |= (1 << COM1B0) | (1 << COM1B1);
    137e:	00 a4       	ldd	r0, Z+40	; 0x28
    1380:	f1 a5       	ldd	r31, Z+41	; 0x29
    1382:	e0 2d       	mov	r30, r0
    1384:	87 85       	ldd	r24, Z+15	; 0x0f
    1386:	80 63       	ori	r24, 0x30	; 48
    1388:	87 87       	std	Z+15, r24	; 0x0f
    138a:	08 95       	ret

0000138c <TIMER_COUNTER1_compoutmodeC>:
		break;
	}
}
void TIMER_COUNTER1_compoutmodeC(unsigned char compoutmode)
{
	m.tc1.reg->tccr1a &= ~(3 << COM1C0);
    138c:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <m+0x28>
    1390:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <m+0x29>
    1394:	97 85       	ldd	r25, Z+15	; 0x0f
    1396:	93 7f       	andi	r25, 0xF3	; 243
    1398:	97 87       	std	Z+15, r25	; 0x0f
	switch(compoutmode){ // OC1C  -->  PB7
    139a:	82 30       	cpi	r24, 0x02	; 2
    139c:	a9 f0       	breq	.+42     	; 0x13c8 <TIMER_COUNTER1_compoutmodeC+0x3c>
    139e:	83 30       	cpi	r24, 0x03	; 3
    13a0:	21 f1       	breq	.+72     	; 0x13ea <TIMER_COUNTER1_compoutmodeC+0x5e>
    13a2:	81 30       	cpi	r24, 0x01	; 1
    13a4:	91 f5       	brne	.+100    	; 0x140a <TIMER_COUNTER1_compoutmodeC+0x7e>
		case 0: // Normal port operation, OC1C disconnected.
		break;
		case 1: // Reserved
			// Toggle OC1A or OC1C on compare match
			m.portb.reg->ddr |= 0x80;
    13a6:	e6 e2       	ldi	r30, 0x26	; 38
    13a8:	f2 e0       	ldi	r31, 0x02	; 2
    13aa:	a4 89       	ldd	r26, Z+20	; 0x14
    13ac:	b5 89       	ldd	r27, Z+21	; 0x15
    13ae:	11 96       	adiw	r26, 0x01	; 1
    13b0:	8c 91       	ld	r24, X
    13b2:	11 97       	sbiw	r26, 0x01	; 1
    13b4:	80 68       	ori	r24, 0x80	; 128
    13b6:	11 96       	adiw	r26, 0x01	; 1
    13b8:	8c 93       	st	X, r24
			m.tc1.reg->tccr1a |= (1 << COM1C0);
    13ba:	00 a4       	ldd	r0, Z+40	; 0x28
    13bc:	f1 a5       	ldd	r31, Z+41	; 0x29
    13be:	e0 2d       	mov	r30, r0
    13c0:	87 85       	ldd	r24, Z+15	; 0x0f
    13c2:	84 60       	ori	r24, 0x04	; 4
    13c4:	87 87       	std	Z+15, r24	; 0x0f
		break;
    13c6:	08 95       	ret
		case 2: // Clear OC1C on compare match when up-counting. Set OC1C on compare
			// match when down counting.
			m.portb.reg->ddr |= 0x80;
    13c8:	e6 e2       	ldi	r30, 0x26	; 38
    13ca:	f2 e0       	ldi	r31, 0x02	; 2
    13cc:	a4 89       	ldd	r26, Z+20	; 0x14
    13ce:	b5 89       	ldd	r27, Z+21	; 0x15
    13d0:	11 96       	adiw	r26, 0x01	; 1
    13d2:	8c 91       	ld	r24, X
    13d4:	11 97       	sbiw	r26, 0x01	; 1
    13d6:	80 68       	ori	r24, 0x80	; 128
    13d8:	11 96       	adiw	r26, 0x01	; 1
    13da:	8c 93       	st	X, r24
			m.tc1.reg->tccr1a |= (1 << COM1C1);
    13dc:	00 a4       	ldd	r0, Z+40	; 0x28
    13de:	f1 a5       	ldd	r31, Z+41	; 0x29
    13e0:	e0 2d       	mov	r30, r0
    13e2:	87 85       	ldd	r24, Z+15	; 0x0f
    13e4:	88 60       	ori	r24, 0x08	; 8
    13e6:	87 87       	std	Z+15, r24	; 0x0f
		break;
    13e8:	08 95       	ret
		case 3: // Set OC1C on compare match when up-counting. Clear OC1C on compare
			// match when down counting.
			m.portb.reg->ddr |= 0x80;
    13ea:	e6 e2       	ldi	r30, 0x26	; 38
    13ec:	f2 e0       	ldi	r31, 0x02	; 2
    13ee:	a4 89       	ldd	r26, Z+20	; 0x14
    13f0:	b5 89       	ldd	r27, Z+21	; 0x15
    13f2:	11 96       	adiw	r26, 0x01	; 1
    13f4:	8c 91       	ld	r24, X
    13f6:	11 97       	sbiw	r26, 0x01	; 1
    13f8:	80 68       	ori	r24, 0x80	; 128
    13fa:	11 96       	adiw	r26, 0x01	; 1
    13fc:	8c 93       	st	X, r24
			m.tc1.reg->tccr1a |= (1 << COM1C0) | (1 << COM1C1);
    13fe:	00 a4       	ldd	r0, Z+40	; 0x28
    1400:	f1 a5       	ldd	r31, Z+41	; 0x29
    1402:	e0 2d       	mov	r30, r0
    1404:	87 85       	ldd	r24, Z+15	; 0x0f
    1406:	8c 60       	ori	r24, 0x0C	; 12
    1408:	87 87       	std	Z+15, r24	; 0x0f
    140a:	08 95       	ret

0000140c <TIMER_COUNTER1_stop>:
	m.tc1.reg->ocr1c = WriteLHByte(compare);
}
uint8_t TIMER_COUNTER1_stop(void)
// stops timer by setting prescaler to zero
{
	m.tc1.reg->tccr1b &= ~(7 << CS10); // No clock source. (Timer/Counter stopped)
    140c:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <m+0x28>
    1410:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <m+0x29>
    1414:	86 85       	ldd	r24, Z+14	; 0x0e
    1416:	88 7f       	andi	r24, 0xF8	; 248
    1418:	86 87       	std	Z+14, r24	; 0x0e
	timer1_state = 0;
    141a:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <timer1_state>
	return timer1_state;
}
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	08 95       	ret

00001422 <TIMER_COUNTER2_start>:
// Frequency oscillator devision factor or prescaler.
// prescaler: clk T0S /(No prescaling); clk T0S /8 (From prescaler); clk T0S /64 (From prescaler);
// clk T0S /256 (From prescaler); clk T0S /1024 (From prescaler); External clock source on Tn pin. Clock on falling edge;
// External clock source on Tn pin. Clock on rising edge; default - clk T 0 S /1024 (From prescaler).
{
	if(!timer2_state){ // one shot
    1422:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <timer2_state>
    1426:	21 11       	cpse	r18, r1
    1428:	61 c0       	rjmp	.+194    	; 0x14ec <TIMER_COUNTER2_start+0xca>
		m.tc2.reg->tccr2 &= ~(7 << CS20); // No clock source. (Timer/Counter stopped)
    142a:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <m+0x30>
    142e:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <m+0x31>
    1432:	22 81       	ldd	r18, Z+2	; 0x02
    1434:	28 7f       	andi	r18, 0xF8	; 248
    1436:	22 83       	std	Z+2, r18	; 0x02
		switch(prescaler){
    1438:	88 30       	cpi	r24, 0x08	; 8
    143a:	91 05       	cpc	r25, r1
    143c:	e9 f0       	breq	.+58     	; 0x1478 <TIMER_COUNTER2_start+0x56>
    143e:	40 f4       	brcc	.+16     	; 0x1450 <TIMER_COUNTER2_start+0x2e>
    1440:	86 30       	cpi	r24, 0x06	; 6
    1442:	91 05       	cpc	r25, r1
    1444:	c9 f1       	breq	.+114    	; 0x14b8 <TIMER_COUNTER2_start+0x96>
    1446:	08 f0       	brcs	.+2      	; 0x144a <TIMER_COUNTER2_start+0x28>
    1448:	3f c0       	rjmp	.+126    	; 0x14c8 <TIMER_COUNTER2_start+0xa6>
    144a:	01 97       	sbiw	r24, 0x01	; 1
    144c:	69 f0       	breq	.+26     	; 0x1468 <TIMER_COUNTER2_start+0x46>
    144e:	44 c0       	rjmp	.+136    	; 0x14d8 <TIMER_COUNTER2_start+0xb6>
    1450:	81 15       	cp	r24, r1
    1452:	21 e0       	ldi	r18, 0x01	; 1
    1454:	92 07       	cpc	r25, r18
    1456:	01 f1       	breq	.+64     	; 0x1498 <TIMER_COUNTER2_start+0x76>
    1458:	81 15       	cp	r24, r1
    145a:	24 e0       	ldi	r18, 0x04	; 4
    145c:	92 07       	cpc	r25, r18
    145e:	21 f1       	breq	.+72     	; 0x14a8 <TIMER_COUNTER2_start+0x86>
    1460:	80 34       	cpi	r24, 0x40	; 64
    1462:	91 05       	cpc	r25, r1
    1464:	c9 f5       	brne	.+114    	; 0x14d8 <TIMER_COUNTER2_start+0xb6>
    1466:	10 c0       	rjmp	.+32     	; 0x1488 <TIMER_COUNTER2_start+0x66>
			//case 0: // No clock source. (Timer/Counter stopped)
			//break;
			case 1: // clkI/O/(No prescaler)
				m.tc2.reg->tccr2 |= (1 << CS20);
    1468:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <m+0x30>
    146c:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <m+0x31>
    1470:	82 81       	ldd	r24, Z+2	; 0x02
    1472:	81 60       	ori	r24, 0x01	; 1
    1474:	82 83       	std	Z+2, r24	; 0x02
			break;
    1476:	37 c0       	rjmp	.+110    	; 0x14e6 <TIMER_COUNTER2_start+0xc4>
			case 8: // clkI/O/8 (From prescaler)
				m.tc2.reg->tccr2 |= (1 << CS21);
    1478:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <m+0x30>
    147c:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <m+0x31>
    1480:	82 81       	ldd	r24, Z+2	; 0x02
    1482:	82 60       	ori	r24, 0x02	; 2
    1484:	82 83       	std	Z+2, r24	; 0x02
			break;
    1486:	2f c0       	rjmp	.+94     	; 0x14e6 <TIMER_COUNTER2_start+0xc4>
			case 64: // clkI/O/64 (From prescaler)
				m.tc2.reg->tccr2 |= (3 << CS20);
    1488:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <m+0x30>
    148c:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <m+0x31>
    1490:	82 81       	ldd	r24, Z+2	; 0x02
    1492:	83 60       	ori	r24, 0x03	; 3
    1494:	82 83       	std	Z+2, r24	; 0x02
			break;
    1496:	27 c0       	rjmp	.+78     	; 0x14e6 <TIMER_COUNTER2_start+0xc4>
			case 256: // clkI/O/256 (From prescaler)
				m.tc2.reg->tccr2 |= (1 << CS22);
    1498:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <m+0x30>
    149c:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <m+0x31>
    14a0:	82 81       	ldd	r24, Z+2	; 0x02
    14a2:	84 60       	ori	r24, 0x04	; 4
    14a4:	82 83       	std	Z+2, r24	; 0x02
			break;
    14a6:	1f c0       	rjmp	.+62     	; 0x14e6 <TIMER_COUNTER2_start+0xc4>
			case 1024: // clkI/O/1024 (From prescaler)
				m.tc2.reg->tccr2 |= (5 << CS20);
    14a8:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <m+0x30>
    14ac:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <m+0x31>
    14b0:	82 81       	ldd	r24, Z+2	; 0x02
    14b2:	85 60       	ori	r24, 0x05	; 5
    14b4:	82 83       	std	Z+2, r24	; 0x02
			break;
    14b6:	17 c0       	rjmp	.+46     	; 0x14e6 <TIMER_COUNTER2_start+0xc4>
			case 6: // External clock source on T2 pin. Clock on falling edge [PD7]
				m.tc2.reg->tccr2 |= (6 << CS20);
    14b8:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <m+0x30>
    14bc:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <m+0x31>
    14c0:	82 81       	ldd	r24, Z+2	; 0x02
    14c2:	86 60       	ori	r24, 0x06	; 6
    14c4:	82 83       	std	Z+2, r24	; 0x02
			break;
    14c6:	0f c0       	rjmp	.+30     	; 0x14e6 <TIMER_COUNTER2_start+0xc4>
			case 7: // External clock source on T2 pin. Clock on rising edge [PD7]
				m.tc2.reg->tccr2 |= (7 << CS20);
    14c8:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <m+0x30>
    14cc:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <m+0x31>
    14d0:	82 81       	ldd	r24, Z+2	; 0x02
    14d2:	87 60       	ori	r24, 0x07	; 7
    14d4:	82 83       	std	Z+2, r24	; 0x02
			break;
    14d6:	07 c0       	rjmp	.+14     	; 0x14e6 <TIMER_COUNTER2_start+0xc4>
			default:
				m.tc2.reg->tccr2 |= (5 << CS20);
    14d8:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <m+0x30>
    14dc:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <m+0x31>
    14e0:	82 81       	ldd	r24, Z+2	; 0x02
    14e2:	85 60       	ori	r24, 0x05	; 5
    14e4:	82 83       	std	Z+2, r24	; 0x02
			break;
		}
		timer2_state = 85;
    14e6:	85 e5       	ldi	r24, 0x55	; 85
    14e8:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <timer2_state>
	}
	return timer2_state;
}
    14ec:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <timer2_state>
    14f0:	08 95       	ret

000014f2 <TIMER_COUNTER2_compoutmode>:
// compoutmode: Normal port operation, OC0 disconnected; Toggle OC0 on compare match; 
// Clear OC0 on compare match when up-counting. Set OC0 on compare match when downcounting. Clear OC0 on compare match;
// Set OC0 on compare match when up-counting. Clear OC0 on compare match when downcounting. Set OC0 on compare match ;
// default-Normal port operation, OC0 disconnected.
{
	m.tc2.reg->tccr2 &= ~((1 << COM20) | (1 << COM21));
    14f2:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <m+0x30>
    14f6:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <m+0x31>
    14fa:	92 81       	ldd	r25, Z+2	; 0x02
    14fc:	9f 7c       	andi	r25, 0xCF	; 207
    14fe:	92 83       	std	Z+2, r25	; 0x02
	switch(compoutmode){ // OC2  -->  PB7
    1500:	82 30       	cpi	r24, 0x02	; 2
    1502:	a9 f0       	breq	.+42     	; 0x152e <TIMER_COUNTER2_compoutmode+0x3c>
    1504:	83 30       	cpi	r24, 0x03	; 3
    1506:	21 f1       	breq	.+72     	; 0x1550 <TIMER_COUNTER2_compoutmode+0x5e>
    1508:	81 30       	cpi	r24, 0x01	; 1
    150a:	91 f5       	brne	.+100    	; 0x1570 <TIMER_COUNTER2_compoutmode+0x7e>
		case 0: // Normal port operation, OC2 disconnected.
		break;
		case 1: // Reserved
			// Toggle OC2 on compare match
			m.portb.reg->ddr |= 0x80;
    150c:	e6 e2       	ldi	r30, 0x26	; 38
    150e:	f2 e0       	ldi	r31, 0x02	; 2
    1510:	a4 89       	ldd	r26, Z+20	; 0x14
    1512:	b5 89       	ldd	r27, Z+21	; 0x15
    1514:	11 96       	adiw	r26, 0x01	; 1
    1516:	8c 91       	ld	r24, X
    1518:	11 97       	sbiw	r26, 0x01	; 1
    151a:	80 68       	ori	r24, 0x80	; 128
    151c:	11 96       	adiw	r26, 0x01	; 1
    151e:	8c 93       	st	X, r24
			m.tc2.reg->tccr2 |= (1 << COM20);
    1520:	00 a8       	ldd	r0, Z+48	; 0x30
    1522:	f1 a9       	ldd	r31, Z+49	; 0x31
    1524:	e0 2d       	mov	r30, r0
    1526:	82 81       	ldd	r24, Z+2	; 0x02
    1528:	80 61       	ori	r24, 0x10	; 16
    152a:	82 83       	std	Z+2, r24	; 0x02
		break;
    152c:	08 95       	ret
		case 2: // Clear OC2 on compare match when up-counting. Set OC0 on compare
			// match when down counting.
			m.portb.reg->ddr |= 0x80;
    152e:	e6 e2       	ldi	r30, 0x26	; 38
    1530:	f2 e0       	ldi	r31, 0x02	; 2
    1532:	a4 89       	ldd	r26, Z+20	; 0x14
    1534:	b5 89       	ldd	r27, Z+21	; 0x15
    1536:	11 96       	adiw	r26, 0x01	; 1
    1538:	8c 91       	ld	r24, X
    153a:	11 97       	sbiw	r26, 0x01	; 1
    153c:	80 68       	ori	r24, 0x80	; 128
    153e:	11 96       	adiw	r26, 0x01	; 1
    1540:	8c 93       	st	X, r24
			m.tc2.reg->tccr2 |= (1 << COM21);
    1542:	00 a8       	ldd	r0, Z+48	; 0x30
    1544:	f1 a9       	ldd	r31, Z+49	; 0x31
    1546:	e0 2d       	mov	r30, r0
    1548:	82 81       	ldd	r24, Z+2	; 0x02
    154a:	80 62       	ori	r24, 0x20	; 32
    154c:	82 83       	std	Z+2, r24	; 0x02
		break;
    154e:	08 95       	ret
		case 3: // Set OC2 on compare match when up-counting. Clear OC0 on compare
			// match when down counting.
			m.portb.reg->ddr |= 0x80;
    1550:	e6 e2       	ldi	r30, 0x26	; 38
    1552:	f2 e0       	ldi	r31, 0x02	; 2
    1554:	a4 89       	ldd	r26, Z+20	; 0x14
    1556:	b5 89       	ldd	r27, Z+21	; 0x15
    1558:	11 96       	adiw	r26, 0x01	; 1
    155a:	8c 91       	ld	r24, X
    155c:	11 97       	sbiw	r26, 0x01	; 1
    155e:	80 68       	ori	r24, 0x80	; 128
    1560:	11 96       	adiw	r26, 0x01	; 1
    1562:	8c 93       	st	X, r24
			m.tc2.reg->tccr2 |= (1 << COM20) | (1 << COM21);
    1564:	00 a8       	ldd	r0, Z+48	; 0x30
    1566:	f1 a9       	ldd	r31, Z+49	; 0x31
    1568:	e0 2d       	mov	r30, r0
    156a:	82 81       	ldd	r24, Z+2	; 0x02
    156c:	80 63       	ori	r24, 0x30	; 48
    156e:	82 83       	std	Z+2, r24	; 0x02
    1570:	08 95       	ret

00001572 <TIMER_COUNTER2_compare>:
		break;
	}
}
void TIMER_COUNTER2_compare(unsigned char compare)
{
	m.tc2.reg->ocr2 = compare;
    1572:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <m+0x30>
    1576:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <m+0x31>
    157a:	80 83       	st	Z, r24
    157c:	08 95       	ret

0000157e <TIMER_COUNTER2_stop>:
}
uint8_t TIMER_COUNTER2_stop(void)
// stops timer by setting prescaler to zero
{
	m.tc2.reg->tccr2 &= ~(7 << CS20); // No clock source. (Timer/Counter stopped)
    157e:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <m+0x30>
    1582:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <m+0x31>
    1586:	82 81       	ldd	r24, Z+2	; 0x02
    1588:	88 7f       	andi	r24, 0xF8	; 248
    158a:	82 83       	std	Z+2, r24	; 0x02
	timer2_state = 0;
    158c:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <timer2_state>
	return timer2_state;
}
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	08 95       	ret

00001594 <TIMER_COUNTER3_start>:
// PARAMETER SETTING
// Frequency oscillator devision factor or prescaler.
// prescaler: clk T0S /(No prescaling); clk T0S /8 (From prescaler); clk T0S /64 (From prescaler);
// clk T0S /256 (From prescaler); clk T0S /1024 (From prescaler); External clock source on Tn pin. Clock on falling edge;
// External clock source on Tn pin. Clock on rising edge; default - clk T 0 S /1024 (From prescaler).
{
    1594:	9c 01       	movw	r18, r24
	if(!timer3_state){ // one shot
    1596:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <timer3_state>
    159a:	81 11       	cpse	r24, r1
    159c:	54 c0       	rjmp	.+168    	; 0x1646 <TIMER_COUNTER3_start+0xb2>
		m.tc3.reg->tccr3b &= ~(7 << CS30); // No clock source. (Timer/Counter stopped)
    159e:	40 91 52 02 	lds	r20, 0x0252	; 0x800252 <m+0x2c>
    15a2:	50 91 53 02 	lds	r21, 0x0253	; 0x800253 <m+0x2d>
    15a6:	fa 01       	movw	r30, r20
    15a8:	e6 5b       	subi	r30, 0xB6	; 182
    15aa:	ff 4f       	sbci	r31, 0xFF	; 255
    15ac:	90 81       	ld	r25, Z
    15ae:	98 7f       	andi	r25, 0xF8	; 248
    15b0:	90 83       	st	Z, r25
		switch(prescaler){
    15b2:	28 30       	cpi	r18, 0x08	; 8
    15b4:	31 05       	cpc	r19, r1
    15b6:	d9 f0       	breq	.+54     	; 0x15ee <TIMER_COUNTER3_start+0x5a>
    15b8:	40 f4       	brcc	.+16     	; 0x15ca <TIMER_COUNTER3_start+0x36>
    15ba:	26 30       	cpi	r18, 0x06	; 6
    15bc:	31 05       	cpc	r19, r1
    15be:	79 f1       	breq	.+94     	; 0x161e <TIMER_COUNTER3_start+0x8a>
    15c0:	a0 f5       	brcc	.+104    	; 0x162a <TIMER_COUNTER3_start+0x96>
    15c2:	21 30       	cpi	r18, 0x01	; 1
    15c4:	31 05       	cpc	r19, r1
    15c6:	69 f0       	breq	.+26     	; 0x15e2 <TIMER_COUNTER3_start+0x4e>
    15c8:	36 c0       	rjmp	.+108    	; 0x1636 <TIMER_COUNTER3_start+0xa2>
    15ca:	21 15       	cp	r18, r1
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	38 07       	cpc	r19, r24
    15d0:	d1 f0       	breq	.+52     	; 0x1606 <TIMER_COUNTER3_start+0x72>
    15d2:	21 15       	cp	r18, r1
    15d4:	84 e0       	ldi	r24, 0x04	; 4
    15d6:	38 07       	cpc	r19, r24
    15d8:	e1 f0       	breq	.+56     	; 0x1612 <TIMER_COUNTER3_start+0x7e>
    15da:	20 34       	cpi	r18, 0x40	; 64
    15dc:	31 05       	cpc	r19, r1
    15de:	59 f5       	brne	.+86     	; 0x1636 <TIMER_COUNTER3_start+0xa2>
    15e0:	0c c0       	rjmp	.+24     	; 0x15fa <TIMER_COUNTER3_start+0x66>
			//case 0: // No clock source. (Timer/Counter stopped)
			//break;
			case 1: // clkI/O/1 (No prescaler)
				m.tc3.reg->tccr3b |= (1 << CS30);
    15e2:	fa 01       	movw	r30, r20
    15e4:	e6 5b       	subi	r30, 0xB6	; 182
    15e6:	ff 4f       	sbci	r31, 0xFF	; 255
    15e8:	91 60       	ori	r25, 0x01	; 1
    15ea:	90 83       	st	Z, r25
			break;
    15ec:	29 c0       	rjmp	.+82     	; 0x1640 <TIMER_COUNTER3_start+0xac>
			case 8: // clkI/O/8 (From prescaler)
				m.tc3.reg->tccr3b |= (1 << CS31);
    15ee:	fa 01       	movw	r30, r20
    15f0:	e6 5b       	subi	r30, 0xB6	; 182
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	92 60       	ori	r25, 0x02	; 2
    15f6:	90 83       	st	Z, r25
			break;
    15f8:	23 c0       	rjmp	.+70     	; 0x1640 <TIMER_COUNTER3_start+0xac>
			case 64: // clkI/O/64 (From prescaler)
				m.tc3.reg->tccr3b |= (3 << CS30);
    15fa:	fa 01       	movw	r30, r20
    15fc:	e6 5b       	subi	r30, 0xB6	; 182
    15fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1600:	93 60       	ori	r25, 0x03	; 3
    1602:	90 83       	st	Z, r25
			break;
    1604:	1d c0       	rjmp	.+58     	; 0x1640 <TIMER_COUNTER3_start+0xac>
			case 256: // clkI/O/256 (From prescaler)
				m.tc3.reg->tccr3b |= (1 << CS32);
    1606:	fa 01       	movw	r30, r20
    1608:	e6 5b       	subi	r30, 0xB6	; 182
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	94 60       	ori	r25, 0x04	; 4
    160e:	90 83       	st	Z, r25
			break;
    1610:	17 c0       	rjmp	.+46     	; 0x1640 <TIMER_COUNTER3_start+0xac>
			case 1024: // clkI/O/1024 (From prescaler)
				m.tc3.reg->tccr3b |= (5 << CS30);
    1612:	fa 01       	movw	r30, r20
    1614:	e6 5b       	subi	r30, 0xB6	; 182
    1616:	ff 4f       	sbci	r31, 0xFF	; 255
    1618:	95 60       	ori	r25, 0x05	; 5
    161a:	90 83       	st	Z, r25
			break;
    161c:	11 c0       	rjmp	.+34     	; 0x1640 <TIMER_COUNTER3_start+0xac>
			case 6: // External clock source on Tn pin. Clock on falling edge [PE6]
				m.tc3.reg->tccr3b |= (6 << CS30);
    161e:	fa 01       	movw	r30, r20
    1620:	e6 5b       	subi	r30, 0xB6	; 182
    1622:	ff 4f       	sbci	r31, 0xFF	; 255
    1624:	96 60       	ori	r25, 0x06	; 6
    1626:	90 83       	st	Z, r25
			break;
    1628:	0b c0       	rjmp	.+22     	; 0x1640 <TIMER_COUNTER3_start+0xac>
			case 7: // External clock source on Tn pin. Clock on rising edge [PE6]
				m.tc3.reg->tccr3b |= (7 << CS30);
    162a:	fa 01       	movw	r30, r20
    162c:	e6 5b       	subi	r30, 0xB6	; 182
    162e:	ff 4f       	sbci	r31, 0xFF	; 255
    1630:	97 60       	ori	r25, 0x07	; 7
    1632:	90 83       	st	Z, r25
			break;
    1634:	05 c0       	rjmp	.+10     	; 0x1640 <TIMER_COUNTER3_start+0xac>
			default:
				m.tc3.reg->tccr3b |= (5 << CS30);
    1636:	fa 01       	movw	r30, r20
    1638:	e6 5b       	subi	r30, 0xB6	; 182
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	95 60       	ori	r25, 0x05	; 5
    163e:	90 83       	st	Z, r25
			break;
		}
		timer3_state = 85;
    1640:	85 e5       	ldi	r24, 0x55	; 85
    1642:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <timer3_state>
	}	
	return timer3_state;
}
    1646:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <timer3_state>
    164a:	08 95       	ret

0000164c <TIMER_COUNTER3_compoutmodeA>:
void TIMER_COUNTER3_compoutmodeA(unsigned char compoutmode)
{
	m.tc3.reg->tccr3a &= ~(3 << COM3A0);
    164c:	e0 91 52 02 	lds	r30, 0x0252	; 0x800252 <m+0x2c>
    1650:	f0 91 53 02 	lds	r31, 0x0253	; 0x800253 <m+0x2d>
    1654:	e5 5b       	subi	r30, 0xB5	; 181
    1656:	ff 4f       	sbci	r31, 0xFF	; 255
    1658:	90 81       	ld	r25, Z
    165a:	9f 73       	andi	r25, 0x3F	; 63
    165c:	90 83       	st	Z, r25
	switch(compoutmode){ // OC3A  -->  PE3
    165e:	82 30       	cpi	r24, 0x02	; 2
    1660:	b9 f0       	breq	.+46     	; 0x1690 <TIMER_COUNTER3_compoutmodeA+0x44>
    1662:	83 30       	cpi	r24, 0x03	; 3
    1664:	41 f1       	breq	.+80     	; 0x16b6 <TIMER_COUNTER3_compoutmodeA+0x6a>
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	c1 f5       	brne	.+112    	; 0x16da <TIMER_COUNTER3_compoutmodeA+0x8e>
		case 0: // Normal port operation, OC3A disconnected.
		break;
		case 1: // Reserved
			// Toggle OC3A on compare match
			m.porte.reg->ddr |= 0x08;
    166a:	e6 e2       	ldi	r30, 0x26	; 38
    166c:	f2 e0       	ldi	r31, 0x02	; 2
    166e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1670:	b3 8d       	ldd	r27, Z+27	; 0x1b
    1672:	11 96       	adiw	r26, 0x01	; 1
    1674:	8c 91       	ld	r24, X
    1676:	11 97       	sbiw	r26, 0x01	; 1
    1678:	88 60       	ori	r24, 0x08	; 8
    167a:	11 96       	adiw	r26, 0x01	; 1
    167c:	8c 93       	st	X, r24
			m.tc3.reg->tccr3a |= (1 << COM3A0);
    167e:	04 a4       	ldd	r0, Z+44	; 0x2c
    1680:	f5 a5       	ldd	r31, Z+45	; 0x2d
    1682:	e0 2d       	mov	r30, r0
    1684:	e5 5b       	subi	r30, 0xB5	; 181
    1686:	ff 4f       	sbci	r31, 0xFF	; 255
    1688:	80 81       	ld	r24, Z
    168a:	80 64       	ori	r24, 0x40	; 64
    168c:	80 83       	st	Z, r24
		break;
    168e:	08 95       	ret
		case 2: // Clear OC3A on compare match when up-counting. Set OC0 on compare
			// match when down counting.
			m.porte.reg->ddr |= 0x08;
    1690:	e6 e2       	ldi	r30, 0x26	; 38
    1692:	f2 e0       	ldi	r31, 0x02	; 2
    1694:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1696:	b3 8d       	ldd	r27, Z+27	; 0x1b
    1698:	11 96       	adiw	r26, 0x01	; 1
    169a:	8c 91       	ld	r24, X
    169c:	11 97       	sbiw	r26, 0x01	; 1
    169e:	88 60       	ori	r24, 0x08	; 8
    16a0:	11 96       	adiw	r26, 0x01	; 1
    16a2:	8c 93       	st	X, r24
			m.tc3.reg->tccr3a |= (1 << COM3A1);
    16a4:	04 a4       	ldd	r0, Z+44	; 0x2c
    16a6:	f5 a5       	ldd	r31, Z+45	; 0x2d
    16a8:	e0 2d       	mov	r30, r0
    16aa:	e5 5b       	subi	r30, 0xB5	; 181
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	80 81       	ld	r24, Z
    16b0:	80 68       	ori	r24, 0x80	; 128
    16b2:	80 83       	st	Z, r24
		break;
    16b4:	08 95       	ret
		case 3: // Set OC3A on compare match when up-counting. Clear OC0 on compare
			// match when down counting.
			m.porte.reg->ddr |= 0x08;
    16b6:	e6 e2       	ldi	r30, 0x26	; 38
    16b8:	f2 e0       	ldi	r31, 0x02	; 2
    16ba:	a2 8d       	ldd	r26, Z+26	; 0x1a
    16bc:	b3 8d       	ldd	r27, Z+27	; 0x1b
    16be:	11 96       	adiw	r26, 0x01	; 1
    16c0:	8c 91       	ld	r24, X
    16c2:	11 97       	sbiw	r26, 0x01	; 1
    16c4:	88 60       	ori	r24, 0x08	; 8
    16c6:	11 96       	adiw	r26, 0x01	; 1
    16c8:	8c 93       	st	X, r24
			m.tc3.reg->tccr3a |= (1 << COM3A0) | (1 << COM3A1);
    16ca:	04 a4       	ldd	r0, Z+44	; 0x2c
    16cc:	f5 a5       	ldd	r31, Z+45	; 0x2d
    16ce:	e0 2d       	mov	r30, r0
    16d0:	e5 5b       	subi	r30, 0xB5	; 181
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	80 81       	ld	r24, Z
    16d6:	80 6c       	ori	r24, 0xC0	; 192
    16d8:	80 83       	st	Z, r24
    16da:	08 95       	ret

000016dc <TIMER_COUNTER3_compoutmodeB>:
		break;
	}
}
void TIMER_COUNTER3_compoutmodeB(unsigned char compoutmode)
{
	m.tc3.reg->tccr3a &= ~(3 << COM3B0);
    16dc:	e0 91 52 02 	lds	r30, 0x0252	; 0x800252 <m+0x2c>
    16e0:	f0 91 53 02 	lds	r31, 0x0253	; 0x800253 <m+0x2d>
    16e4:	e5 5b       	subi	r30, 0xB5	; 181
    16e6:	ff 4f       	sbci	r31, 0xFF	; 255
    16e8:	90 81       	ld	r25, Z
    16ea:	9f 7c       	andi	r25, 0xCF	; 207
    16ec:	90 83       	st	Z, r25
	switch(compoutmode){ // OC3B  -->  PE4
    16ee:	82 30       	cpi	r24, 0x02	; 2
    16f0:	b9 f0       	breq	.+46     	; 0x1720 <TIMER_COUNTER3_compoutmodeB+0x44>
    16f2:	83 30       	cpi	r24, 0x03	; 3
    16f4:	41 f1       	breq	.+80     	; 0x1746 <TIMER_COUNTER3_compoutmodeB+0x6a>
    16f6:	81 30       	cpi	r24, 0x01	; 1
    16f8:	c1 f5       	brne	.+112    	; 0x176a <TIMER_COUNTER3_compoutmodeB+0x8e>
		case 0: // Normal port operation, OC3B disconnected.
		break;
		case 1: // Reserved
			// Toggle OC3A or OC3B on compare match
			m.porte.reg->ddr |= 0x10;
    16fa:	e6 e2       	ldi	r30, 0x26	; 38
    16fc:	f2 e0       	ldi	r31, 0x02	; 2
    16fe:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1700:	b3 8d       	ldd	r27, Z+27	; 0x1b
    1702:	11 96       	adiw	r26, 0x01	; 1
    1704:	8c 91       	ld	r24, X
    1706:	11 97       	sbiw	r26, 0x01	; 1
    1708:	80 61       	ori	r24, 0x10	; 16
    170a:	11 96       	adiw	r26, 0x01	; 1
    170c:	8c 93       	st	X, r24
			m.tc3.reg->tccr3a |= (1 << COM3B0);
    170e:	04 a4       	ldd	r0, Z+44	; 0x2c
    1710:	f5 a5       	ldd	r31, Z+45	; 0x2d
    1712:	e0 2d       	mov	r30, r0
    1714:	e5 5b       	subi	r30, 0xB5	; 181
    1716:	ff 4f       	sbci	r31, 0xFF	; 255
    1718:	80 81       	ld	r24, Z
    171a:	80 61       	ori	r24, 0x10	; 16
    171c:	80 83       	st	Z, r24
		break;
    171e:	08 95       	ret
		case 2: // Clear OC3B on compare match when up-counting. Set OC3B on compare
			// match when down counting.
			m.porte.reg->ddr |= 0x10;
    1720:	e6 e2       	ldi	r30, 0x26	; 38
    1722:	f2 e0       	ldi	r31, 0x02	; 2
    1724:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1726:	b3 8d       	ldd	r27, Z+27	; 0x1b
    1728:	11 96       	adiw	r26, 0x01	; 1
    172a:	8c 91       	ld	r24, X
    172c:	11 97       	sbiw	r26, 0x01	; 1
    172e:	80 61       	ori	r24, 0x10	; 16
    1730:	11 96       	adiw	r26, 0x01	; 1
    1732:	8c 93       	st	X, r24
			m.tc3.reg->tccr3a |= (1 << COM3B1);
    1734:	04 a4       	ldd	r0, Z+44	; 0x2c
    1736:	f5 a5       	ldd	r31, Z+45	; 0x2d
    1738:	e0 2d       	mov	r30, r0
    173a:	e5 5b       	subi	r30, 0xB5	; 181
    173c:	ff 4f       	sbci	r31, 0xFF	; 255
    173e:	80 81       	ld	r24, Z
    1740:	80 62       	ori	r24, 0x20	; 32
    1742:	80 83       	st	Z, r24
		break;
    1744:	08 95       	ret
		case 3: // Set OC3B on compare match when up-counting. Clear OC3B on compare
			// match when down counting.
			m.porte.reg->ddr |= 0x10;
    1746:	e6 e2       	ldi	r30, 0x26	; 38
    1748:	f2 e0       	ldi	r31, 0x02	; 2
    174a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    174c:	b3 8d       	ldd	r27, Z+27	; 0x1b
    174e:	11 96       	adiw	r26, 0x01	; 1
    1750:	8c 91       	ld	r24, X
    1752:	11 97       	sbiw	r26, 0x01	; 1
    1754:	80 61       	ori	r24, 0x10	; 16
    1756:	11 96       	adiw	r26, 0x01	; 1
    1758:	8c 93       	st	X, r24
			m.tc3.reg->tccr3a |= (1 << COM3B0) | (1 << COM3B1);
    175a:	04 a4       	ldd	r0, Z+44	; 0x2c
    175c:	f5 a5       	ldd	r31, Z+45	; 0x2d
    175e:	e0 2d       	mov	r30, r0
    1760:	e5 5b       	subi	r30, 0xB5	; 181
    1762:	ff 4f       	sbci	r31, 0xFF	; 255
    1764:	80 81       	ld	r24, Z
    1766:	80 63       	ori	r24, 0x30	; 48
    1768:	80 83       	st	Z, r24
    176a:	08 95       	ret

0000176c <TIMER_COUNTER3_compoutmodeC>:
		break;
	}
}
void TIMER_COUNTER3_compoutmodeC(unsigned char compoutmode)
{
	m.tc3.reg->tccr3a &= ~(3 << COM3C0);
    176c:	e0 91 52 02 	lds	r30, 0x0252	; 0x800252 <m+0x2c>
    1770:	f0 91 53 02 	lds	r31, 0x0253	; 0x800253 <m+0x2d>
    1774:	e5 5b       	subi	r30, 0xB5	; 181
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	90 81       	ld	r25, Z
    177a:	93 7f       	andi	r25, 0xF3	; 243
    177c:	90 83       	st	Z, r25
	switch(compoutmode){ // OC3C  -->  PE5
    177e:	82 30       	cpi	r24, 0x02	; 2
    1780:	b9 f0       	breq	.+46     	; 0x17b0 <TIMER_COUNTER3_compoutmodeC+0x44>
    1782:	83 30       	cpi	r24, 0x03	; 3
    1784:	41 f1       	breq	.+80     	; 0x17d6 <TIMER_COUNTER3_compoutmodeC+0x6a>
    1786:	81 30       	cpi	r24, 0x01	; 1
    1788:	c1 f5       	brne	.+112    	; 0x17fa <TIMER_COUNTER3_compoutmodeC+0x8e>
		case 0: // Normal port operation, OC3C disconnected.
		break;
		case 1: // Reserved
			// Toggle OC3A or OC3C on compare match
			m.porte.reg->ddr |= 0x20;
    178a:	e6 e2       	ldi	r30, 0x26	; 38
    178c:	f2 e0       	ldi	r31, 0x02	; 2
    178e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1790:	b3 8d       	ldd	r27, Z+27	; 0x1b
    1792:	11 96       	adiw	r26, 0x01	; 1
    1794:	8c 91       	ld	r24, X
    1796:	11 97       	sbiw	r26, 0x01	; 1
    1798:	80 62       	ori	r24, 0x20	; 32
    179a:	11 96       	adiw	r26, 0x01	; 1
    179c:	8c 93       	st	X, r24
			m.tc3.reg->tccr3a |= (1 << COM3C0);
    179e:	04 a4       	ldd	r0, Z+44	; 0x2c
    17a0:	f5 a5       	ldd	r31, Z+45	; 0x2d
    17a2:	e0 2d       	mov	r30, r0
    17a4:	e5 5b       	subi	r30, 0xB5	; 181
    17a6:	ff 4f       	sbci	r31, 0xFF	; 255
    17a8:	80 81       	ld	r24, Z
    17aa:	84 60       	ori	r24, 0x04	; 4
    17ac:	80 83       	st	Z, r24
		break;
    17ae:	08 95       	ret
		case 2: // Clear OC3C on compare match when up-counting. Set OC3C on compare
			// match when down counting.
			m.porte.reg->ddr |= 0x20;
    17b0:	e6 e2       	ldi	r30, 0x26	; 38
    17b2:	f2 e0       	ldi	r31, 0x02	; 2
    17b4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    17b6:	b3 8d       	ldd	r27, Z+27	; 0x1b
    17b8:	11 96       	adiw	r26, 0x01	; 1
    17ba:	8c 91       	ld	r24, X
    17bc:	11 97       	sbiw	r26, 0x01	; 1
    17be:	80 62       	ori	r24, 0x20	; 32
    17c0:	11 96       	adiw	r26, 0x01	; 1
    17c2:	8c 93       	st	X, r24
			m.tc3.reg->tccr3a |= (1 << COM3C1);
    17c4:	04 a4       	ldd	r0, Z+44	; 0x2c
    17c6:	f5 a5       	ldd	r31, Z+45	; 0x2d
    17c8:	e0 2d       	mov	r30, r0
    17ca:	e5 5b       	subi	r30, 0xB5	; 181
    17cc:	ff 4f       	sbci	r31, 0xFF	; 255
    17ce:	80 81       	ld	r24, Z
    17d0:	88 60       	ori	r24, 0x08	; 8
    17d2:	80 83       	st	Z, r24
		break;
    17d4:	08 95       	ret
		case 3: // Set OC3C on compare match when up-counting. Clear OC3C on compare
			// match when down counting.
			m.porte.reg->ddr |= 0x20;
    17d6:	e6 e2       	ldi	r30, 0x26	; 38
    17d8:	f2 e0       	ldi	r31, 0x02	; 2
    17da:	a2 8d       	ldd	r26, Z+26	; 0x1a
    17dc:	b3 8d       	ldd	r27, Z+27	; 0x1b
    17de:	11 96       	adiw	r26, 0x01	; 1
    17e0:	8c 91       	ld	r24, X
    17e2:	11 97       	sbiw	r26, 0x01	; 1
    17e4:	80 62       	ori	r24, 0x20	; 32
    17e6:	11 96       	adiw	r26, 0x01	; 1
    17e8:	8c 93       	st	X, r24
			m.tc3.reg->tccr3a |= (1 << COM3C0) | (1 << COM3C1);
    17ea:	04 a4       	ldd	r0, Z+44	; 0x2c
    17ec:	f5 a5       	ldd	r31, Z+45	; 0x2d
    17ee:	e0 2d       	mov	r30, r0
    17f0:	e5 5b       	subi	r30, 0xB5	; 181
    17f2:	ff 4f       	sbci	r31, 0xFF	; 255
    17f4:	80 81       	ld	r24, Z
    17f6:	8c 60       	ori	r24, 0x0C	; 12
    17f8:	80 83       	st	Z, r24
    17fa:	08 95       	ret

000017fc <TIMER_COUNTER3_stop>:
	m.tc3.reg->ocr3c = WriteLHByte(compare);
}
uint8_t TIMER_COUNTER3_stop(void)
// stops timer by setting prescaler to zero
{
	m.tc3.reg->tccr3b &= ~(7 << CS30); // No clock source. (Timer/Counter stopped)
    17fc:	e0 91 52 02 	lds	r30, 0x0252	; 0x800252 <m+0x2c>
    1800:	f0 91 53 02 	lds	r31, 0x0253	; 0x800253 <m+0x2d>
    1804:	e6 5b       	subi	r30, 0xB6	; 182
    1806:	ff 4f       	sbci	r31, 0xFF	; 255
    1808:	80 81       	ld	r24, Z
    180a:	88 7f       	andi	r24, 0xF8	; 248
    180c:	80 83       	st	Z, r24
	timer3_state = 0;
    180e:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <timer3_state>
	return timer3_state;
}
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	08 95       	ret

00001816 <TIMER_COUNTER1_compareA>:
		default:
		break;
	}
}
void TIMER_COUNTER1_compareA(uint16_t compare)
{
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
	m.tc1.reg->ocr1a = WriteLHByte(compare);
    181a:	c0 91 4e 02 	lds	r28, 0x024E	; 0x80024e <m+0x28>
    181e:	d0 91 4f 02 	lds	r29, 0x024F	; 0x80024f <m+0x29>
    1822:	9f d9       	rcall	.-3266   	; 0xb62 <WriteLHByte>
    1824:	9b 87       	std	Y+11, r25	; 0x0b
    1826:	8a 87       	std	Y+10, r24	; 0x0a
}
    1828:	df 91       	pop	r29
    182a:	cf 91       	pop	r28
    182c:	08 95       	ret

0000182e <TIMER_COUNTER1_compareB>:
void TIMER_COUNTER1_compareB(uint16_t compare)
{
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
	m.tc1.reg->ocr1b = WriteLHByte(compare);
    1832:	c0 91 4e 02 	lds	r28, 0x024E	; 0x80024e <m+0x28>
    1836:	d0 91 4f 02 	lds	r29, 0x024F	; 0x80024f <m+0x29>
    183a:	93 d9       	rcall	.-3290   	; 0xb62 <WriteLHByte>
    183c:	99 87       	std	Y+9, r25	; 0x09
    183e:	88 87       	std	Y+8, r24	; 0x08
}
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	08 95       	ret

00001846 <TIMER_COUNTER1_compareC>:
void TIMER_COUNTER1_compareC(uint16_t compare)
{
    1846:	cf 93       	push	r28
    1848:	df 93       	push	r29
	m.tc1.reg->ocr1c = WriteLHByte(compare);
    184a:	c0 91 4e 02 	lds	r28, 0x024E	; 0x80024e <m+0x28>
    184e:	d0 91 4f 02 	lds	r29, 0x024F	; 0x80024f <m+0x29>
    1852:	87 d9       	rcall	.-3314   	; 0xb62 <WriteLHByte>
    1854:	99 af       	std	Y+57, r25	; 0x39
    1856:	88 af       	std	Y+56, r24	; 0x38
}
    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	08 95       	ret

0000185e <TIMER_COUNTER3_compareA>:
		default:
		break;
	}
}
void TIMER_COUNTER3_compareA(uint16_t compare)
{
    185e:	cf 93       	push	r28
    1860:	df 93       	push	r29
	m.tc3.reg->ocr3a = WriteLHByte(compare);
    1862:	c0 91 52 02 	lds	r28, 0x0252	; 0x800252 <m+0x2c>
    1866:	d0 91 53 02 	lds	r29, 0x0253	; 0x800253 <m+0x2d>
    186a:	ca 5b       	subi	r28, 0xBA	; 186
    186c:	df 4f       	sbci	r29, 0xFF	; 255
    186e:	79 d9       	rcall	.-3342   	; 0xb62 <WriteLHByte>
    1870:	99 83       	std	Y+1, r25	; 0x01
    1872:	88 83       	st	Y, r24
}
    1874:	df 91       	pop	r29
    1876:	cf 91       	pop	r28
    1878:	08 95       	ret

0000187a <TIMER_COUNTER3_compareB>:
void TIMER_COUNTER3_compareB(uint16_t compare)
{
    187a:	cf 93       	push	r28
    187c:	df 93       	push	r29
	m.tc3.reg->ocr3b = WriteLHByte(compare);
    187e:	c0 91 52 02 	lds	r28, 0x0252	; 0x800252 <m+0x2c>
    1882:	d0 91 53 02 	lds	r29, 0x0253	; 0x800253 <m+0x2d>
    1886:	cc 5b       	subi	r28, 0xBC	; 188
    1888:	df 4f       	sbci	r29, 0xFF	; 255
    188a:	6b d9       	rcall	.-3370   	; 0xb62 <WriteLHByte>
    188c:	99 83       	std	Y+1, r25	; 0x01
    188e:	88 83       	st	Y, r24
}
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	08 95       	ret

00001896 <TIMER_COUNTER3_compareC>:
void TIMER_COUNTER3_compareC(uint16_t compare)
{
    1896:	cf 93       	push	r28
    1898:	df 93       	push	r29
	m.tc3.reg->ocr3c = WriteLHByte(compare);
    189a:	c0 91 52 02 	lds	r28, 0x0252	; 0x800252 <m+0x2c>
    189e:	d0 91 53 02 	lds	r29, 0x0253	; 0x800253 <m+0x2d>
    18a2:	ce 5b       	subi	r28, 0xBE	; 190
    18a4:	df 4f       	sbci	r29, 0xFF	; 255
    18a6:	5d d9       	rcall	.-3398   	; 0xb62 <WriteLHByte>
    18a8:	99 83       	std	Y+1, r25	; 0x01
    18aa:	88 83       	st	Y, r24
}
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	08 95       	ret

000018b2 <TIMER_COUNTER0enable>:
/*** Procedure & Function ***/
TIMER_COUNTER0 TIMER_COUNTER0enable(unsigned char wavegenmode, unsigned char interrupt)
// PARAMETER SETTING
// wavegen mode: Normal; PWM phase correct; Fast PWM; default-Normasl;
// interrupt: off; overflow; output compare; both; default - non.
{
    18b2:	ef 92       	push	r14
    18b4:	ff 92       	push	r15
    18b6:	0f 93       	push	r16
    18b8:	1f 93       	push	r17
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
    18c2:	c0 55       	subi	r28, 0x50	; 80
    18c4:	d1 09       	sbc	r29, r1
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	f8 94       	cli
    18ca:	de bf       	out	0x3e, r29	; 62
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	cd bf       	out	0x3d, r28	; 61
    18d0:	8c 01       	movw	r16, r24
    18d2:	e6 2e       	mov	r14, r22
    18d4:	f4 2e       	mov	r15, r20
	TIMER_COUNTER0 timer0;
	m = ATMEGA128enable(); // Dependency
    18d6:	ce 01       	movw	r24, r28
    18d8:	01 96       	adiw	r24, 0x01	; 1
    18da:	4b d9       	rcall	.-3434   	; 0xb72 <ATMEGA128enable>
    18dc:	80 e5       	ldi	r24, 0x50	; 80
    18de:	fe 01       	movw	r30, r28
    18e0:	31 96       	adiw	r30, 0x01	; 1
    18e2:	a6 e2       	ldi	r26, 0x26	; 38
    18e4:	b2 e0       	ldi	r27, 0x02	; 2
    18e6:	01 90       	ld	r0, Z+
    18e8:	0d 92       	st	X+, r0
    18ea:	8a 95       	dec	r24
    18ec:	e1 f7       	brne	.-8      	; 0x18e6 <TIMER_COUNTER0enable+0x34>
	
	timer0_state = 0;
    18ee:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <timer0_state>
	m.tc0.reg->tccr0 &= ~((1 << WGM00) | (1 << WGM01));
    18f2:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <m+0x34>
    18f6:	f0 91 5b 02 	lds	r31, 0x025B	; 0x80025b <m+0x35>
    18fa:	83 89       	ldd	r24, Z+19	; 0x13
    18fc:	87 7b       	andi	r24, 0xB7	; 183
    18fe:	83 8b       	std	Z+19, r24	; 0x13
	switch(wavegenmode){ // TOP -- Update of OCR0 at -- TOV0 Flag Set on
    1900:	82 e0       	ldi	r24, 0x02	; 2
    1902:	e8 16       	cp	r14, r24
    1904:	71 f0       	breq	.+28     	; 0x1922 <TIMER_COUNTER0enable+0x70>
    1906:	e3 e0       	ldi	r30, 0x03	; 3
    1908:	ee 16       	cp	r14, r30
    190a:	99 f0       	breq	.+38     	; 0x1932 <TIMER_COUNTER0enable+0x80>
    190c:	f1 e0       	ldi	r31, 0x01	; 1
    190e:	ef 12       	cpse	r14, r31
    1910:	17 c0       	rjmp	.+46     	; 0x1940 <TIMER_COUNTER0enable+0x8e>
		case 0: // Normal, 0xFF -- Immediate -- MAX
		break;
		case 1: // PWM Phase Correct, 0xFF -- TOP -- BOTTOM
			m.tc0.reg->tccr0 |= (1 << WGM00);
    1912:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <m+0x34>
    1916:	f0 91 5b 02 	lds	r31, 0x025B	; 0x80025b <m+0x35>
    191a:	83 89       	ldd	r24, Z+19	; 0x13
    191c:	80 64       	ori	r24, 0x40	; 64
    191e:	83 8b       	std	Z+19, r24	; 0x13
		break;
    1920:	0f c0       	rjmp	.+30     	; 0x1940 <TIMER_COUNTER0enable+0x8e>
		case 2: // CTC, OCR0 -- Immediate -- MAX
			m.tc0.reg->tccr0 |= (1 << WGM01);
    1922:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <m+0x34>
    1926:	f0 91 5b 02 	lds	r31, 0x025B	; 0x80025b <m+0x35>
    192a:	83 89       	ldd	r24, Z+19	; 0x13
    192c:	88 60       	ori	r24, 0x08	; 8
    192e:	83 8b       	std	Z+19, r24	; 0x13
		break;
    1930:	07 c0       	rjmp	.+14     	; 0x1940 <TIMER_COUNTER0enable+0x8e>
		case 3: // Fast PWM, 0xFF -- BOTTOM -- MAX
			m.tc0.reg->tccr0 |= (1 << WGM00) | (1 << WGM01);
    1932:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <m+0x34>
    1936:	f0 91 5b 02 	lds	r31, 0x025B	; 0x80025b <m+0x35>
    193a:	83 89       	ldd	r24, Z+19	; 0x13
    193c:	88 64       	ori	r24, 0x48	; 72
    193e:	83 8b       	std	Z+19, r24	; 0x13
		break;
		default:
		break;
	}
	m.tc0.reg->timsk &= ~(1 << TOIE0);
    1940:	e6 e2       	ldi	r30, 0x26	; 38
    1942:	f2 e0       	ldi	r31, 0x02	; 2
    1944:	a4 a9       	ldd	r26, Z+52	; 0x34
    1946:	b5 a9       	ldd	r27, Z+53	; 0x35
    1948:	57 96       	adiw	r26, 0x17	; 23
    194a:	8c 91       	ld	r24, X
    194c:	57 97       	sbiw	r26, 0x17	; 23
    194e:	8e 7f       	andi	r24, 0xFE	; 254
    1950:	57 96       	adiw	r26, 0x17	; 23
    1952:	8c 93       	st	X, r24
	m.tc0.reg->timsk &= ~(1 << OCIE0);
    1954:	04 a8       	ldd	r0, Z+52	; 0x34
    1956:	f5 a9       	ldd	r31, Z+53	; 0x35
    1958:	e0 2d       	mov	r30, r0
    195a:	87 89       	ldd	r24, Z+23	; 0x17
    195c:	8d 7f       	andi	r24, 0xFD	; 253
    195e:	87 8b       	std	Z+23, r24	; 0x17
	switch(interrupt){
    1960:	82 e0       	ldi	r24, 0x02	; 2
    1962:	f8 16       	cp	r15, r24
    1964:	b9 f0       	breq	.+46     	; 0x1994 <TIMER_COUNTER0enable+0xe2>
    1966:	e3 e0       	ldi	r30, 0x03	; 3
    1968:	fe 16       	cp	r15, r30
    196a:	29 f1       	breq	.+74     	; 0x19b6 <TIMER_COUNTER0enable+0x104>
    196c:	f1 e0       	ldi	r31, 0x01	; 1
    196e:	ff 12       	cpse	r15, r31
    1970:	32 c0       	rjmp	.+100    	; 0x19d6 <TIMER_COUNTER0enable+0x124>
		case 0: 
		break;
		case 1:
			m.tc0.reg->timsk |= (1 << TOIE0);
    1972:	e6 e2       	ldi	r30, 0x26	; 38
    1974:	f2 e0       	ldi	r31, 0x02	; 2
    1976:	a4 a9       	ldd	r26, Z+52	; 0x34
    1978:	b5 a9       	ldd	r27, Z+53	; 0x35
    197a:	57 96       	adiw	r26, 0x17	; 23
    197c:	8c 91       	ld	r24, X
    197e:	57 97       	sbiw	r26, 0x17	; 23
    1980:	81 60       	ori	r24, 0x01	; 1
    1982:	57 96       	adiw	r26, 0x17	; 23
    1984:	8c 93       	st	X, r24
			m.cpu.reg->sreg |= 1 << GLOBAL_INTERRUPT_ENABLE;
    1986:	02 84       	ldd	r0, Z+10	; 0x0a
    1988:	f3 85       	ldd	r31, Z+11	; 0x0b
    198a:	e0 2d       	mov	r30, r0
    198c:	83 85       	ldd	r24, Z+11	; 0x0b
    198e:	80 68       	ori	r24, 0x80	; 128
    1990:	83 87       	std	Z+11, r24	; 0x0b
		break;
    1992:	21 c0       	rjmp	.+66     	; 0x19d6 <TIMER_COUNTER0enable+0x124>
		case 2:
			m.tc0.reg->timsk |= (1 << OCIE0);
    1994:	e6 e2       	ldi	r30, 0x26	; 38
    1996:	f2 e0       	ldi	r31, 0x02	; 2
    1998:	a4 a9       	ldd	r26, Z+52	; 0x34
    199a:	b5 a9       	ldd	r27, Z+53	; 0x35
    199c:	57 96       	adiw	r26, 0x17	; 23
    199e:	8c 91       	ld	r24, X
    19a0:	57 97       	sbiw	r26, 0x17	; 23
    19a2:	82 60       	ori	r24, 0x02	; 2
    19a4:	57 96       	adiw	r26, 0x17	; 23
    19a6:	8c 93       	st	X, r24
			m.cpu.reg->sreg |= 1 << GLOBAL_INTERRUPT_ENABLE;
    19a8:	02 84       	ldd	r0, Z+10	; 0x0a
    19aa:	f3 85       	ldd	r31, Z+11	; 0x0b
    19ac:	e0 2d       	mov	r30, r0
    19ae:	83 85       	ldd	r24, Z+11	; 0x0b
    19b0:	80 68       	ori	r24, 0x80	; 128
    19b2:	83 87       	std	Z+11, r24	; 0x0b
		break;
    19b4:	10 c0       	rjmp	.+32     	; 0x19d6 <TIMER_COUNTER0enable+0x124>
		case 3:
			m.tc0.reg->timsk |= ((1 << TOIE0) | (1 << OCIE0));
    19b6:	e6 e2       	ldi	r30, 0x26	; 38
    19b8:	f2 e0       	ldi	r31, 0x02	; 2
    19ba:	a4 a9       	ldd	r26, Z+52	; 0x34
    19bc:	b5 a9       	ldd	r27, Z+53	; 0x35
    19be:	57 96       	adiw	r26, 0x17	; 23
    19c0:	8c 91       	ld	r24, X
    19c2:	57 97       	sbiw	r26, 0x17	; 23
    19c4:	83 60       	ori	r24, 0x03	; 3
    19c6:	57 96       	adiw	r26, 0x17	; 23
    19c8:	8c 93       	st	X, r24
			m.cpu.reg->sreg |= 1 << GLOBAL_INTERRUPT_ENABLE;
    19ca:	02 84       	ldd	r0, Z+10	; 0x0a
    19cc:	f3 85       	ldd	r31, Z+11	; 0x0b
    19ce:	e0 2d       	mov	r30, r0
    19d0:	83 85       	ldd	r24, Z+11	; 0x0b
    19d2:	80 68       	ori	r24, 0x80	; 128
    19d4:	83 87       	std	Z+11, r24	; 0x0b
		break;
		default:
		break;
	}
	m.tc0.reg->ocr0 = ~0;
    19d6:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <m+0x34>
    19da:	f0 91 5b 02 	lds	r31, 0x025B	; 0x80025b <m+0x35>
    19de:	8f ef       	ldi	r24, 0xFF	; 255
    19e0:	81 8b       	std	Z+17, r24	; 0x11
	
	timer0.compoutmode = TIMER_COUNTER0_compoutmode;
	timer0.compare = TIMER_COUNTER0_compare;
	timer0.start = TIMER_COUNTER0_start;
	timer0.stop = TIMER_COUNTER0_stop;
	return timer0;
    19e2:	86 e9       	ldi	r24, 0x96	; 150
    19e4:	98 e0       	ldi	r25, 0x08	; 8
    19e6:	f8 01       	movw	r30, r16
    19e8:	91 83       	std	Z+1, r25	; 0x01
    19ea:	80 83       	st	Z, r24
    19ec:	8d ec       	ldi	r24, 0xCD	; 205
    19ee:	98 e0       	ldi	r25, 0x08	; 8
    19f0:	97 83       	std	Z+7, r25	; 0x07
    19f2:	86 83       	std	Z+6, r24	; 0x06
    19f4:	8c e2       	ldi	r24, 0x2C	; 44
    19f6:	98 e0       	ldi	r25, 0x08	; 8
    19f8:	95 87       	std	Z+13, r25	; 0x0d
    19fa:	84 87       	std	Z+12, r24	; 0x0c
    19fc:	83 ed       	ldi	r24, 0xD3	; 211
    19fe:	98 e0       	ldi	r25, 0x08	; 8
    1a00:	97 87       	std	Z+15, r25	; 0x0f
    1a02:	86 87       	std	Z+14, r24	; 0x0e
}
    1a04:	c8 01       	movw	r24, r16
    1a06:	c0 5b       	subi	r28, 0xB0	; 176
    1a08:	df 4f       	sbci	r29, 0xFF	; 255
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	de bf       	out	0x3e, r29	; 62
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	cd bf       	out	0x3d, r28	; 61
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	1f 91       	pop	r17
    1a1a:	0f 91       	pop	r16
    1a1c:	ff 90       	pop	r15
    1a1e:	ef 90       	pop	r14
    1a20:	08 95       	ret

00001a22 <TIMER_COUNTER1enable>:
// wavegen mode: Normal; PWM, Phase Correct, 8-bit; PWM, Phase Correct, 9-bit; PWM, Phase Correct, 10-bit;
// CTC; Fast PWM, 8-bit; Fast PWM, 9-bit; Fast PWM, 10-bit; PWM, Phase and Frequency Correct; PWM, Phase and Frequency Correct;
// PWM, Phase Correct; PWM, Phase Correct; CTC; (Reserved); Fast PWM; Fast PWM.
// interrupt: off; overflow; output compare; both; default - non.
// for more information read data sheet.
{
    1a22:	cf 92       	push	r12
    1a24:	df 92       	push	r13
    1a26:	ef 92       	push	r14
    1a28:	ff 92       	push	r15
    1a2a:	0f 93       	push	r16
    1a2c:	1f 93       	push	r17
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	c0 55       	subi	r28, 0x50	; 80
    1a38:	d1 09       	sbc	r29, r1
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	cd bf       	out	0x3d, r28	; 61
    1a44:	8c 01       	movw	r16, r24
    1a46:	e6 2e       	mov	r14, r22
    1a48:	f4 2e       	mov	r15, r20
	TIMER_COUNTER1 timer1;
	m = ATMEGA128enable(); // Dependency
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	01 96       	adiw	r24, 0x01	; 1
    1a4e:	91 d8       	rcall	.-3806   	; 0xb72 <ATMEGA128enable>
    1a50:	80 e5       	ldi	r24, 0x50	; 80
    1a52:	fe 01       	movw	r30, r28
    1a54:	31 96       	adiw	r30, 0x01	; 1
    1a56:	a6 e2       	ldi	r26, 0x26	; 38
    1a58:	b2 e0       	ldi	r27, 0x02	; 2
    1a5a:	01 90       	ld	r0, Z+
    1a5c:	0d 92       	st	X+, r0
    1a5e:	8a 95       	dec	r24
    1a60:	e1 f7       	brne	.-8      	; 0x1a5a <TIMER_COUNTER1enable+0x38>

	timer1_state = 0;
    1a62:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <timer1_state>
	m.tc1.reg->tccr1a &= ~((1 << WGM11) | (1 << WGM10));
    1a66:	e6 e2       	ldi	r30, 0x26	; 38
    1a68:	f2 e0       	ldi	r31, 0x02	; 2
    1a6a:	a0 a5       	ldd	r26, Z+40	; 0x28
    1a6c:	b1 a5       	ldd	r27, Z+41	; 0x29
    1a6e:	1f 96       	adiw	r26, 0x0f	; 15
    1a70:	8c 91       	ld	r24, X
    1a72:	1f 97       	sbiw	r26, 0x0f	; 15
    1a74:	8c 7f       	andi	r24, 0xFC	; 252
    1a76:	1f 96       	adiw	r26, 0x0f	; 15
    1a78:	8c 93       	st	X, r24
	m.tc1.reg->tccr1b &= ~((1 << WGM13) | (1 << WGM12));
    1a7a:	00 a4       	ldd	r0, Z+40	; 0x28
    1a7c:	f1 a5       	ldd	r31, Z+41	; 0x29
    1a7e:	e0 2d       	mov	r30, r0
    1a80:	86 85       	ldd	r24, Z+14	; 0x0e
    1a82:	87 7e       	andi	r24, 0xE7	; 231
    1a84:	86 87       	std	Z+14, r24	; 0x0e
	switch(wavegenmode){ // TOP -- Update of OCRnX at -- TOV Flag Set on
    1a86:	8e 2d       	mov	r24, r14
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	fc 01       	movw	r30, r24
    1a8c:	31 97       	sbiw	r30, 0x01	; 1
    1a8e:	ef 30       	cpi	r30, 0x0F	; 15
    1a90:	f1 05       	cpc	r31, r1
    1a92:	08 f0       	brcs	.+2      	; 0x1a96 <TIMER_COUNTER1enable+0x74>
    1a94:	cc c0       	rjmp	.+408    	; 0x1c2e <TIMER_COUNTER1enable+0x20c>
    1a96:	e2 5a       	subi	r30, 0xA2	; 162
    1a98:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9a:	0c 94 85 2d 	jmp	0x5b0a	; 0x5b0a <__tablejump2__>
		case 0: // Normal, 0xFFFF -- Immediate -- MAX
		break;
		case 1: // PWM Phase Correct 8-bit, 0x00FF -- TOP -- BOTTOM
			m.tc1.reg->tccr1a |= (1 << WGM10);
    1a9e:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <m+0x28>
    1aa2:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <m+0x29>
    1aa6:	87 85       	ldd	r24, Z+15	; 0x0f
    1aa8:	81 60       	ori	r24, 0x01	; 1
    1aaa:	87 87       	std	Z+15, r24	; 0x0f
		break;
    1aac:	c0 c0       	rjmp	.+384    	; 0x1c2e <TIMER_COUNTER1enable+0x20c>
		case 2:	// PWM Phase Correct 9-bit, 0x01FF -- TOP -- BOTTOM
			m.tc1.reg->tccr1a |= (1 << WGM11);
    1aae:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <m+0x28>
    1ab2:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <m+0x29>
    1ab6:	87 85       	ldd	r24, Z+15	; 0x0f
    1ab8:	82 60       	ori	r24, 0x02	; 2
    1aba:	87 87       	std	Z+15, r24	; 0x0f
		break;
    1abc:	b8 c0       	rjmp	.+368    	; 0x1c2e <TIMER_COUNTER1enable+0x20c>
		case 3:	// PWM Phase Correct 10-bit, 0x03FF -- TOP -- BOTTOM
			m.tc1.reg->tccr1a |= (1 << WGM11) | (1 << WGM10);
    1abe:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <m+0x28>
    1ac2:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <m+0x29>
    1ac6:	87 85       	ldd	r24, Z+15	; 0x0f
    1ac8:	83 60       	ori	r24, 0x03	; 3
    1aca:	87 87       	std	Z+15, r24	; 0x0f
		break;
    1acc:	b0 c0       	rjmp	.+352    	; 0x1c2e <TIMER_COUNTER1enable+0x20c>
		case 4:	// CTC, OCRnA Immediate MAX
			m.tc1.reg->tccr1b |= (1 << WGM12);
    1ace:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <m+0x28>
    1ad2:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <m+0x29>
    1ad6:	86 85       	ldd	r24, Z+14	; 0x0e
    1ad8:	88 60       	ori	r24, 0x08	; 8
    1ada:	86 87       	std	Z+14, r24	; 0x0e
		break;
    1adc:	a8 c0       	rjmp	.+336    	; 0x1c2e <TIMER_COUNTER1enable+0x20c>
		case 5:	// Fast PWM 8-bit, 0x00FF -- BOTTOM -- TOP
			m.tc1.reg->tccr1a |= (1 << WGM10);
    1ade:	e6 e2       	ldi	r30, 0x26	; 38
    1ae0:	f2 e0       	ldi	r31, 0x02	; 2
    1ae2:	a0 a5       	ldd	r26, Z+40	; 0x28
    1ae4:	b1 a5       	ldd	r27, Z+41	; 0x29
    1ae6:	1f 96       	adiw	r26, 0x0f	; 15
    1ae8:	8c 91       	ld	r24, X
    1aea:	1f 97       	sbiw	r26, 0x0f	; 15
    1aec:	81 60       	ori	r24, 0x01	; 1
    1aee:	1f 96       	adiw	r26, 0x0f	; 15
    1af0:	8c 93       	st	X, r24
			m.tc1.reg->tccr1b |= (1 << WGM12);
    1af2:	00 a4       	ldd	r0, Z+40	; 0x28
    1af4:	f1 a5       	ldd	r31, Z+41	; 0x29
    1af6:	e0 2d       	mov	r30, r0
    1af8:	86 85       	ldd	r24, Z+14	; 0x0e
    1afa:	88 60       	ori	r24, 0x08	; 8
    1afc:	86 87       	std	Z+14, r24	; 0x0e
		break;
    1afe:	97 c0       	rjmp	.+302    	; 0x1c2e <TIMER_COUNTER1enable+0x20c>
		case 6:	// Fast PWM 9-bit, 0x01FF -- BOTTOM -- TOP
			m.tc1.reg->tccr1a |= (1 << WGM11);
    1b00:	e6 e2       	ldi	r30, 0x26	; 38
    1b02:	f2 e0       	ldi	r31, 0x02	; 2
    1b04:	a0 a5       	ldd	r26, Z+40	; 0x28
    1b06:	b1 a5       	ldd	r27, Z+41	; 0x29
    1b08:	1f 96       	adiw	r26, 0x0f	; 15
    1b0a:	8c 91       	ld	r24, X
    1b0c:	1f 97       	sbiw	r26, 0x0f	; 15
    1b0e:	82 60       	ori	r24, 0x02	; 2
    1b10:	1f 96       	adiw	r26, 0x0f	; 15
    1b12:	8c 93       	st	X, r24
			m.tc1.reg->tccr1b |= (1 << WGM12);
    1b14:	00 a4       	ldd	r0, Z+40	; 0x28
    1b16:	f1 a5       	ldd	r31, Z+41	; 0x29
    1b18:	e0 2d       	mov	r30, r0
    1b1a:	86 85       	ldd	r24, Z+14	; 0x0e
    1b1c:	88 60       	ori	r24, 0x08	; 8
    1b1e:	86 87       	std	Z+14, r24	; 0x0e
		break;
    1b20:	86 c0       	rjmp	.+268    	; 0x1c2e <TIMER_COUNTER1enable+0x20c>
		case 7:	// Fast PWM 10-bit, 0x03FF -- BOTTOM -- TOP
			m.tc1.reg->tccr1a |= (1 << WGM11) | (1 << WGM10);
    1b22:	e6 e2       	ldi	r30, 0x26	; 38
    1b24:	f2 e0       	ldi	r31, 0x02	; 2
    1b26:	a0 a5       	ldd	r26, Z+40	; 0x28
    1b28:	b1 a5       	ldd	r27, Z+41	; 0x29
    1b2a:	1f 96       	adiw	r26, 0x0f	; 15
    1b2c:	8c 91       	ld	r24, X
    1b2e:	1f 97       	sbiw	r26, 0x0f	; 15
    1b30:	83 60       	ori	r24, 0x03	; 3
    1b32:	1f 96       	adiw	r26, 0x0f	; 15
    1b34:	8c 93       	st	X, r24
			m.tc1.reg->tccr1b |=(1 << WGM12);
    1b36:	00 a4       	ldd	r0, Z+40	; 0x28
    1b38:	f1 a5       	ldd	r31, Z+41	; 0x29
    1b3a:	e0 2d       	mov	r30, r0
    1b3c:	86 85       	ldd	r24, Z+14	; 0x0e
    1b3e:	88 60       	ori	r24, 0x08	; 8
    1b40:	86 87       	std	Z+14, r24	; 0x0e
		break;
    1b42:	75 c0       	rjmp	.+234    	; 0x1c2e <TIMER_COUNTER1enable+0x20c>
		case 8:	// PWM Phase and Frequency Correct, ICRnA -- BOTTOM -- BOTTOM
			m.tc1.reg->tccr1b |= (1 << WGM13);
    1b44:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <m+0x28>
    1b48:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <m+0x29>
    1b4c:	86 85       	ldd	r24, Z+14	; 0x0e
    1b4e:	80 61       	ori	r24, 0x10	; 16
    1b50:	86 87       	std	Z+14, r24	; 0x0e
		break;
    1b52:	6d c0       	rjmp	.+218    	; 0x1c2e <TIMER_COUNTER1enable+0x20c>
		case 9:	// PWM Phase and Frequency Correct, OCRnA -- BOTTOM -- BOTTOM
			m.tc1.reg->tccr1a |= (1 << WGM10);
    1b54:	e6 e2       	ldi	r30, 0x26	; 38
    1b56:	f2 e0       	ldi	r31, 0x02	; 2
    1b58:	a0 a5       	ldd	r26, Z+40	; 0x28
    1b5a:	b1 a5       	ldd	r27, Z+41	; 0x29
    1b5c:	1f 96       	adiw	r26, 0x0f	; 15
    1b5e:	8c 91       	ld	r24, X
    1b60:	1f 97       	sbiw	r26, 0x0f	; 15
    1b62:	81 60       	ori	r24, 0x01	; 1
    1b64:	1f 96       	adiw	r26, 0x0f	; 15
    1b66:	8c 93       	st	X, r24
			m.tc1.reg->tccr1b |= (1 << WGM13);
    1b68:	00 a4       	ldd	r0, Z+40	; 0x28
    1b6a:	f1 a5       	ldd	r31, Z+41	; 0x29
    1b6c:	e0 2d       	mov	r30, r0
    1b6e:	86 85       	ldd	r24, Z+14	; 0x0e
    1b70:	80 61       	ori	r24, 0x10	; 16
    1b72:	86 87       	std	Z+14, r24	; 0x0e
		break;
    1b74:	5c c0       	rjmp	.+184    	; 0x1c2e <TIMER_COUNTER1enable+0x20c>
		case 10: // PWM Phase Correct, ICRn -- TOP -- BOTTOM
			m.tc1.reg->tccr1a |= (1 << WGM11);
    1b76:	e6 e2       	ldi	r30, 0x26	; 38
    1b78:	f2 e0       	ldi	r31, 0x02	; 2
    1b7a:	a0 a5       	ldd	r26, Z+40	; 0x28
    1b7c:	b1 a5       	ldd	r27, Z+41	; 0x29
    1b7e:	1f 96       	adiw	r26, 0x0f	; 15
    1b80:	8c 91       	ld	r24, X
    1b82:	1f 97       	sbiw	r26, 0x0f	; 15
    1b84:	82 60       	ori	r24, 0x02	; 2
    1b86:	1f 96       	adiw	r26, 0x0f	; 15
    1b88:	8c 93       	st	X, r24
			m.tc1.reg->tccr1b |= (1 << WGM13);
    1b8a:	00 a4       	ldd	r0, Z+40	; 0x28
    1b8c:	f1 a5       	ldd	r31, Z+41	; 0x29
    1b8e:	e0 2d       	mov	r30, r0
    1b90:	86 85       	ldd	r24, Z+14	; 0x0e
    1b92:	80 61       	ori	r24, 0x10	; 16
    1b94:	86 87       	std	Z+14, r24	; 0x0e
		break;
    1b96:	4b c0       	rjmp	.+150    	; 0x1c2e <TIMER_COUNTER1enable+0x20c>
		case 11: // PWM Phase Correct, OCRnA -- TOP -- BOTTOM
			m.tc1.reg->tccr1a |= (1 << WGM11) | (1 << WGM10);
    1b98:	e6 e2       	ldi	r30, 0x26	; 38
    1b9a:	f2 e0       	ldi	r31, 0x02	; 2
    1b9c:	a0 a5       	ldd	r26, Z+40	; 0x28
    1b9e:	b1 a5       	ldd	r27, Z+41	; 0x29
    1ba0:	1f 96       	adiw	r26, 0x0f	; 15
    1ba2:	8c 91       	ld	r24, X
    1ba4:	1f 97       	sbiw	r26, 0x0f	; 15
    1ba6:	83 60       	ori	r24, 0x03	; 3
    1ba8:	1f 96       	adiw	r26, 0x0f	; 15
    1baa:	8c 93       	st	X, r24
			m.tc1.reg->tccr1b |= (1 << WGM13);
    1bac:	00 a4       	ldd	r0, Z+40	; 0x28
    1bae:	f1 a5       	ldd	r31, Z+41	; 0x29
    1bb0:	e0 2d       	mov	r30, r0
    1bb2:	86 85       	ldd	r24, Z+14	; 0x0e
    1bb4:	80 61       	ori	r24, 0x10	; 16
    1bb6:	86 87       	std	Z+14, r24	; 0x0e
		break;
    1bb8:	3a c0       	rjmp	.+116    	; 0x1c2e <TIMER_COUNTER1enable+0x20c>
		case 12: // CTC, ICRn -- Immediate -- MAX
			m.tc1.reg->tccr1b |= (1 << WGM13) | (1 << WGM12);
    1bba:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <m+0x28>
    1bbe:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <m+0x29>
    1bc2:	86 85       	ldd	r24, Z+14	; 0x0e
    1bc4:	88 61       	ori	r24, 0x18	; 24
    1bc6:	86 87       	std	Z+14, r24	; 0x0e
		break;
    1bc8:	32 c0       	rjmp	.+100    	; 0x1c2e <TIMER_COUNTER1enable+0x20c>
		case 13: // (Reserved), -- -- --
			m.tc1.reg->tccr1a |= (1 << WGM10);
    1bca:	e6 e2       	ldi	r30, 0x26	; 38
    1bcc:	f2 e0       	ldi	r31, 0x02	; 2
    1bce:	a0 a5       	ldd	r26, Z+40	; 0x28
    1bd0:	b1 a5       	ldd	r27, Z+41	; 0x29
    1bd2:	1f 96       	adiw	r26, 0x0f	; 15
    1bd4:	8c 91       	ld	r24, X
    1bd6:	1f 97       	sbiw	r26, 0x0f	; 15
    1bd8:	81 60       	ori	r24, 0x01	; 1
    1bda:	1f 96       	adiw	r26, 0x0f	; 15
    1bdc:	8c 93       	st	X, r24
			m.tc1.reg->tccr1b |= (1 << WGM13) | (1 << WGM12);
    1bde:	00 a4       	ldd	r0, Z+40	; 0x28
    1be0:	f1 a5       	ldd	r31, Z+41	; 0x29
    1be2:	e0 2d       	mov	r30, r0
    1be4:	86 85       	ldd	r24, Z+14	; 0x0e
    1be6:	88 61       	ori	r24, 0x18	; 24
    1be8:	86 87       	std	Z+14, r24	; 0x0e
		break;
    1bea:	21 c0       	rjmp	.+66     	; 0x1c2e <TIMER_COUNTER1enable+0x20c>
		case 14: // Fast PWM, ICRn -- BOTTOM -- TOP
			m.tc1.reg->tccr1a |= (1 << WGM11);
    1bec:	e6 e2       	ldi	r30, 0x26	; 38
    1bee:	f2 e0       	ldi	r31, 0x02	; 2
    1bf0:	a0 a5       	ldd	r26, Z+40	; 0x28
    1bf2:	b1 a5       	ldd	r27, Z+41	; 0x29
    1bf4:	1f 96       	adiw	r26, 0x0f	; 15
    1bf6:	8c 91       	ld	r24, X
    1bf8:	1f 97       	sbiw	r26, 0x0f	; 15
    1bfa:	82 60       	ori	r24, 0x02	; 2
    1bfc:	1f 96       	adiw	r26, 0x0f	; 15
    1bfe:	8c 93       	st	X, r24
			m.tc1.reg->tccr1b |= (1 << WGM13) | (1 << WGM12);
    1c00:	00 a4       	ldd	r0, Z+40	; 0x28
    1c02:	f1 a5       	ldd	r31, Z+41	; 0x29
    1c04:	e0 2d       	mov	r30, r0
    1c06:	86 85       	ldd	r24, Z+14	; 0x0e
    1c08:	88 61       	ori	r24, 0x18	; 24
    1c0a:	86 87       	std	Z+14, r24	; 0x0e
		break;
    1c0c:	10 c0       	rjmp	.+32     	; 0x1c2e <TIMER_COUNTER1enable+0x20c>
		case 15: // Fast PWM, OCRnA -- BOTTOM -- TOP
			m.tc1.reg->tccr1a |= (1 << WGM11) | (1 << WGM10);
    1c0e:	e6 e2       	ldi	r30, 0x26	; 38
    1c10:	f2 e0       	ldi	r31, 0x02	; 2
    1c12:	a0 a5       	ldd	r26, Z+40	; 0x28
    1c14:	b1 a5       	ldd	r27, Z+41	; 0x29
    1c16:	1f 96       	adiw	r26, 0x0f	; 15
    1c18:	8c 91       	ld	r24, X
    1c1a:	1f 97       	sbiw	r26, 0x0f	; 15
    1c1c:	83 60       	ori	r24, 0x03	; 3
    1c1e:	1f 96       	adiw	r26, 0x0f	; 15
    1c20:	8c 93       	st	X, r24
			m.tc1.reg->tccr1b |= (1 << WGM13) | (1 << WGM12);
    1c22:	00 a4       	ldd	r0, Z+40	; 0x28
    1c24:	f1 a5       	ldd	r31, Z+41	; 0x29
    1c26:	e0 2d       	mov	r30, r0
    1c28:	86 85       	ldd	r24, Z+14	; 0x0e
    1c2a:	88 61       	ori	r24, 0x18	; 24
    1c2c:	86 87       	std	Z+14, r24	; 0x0e
		break;
		default:
		break;
	}
	m.tc1.reg->tccr1a &= ~((3 << COM1A0) | (3 << COM1B0) | (3 << COM1C0));
    1c2e:	e6 e2       	ldi	r30, 0x26	; 38
    1c30:	f2 e0       	ldi	r31, 0x02	; 2
    1c32:	a0 a5       	ldd	r26, Z+40	; 0x28
    1c34:	b1 a5       	ldd	r27, Z+41	; 0x29
    1c36:	1f 96       	adiw	r26, 0x0f	; 15
    1c38:	8c 91       	ld	r24, X
    1c3a:	1f 97       	sbiw	r26, 0x0f	; 15
    1c3c:	83 70       	andi	r24, 0x03	; 3
    1c3e:	1f 96       	adiw	r26, 0x0f	; 15
    1c40:	8c 93       	st	X, r24
	m.tc1.reg->timsk &= ~((1 << TICIE1) | (1 << OCIE1A) | (1 << OCIE1B) | (1 << TOIE1));
    1c42:	a0 a5       	ldd	r26, Z+40	; 0x28
    1c44:	b1 a5       	ldd	r27, Z+41	; 0x29
    1c46:	57 96       	adiw	r26, 0x17	; 23
    1c48:	8c 91       	ld	r24, X
    1c4a:	57 97       	sbiw	r26, 0x17	; 23
    1c4c:	83 7c       	andi	r24, 0xC3	; 195
    1c4e:	57 96       	adiw	r26, 0x17	; 23
    1c50:	8c 93       	st	X, r24
	m.tc1.reg->etimsk &= ~(1 << OCIE1C);
    1c52:	a0 a5       	ldd	r26, Z+40	; 0x28
    1c54:	b1 a5       	ldd	r27, Z+41	; 0x29
    1c56:	dd 96       	adiw	r26, 0x3d	; 61
    1c58:	8c 91       	ld	r24, X
    1c5a:	dd 97       	sbiw	r26, 0x3d	; 61
    1c5c:	8e 7f       	andi	r24, 0xFE	; 254
    1c5e:	dd 96       	adiw	r26, 0x3d	; 61
    1c60:	8c 93       	st	X, r24
    1c62:	dd 97       	sbiw	r26, 0x3d	; 61
	switch(interrupt){ // ICP1  -->  PD4
    1c64:	4f 2d       	mov	r20, r15
    1c66:	50 e0       	ldi	r21, 0x00	; 0
    1c68:	fa 01       	movw	r30, r20
    1c6a:	31 97       	sbiw	r30, 0x01	; 1
    1c6c:	ec 30       	cpi	r30, 0x0C	; 12
    1c6e:	f1 05       	cpc	r31, r1
    1c70:	08 f0       	brcs	.+2      	; 0x1c74 <TIMER_COUNTER1enable+0x252>
    1c72:	c3 c0       	rjmp	.+390    	; 0x1dfa <TIMER_COUNTER1enable+0x3d8>
    1c74:	e3 59       	subi	r30, 0x93	; 147
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	0c 94 85 2d 	jmp	0x5b0a	; 0x5b0a <__tablejump2__>
		case 0:
		break;
		case 1:
			m.tc1.reg->timsk |= (1 << TOIE1);
    1c7c:	57 96       	adiw	r26, 0x17	; 23
    1c7e:	8c 91       	ld	r24, X
    1c80:	57 97       	sbiw	r26, 0x17	; 23
    1c82:	84 60       	ori	r24, 0x04	; 4
    1c84:	57 96       	adiw	r26, 0x17	; 23
    1c86:	8c 93       	st	X, r24
			m.cpu.reg->sreg |= 1 << GLOBAL_INTERRUPT_ENABLE;
    1c88:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <m+0xa>
    1c8c:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <m+0xb>
    1c90:	83 85       	ldd	r24, Z+11	; 0x0b
    1c92:	80 68       	ori	r24, 0x80	; 128
    1c94:	83 87       	std	Z+11, r24	; 0x0b
		break;
    1c96:	b1 c0       	rjmp	.+354    	; 0x1dfa <TIMER_COUNTER1enable+0x3d8>
		case 2:
			m.tc1.reg->timsk |= (1 << OCIE1A);
    1c98:	57 96       	adiw	r26, 0x17	; 23
    1c9a:	8c 91       	ld	r24, X
    1c9c:	57 97       	sbiw	r26, 0x17	; 23
    1c9e:	80 61       	ori	r24, 0x10	; 16
    1ca0:	57 96       	adiw	r26, 0x17	; 23
    1ca2:	8c 93       	st	X, r24
			m.cpu.reg->sreg |= 1 << GLOBAL_INTERRUPT_ENABLE;
    1ca4:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <m+0xa>
    1ca8:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <m+0xb>
    1cac:	83 85       	ldd	r24, Z+11	; 0x0b
    1cae:	80 68       	ori	r24, 0x80	; 128
    1cb0:	83 87       	std	Z+11, r24	; 0x0b
		break;
    1cb2:	a3 c0       	rjmp	.+326    	; 0x1dfa <TIMER_COUNTER1enable+0x3d8>
		case 3:
			m.tc1.reg->timsk |= (1 << OCIE1B);
    1cb4:	57 96       	adiw	r26, 0x17	; 23
    1cb6:	8c 91       	ld	r24, X
    1cb8:	57 97       	sbiw	r26, 0x17	; 23
    1cba:	88 60       	ori	r24, 0x08	; 8
    1cbc:	57 96       	adiw	r26, 0x17	; 23
    1cbe:	8c 93       	st	X, r24
			m.cpu.reg->sreg |= 1 << GLOBAL_INTERRUPT_ENABLE;
    1cc0:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <m+0xa>
    1cc4:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <m+0xb>
    1cc8:	83 85       	ldd	r24, Z+11	; 0x0b
    1cca:	80 68       	ori	r24, 0x80	; 128
    1ccc:	83 87       	std	Z+11, r24	; 0x0b
		break;
    1cce:	95 c0       	rjmp	.+298    	; 0x1dfa <TIMER_COUNTER1enable+0x3d8>
		case 4:
			m.tc1.reg->etimsk |= (1 << OCIE1C);
    1cd0:	81 60       	ori	r24, 0x01	; 1
    1cd2:	dd 96       	adiw	r26, 0x3d	; 61
    1cd4:	8c 93       	st	X, r24
			m.cpu.reg->sreg |= 1 << GLOBAL_INTERRUPT_ENABLE;
    1cd6:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <m+0xa>
    1cda:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <m+0xb>
    1cde:	83 85       	ldd	r24, Z+11	; 0x0b
    1ce0:	80 68       	ori	r24, 0x80	; 128
    1ce2:	83 87       	std	Z+11, r24	; 0x0b
		break;
    1ce4:	8a c0       	rjmp	.+276    	; 0x1dfa <TIMER_COUNTER1enable+0x3d8>
		case 5:
			m.tc1.reg->timsk |= (1 << TICIE1);
    1ce6:	57 96       	adiw	r26, 0x17	; 23
    1ce8:	8c 91       	ld	r24, X
    1cea:	57 97       	sbiw	r26, 0x17	; 23
    1cec:	80 62       	ori	r24, 0x20	; 32
    1cee:	57 96       	adiw	r26, 0x17	; 23
    1cf0:	8c 93       	st	X, r24
			m.cpu.reg->sreg |= 1 << GLOBAL_INTERRUPT_ENABLE;
    1cf2:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <m+0xa>
    1cf6:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <m+0xb>
    1cfa:	83 85       	ldd	r24, Z+11	; 0x0b
    1cfc:	80 68       	ori	r24, 0x80	; 128
    1cfe:	83 87       	std	Z+11, r24	; 0x0b
		break;
    1d00:	7c c0       	rjmp	.+248    	; 0x1dfa <TIMER_COUNTER1enable+0x3d8>
		case 6:
			m.tc1.reg->timsk |= (1 << OCIE1A) | (1 << TOIE1);
    1d02:	57 96       	adiw	r26, 0x17	; 23
    1d04:	8c 91       	ld	r24, X
    1d06:	57 97       	sbiw	r26, 0x17	; 23
    1d08:	84 61       	ori	r24, 0x14	; 20
    1d0a:	57 96       	adiw	r26, 0x17	; 23
    1d0c:	8c 93       	st	X, r24
			m.cpu.reg->sreg |= 1 << GLOBAL_INTERRUPT_ENABLE;
    1d0e:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <m+0xa>
    1d12:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <m+0xb>
    1d16:	83 85       	ldd	r24, Z+11	; 0x0b
    1d18:	80 68       	ori	r24, 0x80	; 128
    1d1a:	83 87       	std	Z+11, r24	; 0x0b
		break;
    1d1c:	6e c0       	rjmp	.+220    	; 0x1dfa <TIMER_COUNTER1enable+0x3d8>
		case 7:
			m.tc1.reg->timsk |= (1 << OCIE1B) | (1 << TOIE1);
    1d1e:	57 96       	adiw	r26, 0x17	; 23
    1d20:	8c 91       	ld	r24, X
    1d22:	57 97       	sbiw	r26, 0x17	; 23
    1d24:	8c 60       	ori	r24, 0x0C	; 12
    1d26:	57 96       	adiw	r26, 0x17	; 23
    1d28:	8c 93       	st	X, r24
			m.cpu.reg->sreg |= 1 << GLOBAL_INTERRUPT_ENABLE;
    1d2a:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <m+0xa>
    1d2e:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <m+0xb>
    1d32:	83 85       	ldd	r24, Z+11	; 0x0b
    1d34:	80 68       	ori	r24, 0x80	; 128
    1d36:	83 87       	std	Z+11, r24	; 0x0b
		break;
    1d38:	60 c0       	rjmp	.+192    	; 0x1dfa <TIMER_COUNTER1enable+0x3d8>
		case 8:
			m.tc1.reg->timsk |= (1 << TOIE1);
    1d3a:	57 96       	adiw	r26, 0x17	; 23
    1d3c:	8c 91       	ld	r24, X
    1d3e:	57 97       	sbiw	r26, 0x17	; 23
    1d40:	84 60       	ori	r24, 0x04	; 4
    1d42:	57 96       	adiw	r26, 0x17	; 23
    1d44:	8c 93       	st	X, r24
			m.tc1.reg->etimsk |= (1 << OCIE1C);
    1d46:	e6 e2       	ldi	r30, 0x26	; 38
    1d48:	f2 e0       	ldi	r31, 0x02	; 2
    1d4a:	a0 a5       	ldd	r26, Z+40	; 0x28
    1d4c:	b1 a5       	ldd	r27, Z+41	; 0x29
    1d4e:	dd 96       	adiw	r26, 0x3d	; 61
    1d50:	8c 91       	ld	r24, X
    1d52:	dd 97       	sbiw	r26, 0x3d	; 61
    1d54:	81 60       	ori	r24, 0x01	; 1
    1d56:	dd 96       	adiw	r26, 0x3d	; 61
    1d58:	8c 93       	st	X, r24
			m.cpu.reg->sreg |= 1 << GLOBAL_INTERRUPT_ENABLE;
    1d5a:	02 84       	ldd	r0, Z+10	; 0x0a
    1d5c:	f3 85       	ldd	r31, Z+11	; 0x0b
    1d5e:	e0 2d       	mov	r30, r0
    1d60:	83 85       	ldd	r24, Z+11	; 0x0b
    1d62:	80 68       	ori	r24, 0x80	; 128
    1d64:	83 87       	std	Z+11, r24	; 0x0b
		break;
    1d66:	49 c0       	rjmp	.+146    	; 0x1dfa <TIMER_COUNTER1enable+0x3d8>
		case 9:
			m.tc1.reg->timsk |= (1 << TICIE1) | (1 << TOIE1);
    1d68:	57 96       	adiw	r26, 0x17	; 23
    1d6a:	8c 91       	ld	r24, X
    1d6c:	57 97       	sbiw	r26, 0x17	; 23
    1d6e:	84 62       	ori	r24, 0x24	; 36
    1d70:	57 96       	adiw	r26, 0x17	; 23
    1d72:	8c 93       	st	X, r24
			m.cpu.reg->sreg |= 1 << GLOBAL_INTERRUPT_ENABLE;
    1d74:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <m+0xa>
    1d78:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <m+0xb>
    1d7c:	83 85       	ldd	r24, Z+11	; 0x0b
    1d7e:	80 68       	ori	r24, 0x80	; 128
    1d80:	83 87       	std	Z+11, r24	; 0x0b
		break;
    1d82:	3b c0       	rjmp	.+118    	; 0x1dfa <TIMER_COUNTER1enable+0x3d8>
		case 10:
			m.tc1.reg->timsk |= (1 << OCIE1A) | (1 << OCIE1B) | (1 << TOIE1);
    1d84:	57 96       	adiw	r26, 0x17	; 23
    1d86:	8c 91       	ld	r24, X
    1d88:	57 97       	sbiw	r26, 0x17	; 23
    1d8a:	8c 61       	ori	r24, 0x1C	; 28
    1d8c:	57 96       	adiw	r26, 0x17	; 23
    1d8e:	8c 93       	st	X, r24
			m.cpu.reg->sreg |= 1 << GLOBAL_INTERRUPT_ENABLE;
    1d90:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <m+0xa>
    1d94:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <m+0xb>
    1d98:	83 85       	ldd	r24, Z+11	; 0x0b
    1d9a:	80 68       	ori	r24, 0x80	; 128
    1d9c:	83 87       	std	Z+11, r24	; 0x0b
		break;
    1d9e:	2d c0       	rjmp	.+90     	; 0x1dfa <TIMER_COUNTER1enable+0x3d8>
		case 11:
			m.tc1.reg->timsk |= (1 << OCIE1A) | (1 << OCIE1B) | (1 << TOIE1);
    1da0:	57 96       	adiw	r26, 0x17	; 23
    1da2:	8c 91       	ld	r24, X
    1da4:	57 97       	sbiw	r26, 0x17	; 23
    1da6:	8c 61       	ori	r24, 0x1C	; 28
    1da8:	57 96       	adiw	r26, 0x17	; 23
    1daa:	8c 93       	st	X, r24
			m.tc1.reg->etimsk |= (1 << OCIE1C);
    1dac:	e6 e2       	ldi	r30, 0x26	; 38
    1dae:	f2 e0       	ldi	r31, 0x02	; 2
    1db0:	a0 a5       	ldd	r26, Z+40	; 0x28
    1db2:	b1 a5       	ldd	r27, Z+41	; 0x29
    1db4:	dd 96       	adiw	r26, 0x3d	; 61
    1db6:	8c 91       	ld	r24, X
    1db8:	dd 97       	sbiw	r26, 0x3d	; 61
    1dba:	81 60       	ori	r24, 0x01	; 1
    1dbc:	dd 96       	adiw	r26, 0x3d	; 61
    1dbe:	8c 93       	st	X, r24
			m.cpu.reg->sreg |= 1 << GLOBAL_INTERRUPT_ENABLE;
    1dc0:	02 84       	ldd	r0, Z+10	; 0x0a
    1dc2:	f3 85       	ldd	r31, Z+11	; 0x0b
    1dc4:	e0 2d       	mov	r30, r0
    1dc6:	83 85       	ldd	r24, Z+11	; 0x0b
    1dc8:	80 68       	ori	r24, 0x80	; 128
    1dca:	83 87       	std	Z+11, r24	; 0x0b
		break;
    1dcc:	16 c0       	rjmp	.+44     	; 0x1dfa <TIMER_COUNTER1enable+0x3d8>
		case 12:
			m.tc1.reg->timsk |= (1 << OCIE1A) | (1 << OCIE1B);
    1dce:	57 96       	adiw	r26, 0x17	; 23
    1dd0:	8c 91       	ld	r24, X
    1dd2:	57 97       	sbiw	r26, 0x17	; 23
    1dd4:	88 61       	ori	r24, 0x18	; 24
    1dd6:	57 96       	adiw	r26, 0x17	; 23
    1dd8:	8c 93       	st	X, r24
			m.tc1.reg->etimsk |= (1 << OCIE1C);
    1dda:	e6 e2       	ldi	r30, 0x26	; 38
    1ddc:	f2 e0       	ldi	r31, 0x02	; 2
    1dde:	a0 a5       	ldd	r26, Z+40	; 0x28
    1de0:	b1 a5       	ldd	r27, Z+41	; 0x29
    1de2:	dd 96       	adiw	r26, 0x3d	; 61
    1de4:	8c 91       	ld	r24, X
    1de6:	dd 97       	sbiw	r26, 0x3d	; 61
    1de8:	81 60       	ori	r24, 0x01	; 1
    1dea:	dd 96       	adiw	r26, 0x3d	; 61
    1dec:	8c 93       	st	X, r24
			m.cpu.reg->sreg |= 1 << GLOBAL_INTERRUPT_ENABLE;
    1dee:	02 84       	ldd	r0, Z+10	; 0x0a
    1df0:	f3 85       	ldd	r31, Z+11	; 0x0b
    1df2:	e0 2d       	mov	r30, r0
    1df4:	83 85       	ldd	r24, Z+11	; 0x0b
    1df6:	80 68       	ori	r24, 0x80	; 128
    1df8:	83 87       	std	Z+11, r24	; 0x0b
		break;
		default:
		break;
	}
	m.tc1.reg->ocr1a = WriteLHByte(~0);
    1dfa:	0f 2e       	mov	r0, r31
    1dfc:	f6 e2       	ldi	r31, 0x26	; 38
    1dfe:	ef 2e       	mov	r14, r31
    1e00:	f2 e0       	ldi	r31, 0x02	; 2
    1e02:	ff 2e       	mov	r15, r31
    1e04:	f0 2d       	mov	r31, r0
    1e06:	f7 01       	movw	r30, r14
    1e08:	c0 a4       	ldd	r12, Z+40	; 0x28
    1e0a:	d1 a4       	ldd	r13, Z+41	; 0x29
    1e0c:	8f ef       	ldi	r24, 0xFF	; 255
    1e0e:	9f ef       	ldi	r25, 0xFF	; 255
    1e10:	0e 94 b1 05 	call	0xb62	; 0xb62 <WriteLHByte>
    1e14:	f6 01       	movw	r30, r12
    1e16:	93 87       	std	Z+11, r25	; 0x0b
    1e18:	82 87       	std	Z+10, r24	; 0x0a
	m.tc1.reg->ocr1b = WriteLHByte(~0);
    1e1a:	f7 01       	movw	r30, r14
    1e1c:	c0 a4       	ldd	r12, Z+40	; 0x28
    1e1e:	d1 a4       	ldd	r13, Z+41	; 0x29
    1e20:	8f ef       	ldi	r24, 0xFF	; 255
    1e22:	9f ef       	ldi	r25, 0xFF	; 255
    1e24:	0e 94 b1 05 	call	0xb62	; 0xb62 <WriteLHByte>
    1e28:	f6 01       	movw	r30, r12
    1e2a:	91 87       	std	Z+9, r25	; 0x09
    1e2c:	80 87       	std	Z+8, r24	; 0x08
	m.tc1.reg->ocr1c = WriteLHByte(~0);
    1e2e:	f7 01       	movw	r30, r14
    1e30:	e0 a4       	ldd	r14, Z+40	; 0x28
    1e32:	f1 a4       	ldd	r15, Z+41	; 0x29
    1e34:	8f ef       	ldi	r24, 0xFF	; 255
    1e36:	9f ef       	ldi	r25, 0xFF	; 255
    1e38:	0e 94 b1 05 	call	0xb62	; 0xb62 <WriteLHByte>
    1e3c:	f7 01       	movw	r30, r14
    1e3e:	91 af       	std	Z+57, r25	; 0x39
    1e40:	80 af       	std	Z+56, r24	; 0x38
	timer1.compareA = TIMER_COUNTER1_compareA;
	timer1.compareB = TIMER_COUNTER1_compareB;
	timer1.compareC = TIMER_COUNTER1_compareC;
	timer1.start = TIMER_COUNTER1_start;
	timer1.stop = TIMER_COUNTER1_stop;
	return timer1;
    1e42:	86 e4       	ldi	r24, 0x46	; 70
    1e44:	99 e0       	ldi	r25, 0x09	; 9
    1e46:	f8 01       	movw	r30, r16
    1e48:	91 83       	std	Z+1, r25	; 0x01
    1e4a:	80 83       	st	Z, r24
    1e4c:	86 e8       	ldi	r24, 0x86	; 134
    1e4e:	99 e0       	ldi	r25, 0x09	; 9
    1e50:	93 83       	std	Z+3, r25	; 0x03
    1e52:	82 83       	std	Z+2, r24	; 0x02
    1e54:	86 ec       	ldi	r24, 0xC6	; 198
    1e56:	99 e0       	ldi	r25, 0x09	; 9
    1e58:	95 83       	std	Z+5, r25	; 0x05
    1e5a:	84 83       	std	Z+4, r24	; 0x04
    1e5c:	8b e0       	ldi	r24, 0x0B	; 11
    1e5e:	9c e0       	ldi	r25, 0x0C	; 12
    1e60:	97 83       	std	Z+7, r25	; 0x07
    1e62:	86 83       	std	Z+6, r24	; 0x06
    1e64:	87 e1       	ldi	r24, 0x17	; 23
    1e66:	9c e0       	ldi	r25, 0x0C	; 12
    1e68:	91 87       	std	Z+9, r25	; 0x09
    1e6a:	80 87       	std	Z+8, r24	; 0x08
    1e6c:	83 e2       	ldi	r24, 0x23	; 35
    1e6e:	9c e0       	ldi	r25, 0x0C	; 12
    1e70:	93 87       	std	Z+11, r25	; 0x0b
    1e72:	82 87       	std	Z+10, r24	; 0x0a
    1e74:	8e ed       	ldi	r24, 0xDE	; 222
    1e76:	98 e0       	ldi	r25, 0x08	; 8
    1e78:	95 87       	std	Z+13, r25	; 0x0d
    1e7a:	84 87       	std	Z+12, r24	; 0x0c
    1e7c:	86 e0       	ldi	r24, 0x06	; 6
    1e7e:	9a e0       	ldi	r25, 0x0A	; 10
    1e80:	97 87       	std	Z+15, r25	; 0x0f
    1e82:	86 87       	std	Z+14, r24	; 0x0e
}
    1e84:	c8 01       	movw	r24, r16
    1e86:	c0 5b       	subi	r28, 0xB0	; 176
    1e88:	df 4f       	sbci	r29, 0xFF	; 255
    1e8a:	0f b6       	in	r0, 0x3f	; 63
    1e8c:	f8 94       	cli
    1e8e:	de bf       	out	0x3e, r29	; 62
    1e90:	0f be       	out	0x3f, r0	; 63
    1e92:	cd bf       	out	0x3d, r28	; 61
    1e94:	df 91       	pop	r29
    1e96:	cf 91       	pop	r28
    1e98:	1f 91       	pop	r17
    1e9a:	0f 91       	pop	r16
    1e9c:	ff 90       	pop	r15
    1e9e:	ef 90       	pop	r14
    1ea0:	df 90       	pop	r13
    1ea2:	cf 90       	pop	r12
    1ea4:	08 95       	ret

00001ea6 <TIMER_COUNTER2enable>:

TIMER_COUNTER2 TIMER_COUNTER2enable(unsigned char wavegenmode, unsigned char interrupt)
// PARAMETER SETTING
// wavegen mode: Normal; PWM phase correct; Fast PWM; default-Normasl;
// interrupt: off; overflow; output compare; both; default - non.
{
    1ea6:	ef 92       	push	r14
    1ea8:	ff 92       	push	r15
    1eaa:	0f 93       	push	r16
    1eac:	1f 93       	push	r17
    1eae:	cf 93       	push	r28
    1eb0:	df 93       	push	r29
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
    1eb6:	c0 55       	subi	r28, 0x50	; 80
    1eb8:	d1 09       	sbc	r29, r1
    1eba:	0f b6       	in	r0, 0x3f	; 63
    1ebc:	f8 94       	cli
    1ebe:	de bf       	out	0x3e, r29	; 62
    1ec0:	0f be       	out	0x3f, r0	; 63
    1ec2:	cd bf       	out	0x3d, r28	; 61
    1ec4:	8c 01       	movw	r16, r24
    1ec6:	e6 2e       	mov	r14, r22
    1ec8:	f4 2e       	mov	r15, r20
	TIMER_COUNTER2 timer2;
	m = ATMEGA128enable(); // Dependency
    1eca:	ce 01       	movw	r24, r28
    1ecc:	01 96       	adiw	r24, 0x01	; 1
    1ece:	0e 94 b9 05 	call	0xb72	; 0xb72 <ATMEGA128enable>
    1ed2:	80 e5       	ldi	r24, 0x50	; 80
    1ed4:	fe 01       	movw	r30, r28
    1ed6:	31 96       	adiw	r30, 0x01	; 1
    1ed8:	a6 e2       	ldi	r26, 0x26	; 38
    1eda:	b2 e0       	ldi	r27, 0x02	; 2
    1edc:	01 90       	ld	r0, Z+
    1ede:	0d 92       	st	X+, r0
    1ee0:	8a 95       	dec	r24
    1ee2:	e1 f7       	brne	.-8      	; 0x1edc <TIMER_COUNTER2enable+0x36>
	
	timer2_state = 0;
    1ee4:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <timer2_state>
	m.tc2.reg->tccr2 &= ~((1 << WGM20) | (1 << WGM21));
    1ee8:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <m+0x30>
    1eec:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <m+0x31>
    1ef0:	82 81       	ldd	r24, Z+2	; 0x02
    1ef2:	87 7b       	andi	r24, 0xB7	; 183
    1ef4:	82 83       	std	Z+2, r24	; 0x02
	switch(wavegenmode){ // TOP -- Update of OCR2 at -- TOV0 Flag Set on
    1ef6:	82 e0       	ldi	r24, 0x02	; 2
    1ef8:	e8 16       	cp	r14, r24
    1efa:	71 f0       	breq	.+28     	; 0x1f18 <TIMER_COUNTER2enable+0x72>
    1efc:	e3 e0       	ldi	r30, 0x03	; 3
    1efe:	ee 16       	cp	r14, r30
    1f00:	99 f0       	breq	.+38     	; 0x1f28 <TIMER_COUNTER2enable+0x82>
    1f02:	f1 e0       	ldi	r31, 0x01	; 1
    1f04:	ef 12       	cpse	r14, r31
    1f06:	17 c0       	rjmp	.+46     	; 0x1f36 <TIMER_COUNTER2enable+0x90>
		case 0: // Normal, 0xFF -- Immediate -- MAX
		break;
		case 1: // PWM Phase Correct, 0xFF -- TOP -- BOTTOM
			m.tc2.reg->tccr2 |= (1 << WGM20);
    1f08:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <m+0x30>
    1f0c:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <m+0x31>
    1f10:	82 81       	ldd	r24, Z+2	; 0x02
    1f12:	80 64       	ori	r24, 0x40	; 64
    1f14:	82 83       	std	Z+2, r24	; 0x02
		break;
    1f16:	0f c0       	rjmp	.+30     	; 0x1f36 <TIMER_COUNTER2enable+0x90>
		case 2: // CTC, OCR2 -- Immediate -- MAX
			m.tc2.reg->tccr2 |= (1 << WGM21);
    1f18:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <m+0x30>
    1f1c:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <m+0x31>
    1f20:	82 81       	ldd	r24, Z+2	; 0x02
    1f22:	88 60       	ori	r24, 0x08	; 8
    1f24:	82 83       	std	Z+2, r24	; 0x02
		break;
    1f26:	07 c0       	rjmp	.+14     	; 0x1f36 <TIMER_COUNTER2enable+0x90>
		case 3: // Fast PWM, 0xFF -- BOTTOM -- MAX
			m.tc2.reg->tccr2 |= (1 << WGM20) | (1 << WGM21);
    1f28:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <m+0x30>
    1f2c:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <m+0x31>
    1f30:	82 81       	ldd	r24, Z+2	; 0x02
    1f32:	88 64       	ori	r24, 0x48	; 72
    1f34:	82 83       	std	Z+2, r24	; 0x02
		break;
		default:
		break;
	}
	m.tc2.reg->timsk &= ~((1 << TOIE2) | (1 << OCIE2));
    1f36:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <m+0x30>
    1f3a:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <m+0x31>
    1f3e:	84 89       	ldd	r24, Z+20	; 0x14
    1f40:	8f 73       	andi	r24, 0x3F	; 63
    1f42:	84 8b       	std	Z+20, r24	; 0x14
	switch(interrupt){
    1f44:	82 e0       	ldi	r24, 0x02	; 2
    1f46:	f8 16       	cp	r15, r24
    1f48:	b9 f0       	breq	.+46     	; 0x1f78 <TIMER_COUNTER2enable+0xd2>
    1f4a:	e3 e0       	ldi	r30, 0x03	; 3
    1f4c:	fe 16       	cp	r15, r30
    1f4e:	29 f1       	breq	.+74     	; 0x1f9a <TIMER_COUNTER2enable+0xf4>
    1f50:	f1 e0       	ldi	r31, 0x01	; 1
    1f52:	ff 12       	cpse	r15, r31
    1f54:	3a c0       	rjmp	.+116    	; 0x1fca <TIMER_COUNTER2enable+0x124>
		case 0: 
		break;
		case 1:
			m.tc2.reg->timsk |= (1 << TOIE2);
    1f56:	e6 e2       	ldi	r30, 0x26	; 38
    1f58:	f2 e0       	ldi	r31, 0x02	; 2
    1f5a:	a0 a9       	ldd	r26, Z+48	; 0x30
    1f5c:	b1 a9       	ldd	r27, Z+49	; 0x31
    1f5e:	54 96       	adiw	r26, 0x14	; 20
    1f60:	8c 91       	ld	r24, X
    1f62:	54 97       	sbiw	r26, 0x14	; 20
    1f64:	80 64       	ori	r24, 0x40	; 64
    1f66:	54 96       	adiw	r26, 0x14	; 20
    1f68:	8c 93       	st	X, r24
			m.cpu.reg->sreg |= 1 << GLOBAL_INTERRUPT_ENABLE;
    1f6a:	02 84       	ldd	r0, Z+10	; 0x0a
    1f6c:	f3 85       	ldd	r31, Z+11	; 0x0b
    1f6e:	e0 2d       	mov	r30, r0
    1f70:	83 85       	ldd	r24, Z+11	; 0x0b
    1f72:	80 68       	ori	r24, 0x80	; 128
    1f74:	83 87       	std	Z+11, r24	; 0x0b
		break;
    1f76:	29 c0       	rjmp	.+82     	; 0x1fca <TIMER_COUNTER2enable+0x124>
		case 2:
			m.tc2.reg->timsk |= (1 << OCIE2);
    1f78:	e6 e2       	ldi	r30, 0x26	; 38
    1f7a:	f2 e0       	ldi	r31, 0x02	; 2
    1f7c:	a0 a9       	ldd	r26, Z+48	; 0x30
    1f7e:	b1 a9       	ldd	r27, Z+49	; 0x31
    1f80:	54 96       	adiw	r26, 0x14	; 20
    1f82:	8c 91       	ld	r24, X
    1f84:	54 97       	sbiw	r26, 0x14	; 20
    1f86:	80 68       	ori	r24, 0x80	; 128
    1f88:	54 96       	adiw	r26, 0x14	; 20
    1f8a:	8c 93       	st	X, r24
			m.cpu.reg->sreg |= 1 << GLOBAL_INTERRUPT_ENABLE;
    1f8c:	02 84       	ldd	r0, Z+10	; 0x0a
    1f8e:	f3 85       	ldd	r31, Z+11	; 0x0b
    1f90:	e0 2d       	mov	r30, r0
    1f92:	83 85       	ldd	r24, Z+11	; 0x0b
    1f94:	80 68       	ori	r24, 0x80	; 128
    1f96:	83 87       	std	Z+11, r24	; 0x0b
		break;
    1f98:	18 c0       	rjmp	.+48     	; 0x1fca <TIMER_COUNTER2enable+0x124>
		case 3:
			m.tc2.reg->timsk |= (1 << TOIE2);
    1f9a:	e6 e2       	ldi	r30, 0x26	; 38
    1f9c:	f2 e0       	ldi	r31, 0x02	; 2
    1f9e:	a0 a9       	ldd	r26, Z+48	; 0x30
    1fa0:	b1 a9       	ldd	r27, Z+49	; 0x31
    1fa2:	54 96       	adiw	r26, 0x14	; 20
    1fa4:	8c 91       	ld	r24, X
    1fa6:	54 97       	sbiw	r26, 0x14	; 20
    1fa8:	80 64       	ori	r24, 0x40	; 64
    1faa:	54 96       	adiw	r26, 0x14	; 20
    1fac:	8c 93       	st	X, r24
			m.tc2.reg->timsk |= (1 << OCIE2);
    1fae:	a0 a9       	ldd	r26, Z+48	; 0x30
    1fb0:	b1 a9       	ldd	r27, Z+49	; 0x31
    1fb2:	54 96       	adiw	r26, 0x14	; 20
    1fb4:	8c 91       	ld	r24, X
    1fb6:	54 97       	sbiw	r26, 0x14	; 20
    1fb8:	80 68       	ori	r24, 0x80	; 128
    1fba:	54 96       	adiw	r26, 0x14	; 20
    1fbc:	8c 93       	st	X, r24
			m.cpu.reg->sreg |= 1 << GLOBAL_INTERRUPT_ENABLE;
    1fbe:	02 84       	ldd	r0, Z+10	; 0x0a
    1fc0:	f3 85       	ldd	r31, Z+11	; 0x0b
    1fc2:	e0 2d       	mov	r30, r0
    1fc4:	83 85       	ldd	r24, Z+11	; 0x0b
    1fc6:	80 68       	ori	r24, 0x80	; 128
    1fc8:	83 87       	std	Z+11, r24	; 0x0b
		break;
		default:
		break;
	}
	m.tc2.reg->ocr2 = ~0;
    1fca:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <m+0x30>
    1fce:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <m+0x31>
    1fd2:	8f ef       	ldi	r24, 0xFF	; 255
    1fd4:	80 83       	st	Z, r24
	
	timer2.compoutmode = TIMER_COUNTER2_compoutmode;
	timer2.compare = TIMER_COUNTER2_compare;
	timer2.start = TIMER_COUNTER2_start;
	timer2.stop = TIMER_COUNTER2_stop;
	return timer2;
    1fd6:	89 e7       	ldi	r24, 0x79	; 121
    1fd8:	9a e0       	ldi	r25, 0x0A	; 10
    1fda:	f8 01       	movw	r30, r16
    1fdc:	91 83       	std	Z+1, r25	; 0x01
    1fde:	80 83       	st	Z, r24
    1fe0:	89 eb       	ldi	r24, 0xB9	; 185
    1fe2:	9a e0       	ldi	r25, 0x0A	; 10
    1fe4:	97 83       	std	Z+7, r25	; 0x07
    1fe6:	86 83       	std	Z+6, r24	; 0x06
    1fe8:	81 e1       	ldi	r24, 0x11	; 17
    1fea:	9a e0       	ldi	r25, 0x0A	; 10
    1fec:	95 87       	std	Z+13, r25	; 0x0d
    1fee:	84 87       	std	Z+12, r24	; 0x0c
    1ff0:	8f eb       	ldi	r24, 0xBF	; 191
    1ff2:	9a e0       	ldi	r25, 0x0A	; 10
    1ff4:	97 87       	std	Z+15, r25	; 0x0f
    1ff6:	86 87       	std	Z+14, r24	; 0x0e
}
    1ff8:	c8 01       	movw	r24, r16
    1ffa:	c0 5b       	subi	r28, 0xB0	; 176
    1ffc:	df 4f       	sbci	r29, 0xFF	; 255
    1ffe:	0f b6       	in	r0, 0x3f	; 63
    2000:	f8 94       	cli
    2002:	de bf       	out	0x3e, r29	; 62
    2004:	0f be       	out	0x3f, r0	; 63
    2006:	cd bf       	out	0x3d, r28	; 61
    2008:	df 91       	pop	r29
    200a:	cf 91       	pop	r28
    200c:	1f 91       	pop	r17
    200e:	0f 91       	pop	r16
    2010:	ff 90       	pop	r15
    2012:	ef 90       	pop	r14
    2014:	08 95       	ret

00002016 <TIMER_COUNTER3enable>:
// wavegen mode: Normal; PWM, Phase Correct, 8-bit; PWM, Phase Correct, 9-bit; PWM, Phase Correct, 10-bit;
// CTC; Fast PWM, 8-bit; Fast PWM, 9-bit; Fast PWM, 10-bit; PWM, Phase and Frequency Correct; PWM, Phase and Frequency Correct;
// PWM, Phase Correct; PWM, Phase Correct; CTC; (Reserved); Fast PWM; Fast PWM.
// interrupt: off; overflow; output compare; both; default - non.
// for more information read data sheet.
{
    2016:	cf 92       	push	r12
    2018:	df 92       	push	r13
    201a:	ef 92       	push	r14
    201c:	ff 92       	push	r15
    201e:	0f 93       	push	r16
    2020:	1f 93       	push	r17
    2022:	cf 93       	push	r28
    2024:	df 93       	push	r29
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
    202a:	c0 55       	subi	r28, 0x50	; 80
    202c:	d1 09       	sbc	r29, r1
    202e:	0f b6       	in	r0, 0x3f	; 63
    2030:	f8 94       	cli
    2032:	de bf       	out	0x3e, r29	; 62
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	cd bf       	out	0x3d, r28	; 61
    2038:	8c 01       	movw	r16, r24
    203a:	e6 2e       	mov	r14, r22
    203c:	f4 2e       	mov	r15, r20
	TIMER_COUNTER3 timer3;
	m = ATMEGA128enable(); // Dependency
    203e:	ce 01       	movw	r24, r28
    2040:	01 96       	adiw	r24, 0x01	; 1
    2042:	0e 94 b9 05 	call	0xb72	; 0xb72 <ATMEGA128enable>
    2046:	80 e5       	ldi	r24, 0x50	; 80
    2048:	fe 01       	movw	r30, r28
    204a:	31 96       	adiw	r30, 0x01	; 1
    204c:	a6 e2       	ldi	r26, 0x26	; 38
    204e:	b2 e0       	ldi	r27, 0x02	; 2
    2050:	01 90       	ld	r0, Z+
    2052:	0d 92       	st	X+, r0
    2054:	8a 95       	dec	r24
    2056:	e1 f7       	brne	.-8      	; 0x2050 <TIMER_COUNTER3enable+0x3a>
	
	timer3_state = 0;
    2058:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <timer3_state>
	m.tc3.reg->tccr3a &= ~((1 << WGM31) | (1 << WGM30));
    205c:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <m+0x2c>
    2060:	30 91 53 02 	lds	r19, 0x0253	; 0x800253 <m+0x2d>
    2064:	f9 01       	movw	r30, r18
    2066:	e5 5b       	subi	r30, 0xB5	; 181
    2068:	ff 4f       	sbci	r31, 0xFF	; 255
    206a:	50 81       	ld	r21, Z
    206c:	5c 7f       	andi	r21, 0xFC	; 252
    206e:	50 83       	st	Z, r21
	m.tc3.reg->tccr3b &= ~((1 << WGM33) | (1 << WGM32));
    2070:	31 97       	sbiw	r30, 0x01	; 1
    2072:	40 81       	ld	r20, Z
    2074:	47 7e       	andi	r20, 0xE7	; 231
    2076:	40 83       	st	Z, r20
	switch(wavegenmode){ // TOP -- Update of OCRnX -- TOV Flag Set on
    2078:	8e 2d       	mov	r24, r14
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	fc 01       	movw	r30, r24
    207e:	31 97       	sbiw	r30, 0x01	; 1
    2080:	ef 30       	cpi	r30, 0x0F	; 15
    2082:	f1 05       	cpc	r31, r1
    2084:	08 f0       	brcs	.+2      	; 0x2088 <TIMER_COUNTER3enable+0x72>
    2086:	78 c0       	rjmp	.+240    	; 0x2178 <TIMER_COUNTER3enable+0x162>
    2088:	e7 58       	subi	r30, 0x87	; 135
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	0c 94 85 2d 	jmp	0x5b0a	; 0x5b0a <__tablejump2__>
		case 0: // Normal, 0xFFFF -- Immediate -- MAX
		break;
		case 1: // PWM Phase Correct 8-bit, 0x00FF -- TOP -- BOTTOM
			m.tc3.reg->tccr3a |= (1 << WGM30);
    2090:	f9 01       	movw	r30, r18
    2092:	e5 5b       	subi	r30, 0xB5	; 181
    2094:	ff 4f       	sbci	r31, 0xFF	; 255
    2096:	51 60       	ori	r21, 0x01	; 1
    2098:	50 83       	st	Z, r21
		break;
    209a:	6e c0       	rjmp	.+220    	; 0x2178 <TIMER_COUNTER3enable+0x162>
		case 2:	// PWM Phase Correct 9-bit, 0x01FF -- TOP -- BOTTOM
			m.tc3.reg->tccr3a |= (1 << WGM31);
    209c:	f9 01       	movw	r30, r18
    209e:	e5 5b       	subi	r30, 0xB5	; 181
    20a0:	ff 4f       	sbci	r31, 0xFF	; 255
    20a2:	52 60       	ori	r21, 0x02	; 2
    20a4:	50 83       	st	Z, r21
		break;
    20a6:	68 c0       	rjmp	.+208    	; 0x2178 <TIMER_COUNTER3enable+0x162>
		case 3:	// PWM Phase Correct 10-bit, 0x03FF -- TOP -- BOTTOM
			m.tc3.reg->tccr3a |= (1 << WGM31) | (1 << WGM30);
    20a8:	f9 01       	movw	r30, r18
    20aa:	e5 5b       	subi	r30, 0xB5	; 181
    20ac:	ff 4f       	sbci	r31, 0xFF	; 255
    20ae:	53 60       	ori	r21, 0x03	; 3
    20b0:	50 83       	st	Z, r21
		break;
    20b2:	62 c0       	rjmp	.+196    	; 0x2178 <TIMER_COUNTER3enable+0x162>
		case 4:	// CTC, OCRnA Immediate MAX
			m.tc3.reg->tccr3b |= (1 << WGM32);
    20b4:	f9 01       	movw	r30, r18
    20b6:	e6 5b       	subi	r30, 0xB6	; 182
    20b8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ba:	48 60       	ori	r20, 0x08	; 8
    20bc:	40 83       	st	Z, r20
		break;
    20be:	5c c0       	rjmp	.+184    	; 0x2178 <TIMER_COUNTER3enable+0x162>
		case 5:	// Fast PWM 8-bit, 0x00FF -- BOTTOM -- TOP
			m.tc3.reg->tccr3a |=(1 << WGM30);
    20c0:	f9 01       	movw	r30, r18
    20c2:	e5 5b       	subi	r30, 0xB5	; 181
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	51 60       	ori	r21, 0x01	; 1
    20c8:	50 83       	st	Z, r21
			m.tc3.reg->tccr3b |= (1 << WGM32);
    20ca:	31 97       	sbiw	r30, 0x01	; 1
    20cc:	48 60       	ori	r20, 0x08	; 8
    20ce:	40 83       	st	Z, r20
		break;
    20d0:	53 c0       	rjmp	.+166    	; 0x2178 <TIMER_COUNTER3enable+0x162>
		case 6:	// Fast PWM 9-bit, 0x01FF -- BOTTOM -- TOP
			m.tc3.reg->tccr3a |= (1 << WGM31);
    20d2:	f9 01       	movw	r30, r18
    20d4:	e5 5b       	subi	r30, 0xB5	; 181
    20d6:	ff 4f       	sbci	r31, 0xFF	; 255
    20d8:	52 60       	ori	r21, 0x02	; 2
    20da:	50 83       	st	Z, r21
			m.tc3.reg->tccr3b |= (1 << WGM32);
    20dc:	31 97       	sbiw	r30, 0x01	; 1
    20de:	48 60       	ori	r20, 0x08	; 8
    20e0:	40 83       	st	Z, r20
		break;
    20e2:	4a c0       	rjmp	.+148    	; 0x2178 <TIMER_COUNTER3enable+0x162>
		case 7:	// Fast PWM 10-bit, 0x03FF -- BOTTOM -- TOP
			m.tc3.reg->tccr3a |=(1 << WGM31) | (1 << WGM30);
    20e4:	f9 01       	movw	r30, r18
    20e6:	e5 5b       	subi	r30, 0xB5	; 181
    20e8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ea:	53 60       	ori	r21, 0x03	; 3
    20ec:	50 83       	st	Z, r21
			m.tc3.reg->tccr3b |= (1 << WGM32);
    20ee:	31 97       	sbiw	r30, 0x01	; 1
    20f0:	48 60       	ori	r20, 0x08	; 8
    20f2:	40 83       	st	Z, r20
		break;
    20f4:	41 c0       	rjmp	.+130    	; 0x2178 <TIMER_COUNTER3enable+0x162>
		case 8:	// PWM Phase and Frequency Correct, ICRnA -- BOTTOM -- BOTTOM
			m.tc3.reg->tccr3b |= (1 << WGM33);
    20f6:	f9 01       	movw	r30, r18
    20f8:	e6 5b       	subi	r30, 0xB6	; 182
    20fa:	ff 4f       	sbci	r31, 0xFF	; 255
    20fc:	40 61       	ori	r20, 0x10	; 16
    20fe:	40 83       	st	Z, r20
		break;
    2100:	3b c0       	rjmp	.+118    	; 0x2178 <TIMER_COUNTER3enable+0x162>
		case 9:	// PWM Phase and Frequency Correct, OCRnA -- BOTTOM -- BOTTOM
			m.tc3.reg->tccr3a |= (1 << WGM30);
    2102:	f9 01       	movw	r30, r18
    2104:	e5 5b       	subi	r30, 0xB5	; 181
    2106:	ff 4f       	sbci	r31, 0xFF	; 255
    2108:	51 60       	ori	r21, 0x01	; 1
    210a:	50 83       	st	Z, r21
			m.tc3.reg->tccr3b |= (1 << WGM33);
    210c:	31 97       	sbiw	r30, 0x01	; 1
    210e:	40 61       	ori	r20, 0x10	; 16
    2110:	40 83       	st	Z, r20
		break;
    2112:	32 c0       	rjmp	.+100    	; 0x2178 <TIMER_COUNTER3enable+0x162>
		case 10: // PWM Phase Correct, ICRn -- TOP -- BOTTOM
			m.tc3.reg->tccr3a |=(1 << WGM31);
    2114:	f9 01       	movw	r30, r18
    2116:	e5 5b       	subi	r30, 0xB5	; 181
    2118:	ff 4f       	sbci	r31, 0xFF	; 255
    211a:	52 60       	ori	r21, 0x02	; 2
    211c:	50 83       	st	Z, r21
			m.tc3.reg->tccr3b |= (1 << WGM33);
    211e:	31 97       	sbiw	r30, 0x01	; 1
    2120:	40 61       	ori	r20, 0x10	; 16
    2122:	40 83       	st	Z, r20
		break;
    2124:	29 c0       	rjmp	.+82     	; 0x2178 <TIMER_COUNTER3enable+0x162>
		case 11: // PWM Phase Correct, OCRnA -- TOP -- BOTTOM
			m.tc3.reg->tccr3a |= (1 << WGM31) | (1 << WGM30);
    2126:	f9 01       	movw	r30, r18
    2128:	e5 5b       	subi	r30, 0xB5	; 181
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	53 60       	ori	r21, 0x03	; 3
    212e:	50 83       	st	Z, r21
			m.tc3.reg->tccr3b |= (1 << WGM33);
    2130:	31 97       	sbiw	r30, 0x01	; 1
    2132:	40 61       	ori	r20, 0x10	; 16
    2134:	40 83       	st	Z, r20
		break;
    2136:	20 c0       	rjmp	.+64     	; 0x2178 <TIMER_COUNTER3enable+0x162>
		case 12: // CTC, ICRn -- Immediate -- MAX
			m.tc3.reg->tccr3b |= (1 << WGM33) | (1 << WGM32);
    2138:	f9 01       	movw	r30, r18
    213a:	e6 5b       	subi	r30, 0xB6	; 182
    213c:	ff 4f       	sbci	r31, 0xFF	; 255
    213e:	48 61       	ori	r20, 0x18	; 24
    2140:	40 83       	st	Z, r20
		break;
    2142:	1a c0       	rjmp	.+52     	; 0x2178 <TIMER_COUNTER3enable+0x162>
		case 13: // (Reserved), -- -- --
			m.tc3.reg->tccr3a |= (1 << WGM30);
    2144:	f9 01       	movw	r30, r18
    2146:	e5 5b       	subi	r30, 0xB5	; 181
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	51 60       	ori	r21, 0x01	; 1
    214c:	50 83       	st	Z, r21
			m.tc3.reg->tccr3b |= (1 << WGM33) | (1 << WGM32);
    214e:	31 97       	sbiw	r30, 0x01	; 1
    2150:	48 61       	ori	r20, 0x18	; 24
    2152:	40 83       	st	Z, r20
		break;
    2154:	11 c0       	rjmp	.+34     	; 0x2178 <TIMER_COUNTER3enable+0x162>
		case 14: // Fast PWM, ICRn -- BOTTOM -- TOP
			m.tc3.reg->tccr3a |= (1 << WGM31);
    2156:	f9 01       	movw	r30, r18
    2158:	e5 5b       	subi	r30, 0xB5	; 181
    215a:	ff 4f       	sbci	r31, 0xFF	; 255
    215c:	52 60       	ori	r21, 0x02	; 2
    215e:	50 83       	st	Z, r21
			m.tc3.reg->tccr3b |= (1 << WGM33) | (1 << WGM32);
    2160:	31 97       	sbiw	r30, 0x01	; 1
    2162:	48 61       	ori	r20, 0x18	; 24
    2164:	40 83       	st	Z, r20
		break;
    2166:	08 c0       	rjmp	.+16     	; 0x2178 <TIMER_COUNTER3enable+0x162>
		case 15: // Fast PWM, OCRnA -- BOTTOM -- TOP
			m.tc3.reg->tccr3a |= (1 << WGM31) | (1 << WGM30);
    2168:	f9 01       	movw	r30, r18
    216a:	e5 5b       	subi	r30, 0xB5	; 181
    216c:	ff 4f       	sbci	r31, 0xFF	; 255
    216e:	53 60       	ori	r21, 0x03	; 3
    2170:	50 83       	st	Z, r21
			m.tc3.reg->tccr3b |= (1 << WGM33) | (1 << WGM32);
    2172:	31 97       	sbiw	r30, 0x01	; 1
    2174:	48 61       	ori	r20, 0x18	; 24
    2176:	40 83       	st	Z, r20
		break;
		default:
		break;
	}
	m.tc3.reg->tccr3a &= ~((3 << COM3A0) | (3 << COM3B0)| (3 << COM3C0));
    2178:	f9 01       	movw	r30, r18
    217a:	e5 5b       	subi	r30, 0xB5	; 181
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	80 81       	ld	r24, Z
    2180:	83 70       	andi	r24, 0x03	; 3
    2182:	80 83       	st	Z, r24
	m.tc3.reg->etimsk &= ~((1 << TICIE3) | (1 << OCIE3A) | (1 << OCIE3B) | (1 << TOIE3) | (1 << OCIE3C));
    2184:	f9 01       	movw	r30, r18
    2186:	85 ad       	ldd	r24, Z+61	; 0x3d
    2188:	81 7c       	andi	r24, 0xC1	; 193
	switch(interrupt){ // ICP3  -->  PE7
    218a:	4f 2d       	mov	r20, r15
    218c:	50 e0       	ldi	r21, 0x00	; 0
    218e:	fa 01       	movw	r30, r20
    2190:	31 97       	sbiw	r30, 0x01	; 1
    2192:	ec 30       	cpi	r30, 0x0C	; 12
    2194:	f1 05       	cpc	r31, r1
    2196:	20 f4       	brcc	.+8      	; 0x21a0 <TIMER_COUNTER3enable+0x18a>
    2198:	e8 57       	subi	r30, 0x78	; 120
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	0c 94 85 2d 	jmp	0x5b0a	; 0x5b0a <__tablejump2__>
		break;
		default:
		break;
	}
	m.tc3.reg->tccr3a &= ~((3 << COM3A0) | (3 << COM3B0)| (3 << COM3C0));
	m.tc3.reg->etimsk &= ~((1 << TICIE3) | (1 << OCIE3A) | (1 << OCIE3B) | (1 << TOIE3) | (1 << OCIE3C));
    21a0:	f9 01       	movw	r30, r18
    21a2:	85 af       	std	Z+61, r24	; 0x3d
    21a4:	83 c0       	rjmp	.+262    	; 0x22ac <TIMER_COUNTER3enable+0x296>
	switch(interrupt){ // ICP3  -->  PE7
		case 0:
		break;
		case 1:
			m.tc3.reg->etimsk |= (1 << TOIE3);
    21a6:	84 60       	ori	r24, 0x04	; 4
    21a8:	f9 01       	movw	r30, r18
    21aa:	85 af       	std	Z+61, r24	; 0x3d
			m.cpu.reg->sreg |= 1 << GLOBAL_INTERRUPT_ENABLE;
    21ac:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <m+0xa>
    21b0:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <m+0xb>
    21b4:	83 85       	ldd	r24, Z+11	; 0x0b
    21b6:	80 68       	ori	r24, 0x80	; 128
    21b8:	83 87       	std	Z+11, r24	; 0x0b
		break;
    21ba:	78 c0       	rjmp	.+240    	; 0x22ac <TIMER_COUNTER3enable+0x296>
		case 2:
			m.tc3.reg->etimsk |= (1 << OCIE3A);
    21bc:	80 61       	ori	r24, 0x10	; 16
    21be:	f9 01       	movw	r30, r18
    21c0:	85 af       	std	Z+61, r24	; 0x3d
			m.cpu.reg->sreg |= 1 << GLOBAL_INTERRUPT_ENABLE;
    21c2:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <m+0xa>
    21c6:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <m+0xb>
    21ca:	83 85       	ldd	r24, Z+11	; 0x0b
    21cc:	80 68       	ori	r24, 0x80	; 128
    21ce:	83 87       	std	Z+11, r24	; 0x0b
		break;
    21d0:	6d c0       	rjmp	.+218    	; 0x22ac <TIMER_COUNTER3enable+0x296>
		case 3:
			m.tc3.reg->etimsk |= (1 << OCIE3B);
    21d2:	88 60       	ori	r24, 0x08	; 8
    21d4:	f9 01       	movw	r30, r18
    21d6:	85 af       	std	Z+61, r24	; 0x3d
			m.cpu.reg->sreg |= 1 << GLOBAL_INTERRUPT_ENABLE;
    21d8:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <m+0xa>
    21dc:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <m+0xb>
    21e0:	83 85       	ldd	r24, Z+11	; 0x0b
    21e2:	80 68       	ori	r24, 0x80	; 128
    21e4:	83 87       	std	Z+11, r24	; 0x0b
		break;
    21e6:	62 c0       	rjmp	.+196    	; 0x22ac <TIMER_COUNTER3enable+0x296>
		case 4:
			m.tc3.reg->etimsk |= (1 << OCIE3C);
    21e8:	82 60       	ori	r24, 0x02	; 2
    21ea:	f9 01       	movw	r30, r18
    21ec:	85 af       	std	Z+61, r24	; 0x3d
			m.cpu.reg->sreg |= 1 << GLOBAL_INTERRUPT_ENABLE;
    21ee:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <m+0xa>
    21f2:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <m+0xb>
    21f6:	83 85       	ldd	r24, Z+11	; 0x0b
    21f8:	80 68       	ori	r24, 0x80	; 128
    21fa:	83 87       	std	Z+11, r24	; 0x0b
		break;
    21fc:	57 c0       	rjmp	.+174    	; 0x22ac <TIMER_COUNTER3enable+0x296>
		case 5:
			m.tc3.reg->etimsk |= (1 << TICIE3);
    21fe:	80 62       	ori	r24, 0x20	; 32
    2200:	f9 01       	movw	r30, r18
    2202:	85 af       	std	Z+61, r24	; 0x3d
			m.cpu.reg->sreg |= 1 << GLOBAL_INTERRUPT_ENABLE;
    2204:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <m+0xa>
    2208:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <m+0xb>
    220c:	83 85       	ldd	r24, Z+11	; 0x0b
    220e:	80 68       	ori	r24, 0x80	; 128
    2210:	83 87       	std	Z+11, r24	; 0x0b
		break;
    2212:	4c c0       	rjmp	.+152    	; 0x22ac <TIMER_COUNTER3enable+0x296>
		case 6:
			m.tc3.reg->etimsk |= (1 << OCIE3A) | (1 << TOIE3);
    2214:	84 61       	ori	r24, 0x14	; 20
    2216:	f9 01       	movw	r30, r18
    2218:	85 af       	std	Z+61, r24	; 0x3d
			m.cpu.reg->sreg |= 1 << GLOBAL_INTERRUPT_ENABLE;
    221a:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <m+0xa>
    221e:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <m+0xb>
    2222:	83 85       	ldd	r24, Z+11	; 0x0b
    2224:	80 68       	ori	r24, 0x80	; 128
    2226:	83 87       	std	Z+11, r24	; 0x0b
		break;
    2228:	41 c0       	rjmp	.+130    	; 0x22ac <TIMER_COUNTER3enable+0x296>
		case 7:
			m.tc3.reg->etimsk |= (1 << OCIE3B) | (1 << TOIE3);
    222a:	8c 60       	ori	r24, 0x0C	; 12
    222c:	f9 01       	movw	r30, r18
    222e:	85 af       	std	Z+61, r24	; 0x3d
			m.cpu.reg->sreg |= 1 << GLOBAL_INTERRUPT_ENABLE;
    2230:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <m+0xa>
    2234:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <m+0xb>
    2238:	83 85       	ldd	r24, Z+11	; 0x0b
    223a:	80 68       	ori	r24, 0x80	; 128
    223c:	83 87       	std	Z+11, r24	; 0x0b
		break;
    223e:	36 c0       	rjmp	.+108    	; 0x22ac <TIMER_COUNTER3enable+0x296>
		case 8:
			m.tc3.reg->etimsk |= (1 << TOIE3) | (1 << OCIE3C);
    2240:	86 60       	ori	r24, 0x06	; 6
    2242:	f9 01       	movw	r30, r18
    2244:	85 af       	std	Z+61, r24	; 0x3d
			m.cpu.reg->sreg |= 1 << GLOBAL_INTERRUPT_ENABLE;
    2246:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <m+0xa>
    224a:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <m+0xb>
    224e:	83 85       	ldd	r24, Z+11	; 0x0b
    2250:	80 68       	ori	r24, 0x80	; 128
    2252:	83 87       	std	Z+11, r24	; 0x0b
		break;
    2254:	2b c0       	rjmp	.+86     	; 0x22ac <TIMER_COUNTER3enable+0x296>
		case 9:
			m.tc3.reg->etimsk |= (1 << TICIE3) | (1 << TOIE3);
    2256:	84 62       	ori	r24, 0x24	; 36
    2258:	f9 01       	movw	r30, r18
    225a:	85 af       	std	Z+61, r24	; 0x3d
			m.cpu.reg->sreg |= 1 << GLOBAL_INTERRUPT_ENABLE;
    225c:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <m+0xa>
    2260:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <m+0xb>
    2264:	83 85       	ldd	r24, Z+11	; 0x0b
    2266:	80 68       	ori	r24, 0x80	; 128
    2268:	83 87       	std	Z+11, r24	; 0x0b
		break;
    226a:	20 c0       	rjmp	.+64     	; 0x22ac <TIMER_COUNTER3enable+0x296>
		case 10:
			m.tc3.reg->etimsk |= (1 << OCIE3A) | (1 << OCIE3B) | (1 << TOIE3);
    226c:	8c 61       	ori	r24, 0x1C	; 28
    226e:	f9 01       	movw	r30, r18
    2270:	85 af       	std	Z+61, r24	; 0x3d
			m.cpu.reg->sreg |= 1 << GLOBAL_INTERRUPT_ENABLE;
    2272:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <m+0xa>
    2276:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <m+0xb>
    227a:	83 85       	ldd	r24, Z+11	; 0x0b
    227c:	80 68       	ori	r24, 0x80	; 128
    227e:	83 87       	std	Z+11, r24	; 0x0b
		break;
    2280:	15 c0       	rjmp	.+42     	; 0x22ac <TIMER_COUNTER3enable+0x296>
		case 11:
			m.tc3.reg->etimsk |= (1 << OCIE3A) | (1 << OCIE3B) | (1 << TOIE3) | (1 << OCIE3C);
    2282:	8e 61       	ori	r24, 0x1E	; 30
    2284:	f9 01       	movw	r30, r18
    2286:	85 af       	std	Z+61, r24	; 0x3d
			m.cpu.reg->sreg |= 1 << GLOBAL_INTERRUPT_ENABLE;
    2288:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <m+0xa>
    228c:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <m+0xb>
    2290:	83 85       	ldd	r24, Z+11	; 0x0b
    2292:	80 68       	ori	r24, 0x80	; 128
    2294:	83 87       	std	Z+11, r24	; 0x0b
		break;
    2296:	0a c0       	rjmp	.+20     	; 0x22ac <TIMER_COUNTER3enable+0x296>
		case 12:
			m.tc3.reg->etimsk |= (1 << OCIE3A) | (1 << OCIE3B) | (1 << OCIE3C);
    2298:	8a 61       	ori	r24, 0x1A	; 26
    229a:	f9 01       	movw	r30, r18
    229c:	85 af       	std	Z+61, r24	; 0x3d
			m.cpu.reg->sreg |= 1 << GLOBAL_INTERRUPT_ENABLE;
    229e:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <m+0xa>
    22a2:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <m+0xb>
    22a6:	83 85       	ldd	r24, Z+11	; 0x0b
    22a8:	80 68       	ori	r24, 0x80	; 128
    22aa:	83 87       	std	Z+11, r24	; 0x0b
		break;
		default:
		break;
	}
	m.tc3.reg->ocr3a = WriteLHByte(~0);
    22ac:	0f 2e       	mov	r0, r31
    22ae:	f6 e2       	ldi	r31, 0x26	; 38
    22b0:	ef 2e       	mov	r14, r31
    22b2:	f2 e0       	ldi	r31, 0x02	; 2
    22b4:	ff 2e       	mov	r15, r31
    22b6:	f0 2d       	mov	r31, r0
    22b8:	f7 01       	movw	r30, r14
    22ba:	c4 a4       	ldd	r12, Z+44	; 0x2c
    22bc:	d5 a4       	ldd	r13, Z+45	; 0x2d
    22be:	f6 e4       	ldi	r31, 0x46	; 70
    22c0:	cf 0e       	add	r12, r31
    22c2:	d1 1c       	adc	r13, r1
    22c4:	8f ef       	ldi	r24, 0xFF	; 255
    22c6:	9f ef       	ldi	r25, 0xFF	; 255
    22c8:	0e 94 b1 05 	call	0xb62	; 0xb62 <WriteLHByte>
    22cc:	f6 01       	movw	r30, r12
    22ce:	91 83       	std	Z+1, r25	; 0x01
    22d0:	80 83       	st	Z, r24
	m.tc3.reg->ocr3b = WriteLHByte(~0);
    22d2:	f7 01       	movw	r30, r14
    22d4:	c4 a4       	ldd	r12, Z+44	; 0x2c
    22d6:	d5 a4       	ldd	r13, Z+45	; 0x2d
    22d8:	f4 e4       	ldi	r31, 0x44	; 68
    22da:	cf 0e       	add	r12, r31
    22dc:	d1 1c       	adc	r13, r1
    22de:	8f ef       	ldi	r24, 0xFF	; 255
    22e0:	9f ef       	ldi	r25, 0xFF	; 255
    22e2:	0e 94 b1 05 	call	0xb62	; 0xb62 <WriteLHByte>
    22e6:	f6 01       	movw	r30, r12
    22e8:	91 83       	std	Z+1, r25	; 0x01
    22ea:	80 83       	st	Z, r24
	m.tc3.reg->ocr3c = WriteLHByte(~0);
    22ec:	f7 01       	movw	r30, r14
    22ee:	e4 a4       	ldd	r14, Z+44	; 0x2c
    22f0:	f5 a4       	ldd	r15, Z+45	; 0x2d
    22f2:	f2 e4       	ldi	r31, 0x42	; 66
    22f4:	ef 0e       	add	r14, r31
    22f6:	f1 1c       	adc	r15, r1
    22f8:	8f ef       	ldi	r24, 0xFF	; 255
    22fa:	9f ef       	ldi	r25, 0xFF	; 255
    22fc:	0e 94 b1 05 	call	0xb62	; 0xb62 <WriteLHByte>
    2300:	f7 01       	movw	r30, r14
    2302:	91 83       	std	Z+1, r25	; 0x01
    2304:	80 83       	st	Z, r24
	timer3.compareA = TIMER_COUNTER3_compareA;
	timer3.compareB = TIMER_COUNTER3_compareB;
	timer3.compareC = TIMER_COUNTER3_compareC;
	timer3.start = TIMER_COUNTER3_start;
	timer3.stop = TIMER_COUNTER3_stop;
	return timer3;
    2306:	86 e2       	ldi	r24, 0x26	; 38
    2308:	9b e0       	ldi	r25, 0x0B	; 11
    230a:	f8 01       	movw	r30, r16
    230c:	91 83       	std	Z+1, r25	; 0x01
    230e:	80 83       	st	Z, r24
    2310:	8e e6       	ldi	r24, 0x6E	; 110
    2312:	9b e0       	ldi	r25, 0x0B	; 11
    2314:	93 83       	std	Z+3, r25	; 0x03
    2316:	82 83       	std	Z+2, r24	; 0x02
    2318:	86 eb       	ldi	r24, 0xB6	; 182
    231a:	9b e0       	ldi	r25, 0x0B	; 11
    231c:	95 83       	std	Z+5, r25	; 0x05
    231e:	84 83       	std	Z+4, r24	; 0x04
    2320:	8f e2       	ldi	r24, 0x2F	; 47
    2322:	9c e0       	ldi	r25, 0x0C	; 12
    2324:	97 83       	std	Z+7, r25	; 0x07
    2326:	86 83       	std	Z+6, r24	; 0x06
    2328:	8d e3       	ldi	r24, 0x3D	; 61
    232a:	9c e0       	ldi	r25, 0x0C	; 12
    232c:	91 87       	std	Z+9, r25	; 0x09
    232e:	80 87       	std	Z+8, r24	; 0x08
    2330:	8b e4       	ldi	r24, 0x4B	; 75
    2332:	9c e0       	ldi	r25, 0x0C	; 12
    2334:	93 87       	std	Z+11, r25	; 0x0b
    2336:	82 87       	std	Z+10, r24	; 0x0a
    2338:	8a ec       	ldi	r24, 0xCA	; 202
    233a:	9a e0       	ldi	r25, 0x0A	; 10
    233c:	95 87       	std	Z+13, r25	; 0x0d
    233e:	84 87       	std	Z+12, r24	; 0x0c
    2340:	8e ef       	ldi	r24, 0xFE	; 254
    2342:	9b e0       	ldi	r25, 0x0B	; 11
    2344:	97 87       	std	Z+15, r25	; 0x0f
    2346:	86 87       	std	Z+14, r24	; 0x0e
}
    2348:	c8 01       	movw	r24, r16
    234a:	c0 5b       	subi	r28, 0xB0	; 176
    234c:	df 4f       	sbci	r29, 0xFF	; 255
    234e:	0f b6       	in	r0, 0x3f	; 63
    2350:	f8 94       	cli
    2352:	de bf       	out	0x3e, r29	; 62
    2354:	0f be       	out	0x3f, r0	; 63
    2356:	cd bf       	out	0x3d, r28	; 61
    2358:	df 91       	pop	r29
    235a:	cf 91       	pop	r28
    235c:	1f 91       	pop	r17
    235e:	0f 91       	pop	r16
    2360:	ff 90       	pop	r15
    2362:	ef 90       	pop	r14
    2364:	df 90       	pop	r13
    2366:	cf 90       	pop	r12
    2368:	08 95       	ret

0000236a <TWI_status>:
}

// auxiliary
uint8_t TWI_status( void )
{
	uint8_t cmd = m.twi.reg->twsr & TWI_STATUS_MASK;
    236a:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <m+0x38>
    236e:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <m+0x39>
	return cmd;
    2372:	81 81       	ldd	r24, Z+1	; 0x01
}
    2374:	88 7f       	andi	r24, 0xF8	; 248
    2376:	08 95       	ret

00002378 <TWI_stop>:

// void TWI_Stop(void)
void TWI_stop( void )
{
	uint8_t cmd = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
	m.twi.reg->twcr = cmd; 
    2378:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <m+0x38>
    237c:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <m+0x39>
    2380:	84 e9       	ldi	r24, 0x94	; 148
    2382:	84 83       	std	Z+4, r24	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2384:	8f e8       	ldi	r24, 0x8F	; 143
    2386:	91 e0       	ldi	r25, 0x01	; 1
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	f1 f7       	brne	.-4      	; 0x2388 <TWI_stop+0x10>
    238c:	00 c0       	rjmp	.+0      	; 0x238e <TWI_stop+0x16>
    238e:	00 00       	nop
    2390:	08 95       	ret

00002392 <TWI_init>:
	
	return ic;
}
// void TWI_Init(uint8_t device_id, uint8_t prescaler)
void TWI_init(uint8_t device_id, uint8_t prescaler)
{
    2392:	cf 93       	push	r28
    2394:	df 93       	push	r29
	uint8_t cmd = 0x00;
	if(device_id > 0 && device_id < 128)
    2396:	18 16       	cp	r1, r24
    2398:	1c f4       	brge	.+6      	; 0x23a0 <TWI_init+0xe>
		cmd = (device_id << 1) | (1 << TWGCE);
    239a:	88 0f       	add	r24, r24
    239c:	81 60       	ori	r24, 0x01	; 1
    239e:	01 c0       	rjmp	.+2      	; 0x23a2 <TWI_init+0x10>
	else
		cmd = (1 << TWGCE); // no address, but accept general call
    23a0:	81 e0       	ldi	r24, 0x01	; 1
	m.twi.reg->twar = cmd;
    23a2:	e6 e2       	ldi	r30, 0x26	; 38
    23a4:	f2 e0       	ldi	r31, 0x02	; 2
    23a6:	a0 ad       	ldd	r26, Z+56	; 0x38
    23a8:	b1 ad       	ldd	r27, Z+57	; 0x39
    23aa:	12 96       	adiw	r26, 0x02	; 2
    23ac:	8c 93       	st	X, r24
	m.portd.reg->ddr |= TWI_IO_MASK;
    23ae:	a0 8d       	ldd	r26, Z+24	; 0x18
    23b0:	b1 8d       	ldd	r27, Z+25	; 0x19
    23b2:	11 96       	adiw	r26, 0x01	; 1
    23b4:	8c 91       	ld	r24, X
    23b6:	11 97       	sbiw	r26, 0x01	; 1
    23b8:	83 60       	ori	r24, 0x03	; 3
    23ba:	11 96       	adiw	r26, 0x01	; 1
    23bc:	8c 93       	st	X, r24
	m.portd.reg->port |= TWI_IO_MASK;
    23be:	00 8c       	ldd	r0, Z+24	; 0x18
    23c0:	f1 8d       	ldd	r31, Z+25	; 0x19
    23c2:	e0 2d       	mov	r30, r0
    23c4:	82 81       	ldd	r24, Z+2	; 0x02
    23c6:	83 60       	ori	r24, 0x03	; 3
    23c8:	82 83       	std	Z+2, r24	; 0x02
	switch(prescaler){
    23ca:	64 30       	cpi	r22, 0x04	; 4
    23cc:	89 f0       	breq	.+34     	; 0x23f0 <TWI_init+0x5e>
    23ce:	18 f4       	brcc	.+6      	; 0x23d6 <TWI_init+0x44>
    23d0:	61 30       	cpi	r22, 0x01	; 1
    23d2:	31 f0       	breq	.+12     	; 0x23e0 <TWI_init+0x4e>
    23d4:	25 c0       	rjmp	.+74     	; 0x2420 <TWI_init+0x8e>
    23d6:	60 31       	cpi	r22, 0x10	; 16
    23d8:	99 f0       	breq	.+38     	; 0x2400 <TWI_init+0x6e>
    23da:	60 34       	cpi	r22, 0x40	; 64
    23dc:	c9 f0       	breq	.+50     	; 0x2410 <TWI_init+0x7e>
    23de:	20 c0       	rjmp	.+64     	; 0x2420 <TWI_init+0x8e>
		case 1:
			m.twi.reg->twsr &= ~TWI_PRESCALER_MASK;
    23e0:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <m+0x38>
    23e4:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <m+0x39>
    23e8:	81 81       	ldd	r24, Z+1	; 0x01
    23ea:	8c 7f       	andi	r24, 0xFC	; 252
    23ec:	81 83       	std	Z+1, r24	; 0x01
		break;
    23ee:	20 c0       	rjmp	.+64     	; 0x2430 <TWI_init+0x9e>
		case 4:
			m.twi.reg->twsr |= (1 << TWPS0);
    23f0:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <m+0x38>
    23f4:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <m+0x39>
    23f8:	81 81       	ldd	r24, Z+1	; 0x01
    23fa:	81 60       	ori	r24, 0x01	; 1
    23fc:	81 83       	std	Z+1, r24	; 0x01
		break;
    23fe:	18 c0       	rjmp	.+48     	; 0x2430 <TWI_init+0x9e>
		case 16:
			m.twi.reg->twsr |= (2 << TWPS0);
    2400:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <m+0x38>
    2404:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <m+0x39>
    2408:	81 81       	ldd	r24, Z+1	; 0x01
    240a:	82 60       	ori	r24, 0x02	; 2
    240c:	81 83       	std	Z+1, r24	; 0x01
		break;
    240e:	10 c0       	rjmp	.+32     	; 0x2430 <TWI_init+0x9e>
		case 64:
			m.twi.reg->twsr |= (3 << TWPS0);
    2410:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <m+0x38>
    2414:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <m+0x39>
    2418:	81 81       	ldd	r24, Z+1	; 0x01
    241a:	83 60       	ori	r24, 0x03	; 3
    241c:	81 83       	std	Z+1, r24	; 0x01
		break;
    241e:	08 c0       	rjmp	.+16     	; 0x2430 <TWI_init+0x9e>
		default:
			prescaler = 1;
			m.twi.reg->twsr &= ~TWI_PRESCALER_MASK;
    2420:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <m+0x38>
    2424:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <m+0x39>
    2428:	81 81       	ldd	r24, Z+1	; 0x01
    242a:	8c 7f       	andi	r24, 0xFC	; 252
    242c:	81 83       	std	Z+1, r24	; 0x01
		break;
		case 64:
			m.twi.reg->twsr |= (3 << TWPS0);
		break;
		default:
			prescaler = 1;
    242e:	61 e0       	ldi	r22, 0x01	; 1
			m.twi.reg->twsr &= ~TWI_PRESCALER_MASK;
		break;
	}
	m.twi.reg->twbr = ((F_CPU / TWI_SCL_CLOCK) - 16) / (2 * prescaler);
    2430:	c0 91 5e 02 	lds	r28, 0x025E	; 0x80025e <m+0x38>
    2434:	d0 91 5f 02 	lds	r29, 0x025F	; 0x80025f <m+0x39>
    2438:	26 2f       	mov	r18, r22
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	22 0f       	add	r18, r18
    243e:	33 1f       	adc	r19, r19
    2440:	03 2e       	mov	r0, r19
    2442:	00 0c       	add	r0, r0
    2444:	44 0b       	sbc	r20, r20
    2446:	55 0b       	sbc	r21, r21
    2448:	60 e9       	ldi	r22, 0x90	; 144
    244a:	70 e0       	ldi	r23, 0x00	; 0
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	0e 94 47 2d 	call	0x5a8e	; 0x5a8e <__udivmodsi4>
    2454:	28 83       	st	Y, r18
	// Standard Config begin
	// m.twi->twsr = 0x00; //set presca1er bits to zero
	// m.twi->twbr = 0x46; //SCL frequency is 50K for 16Mhz
	// m.twi->twcr = 0x04; //enab1e TWI module
	// Standard Config end
}
    2456:	df 91       	pop	r29
    2458:	cf 91       	pop	r28
    245a:	08 95       	ret

0000245c <TWIenable>:
void TWI_wait_twint( uint16_t nticks );

/*** Procedure & Function ***/
// TWI TWIenable(uint8_t atmega_ID,  uint8_t prescaler)
TWI TWIenable(uint8_t atmega_ID,  uint8_t prescaler)
{
    245c:	ef 92       	push	r14
    245e:	ff 92       	push	r15
    2460:	0f 93       	push	r16
    2462:	1f 93       	push	r17
    2464:	cf 93       	push	r28
    2466:	df 93       	push	r29
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
    246c:	c0 55       	subi	r28, 0x50	; 80
    246e:	d1 09       	sbc	r29, r1
    2470:	0f b6       	in	r0, 0x3f	; 63
    2472:	f8 94       	cli
    2474:	de bf       	out	0x3e, r29	; 62
    2476:	0f be       	out	0x3f, r0	; 63
    2478:	cd bf       	out	0x3d, r28	; 61
    247a:	8c 01       	movw	r16, r24
    247c:	f6 2e       	mov	r15, r22
    247e:	e4 2e       	mov	r14, r20
	m = ATMEGA128enable();
    2480:	ce 01       	movw	r24, r28
    2482:	01 96       	adiw	r24, 0x01	; 1
    2484:	0e 94 b9 05 	call	0xb72	; 0xb72 <ATMEGA128enable>
    2488:	80 e5       	ldi	r24, 0x50	; 80
    248a:	fe 01       	movw	r30, r28
    248c:	31 96       	adiw	r30, 0x01	; 1
    248e:	a6 e2       	ldi	r26, 0x26	; 38
    2490:	b2 e0       	ldi	r27, 0x02	; 2
    2492:	01 90       	ld	r0, Z+
    2494:	0d 92       	st	X+, r0
    2496:	8a 95       	dec	r24
    2498:	e1 f7       	brne	.-8      	; 0x2492 <TWIenable+0x36>
	ic.stop = TWI_stop;
	ic.master_write = TWI_master_write;
	ic.master_read = TWI_master_read;
	ic.status = TWI_status;
	
	TWI_init(atmega_ID, prescaler);
    249a:	6e 2d       	mov	r22, r14
    249c:	8f 2d       	mov	r24, r15
    249e:	79 df       	rcall	.-270    	; 0x2392 <TWI_init>
	
	return ic;
    24a0:	88 e8       	ldi	r24, 0x88	; 136
    24a2:	92 e1       	ldi	r25, 0x12	; 18
    24a4:	f8 01       	movw	r30, r16
    24a6:	91 83       	std	Z+1, r25	; 0x01
    24a8:	80 83       	st	Z, r24
    24aa:	86 e9       	ldi	r24, 0x96	; 150
    24ac:	92 e1       	ldi	r25, 0x12	; 18
    24ae:	93 83       	std	Z+3, r25	; 0x03
    24b0:	82 83       	std	Z+2, r24	; 0x02
    24b2:	81 eb       	ldi	r24, 0xB1	; 177
    24b4:	92 e1       	ldi	r25, 0x12	; 18
    24b6:	95 83       	std	Z+5, r25	; 0x05
    24b8:	84 83       	std	Z+4, r24	; 0x04
    24ba:	84 ec       	ldi	r24, 0xC4	; 196
    24bc:	92 e1       	ldi	r25, 0x12	; 18
    24be:	97 83       	std	Z+7, r25	; 0x07
    24c0:	86 83       	std	Z+6, r24	; 0x06
    24c2:	8c eb       	ldi	r24, 0xBC	; 188
    24c4:	91 e1       	ldi	r25, 0x11	; 17
    24c6:	91 87       	std	Z+9, r25	; 0x09
    24c8:	80 87       	std	Z+8, r24	; 0x08
    24ca:	85 eb       	ldi	r24, 0xB5	; 181
    24cc:	91 e1       	ldi	r25, 0x11	; 17
    24ce:	93 87       	std	Z+11, r25	; 0x0b
    24d0:	82 87       	std	Z+10, r24	; 0x0a
}
    24d2:	c8 01       	movw	r24, r16
    24d4:	c0 5b       	subi	r28, 0xB0	; 176
    24d6:	df 4f       	sbci	r29, 0xFF	; 255
    24d8:	0f b6       	in	r0, 0x3f	; 63
    24da:	f8 94       	cli
    24dc:	de bf       	out	0x3e, r29	; 62
    24de:	0f be       	out	0x3f, r0	; 63
    24e0:	cd bf       	out	0x3d, r28	; 61
    24e2:	df 91       	pop	r29
    24e4:	cf 91       	pop	r28
    24e6:	1f 91       	pop	r17
    24e8:	0f 91       	pop	r16
    24ea:	ff 90       	pop	r15
    24ec:	ef 90       	pop	r14
    24ee:	08 95       	ret

000024f0 <TWI_wait_twint>:
}

void TWI_wait_twint( uint16_t nticks ) // hardware triggered
{
	unsigned int i;
	for(i = 0; !( m.twi.reg->twcr & (1 << TWINT)); i++ ){ // wait for acknowledgment confirmation bit.
    24f0:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <m+0x38>
    24f4:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <m+0x39>
    24f8:	24 81       	ldd	r18, Z+4	; 0x04
    24fa:	22 23       	and	r18, r18
    24fc:	44 f0       	brlt	.+16     	; 0x250e <TWI_wait_twint+0x1e>
    24fe:	21 e0       	ldi	r18, 0x01	; 1
    2500:	30 e0       	ldi	r19, 0x00	; 0
		if( i > nticks ) // timeout
    2502:	82 17       	cp	r24, r18
    2504:	93 07       	cpc	r25, r19
    2506:	18 f0       	brcs	.+6      	; 0x250e <TWI_wait_twint+0x1e>
}

void TWI_wait_twint( uint16_t nticks ) // hardware triggered
{
	unsigned int i;
	for(i = 0; !( m.twi.reg->twcr & (1 << TWINT)); i++ ){ // wait for acknowledgment confirmation bit.
    2508:	2f 5f       	subi	r18, 0xFF	; 255
    250a:	3f 4f       	sbci	r19, 0xFF	; 255
    250c:	fa cf       	rjmp	.-12     	; 0x2502 <TWI_wait_twint+0x12>
    250e:	08 95       	ret

00002510 <TWI_start>:
}
// void TWI_Start(void)
void TWI_start(void) // $08
{	
	uint8_t cmd = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
	m.twi.reg->twcr = cmd;
    2510:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <m+0x38>
    2514:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <m+0x39>
    2518:	84 ea       	ldi	r24, 0xA4	; 164
    251a:	84 83       	std	Z+4, r24	; 0x04
	
	TWI_wait_twint( Nticks );
    251c:	8f ef       	ldi	r24, 0xFF	; 255
    251e:	93 e0       	ldi	r25, 0x03	; 3
    2520:	e7 df       	rcall	.-50     	; 0x24f0 <TWI_wait_twint>
	
	switch( TWI_status( ) ){
    2522:	23 df       	rcall	.-442    	; 0x236a <TWI_status>
    2524:	88 30       	cpi	r24, 0x08	; 8
    2526:	09 f0       	breq	.+2      	; 0x252a <TWI_start+0x1a>
		case TWI_T_START:
			// Do nothing
		break;
		default:
			TWI_stop( ); // error
    2528:	27 cf       	rjmp	.-434    	; 0x2378 <TWI_stop>
    252a:	08 95       	ret

0000252c <TWI_connect>:
    252c:	66 23       	and	r22, r22

// void TWI_Connect(uint8_t address, uint8_t rw)
void TWI_connect( uint8_t address, uint8_t rw )
{
	uint8_t cmd = 0;
	if( rw )
    252e:	19 f0       	breq	.+6      	; 0x2536 <TWI_connect+0xa>
		cmd = (address << 1) | (1 << 0);
    2530:	88 0f       	add	r24, r24
    2532:	81 60       	ori	r24, 0x01	; 1
    2534:	01 c0       	rjmp	.+2      	; 0x2538 <TWI_connect+0xc>
	else
		cmd = (address << 1) | (0 << 0);
    2536:	88 0f       	add	r24, r24
	m.twi.reg->twdr = cmd;
    2538:	e6 e2       	ldi	r30, 0x26	; 38
    253a:	f2 e0       	ldi	r31, 0x02	; 2
    253c:	a0 ad       	ldd	r26, Z+56	; 0x38
    253e:	b1 ad       	ldd	r27, Z+57	; 0x39
    2540:	13 96       	adiw	r26, 0x03	; 3
    2542:	8c 93       	st	X, r24
	
	cmd = (1 << TWINT) | (1 << TWEN);
	m.twi.reg->twcr = cmd;
    2544:	00 ac       	ldd	r0, Z+56	; 0x38
    2546:	f1 ad       	ldd	r31, Z+57	; 0x39
    2548:	e0 2d       	mov	r30, r0
    254a:	84 e8       	ldi	r24, 0x84	; 132
    254c:	84 83       	std	Z+4, r24	; 0x04
	
	TWI_wait_twint( Nticks );
    254e:	8f ef       	ldi	r24, 0xFF	; 255
    2550:	93 e0       	ldi	r25, 0x03	; 3
    2552:	ce df       	rcall	.-100    	; 0x24f0 <TWI_wait_twint>
	
	switch( TWI_status( ) ){
    2554:	0a df       	rcall	.-492    	; 0x236a <TWI_status>
    2556:	88 31       	cpi	r24, 0x18	; 24
    2558:	19 f0       	breq	.+6      	; 0x2560 <TWI_connect+0x34>
    255a:	80 34       	cpi	r24, 0x40	; 64
    255c:	09 f0       	breq	.+2      	; 0x2560 <TWI_connect+0x34>
		break;
		case TWI_M_SLAR_R_ACK:
			// Do nothing
		break;
		default:
			TWI_stop( ); // error
    255e:	0c cf       	rjmp	.-488    	; 0x2378 <TWI_stop>
    2560:	08 95       	ret

00002562 <TWI_master_write>:
    2562:	e6 e2       	ldi	r30, 0x26	; 38

// void TWI_Write(uint8_t var_twiData_u8)
void TWI_master_write( uint8_t var_twiData_u8 )
{
	uint8_t cmd = var_twiData_u8;
	m.twi.reg->twdr = cmd;
    2564:	f2 e0       	ldi	r31, 0x02	; 2
    2566:	a0 ad       	ldd	r26, Z+56	; 0x38
    2568:	b1 ad       	ldd	r27, Z+57	; 0x39
    256a:	13 96       	adiw	r26, 0x03	; 3
    256c:	8c 93       	st	X, r24
	
	cmd = (1 << TWINT) | (1 << TWEN);
	m.twi.reg->twcr = cmd;
    256e:	00 ac       	ldd	r0, Z+56	; 0x38
    2570:	f1 ad       	ldd	r31, Z+57	; 0x39
    2572:	e0 2d       	mov	r30, r0
    2574:	84 e8       	ldi	r24, 0x84	; 132
    2576:	84 83       	std	Z+4, r24	; 0x04
	
	TWI_wait_twint( Nticks );
    2578:	8f ef       	ldi	r24, 0xFF	; 255
    257a:	93 e0       	ldi	r25, 0x03	; 3
    257c:	b9 df       	rcall	.-142    	; 0x24f0 <TWI_wait_twint>
	
	switch( TWI_status( ) ){
    257e:	f5 de       	rcall	.-534    	; 0x236a <TWI_status>
    2580:	88 32       	cpi	r24, 0x28	; 40
    2582:	09 f0       	breq	.+2      	; 0x2586 <TWI_master_write+0x24>
		case TWI_M_DATABYTE_R_ACK:
			// Do nothing
		break;
		default:
			TWI_stop( ); // error
    2584:	f9 ce       	rjmp	.-526    	; 0x2378 <TWI_stop>
    2586:	08 95       	ret

00002588 <TWI_master_read>:
    2588:	88 23       	and	r24, r24

// uint8_t TWI_Read(uint8_t ack_nack)
uint8_t TWI_master_read( uint8_t ack_nack )
{
	uint8_t cmd = 0x00;
	if( ack_nack )
    258a:	11 f0       	breq	.+4      	; 0x2590 <TWI_master_read+0x8>
		cmd |= ( 1 << TWEA );
    258c:	80 e4       	ldi	r24, 0x40	; 64
    258e:	01 c0       	rjmp	.+2      	; 0x2592 <TWI_master_read+0xa>
}

// uint8_t TWI_Read(uint8_t ack_nack)
uint8_t TWI_master_read( uint8_t ack_nack )
{
	uint8_t cmd = 0x00;
    2590:	80 e0       	ldi	r24, 0x00	; 0
	if( ack_nack )
		cmd |= ( 1 << TWEA );
	cmd |= ( 1 << TWINT ) | ( 1 << TWEN );
	m.twi.reg->twcr = cmd;
    2592:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <m+0x38>
    2596:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <m+0x39>
    259a:	84 68       	ori	r24, 0x84	; 132
    259c:	84 83       	std	Z+4, r24	; 0x04
	
	TWI_wait_twint( Nticks );
    259e:	8f ef       	ldi	r24, 0xFF	; 255
    25a0:	93 e0       	ldi	r25, 0x03	; 3
    25a2:	a6 df       	rcall	.-180    	; 0x24f0 <TWI_wait_twint>
	
	switch( TWI_status( ) ){
    25a4:	e2 de       	rcall	.-572    	; 0x236a <TWI_status>
    25a6:	88 33       	cpi	r24, 0x38	; 56
    25a8:	09 f4       	brne	.+2      	; 0x25ac <TWI_master_read+0x24>
		case TWI_ARBLSLARNACK:
			TWI_stop( );
    25aa:	e6 de       	rcall	.-564    	; 0x2378 <TWI_stop>
    25ac:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <m+0x38>
		break;
		default:
		break;
	}
	
	cmd = m.twi.reg->twdr;
    25b0:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <m+0x39>
    25b4:	83 81       	ldd	r24, Z+3	; 0x03
	return cmd;
}
    25b6:	08 95       	ret

000025b8 <uart0_gets>:
{
	return uart0_read();
}
UARTvar* uart0_gets(void)
{
	return rx0buff.raw(&rx0buff);
    25b8:	e0 91 a7 02 	lds	r30, 0x02A7	; 0x8002a7 <rx0buff+0xa>
    25bc:	f0 91 a8 02 	lds	r31, 0x02A8	; 0x8002a8 <rx0buff+0xb>
    25c0:	8d e9       	ldi	r24, 0x9D	; 157
    25c2:	92 e0       	ldi	r25, 0x02	; 2
    25c4:	09 95       	icall
}
    25c6:	08 95       	ret

000025c8 <uart0_rxflush>:
void uart0_rxflush(void)
{
	rx0buff.flush(&rx0buff);
    25c8:	e0 91 a9 02 	lds	r30, 0x02A9	; 0x8002a9 <rx0buff+0xc>
    25cc:	f0 91 aa 02 	lds	r31, 0x02AA	; 0x8002aa <rx0buff+0xd>
    25d0:	8d e9       	ldi	r24, 0x9D	; 157
    25d2:	92 e0       	ldi	r25, 0x02	; 2
    25d4:	09 95       	icall
    25d6:	08 95       	ret

000025d8 <uart1_gets>:
{
	return uart1_read();
}
UARTvar* uart1_gets(void)
{
	return rx1buff.raw(&rx1buff);
    25d8:	e0 91 d8 02 	lds	r30, 0x02D8	; 0x8002d8 <rx1buff+0xa>
    25dc:	f0 91 d9 02 	lds	r31, 0x02D9	; 0x8002d9 <rx1buff+0xb>
    25e0:	8e ec       	ldi	r24, 0xCE	; 206
    25e2:	92 e0       	ldi	r25, 0x02	; 2
    25e4:	09 95       	icall
}
    25e6:	08 95       	ret

000025e8 <uart1_rxflush>:
void uart1_rxflush(void)
{
	rx1buff.flush(&rx1buff);
    25e8:	e0 91 da 02 	lds	r30, 0x02DA	; 0x8002da <rx1buff+0xc>
    25ec:	f0 91 db 02 	lds	r31, 0x02DB	; 0x8002db <rx1buff+0xd>
    25f0:	8e ec       	ldi	r24, 0xCE	; 206
    25f2:	92 e0       	ldi	r25, 0x02	; 2
    25f4:	09 95       	icall
    25f6:	08 95       	ret

000025f8 <uart0_read>:
	return uart;
}
UARTvar uart0_read(void)
{
	UARTvar c;
	c = UART0_Rx;
    25f8:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <UART0_Rx>
	UART0_Rx = 0;
    25fc:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <UART0_Rx>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2600:	ef e9       	ldi	r30, 0x9F	; 159
    2602:	ff e0       	ldi	r31, 0x0F	; 15
    2604:	31 97       	sbiw	r30, 0x01	; 1
    2606:	f1 f7       	brne	.-4      	; 0x2604 <uart0_read+0xc>
    2608:	00 c0       	rjmp	.+0      	; 0x260a <uart0_read+0x12>
    260a:	00 00       	nop
	_delay_ms(1);
	return c;
}
    260c:	08 95       	ret

0000260e <uart0_getch>:
UARTvar uart0_getch(void)
{
	return uart0_read();
    260e:	f4 cf       	rjmp	.-24     	; 0x25f8 <uart0_read>
}
    2610:	08 95       	ret

00002612 <uart0_write>:
{
	rx0buff.flush(&rx0buff);
}
void uart0_write(UARTvar data)
{
	m.usart0.reg->udr0 = data;
    2612:	e6 e2       	ldi	r30, 0x26	; 38
    2614:	f2 e0       	ldi	r31, 0x02	; 2
    2616:	a4 ad       	ldd	r26, Z+60	; 0x3c
    2618:	b5 ad       	ldd	r27, Z+61	; 0x3d
    261a:	13 96       	adiw	r26, 0x03	; 3
    261c:	8c 93       	st	X, r24
	m.usart0.reg->ucsr0b |= _BV(UDRIE0);
    261e:	04 ac       	ldd	r0, Z+60	; 0x3c
    2620:	f5 ad       	ldd	r31, Z+61	; 0x3d
    2622:	e0 2d       	mov	r30, r0
    2624:	81 81       	ldd	r24, Z+1	; 0x01
    2626:	80 62       	ori	r24, 0x20	; 32
    2628:	81 83       	std	Z+1, r24	; 0x01
    262a:	8f e9       	ldi	r24, 0x9F	; 159
    262c:	9f e0       	ldi	r25, 0x0F	; 15
    262e:	01 97       	sbiw	r24, 0x01	; 1
    2630:	f1 f7       	brne	.-4      	; 0x262e <uart0_write+0x1c>
    2632:	00 c0       	rjmp	.+0      	; 0x2634 <uart0_write+0x22>
    2634:	00 00       	nop
    2636:	08 95       	ret

00002638 <uart0_putch>:
	_delay_ms(1);
}
void uart0_putch(UARTvar c)
{
	uart0_write(c);
    2638:	ec cf       	rjmp	.-40     	; 0x2612 <uart0_write>
    263a:	08 95       	ret

0000263c <uart1_read>:
	return uart;
}
UARTvar uart1_read(void)
{
	UARTvar c;
	c = UART1_Rx;
    263c:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <UART1_Rx>
	UART1_Rx = 0;
    2640:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <UART1_Rx>
    2644:	ef e9       	ldi	r30, 0x9F	; 159
    2646:	ff e0       	ldi	r31, 0x0F	; 15
    2648:	31 97       	sbiw	r30, 0x01	; 1
    264a:	f1 f7       	brne	.-4      	; 0x2648 <uart1_read+0xc>
    264c:	00 c0       	rjmp	.+0      	; 0x264e <uart1_read+0x12>
    264e:	00 00       	nop
	_delay_ms(1);
	return c;
}
    2650:	08 95       	ret

00002652 <uart1_getch>:
UARTvar uart1_getch(void)
{
	return uart1_read();
    2652:	f4 cf       	rjmp	.-24     	; 0x263c <uart1_read>
}
    2654:	08 95       	ret

00002656 <uart1_write>:
{
	rx1buff.flush(&rx1buff);
}
void uart1_write(UARTvar data)
{
	m.usart1.reg->udr1 = data;
    2656:	e6 e6       	ldi	r30, 0x66	; 102
    2658:	f2 e0       	ldi	r31, 0x02	; 2
    265a:	a0 81       	ld	r26, Z
    265c:	b1 81       	ldd	r27, Z+1	; 0x01
    265e:	14 96       	adiw	r26, 0x04	; 4
    2660:	8c 93       	st	X, r24
	m.usart1.reg->ucsr1b |= _BV(UDRIE1);
    2662:	01 90       	ld	r0, Z+
    2664:	f0 81       	ld	r31, Z
    2666:	e0 2d       	mov	r30, r0
    2668:	82 81       	ldd	r24, Z+2	; 0x02
    266a:	80 62       	ori	r24, 0x20	; 32
    266c:	82 83       	std	Z+2, r24	; 0x02
    266e:	8f e9       	ldi	r24, 0x9F	; 159
    2670:	9f e0       	ldi	r25, 0x0F	; 15
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	f1 f7       	brne	.-4      	; 0x2672 <uart1_write+0x1c>
    2676:	00 c0       	rjmp	.+0      	; 0x2678 <uart1_write+0x22>
    2678:	00 00       	nop
    267a:	08 95       	ret

0000267c <uart1_putch>:
	_delay_ms(1);
}
void uart1_putch(UARTvar c)
{
	uart1_write(c);
    267c:	ec cf       	rjmp	.-40     	; 0x2656 <uart1_write>
    267e:	08 95       	ret

00002680 <uart1_puts>:
}
void uart1_puts(UARTvar* s)
{
    2680:	cf 93       	push	r28
    2682:	df 93       	push	r29
    2684:	ec 01       	movw	r28, r24
	char tmp;
	while(*s){
    2686:	88 81       	ld	r24, Y
    2688:	88 23       	and	r24, r24
    268a:	29 f0       	breq	.+10     	; 0x2696 <uart1_puts+0x16>
    268c:	21 96       	adiw	r28, 0x01	; 1
	m.usart1.reg->ucsr1b |= _BV(UDRIE1);
	_delay_ms(1);
}
void uart1_putch(UARTvar c)
{
	uart1_write(c);
    268e:	e3 df       	rcall	.-58     	; 0x2656 <uart1_write>
}
void uart1_puts(UARTvar* s)
{
	char tmp;
	while(*s){
    2690:	89 91       	ld	r24, Y+
    2692:	81 11       	cpse	r24, r1
    2694:	fc cf       	rjmp	.-8      	; 0x268e <uart1_puts+0xe>
		tmp = *(s++);
		uart1_putch(tmp);
	}
}
    2696:	df 91       	pop	r29
    2698:	cf 91       	pop	r28
    269a:	08 95       	ret

0000269c <uart0_puts>:
void uart0_putch(UARTvar c)
{
	uart0_write(c);
}
void uart0_puts(UARTvar* s)
{
    269c:	cf 93       	push	r28
    269e:	df 93       	push	r29
    26a0:	ec 01       	movw	r28, r24
	char tmp;
	while(*s){
    26a2:	88 81       	ld	r24, Y
    26a4:	88 23       	and	r24, r24
    26a6:	29 f0       	breq	.+10     	; 0x26b2 <uart0_puts+0x16>
    26a8:	21 96       	adiw	r28, 0x01	; 1
	m.usart0.reg->ucsr0b |= _BV(UDRIE0);
	_delay_ms(1);
}
void uart0_putch(UARTvar c)
{
	uart0_write(c);
    26aa:	b3 df       	rcall	.-154    	; 0x2612 <uart0_write>
}
void uart0_puts(UARTvar* s)
{
	char tmp;
	while(*s){
    26ac:	89 91       	ld	r24, Y+
    26ae:	81 11       	cpse	r24, r1
    26b0:	fc cf       	rjmp	.-8      	; 0x26aa <uart0_puts+0xe>
		tmp = *(s++);
		uart0_putch(tmp);
	}
}
    26b2:	df 91       	pop	r29
    26b4:	cf 91       	pop	r28
    26b6:	08 95       	ret

000026b8 <UART0enable>:
void uart1_putch(UARTvar c);
void uart1_puts(UARTvar* s);

/*** Procedure & Function ***/
UART0 UART0enable(unsigned int baudrate, unsigned int FDbits, unsigned int Stopbits, unsigned int Parity )
{
    26b8:	8f 92       	push	r8
    26ba:	9f 92       	push	r9
    26bc:	af 92       	push	r10
    26be:	bf 92       	push	r11
    26c0:	cf 92       	push	r12
    26c2:	df 92       	push	r13
    26c4:	ef 92       	push	r14
    26c6:	ff 92       	push	r15
    26c8:	0f 93       	push	r16
    26ca:	1f 93       	push	r17
    26cc:	cf 93       	push	r28
    26ce:	df 93       	push	r29
    26d0:	cd b7       	in	r28, 0x3d	; 61
    26d2:	de b7       	in	r29, 0x3e	; 62
    26d4:	c0 55       	subi	r28, 0x50	; 80
    26d6:	d1 09       	sbc	r29, r1
    26d8:	0f b6       	in	r0, 0x3f	; 63
    26da:	f8 94       	cli
    26dc:	de bf       	out	0x3e, r29	; 62
    26de:	0f be       	out	0x3f, r0	; 63
    26e0:	cd bf       	out	0x3d, r28	; 61
    26e2:	7c 01       	movw	r14, r24
    26e4:	6b 01       	movw	r12, r22
    26e6:	5a 01       	movw	r10, r20
    26e8:	49 01       	movw	r8, r18
	UART0 uart;
	m = ATMEGA128enable();
    26ea:	ce 01       	movw	r24, r28
    26ec:	01 96       	adiw	r24, 0x01	; 1
    26ee:	0e 94 b9 05 	call	0xb72	; 0xb72 <ATMEGA128enable>
    26f2:	80 e5       	ldi	r24, 0x50	; 80
    26f4:	fe 01       	movw	r30, r28
    26f6:	31 96       	adiw	r30, 0x01	; 1
    26f8:	a6 e2       	ldi	r26, 0x26	; 38
    26fa:	b2 e0       	ldi	r27, 0x02	; 2
    26fc:	01 90       	ld	r0, Z+
    26fe:	0d 92       	st	X+, r0
    2700:	8a 95       	dec	r24
    2702:	e1 f7       	brne	.-8      	; 0x26fc <UART0enable+0x44>
	rx0buff = BUFFenable( UART0_RX_BUFFER_SIZE, UART0_RxBuf );
    2704:	4a e7       	ldi	r20, 0x7A	; 122
    2706:	52 e0       	ldi	r21, 0x02	; 2
    2708:	60 e2       	ldi	r22, 0x20	; 32
    270a:	ce 01       	movw	r24, r28
    270c:	01 96       	adiw	r24, 0x01	; 1
    270e:	de d3       	rcall	.+1980   	; 0x2ecc <BUFFenable>
    2710:	8e e0       	ldi	r24, 0x0E	; 14
    2712:	fe 01       	movw	r30, r28
    2714:	31 96       	adiw	r30, 0x01	; 1
    2716:	ad e9       	ldi	r26, 0x9D	; 157
    2718:	b2 e0       	ldi	r27, 0x02	; 2
    271a:	01 90       	ld	r0, Z+
    271c:	0d 92       	st	X+, r0
    271e:	8a 95       	dec	r24
    2720:	e1 f7       	brne	.-8      	; 0x271a <UART0enable+0x62>
	uart.ubrr = baudrate;
    2722:	3c 2d       	mov	r19, r12
	uart.rxflush = uart0_rxflush;
	uart.write = uart0_write;
	uart.putch = uart0_putch;
	uart.puts = uart0_puts;
	// Set baud rate
	if ( baudrate & 0x8000 ) 
    2724:	dd 20       	and	r13, r13
    2726:	44 f4       	brge	.+16     	; 0x2738 <UART0enable+0x80>
	{
   		m.usart0.reg->ucsr0a = (1 << U2X0);  // Enable 2x speed 
    2728:	e0 91 62 02 	lds	r30, 0x0262	; 0x800262 <m+0x3c>
    272c:	f0 91 63 02 	lds	r31, 0x0263	; 0x800263 <m+0x3d>
    2730:	82 e0       	ldi	r24, 0x02	; 2
    2732:	82 83       	std	Z+2, r24	; 0x02
   		baudrate &= ~0x8000;
    2734:	e8 94       	clt
    2736:	d7 f8       	bld	r13, 7
   	}
	m.usart0.reg->ubrr0h = (unsigned char)(baudrate >> 8);
    2738:	46 e2       	ldi	r20, 0x26	; 38
    273a:	52 e0       	ldi	r21, 0x02	; 2
    273c:	fa 01       	movw	r30, r20
    273e:	a4 ad       	ldd	r26, Z+60	; 0x3c
    2740:	b5 ad       	ldd	r27, Z+61	; 0x3d
    2742:	cd 01       	movw	r24, r26
    2744:	89 59       	subi	r24, 0x99	; 153
    2746:	9f 4f       	sbci	r25, 0xFF	; 255
    2748:	fc 01       	movw	r30, r24
    274a:	d0 82       	st	Z, r13
	m.usart0.reg->ubrr0l = (unsigned char) baudrate;
    274c:	cc 92       	st	X, r12
	// Enable USART receiver and transmitter and receive complete interrupt
	m.usart0.reg->ucsr0b = _BV(RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
    274e:	da 01       	movw	r26, r20
    2750:	dc 96       	adiw	r26, 0x3c	; 60
    2752:	ed 91       	ld	r30, X+
    2754:	fc 91       	ld	r31, X
    2756:	dd 97       	sbiw	r26, 0x3d	; 61
    2758:	88 e9       	ldi	r24, 0x98	; 152
    275a:	81 83       	std	Z+1, r24	; 0x01
		m.usart0->ucsr0c = (1 << URSEL0) | (3 << UCSZ00);
		uart.FDbits = 8;
		uart.Stopbits = 1;
		uart.Parity = 0;
	#else
		switch(FDbits){
    275c:	b7 e0       	ldi	r27, 0x07	; 7
    275e:	ab 16       	cp	r10, r27
    2760:	b1 04       	cpc	r11, r1
    2762:	e9 f1       	breq	.+122    	; 0x27de <UART0enable+0x126>
    2764:	58 f4       	brcc	.+22     	; 0x277c <UART0enable+0xc4>
    2766:	f5 e0       	ldi	r31, 0x05	; 5
    2768:	af 16       	cp	r10, r31
    276a:	b1 04       	cpc	r11, r1
    276c:	09 f4       	brne	.+2      	; 0x2770 <UART0enable+0xb8>
    276e:	61 c0       	rjmp	.+194    	; 0x2832 <UART0enable+0x17a>
    2770:	86 e0       	ldi	r24, 0x06	; 6
    2772:	a8 16       	cp	r10, r24
    2774:	b1 04       	cpc	r11, r1
    2776:	09 f4       	brne	.+2      	; 0x277a <UART0enable+0xc2>
    2778:	47 c0       	rjmp	.+142    	; 0x2808 <UART0enable+0x150>
    277a:	6f c0       	rjmp	.+222    	; 0x285a <UART0enable+0x1a2>
    277c:	a8 e0       	ldi	r26, 0x08	; 8
    277e:	aa 16       	cp	r10, r26
    2780:	b1 04       	cpc	r11, r1
    2782:	c9 f0       	breq	.+50     	; 0x27b6 <UART0enable+0xfe>
    2784:	b9 e0       	ldi	r27, 0x09	; 9
    2786:	ab 16       	cp	r10, r27
    2788:	b1 04       	cpc	r11, r1
    278a:	09 f0       	breq	.+2      	; 0x278e <UART0enable+0xd6>
    278c:	66 c0       	rjmp	.+204    	; 0x285a <UART0enable+0x1a2>
			case 9:
				m.usart0.reg->ucsr0b |= (1 << UCSZ02);
    278e:	e6 e2       	ldi	r30, 0x26	; 38
    2790:	f2 e0       	ldi	r31, 0x02	; 2
    2792:	a4 ad       	ldd	r26, Z+60	; 0x3c
    2794:	b5 ad       	ldd	r27, Z+61	; 0x3d
    2796:	11 96       	adiw	r26, 0x01	; 1
    2798:	8c 91       	ld	r24, X
    279a:	11 97       	sbiw	r26, 0x01	; 1
    279c:	84 60       	ori	r24, 0x04	; 4
    279e:	11 96       	adiw	r26, 0x01	; 1
    27a0:	8c 93       	st	X, r24
				m.usart0.reg->ucsr0c |= (3 << UCSZ00);
    27a2:	04 ac       	ldd	r0, Z+60	; 0x3c
    27a4:	f5 ad       	ldd	r31, Z+61	; 0x3d
    27a6:	e0 2d       	mov	r30, r0
    27a8:	e4 59       	subi	r30, 0x94	; 148
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	80 81       	ld	r24, Z
    27ae:	86 60       	ori	r24, 0x06	; 6
    27b0:	80 83       	st	Z, r24
				uart.FDbits = 9;
    27b2:	49 e0       	ldi	r20, 0x09	; 9
			break;
    27b4:	65 c0       	rjmp	.+202    	; 0x2880 <UART0enable+0x1c8>
			case 8:
				m.usart0.reg->ucsr0b &= ~(1 << UCSZ02);
    27b6:	e6 e2       	ldi	r30, 0x26	; 38
    27b8:	f2 e0       	ldi	r31, 0x02	; 2
    27ba:	a4 ad       	ldd	r26, Z+60	; 0x3c
    27bc:	b5 ad       	ldd	r27, Z+61	; 0x3d
    27be:	11 96       	adiw	r26, 0x01	; 1
    27c0:	8c 91       	ld	r24, X
    27c2:	11 97       	sbiw	r26, 0x01	; 1
    27c4:	8b 7f       	andi	r24, 0xFB	; 251
    27c6:	11 96       	adiw	r26, 0x01	; 1
    27c8:	8c 93       	st	X, r24
				m.usart0.reg->ucsr0c |= (3 << UCSZ00);
    27ca:	04 ac       	ldd	r0, Z+60	; 0x3c
    27cc:	f5 ad       	ldd	r31, Z+61	; 0x3d
    27ce:	e0 2d       	mov	r30, r0
    27d0:	e4 59       	subi	r30, 0x94	; 148
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	80 81       	ld	r24, Z
    27d6:	86 60       	ori	r24, 0x06	; 6
    27d8:	80 83       	st	Z, r24
				uart.FDbits = 8;
    27da:	48 e0       	ldi	r20, 0x08	; 8
			break;
    27dc:	51 c0       	rjmp	.+162    	; 0x2880 <UART0enable+0x1c8>
			case 7:	
				m.usart0.reg->ucsr0b &= ~(1 << UCSZ02);
    27de:	e6 e2       	ldi	r30, 0x26	; 38
    27e0:	f2 e0       	ldi	r31, 0x02	; 2
    27e2:	a4 ad       	ldd	r26, Z+60	; 0x3c
    27e4:	b5 ad       	ldd	r27, Z+61	; 0x3d
    27e6:	11 96       	adiw	r26, 0x01	; 1
    27e8:	8c 91       	ld	r24, X
    27ea:	11 97       	sbiw	r26, 0x01	; 1
    27ec:	8b 7f       	andi	r24, 0xFB	; 251
    27ee:	11 96       	adiw	r26, 0x01	; 1
    27f0:	8c 93       	st	X, r24
				m.usart0.reg->ucsr0c |= (1 << UCSZ01);
    27f2:	04 ac       	ldd	r0, Z+60	; 0x3c
    27f4:	f5 ad       	ldd	r31, Z+61	; 0x3d
    27f6:	e0 2d       	mov	r30, r0
				m.usart0.reg->ucsr0c &= ~(1 << UCSZ00);
    27f8:	e4 59       	subi	r30, 0x94	; 148
    27fa:	ff 4f       	sbci	r31, 0xFF	; 255
    27fc:	80 81       	ld	r24, Z
    27fe:	8d 7f       	andi	r24, 0xFD	; 253
    2800:	84 60       	ori	r24, 0x04	; 4
    2802:	80 83       	st	Z, r24
				uart.FDbits = 7;
    2804:	47 e0       	ldi	r20, 0x07	; 7
			break;
    2806:	3c c0       	rjmp	.+120    	; 0x2880 <UART0enable+0x1c8>
			case 6:	
				m.usart0.reg->ucsr0b &= ~(1 << UCSZ02);
    2808:	e6 e2       	ldi	r30, 0x26	; 38
    280a:	f2 e0       	ldi	r31, 0x02	; 2
    280c:	a4 ad       	ldd	r26, Z+60	; 0x3c
    280e:	b5 ad       	ldd	r27, Z+61	; 0x3d
    2810:	11 96       	adiw	r26, 0x01	; 1
    2812:	8c 91       	ld	r24, X
    2814:	11 97       	sbiw	r26, 0x01	; 1
    2816:	8b 7f       	andi	r24, 0xFB	; 251
    2818:	11 96       	adiw	r26, 0x01	; 1
    281a:	8c 93       	st	X, r24
				m.usart0.reg->ucsr0c &= ~(1 << UCSZ01);
    281c:	04 ac       	ldd	r0, Z+60	; 0x3c
    281e:	f5 ad       	ldd	r31, Z+61	; 0x3d
    2820:	e0 2d       	mov	r30, r0
				m.usart0.reg->ucsr0c |= (1 << UCSZ00);
    2822:	e4 59       	subi	r30, 0x94	; 148
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	80 81       	ld	r24, Z
    2828:	8b 7f       	andi	r24, 0xFB	; 251
    282a:	82 60       	ori	r24, 0x02	; 2
    282c:	80 83       	st	Z, r24
				uart.FDbits = 6;
    282e:	46 e0       	ldi	r20, 0x06	; 6
			break;
    2830:	27 c0       	rjmp	.+78     	; 0x2880 <UART0enable+0x1c8>
			case 5:	
				m.usart0.reg->ucsr0b &= ~(1 << UCSZ02);
    2832:	e6 e2       	ldi	r30, 0x26	; 38
    2834:	f2 e0       	ldi	r31, 0x02	; 2
    2836:	a4 ad       	ldd	r26, Z+60	; 0x3c
    2838:	b5 ad       	ldd	r27, Z+61	; 0x3d
    283a:	11 96       	adiw	r26, 0x01	; 1
    283c:	8c 91       	ld	r24, X
    283e:	11 97       	sbiw	r26, 0x01	; 1
    2840:	8b 7f       	andi	r24, 0xFB	; 251
    2842:	11 96       	adiw	r26, 0x01	; 1
    2844:	8c 93       	st	X, r24
				m.usart0.reg->ucsr0c &= ~(3 << UCSZ00);
    2846:	04 ac       	ldd	r0, Z+60	; 0x3c
    2848:	f5 ad       	ldd	r31, Z+61	; 0x3d
    284a:	e0 2d       	mov	r30, r0
    284c:	e4 59       	subi	r30, 0x94	; 148
    284e:	ff 4f       	sbci	r31, 0xFF	; 255
    2850:	80 81       	ld	r24, Z
    2852:	89 7f       	andi	r24, 0xF9	; 249
    2854:	80 83       	st	Z, r24
				uart.FDbits = 5;
    2856:	45 e0       	ldi	r20, 0x05	; 5
			break;
    2858:	13 c0       	rjmp	.+38     	; 0x2880 <UART0enable+0x1c8>
			default:
				m.usart0.reg->ucsr0b &= ~(1 << UCSZ02);
    285a:	e6 e2       	ldi	r30, 0x26	; 38
    285c:	f2 e0       	ldi	r31, 0x02	; 2
    285e:	a4 ad       	ldd	r26, Z+60	; 0x3c
    2860:	b5 ad       	ldd	r27, Z+61	; 0x3d
    2862:	11 96       	adiw	r26, 0x01	; 1
    2864:	8c 91       	ld	r24, X
    2866:	11 97       	sbiw	r26, 0x01	; 1
    2868:	8b 7f       	andi	r24, 0xFB	; 251
    286a:	11 96       	adiw	r26, 0x01	; 1
    286c:	8c 93       	st	X, r24
				m.usart0.reg->ucsr0c |= (3 << UCSZ00);
    286e:	04 ac       	ldd	r0, Z+60	; 0x3c
    2870:	f5 ad       	ldd	r31, Z+61	; 0x3d
    2872:	e0 2d       	mov	r30, r0
    2874:	e4 59       	subi	r30, 0x94	; 148
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	80 81       	ld	r24, Z
    287a:	86 60       	ori	r24, 0x06	; 6
    287c:	80 83       	st	Z, r24
				uart.FDbits = 8;
    287e:	48 e0       	ldi	r20, 0x08	; 8
			break;
		}
		switch(Stopbits){
    2880:	e1 e0       	ldi	r30, 0x01	; 1
    2882:	8e 16       	cp	r8, r30
    2884:	91 04       	cpc	r9, r1
    2886:	29 f0       	breq	.+10     	; 0x2892 <UART0enable+0x1da>
    2888:	f2 e0       	ldi	r31, 0x02	; 2
    288a:	8f 16       	cp	r8, r31
    288c:	91 04       	cpc	r9, r1
    288e:	61 f0       	breq	.+24     	; 0x28a8 <UART0enable+0x1f0>
    2890:	16 c0       	rjmp	.+44     	; 0x28be <UART0enable+0x206>
			case 1:
				m.usart0.reg->ucsr0c &= ~(1 << USBS0);
    2892:	e0 91 62 02 	lds	r30, 0x0262	; 0x800262 <m+0x3c>
    2896:	f0 91 63 02 	lds	r31, 0x0263	; 0x800263 <m+0x3d>
    289a:	e4 59       	subi	r30, 0x94	; 148
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	80 81       	ld	r24, Z
    28a0:	87 7f       	andi	r24, 0xF7	; 247
    28a2:	80 83       	st	Z, r24
				uart.Stopbits = 1;
    28a4:	21 e0       	ldi	r18, 0x01	; 1
			break;
    28a6:	15 c0       	rjmp	.+42     	; 0x28d2 <UART0enable+0x21a>
			case 2:
				m.usart0.reg->ucsr0c |= (1 << USBS0);
    28a8:	e0 91 62 02 	lds	r30, 0x0262	; 0x800262 <m+0x3c>
    28ac:	f0 91 63 02 	lds	r31, 0x0263	; 0x800263 <m+0x3d>
    28b0:	e4 59       	subi	r30, 0x94	; 148
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
    28b4:	80 81       	ld	r24, Z
    28b6:	88 60       	ori	r24, 0x08	; 8
    28b8:	80 83       	st	Z, r24
				uart.Stopbits = 2;
    28ba:	22 e0       	ldi	r18, 0x02	; 2
			break;	
    28bc:	0a c0       	rjmp	.+20     	; 0x28d2 <UART0enable+0x21a>
			default:
				m.usart0.reg->ucsr0c &= ~(1 << USBS0);
    28be:	e0 91 62 02 	lds	r30, 0x0262	; 0x800262 <m+0x3c>
    28c2:	f0 91 63 02 	lds	r31, 0x0263	; 0x800263 <m+0x3d>
    28c6:	e4 59       	subi	r30, 0x94	; 148
    28c8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ca:	80 81       	ld	r24, Z
    28cc:	87 7f       	andi	r24, 0xF7	; 247
    28ce:	80 83       	st	Z, r24
				uart.Stopbits = 1;
    28d0:	21 e0       	ldi	r18, 0x01	; 1
			break;
		}
		switch(Parity){
    28d2:	02 30       	cpi	r16, 0x02	; 2
    28d4:	11 05       	cpc	r17, r1
    28d6:	81 f0       	breq	.+32     	; 0x28f8 <UART0enable+0x240>
    28d8:	03 30       	cpi	r16, 0x03	; 3
    28da:	11 05       	cpc	r17, r1
    28dc:	c9 f0       	breq	.+50     	; 0x2910 <UART0enable+0x258>
    28de:	01 2b       	or	r16, r17
    28e0:	11 f5       	brne	.+68     	; 0x2926 <UART0enable+0x26e>
			case 0:
				m.usart0.reg->ucsr0c &= ~(3 << UPM00);
    28e2:	e0 91 62 02 	lds	r30, 0x0262	; 0x800262 <m+0x3c>
    28e6:	f0 91 63 02 	lds	r31, 0x0263	; 0x800263 <m+0x3d>
    28ea:	e4 59       	subi	r30, 0x94	; 148
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	80 81       	ld	r24, Z
    28f0:	8f 7c       	andi	r24, 0xCF	; 207
    28f2:	80 83       	st	Z, r24
				uart.Parity = 0;
    28f4:	90 e0       	ldi	r25, 0x00	; 0
			break;
    28f6:	21 c0       	rjmp	.+66     	; 0x293a <UART0enable+0x282>
			case 2:
				m.usart0.reg->ucsr0c |= (1 << UPM01);
    28f8:	e0 91 62 02 	lds	r30, 0x0262	; 0x800262 <m+0x3c>
    28fc:	f0 91 63 02 	lds	r31, 0x0263	; 0x800263 <m+0x3d>
				m.usart0.reg->ucsr0c &= ~(1 << UPM00);
    2900:	e4 59       	subi	r30, 0x94	; 148
    2902:	ff 4f       	sbci	r31, 0xFF	; 255
    2904:	80 81       	ld	r24, Z
    2906:	8f 7e       	andi	r24, 0xEF	; 239
    2908:	80 62       	ori	r24, 0x20	; 32
    290a:	80 83       	st	Z, r24
				uart.Parity = 2;
    290c:	92 e0       	ldi	r25, 0x02	; 2
			break;
    290e:	15 c0       	rjmp	.+42     	; 0x293a <UART0enable+0x282>
			case 3:
				m.usart0.reg->ucsr0c |= (3 << UPM00);
    2910:	e0 91 62 02 	lds	r30, 0x0262	; 0x800262 <m+0x3c>
    2914:	f0 91 63 02 	lds	r31, 0x0263	; 0x800263 <m+0x3d>
    2918:	e4 59       	subi	r30, 0x94	; 148
    291a:	ff 4f       	sbci	r31, 0xFF	; 255
    291c:	80 81       	ld	r24, Z
    291e:	80 63       	ori	r24, 0x30	; 48
    2920:	80 83       	st	Z, r24
				uart.Parity = 3;
    2922:	93 e0       	ldi	r25, 0x03	; 3
			break;	
    2924:	0a c0       	rjmp	.+20     	; 0x293a <UART0enable+0x282>
			default:
				m.usart0.reg->ucsr0c &= ~(3 << UPM00);
    2926:	e0 91 62 02 	lds	r30, 0x0262	; 0x800262 <m+0x3c>
    292a:	f0 91 63 02 	lds	r31, 0x0263	; 0x800263 <m+0x3d>
    292e:	e4 59       	subi	r30, 0x94	; 148
    2930:	ff 4f       	sbci	r31, 0xFF	; 255
    2932:	80 81       	ld	r24, Z
    2934:	8f 7c       	andi	r24, 0xCF	; 207
    2936:	80 83       	st	Z, r24
				uart.Parity = 0;
    2938:	90 e0       	ldi	r25, 0x00	; 0
			break;
		}
	#endif
	m.cpu.reg->sreg |= _BV(GLOBAL_INTERRUPT_ENABLE);
    293a:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <m+0xa>
    293e:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <m+0xb>
    2942:	83 85       	ldd	r24, Z+11	; 0x0b
    2944:	80 68       	ori	r24, 0x80	; 128
    2946:	83 87       	std	Z+11, r24	; 0x0b
	return uart;
    2948:	d7 01       	movw	r26, r14
    294a:	3c 93       	st	X, r19
    294c:	11 96       	adiw	r26, 0x01	; 1
    294e:	4c 93       	st	X, r20
    2950:	11 97       	sbiw	r26, 0x01	; 1
    2952:	12 96       	adiw	r26, 0x02	; 2
    2954:	2c 93       	st	X, r18
    2956:	12 97       	sbiw	r26, 0x02	; 2
    2958:	13 96       	adiw	r26, 0x03	; 3
    295a:	9c 93       	st	X, r25
    295c:	13 97       	sbiw	r26, 0x03	; 3
    295e:	8c ef       	ldi	r24, 0xFC	; 252
    2960:	92 e1       	ldi	r25, 0x12	; 18
    2962:	15 96       	adiw	r26, 0x05	; 5
    2964:	9c 93       	st	X, r25
    2966:	8e 93       	st	-X, r24
    2968:	14 97       	sbiw	r26, 0x04	; 4
    296a:	87 e0       	ldi	r24, 0x07	; 7
    296c:	93 e1       	ldi	r25, 0x13	; 19
    296e:	17 96       	adiw	r26, 0x07	; 7
    2970:	9c 93       	st	X, r25
    2972:	8e 93       	st	-X, r24
    2974:	16 97       	sbiw	r26, 0x06	; 6
    2976:	8c ed       	ldi	r24, 0xDC	; 220
    2978:	92 e1       	ldi	r25, 0x12	; 18
    297a:	19 96       	adiw	r26, 0x09	; 9
    297c:	9c 93       	st	X, r25
    297e:	8e 93       	st	-X, r24
    2980:	18 97       	sbiw	r26, 0x08	; 8
    2982:	84 ee       	ldi	r24, 0xE4	; 228
    2984:	92 e1       	ldi	r25, 0x12	; 18
    2986:	1b 96       	adiw	r26, 0x0b	; 11
    2988:	9c 93       	st	X, r25
    298a:	8e 93       	st	-X, r24
    298c:	1a 97       	sbiw	r26, 0x0a	; 10
    298e:	89 e0       	ldi	r24, 0x09	; 9
    2990:	93 e1       	ldi	r25, 0x13	; 19
    2992:	1d 96       	adiw	r26, 0x0d	; 13
    2994:	9c 93       	st	X, r25
    2996:	8e 93       	st	-X, r24
    2998:	1c 97       	sbiw	r26, 0x0c	; 12
    299a:	8c e1       	ldi	r24, 0x1C	; 28
    299c:	93 e1       	ldi	r25, 0x13	; 19
    299e:	1f 96       	adiw	r26, 0x0f	; 15
    29a0:	9c 93       	st	X, r25
    29a2:	8e 93       	st	-X, r24
    29a4:	1e 97       	sbiw	r26, 0x0e	; 14
    29a6:	8e e4       	ldi	r24, 0x4E	; 78
    29a8:	93 e1       	ldi	r25, 0x13	; 19
    29aa:	51 96       	adiw	r26, 0x11	; 17
    29ac:	9c 93       	st	X, r25
    29ae:	8e 93       	st	-X, r24
    29b0:	50 97       	sbiw	r26, 0x10	; 16
}
    29b2:	c7 01       	movw	r24, r14
    29b4:	c0 5b       	subi	r28, 0xB0	; 176
    29b6:	df 4f       	sbci	r29, 0xFF	; 255
    29b8:	0f b6       	in	r0, 0x3f	; 63
    29ba:	f8 94       	cli
    29bc:	de bf       	out	0x3e, r29	; 62
    29be:	0f be       	out	0x3f, r0	; 63
    29c0:	cd bf       	out	0x3d, r28	; 61
    29c2:	df 91       	pop	r29
    29c4:	cf 91       	pop	r28
    29c6:	1f 91       	pop	r17
    29c8:	0f 91       	pop	r16
    29ca:	ff 90       	pop	r15
    29cc:	ef 90       	pop	r14
    29ce:	df 90       	pop	r13
    29d0:	cf 90       	pop	r12
    29d2:	bf 90       	pop	r11
    29d4:	af 90       	pop	r10
    29d6:	9f 90       	pop	r9
    29d8:	8f 90       	pop	r8
    29da:	08 95       	ret

000029dc <UART1enable>:
	}
}

// these functions are only for ATmegas with two USART
UART1 UART1enable(unsigned int baudrate, unsigned int FDbits, unsigned int Stopbits, unsigned int Parity )
{
    29dc:	8f 92       	push	r8
    29de:	9f 92       	push	r9
    29e0:	af 92       	push	r10
    29e2:	bf 92       	push	r11
    29e4:	cf 92       	push	r12
    29e6:	df 92       	push	r13
    29e8:	ef 92       	push	r14
    29ea:	ff 92       	push	r15
    29ec:	0f 93       	push	r16
    29ee:	1f 93       	push	r17
    29f0:	cf 93       	push	r28
    29f2:	df 93       	push	r29
    29f4:	cd b7       	in	r28, 0x3d	; 61
    29f6:	de b7       	in	r29, 0x3e	; 62
    29f8:	c0 55       	subi	r28, 0x50	; 80
    29fa:	d1 09       	sbc	r29, r1
    29fc:	0f b6       	in	r0, 0x3f	; 63
    29fe:	f8 94       	cli
    2a00:	de bf       	out	0x3e, r29	; 62
    2a02:	0f be       	out	0x3f, r0	; 63
    2a04:	cd bf       	out	0x3d, r28	; 61
    2a06:	7c 01       	movw	r14, r24
    2a08:	6b 01       	movw	r12, r22
    2a0a:	5a 01       	movw	r10, r20
    2a0c:	49 01       	movw	r8, r18
	UART1 uart;
	m = ATMEGA128enable();
    2a0e:	ce 01       	movw	r24, r28
    2a10:	01 96       	adiw	r24, 0x01	; 1
    2a12:	0e 94 b9 05 	call	0xb72	; 0xb72 <ATMEGA128enable>
    2a16:	80 e5       	ldi	r24, 0x50	; 80
    2a18:	fe 01       	movw	r30, r28
    2a1a:	31 96       	adiw	r30, 0x01	; 1
    2a1c:	a6 e2       	ldi	r26, 0x26	; 38
    2a1e:	b2 e0       	ldi	r27, 0x02	; 2
    2a20:	01 90       	ld	r0, Z+
    2a22:	0d 92       	st	X+, r0
    2a24:	8a 95       	dec	r24
    2a26:	e1 f7       	brne	.-8      	; 0x2a20 <UART1enable+0x44>
	rx1buff = BUFFenable( UART1_RX_BUFFER_SIZE, UART1_RxBuf );
    2a28:	4b ea       	ldi	r20, 0xAB	; 171
    2a2a:	52 e0       	ldi	r21, 0x02	; 2
    2a2c:	60 e2       	ldi	r22, 0x20	; 32
    2a2e:	ce 01       	movw	r24, r28
    2a30:	01 96       	adiw	r24, 0x01	; 1
    2a32:	4c d2       	rcall	.+1176   	; 0x2ecc <BUFFenable>
    2a34:	8e e0       	ldi	r24, 0x0E	; 14
    2a36:	fe 01       	movw	r30, r28
    2a38:	31 96       	adiw	r30, 0x01	; 1
    2a3a:	ae ec       	ldi	r26, 0xCE	; 206
    2a3c:	b2 e0       	ldi	r27, 0x02	; 2
    2a3e:	01 90       	ld	r0, Z+
    2a40:	0d 92       	st	X+, r0
    2a42:	8a 95       	dec	r24
    2a44:	e1 f7       	brne	.-8      	; 0x2a3e <UART1enable+0x62>
	uart.ubrr = baudrate;
    2a46:	3c 2d       	mov	r19, r12
	uart.rxflush = uart1_rxflush;
	uart.write = uart1_write;
	uart.putch = uart1_putch;
	uart.puts = uart1_puts;
	// Set baud rate
	if ( baudrate & 0x8000 ) {
    2a48:	dd 20       	and	r13, r13
    2a4a:	44 f4       	brge	.+16     	; 0x2a5c <UART1enable+0x80>
		m.usart1.reg->ucsr1a = (1 << U2X1);  // Enable 2x speed 
    2a4c:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <m+0x40>
    2a50:	f0 91 67 02 	lds	r31, 0x0267	; 0x800267 <m+0x41>
    2a54:	82 e0       	ldi	r24, 0x02	; 2
    2a56:	83 83       	std	Z+3, r24	; 0x03
		baudrate &= ~0x8000;
    2a58:	e8 94       	clt
    2a5a:	d7 f8       	bld	r13, 7
	}
	m.usart1.reg->ubrr1h = (unsigned char)(baudrate >> 8);
    2a5c:	e6 e6       	ldi	r30, 0x66	; 102
    2a5e:	f2 e0       	ldi	r31, 0x02	; 2
    2a60:	a0 81       	ld	r26, Z
    2a62:	b1 81       	ldd	r27, Z+1	; 0x01
    2a64:	dc 92       	st	X, r13
	m.usart1.reg->ubrr1l = (unsigned char) baudrate;
    2a66:	a0 81       	ld	r26, Z
    2a68:	b1 81       	ldd	r27, Z+1	; 0x01
    2a6a:	11 96       	adiw	r26, 0x01	; 1
    2a6c:	cc 92       	st	X, r12
	// Enable USART receiver and transmitter and receive complete interrupt
	m.usart1.reg->ucsr1b = _BV(RXCIE1) | (1 << RXEN1)|(1 << TXEN1);
    2a6e:	01 90       	ld	r0, Z+
    2a70:	f0 81       	ld	r31, Z
    2a72:	e0 2d       	mov	r30, r0
    2a74:	88 e9       	ldi	r24, 0x98	; 152
    2a76:	82 83       	std	Z+2, r24	; 0x02
		uart.FDbits = 8;
		uart.Stopbits = 1;
		uart.Parity = 0;
	#else
		// Parameters
		switch(FDbits){
    2a78:	87 e0       	ldi	r24, 0x07	; 7
    2a7a:	a8 16       	cp	r10, r24
    2a7c:	b1 04       	cpc	r11, r1
    2a7e:	c9 f1       	breq	.+114    	; 0x2af2 <UART1enable+0x116>
    2a80:	58 f4       	brcc	.+22     	; 0x2a98 <UART1enable+0xbc>
    2a82:	f5 e0       	ldi	r31, 0x05	; 5
    2a84:	af 16       	cp	r10, r31
    2a86:	b1 04       	cpc	r11, r1
    2a88:	09 f4       	brne	.+2      	; 0x2a8c <UART1enable+0xb0>
    2a8a:	67 c0       	rjmp	.+206    	; 0x2b5a <UART1enable+0x17e>
    2a8c:	86 e0       	ldi	r24, 0x06	; 6
    2a8e:	a8 16       	cp	r10, r24
    2a90:	b1 04       	cpc	r11, r1
    2a92:	09 f4       	brne	.+2      	; 0x2a96 <UART1enable+0xba>
    2a94:	48 c0       	rjmp	.+144    	; 0x2b26 <UART1enable+0x14a>
    2a96:	73 c0       	rjmp	.+230    	; 0x2b7e <UART1enable+0x1a2>
    2a98:	e8 e0       	ldi	r30, 0x08	; 8
    2a9a:	ae 16       	cp	r10, r30
    2a9c:	b1 04       	cpc	r11, r1
    2a9e:	b9 f0       	breq	.+46     	; 0x2ace <UART1enable+0xf2>
    2aa0:	f9 e0       	ldi	r31, 0x09	; 9
    2aa2:	af 16       	cp	r10, r31
    2aa4:	b1 04       	cpc	r11, r1
    2aa6:	09 f0       	breq	.+2      	; 0x2aaa <UART1enable+0xce>
    2aa8:	6a c0       	rjmp	.+212    	; 0x2b7e <UART1enable+0x1a2>
			case 9:
				m.usart1.reg->ucsr1b |= (1 << UCSZ12);
    2aaa:	e6 e6       	ldi	r30, 0x66	; 102
    2aac:	f2 e0       	ldi	r31, 0x02	; 2
    2aae:	a0 81       	ld	r26, Z
    2ab0:	b1 81       	ldd	r27, Z+1	; 0x01
    2ab2:	12 96       	adiw	r26, 0x02	; 2
    2ab4:	8c 91       	ld	r24, X
    2ab6:	12 97       	sbiw	r26, 0x02	; 2
    2ab8:	84 60       	ori	r24, 0x04	; 4
    2aba:	12 96       	adiw	r26, 0x02	; 2
    2abc:	8c 93       	st	X, r24
				m.usart1.reg->ucsr1c |= (3 << UCSZ10);
    2abe:	01 90       	ld	r0, Z+
    2ac0:	f0 81       	ld	r31, Z
    2ac2:	e0 2d       	mov	r30, r0
    2ac4:	85 81       	ldd	r24, Z+5	; 0x05
    2ac6:	86 60       	ori	r24, 0x06	; 6
    2ac8:	85 83       	std	Z+5, r24	; 0x05
				uart.FDbits = 9;
    2aca:	49 e0       	ldi	r20, 0x09	; 9
			break;
    2acc:	69 c0       	rjmp	.+210    	; 0x2ba0 <UART1enable+0x1c4>
			case 8:
				m.usart1.reg->ucsr1b &= ~(1 << UCSZ12);
    2ace:	e6 e6       	ldi	r30, 0x66	; 102
    2ad0:	f2 e0       	ldi	r31, 0x02	; 2
    2ad2:	a0 81       	ld	r26, Z
    2ad4:	b1 81       	ldd	r27, Z+1	; 0x01
    2ad6:	12 96       	adiw	r26, 0x02	; 2
    2ad8:	8c 91       	ld	r24, X
    2ada:	12 97       	sbiw	r26, 0x02	; 2
    2adc:	8b 7f       	andi	r24, 0xFB	; 251
    2ade:	12 96       	adiw	r26, 0x02	; 2
    2ae0:	8c 93       	st	X, r24
				m.usart1.reg->ucsr1c |= (3 << UCSZ10);
    2ae2:	01 90       	ld	r0, Z+
    2ae4:	f0 81       	ld	r31, Z
    2ae6:	e0 2d       	mov	r30, r0
    2ae8:	85 81       	ldd	r24, Z+5	; 0x05
    2aea:	86 60       	ori	r24, 0x06	; 6
    2aec:	85 83       	std	Z+5, r24	; 0x05
				uart.FDbits = 8;
    2aee:	48 e0       	ldi	r20, 0x08	; 8
			break;
    2af0:	57 c0       	rjmp	.+174    	; 0x2ba0 <UART1enable+0x1c4>
			case 7:	
				m.usart1.reg->ucsr1b &= ~(1 << UCSZ12);
    2af2:	e6 e6       	ldi	r30, 0x66	; 102
    2af4:	f2 e0       	ldi	r31, 0x02	; 2
    2af6:	a0 81       	ld	r26, Z
    2af8:	b1 81       	ldd	r27, Z+1	; 0x01
    2afa:	12 96       	adiw	r26, 0x02	; 2
    2afc:	8c 91       	ld	r24, X
    2afe:	12 97       	sbiw	r26, 0x02	; 2
    2b00:	8b 7f       	andi	r24, 0xFB	; 251
    2b02:	12 96       	adiw	r26, 0x02	; 2
    2b04:	8c 93       	st	X, r24
				m.usart1.reg->ucsr1c |= (1 << UCSZ11);
    2b06:	a0 81       	ld	r26, Z
    2b08:	b1 81       	ldd	r27, Z+1	; 0x01
    2b0a:	15 96       	adiw	r26, 0x05	; 5
    2b0c:	8c 91       	ld	r24, X
    2b0e:	15 97       	sbiw	r26, 0x05	; 5
    2b10:	84 60       	ori	r24, 0x04	; 4
    2b12:	15 96       	adiw	r26, 0x05	; 5
    2b14:	8c 93       	st	X, r24
				m.usart1.reg->ucsr1c &= ~(1 << UCSZ10);
    2b16:	01 90       	ld	r0, Z+
    2b18:	f0 81       	ld	r31, Z
    2b1a:	e0 2d       	mov	r30, r0
    2b1c:	85 81       	ldd	r24, Z+5	; 0x05
    2b1e:	8d 7f       	andi	r24, 0xFD	; 253
    2b20:	85 83       	std	Z+5, r24	; 0x05
				uart.FDbits = 7;
    2b22:	47 e0       	ldi	r20, 0x07	; 7
			break;
    2b24:	3d c0       	rjmp	.+122    	; 0x2ba0 <UART1enable+0x1c4>
			case 6:	
				m.usart1.reg->ucsr1b &= ~(1 << UCSZ12);
    2b26:	e6 e6       	ldi	r30, 0x66	; 102
    2b28:	f2 e0       	ldi	r31, 0x02	; 2
    2b2a:	a0 81       	ld	r26, Z
    2b2c:	b1 81       	ldd	r27, Z+1	; 0x01
    2b2e:	12 96       	adiw	r26, 0x02	; 2
    2b30:	8c 91       	ld	r24, X
    2b32:	12 97       	sbiw	r26, 0x02	; 2
    2b34:	8b 7f       	andi	r24, 0xFB	; 251
    2b36:	12 96       	adiw	r26, 0x02	; 2
    2b38:	8c 93       	st	X, r24
				m.usart1.reg->ucsr1c &= ~(1 << UCSZ11);
    2b3a:	a0 81       	ld	r26, Z
    2b3c:	b1 81       	ldd	r27, Z+1	; 0x01
    2b3e:	15 96       	adiw	r26, 0x05	; 5
    2b40:	8c 91       	ld	r24, X
    2b42:	15 97       	sbiw	r26, 0x05	; 5
    2b44:	8b 7f       	andi	r24, 0xFB	; 251
    2b46:	15 96       	adiw	r26, 0x05	; 5
    2b48:	8c 93       	st	X, r24
				m.usart1.reg->ucsr1c |= (1 << UCSZ10);
    2b4a:	01 90       	ld	r0, Z+
    2b4c:	f0 81       	ld	r31, Z
    2b4e:	e0 2d       	mov	r30, r0
    2b50:	85 81       	ldd	r24, Z+5	; 0x05
    2b52:	82 60       	ori	r24, 0x02	; 2
    2b54:	85 83       	std	Z+5, r24	; 0x05
				uart.FDbits = 6;
    2b56:	46 e0       	ldi	r20, 0x06	; 6
			break;
    2b58:	23 c0       	rjmp	.+70     	; 0x2ba0 <UART1enable+0x1c4>
			case 5:	
				m.usart1.reg->ucsr1b &= ~(1 << UCSZ12);
    2b5a:	e6 e6       	ldi	r30, 0x66	; 102
    2b5c:	f2 e0       	ldi	r31, 0x02	; 2
    2b5e:	a0 81       	ld	r26, Z
    2b60:	b1 81       	ldd	r27, Z+1	; 0x01
    2b62:	12 96       	adiw	r26, 0x02	; 2
    2b64:	8c 91       	ld	r24, X
    2b66:	12 97       	sbiw	r26, 0x02	; 2
    2b68:	8b 7f       	andi	r24, 0xFB	; 251
    2b6a:	12 96       	adiw	r26, 0x02	; 2
    2b6c:	8c 93       	st	X, r24
				m.usart1.reg->ucsr1c &= ~(3 << UCSZ10);
    2b6e:	01 90       	ld	r0, Z+
    2b70:	f0 81       	ld	r31, Z
    2b72:	e0 2d       	mov	r30, r0
    2b74:	85 81       	ldd	r24, Z+5	; 0x05
    2b76:	89 7f       	andi	r24, 0xF9	; 249
    2b78:	85 83       	std	Z+5, r24	; 0x05
				uart.FDbits = 5;
    2b7a:	45 e0       	ldi	r20, 0x05	; 5
			break;
    2b7c:	11 c0       	rjmp	.+34     	; 0x2ba0 <UART1enable+0x1c4>
			default:
				m.usart1.reg->ucsr1b &= ~(1 << UCSZ12);
    2b7e:	e6 e6       	ldi	r30, 0x66	; 102
    2b80:	f2 e0       	ldi	r31, 0x02	; 2
    2b82:	a0 81       	ld	r26, Z
    2b84:	b1 81       	ldd	r27, Z+1	; 0x01
    2b86:	12 96       	adiw	r26, 0x02	; 2
    2b88:	8c 91       	ld	r24, X
    2b8a:	12 97       	sbiw	r26, 0x02	; 2
    2b8c:	8b 7f       	andi	r24, 0xFB	; 251
    2b8e:	12 96       	adiw	r26, 0x02	; 2
    2b90:	8c 93       	st	X, r24
				m.usart1.reg->ucsr1c |= (3 << UCSZ10);
    2b92:	01 90       	ld	r0, Z+
    2b94:	f0 81       	ld	r31, Z
    2b96:	e0 2d       	mov	r30, r0
    2b98:	85 81       	ldd	r24, Z+5	; 0x05
    2b9a:	86 60       	ori	r24, 0x06	; 6
    2b9c:	85 83       	std	Z+5, r24	; 0x05
				uart.FDbits = 8;
    2b9e:	48 e0       	ldi	r20, 0x08	; 8
			break;
		}
		switch(Stopbits){
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	88 16       	cp	r8, r24
    2ba4:	91 04       	cpc	r9, r1
    2ba6:	29 f0       	breq	.+10     	; 0x2bb2 <UART1enable+0x1d6>
    2ba8:	e2 e0       	ldi	r30, 0x02	; 2
    2baa:	8e 16       	cp	r8, r30
    2bac:	91 04       	cpc	r9, r1
    2bae:	51 f0       	breq	.+20     	; 0x2bc4 <UART1enable+0x1e8>
    2bb0:	12 c0       	rjmp	.+36     	; 0x2bd6 <UART1enable+0x1fa>
			case 1:
				m.usart1.reg->ucsr1c &= ~(1 << USBS1);
    2bb2:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <m+0x40>
    2bb6:	f0 91 67 02 	lds	r31, 0x0267	; 0x800267 <m+0x41>
    2bba:	85 81       	ldd	r24, Z+5	; 0x05
    2bbc:	87 7f       	andi	r24, 0xF7	; 247
    2bbe:	85 83       	std	Z+5, r24	; 0x05
				uart.Stopbits = 1;
    2bc0:	21 e0       	ldi	r18, 0x01	; 1
			break;
    2bc2:	11 c0       	rjmp	.+34     	; 0x2be6 <UART1enable+0x20a>
			case 2:
				m.usart1.reg->ucsr1c |= (1 << USBS1);
    2bc4:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <m+0x40>
    2bc8:	f0 91 67 02 	lds	r31, 0x0267	; 0x800267 <m+0x41>
    2bcc:	85 81       	ldd	r24, Z+5	; 0x05
    2bce:	88 60       	ori	r24, 0x08	; 8
    2bd0:	85 83       	std	Z+5, r24	; 0x05
				uart.Stopbits = 2;
    2bd2:	22 e0       	ldi	r18, 0x02	; 2
			break;
    2bd4:	08 c0       	rjmp	.+16     	; 0x2be6 <UART1enable+0x20a>
			default:
				m.usart1.reg->ucsr1c &= ~(1 << USBS1);
    2bd6:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <m+0x40>
    2bda:	f0 91 67 02 	lds	r31, 0x0267	; 0x800267 <m+0x41>
    2bde:	85 81       	ldd	r24, Z+5	; 0x05
    2be0:	87 7f       	andi	r24, 0xF7	; 247
    2be2:	85 83       	std	Z+5, r24	; 0x05
				uart.Stopbits = 1;
    2be4:	21 e0       	ldi	r18, 0x01	; 1
			break;
		}
		switch(Parity){
    2be6:	02 30       	cpi	r16, 0x02	; 2
    2be8:	11 05       	cpc	r17, r1
    2bea:	71 f0       	breq	.+28     	; 0x2c08 <UART1enable+0x22c>
    2bec:	03 30       	cpi	r16, 0x03	; 3
    2bee:	11 05       	cpc	r17, r1
    2bf0:	e9 f0       	breq	.+58     	; 0x2c2c <UART1enable+0x250>
    2bf2:	01 2b       	or	r16, r17
    2bf4:	21 f5       	brne	.+72     	; 0x2c3e <UART1enable+0x262>
			case 0: // NONE
				m.usart1.reg->ucsr1c &= ~(3 << UPM10);
    2bf6:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <m+0x40>
    2bfa:	f0 91 67 02 	lds	r31, 0x0267	; 0x800267 <m+0x41>
    2bfe:	85 81       	ldd	r24, Z+5	; 0x05
    2c00:	8f 7c       	andi	r24, 0xCF	; 207
    2c02:	85 83       	std	Z+5, r24	; 0x05
				uart.Parity = 0;
    2c04:	90 e0       	ldi	r25, 0x00	; 0
			break;
    2c06:	23 c0       	rjmp	.+70     	; 0x2c4e <UART1enable+0x272>
			case 2: // EVEN
				m.usart1.reg->ucsr1c |= (1 << UPM11);
    2c08:	e6 e6       	ldi	r30, 0x66	; 102
    2c0a:	f2 e0       	ldi	r31, 0x02	; 2
    2c0c:	a0 81       	ld	r26, Z
    2c0e:	b1 81       	ldd	r27, Z+1	; 0x01
    2c10:	15 96       	adiw	r26, 0x05	; 5
    2c12:	8c 91       	ld	r24, X
    2c14:	15 97       	sbiw	r26, 0x05	; 5
    2c16:	80 62       	ori	r24, 0x20	; 32
    2c18:	15 96       	adiw	r26, 0x05	; 5
    2c1a:	8c 93       	st	X, r24
				m.usart1.reg->ucsr1c &= ~(1 << UPM10);
    2c1c:	01 90       	ld	r0, Z+
    2c1e:	f0 81       	ld	r31, Z
    2c20:	e0 2d       	mov	r30, r0
    2c22:	85 81       	ldd	r24, Z+5	; 0x05
    2c24:	8f 7e       	andi	r24, 0xEF	; 239
    2c26:	85 83       	std	Z+5, r24	; 0x05
				uart.Parity = 2;
    2c28:	92 e0       	ldi	r25, 0x02	; 2
			break;
    2c2a:	11 c0       	rjmp	.+34     	; 0x2c4e <UART1enable+0x272>
			case 3: // ODD
				m.usart1.reg->ucsr1c |= (3 << UPM10);
    2c2c:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <m+0x40>
    2c30:	f0 91 67 02 	lds	r31, 0x0267	; 0x800267 <m+0x41>
    2c34:	85 81       	ldd	r24, Z+5	; 0x05
    2c36:	80 63       	ori	r24, 0x30	; 48
    2c38:	85 83       	std	Z+5, r24	; 0x05
				uart.Parity = 3;
    2c3a:	93 e0       	ldi	r25, 0x03	; 3
			break;	
    2c3c:	08 c0       	rjmp	.+16     	; 0x2c4e <UART1enable+0x272>
			default:
				m.usart1.reg->ucsr1c &= ~(3 << UPM10);
    2c3e:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <m+0x40>
    2c42:	f0 91 67 02 	lds	r31, 0x0267	; 0x800267 <m+0x41>
    2c46:	85 81       	ldd	r24, Z+5	; 0x05
    2c48:	8f 7c       	andi	r24, 0xCF	; 207
    2c4a:	85 83       	std	Z+5, r24	; 0x05
				uart.Parity = 0;
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
			break;
		}
	#endif
	m.cpu.reg->sreg |= _BV(GLOBAL_INTERRUPT_ENABLE);
    2c4e:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <m+0xa>
    2c52:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <m+0xb>
    2c56:	83 85       	ldd	r24, Z+11	; 0x0b
    2c58:	80 68       	ori	r24, 0x80	; 128
    2c5a:	83 87       	std	Z+11, r24	; 0x0b
	return uart;
    2c5c:	f7 01       	movw	r30, r14
    2c5e:	30 83       	st	Z, r19
    2c60:	41 83       	std	Z+1, r20	; 0x01
    2c62:	22 83       	std	Z+2, r18	; 0x02
    2c64:	93 83       	std	Z+3, r25	; 0x03
    2c66:	8e e1       	ldi	r24, 0x1E	; 30
    2c68:	93 e1       	ldi	r25, 0x13	; 19
    2c6a:	95 83       	std	Z+5, r25	; 0x05
    2c6c:	84 83       	std	Z+4, r24	; 0x04
    2c6e:	89 e2       	ldi	r24, 0x29	; 41
    2c70:	93 e1       	ldi	r25, 0x13	; 19
    2c72:	97 83       	std	Z+7, r25	; 0x07
    2c74:	86 83       	std	Z+6, r24	; 0x06
    2c76:	8c ee       	ldi	r24, 0xEC	; 236
    2c78:	92 e1       	ldi	r25, 0x12	; 18
    2c7a:	91 87       	std	Z+9, r25	; 0x09
    2c7c:	80 87       	std	Z+8, r24	; 0x08
    2c7e:	84 ef       	ldi	r24, 0xF4	; 244
    2c80:	92 e1       	ldi	r25, 0x12	; 18
    2c82:	93 87       	std	Z+11, r25	; 0x0b
    2c84:	82 87       	std	Z+10, r24	; 0x0a
    2c86:	8b e2       	ldi	r24, 0x2B	; 43
    2c88:	93 e1       	ldi	r25, 0x13	; 19
    2c8a:	95 87       	std	Z+13, r25	; 0x0d
    2c8c:	84 87       	std	Z+12, r24	; 0x0c
    2c8e:	8e e3       	ldi	r24, 0x3E	; 62
    2c90:	93 e1       	ldi	r25, 0x13	; 19
    2c92:	97 87       	std	Z+15, r25	; 0x0f
    2c94:	86 87       	std	Z+14, r24	; 0x0e
    2c96:	80 e4       	ldi	r24, 0x40	; 64
    2c98:	93 e1       	ldi	r25, 0x13	; 19
    2c9a:	91 8b       	std	Z+17, r25	; 0x11
    2c9c:	80 8b       	std	Z+16, r24	; 0x10
}
    2c9e:	c7 01       	movw	r24, r14
    2ca0:	c0 5b       	subi	r28, 0xB0	; 176
    2ca2:	df 4f       	sbci	r29, 0xFF	; 255
    2ca4:	0f b6       	in	r0, 0x3f	; 63
    2ca6:	f8 94       	cli
    2ca8:	de bf       	out	0x3e, r29	; 62
    2caa:	0f be       	out	0x3f, r0	; 63
    2cac:	cd bf       	out	0x3d, r28	; 61
    2cae:	df 91       	pop	r29
    2cb0:	cf 91       	pop	r28
    2cb2:	1f 91       	pop	r17
    2cb4:	0f 91       	pop	r16
    2cb6:	ff 90       	pop	r15
    2cb8:	ef 90       	pop	r14
    2cba:	df 90       	pop	r13
    2cbc:	cf 90       	pop	r12
    2cbe:	bf 90       	pop	r11
    2cc0:	af 90       	pop	r10
    2cc2:	9f 90       	pop	r9
    2cc4:	8f 90       	pop	r8
    2cc6:	08 95       	ret

00002cc8 <__vector_18>:
	}
}

/*** File Interrupt ***/
ISR(UART0_RECEIVE_INTERRUPT)
{
    2cc8:	1f 92       	push	r1
    2cca:	0f 92       	push	r0
    2ccc:	0f b6       	in	r0, 0x3f	; 63
    2cce:	0f 92       	push	r0
    2cd0:	11 24       	eor	r1, r1
    2cd2:	0b b6       	in	r0, 0x3b	; 59
    2cd4:	0f 92       	push	r0
    2cd6:	2f 93       	push	r18
    2cd8:	3f 93       	push	r19
    2cda:	4f 93       	push	r20
    2cdc:	5f 93       	push	r21
    2cde:	6f 93       	push	r22
    2ce0:	7f 93       	push	r23
    2ce2:	8f 93       	push	r24
    2ce4:	9f 93       	push	r25
    2ce6:	af 93       	push	r26
    2ce8:	bf 93       	push	r27
    2cea:	ef 93       	push	r30
    2cec:	ff 93       	push	r31
	unsigned char bit9;
	unsigned char usr;
	
	usr  = m.usart0.reg->ucsr0a;
    2cee:	e0 91 62 02 	lds	r30, 0x0262	; 0x800262 <m+0x3c>
    2cf2:	f0 91 63 02 	lds	r31, 0x0263	; 0x800263 <m+0x3d>
	bit9 = m.usart0.reg->ucsr0b;
	bit9 = 0x01 & (bit9 >> 1);
	
	UART0_LastRxError = (usr & (_BV(FE0) | _BV(DOR0)));
    2cf6:	82 81       	ldd	r24, Z+2	; 0x02
    2cf8:	88 71       	andi	r24, 0x18	; 24
    2cfa:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <UART0_LastRxError>
	
	UART0_Rx = m.usart0.reg->udr0;
    2cfe:	63 81       	ldd	r22, Z+3	; 0x03
    2d00:	60 93 9c 02 	sts	0x029C, r22	; 0x80029c <UART0_Rx>
	rx0buff.push(&rx0buff, UART0_Rx);
    2d04:	e0 91 a5 02 	lds	r30, 0x02A5	; 0x8002a5 <rx0buff+0x8>
    2d08:	f0 91 a6 02 	lds	r31, 0x02A6	; 0x8002a6 <rx0buff+0x9>
    2d0c:	8d e9       	ldi	r24, 0x9D	; 157
    2d0e:	92 e0       	ldi	r25, 0x02	; 2
    2d10:	09 95       	icall
}
    2d12:	ff 91       	pop	r31
    2d14:	ef 91       	pop	r30
    2d16:	bf 91       	pop	r27
    2d18:	af 91       	pop	r26
    2d1a:	9f 91       	pop	r25
    2d1c:	8f 91       	pop	r24
    2d1e:	7f 91       	pop	r23
    2d20:	6f 91       	pop	r22
    2d22:	5f 91       	pop	r21
    2d24:	4f 91       	pop	r20
    2d26:	3f 91       	pop	r19
    2d28:	2f 91       	pop	r18
    2d2a:	0f 90       	pop	r0
    2d2c:	0b be       	out	0x3b, r0	; 59
    2d2e:	0f 90       	pop	r0
    2d30:	0f be       	out	0x3f, r0	; 63
    2d32:	0f 90       	pop	r0
    2d34:	1f 90       	pop	r1
    2d36:	18 95       	reti

00002d38 <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
{
    2d38:	1f 92       	push	r1
    2d3a:	0f 92       	push	r0
    2d3c:	0f b6       	in	r0, 0x3f	; 63
    2d3e:	0f 92       	push	r0
    2d40:	11 24       	eor	r1, r1
    2d42:	0b b6       	in	r0, 0x3b	; 59
    2d44:	0f 92       	push	r0
    2d46:	8f 93       	push	r24
    2d48:	ef 93       	push	r30
    2d4a:	ff 93       	push	r31
	m.usart0.reg->ucsr0b &= ~_BV(UDRIE0);
    2d4c:	e0 91 62 02 	lds	r30, 0x0262	; 0x800262 <m+0x3c>
    2d50:	f0 91 63 02 	lds	r31, 0x0263	; 0x800263 <m+0x3d>
    2d54:	81 81       	ldd	r24, Z+1	; 0x01
    2d56:	8f 7d       	andi	r24, 0xDF	; 223
    2d58:	81 83       	std	Z+1, r24	; 0x01
}
    2d5a:	ff 91       	pop	r31
    2d5c:	ef 91       	pop	r30
    2d5e:	8f 91       	pop	r24
    2d60:	0f 90       	pop	r0
    2d62:	0b be       	out	0x3b, r0	; 59
    2d64:	0f 90       	pop	r0
    2d66:	0f be       	out	0x3f, r0	; 63
    2d68:	0f 90       	pop	r0
    2d6a:	1f 90       	pop	r1
    2d6c:	18 95       	reti

00002d6e <__vector_30>:

SIGNAL(UART1_RECEIVE_INTERRUPT)
{
    2d6e:	1f 92       	push	r1
    2d70:	0f 92       	push	r0
    2d72:	0f b6       	in	r0, 0x3f	; 63
    2d74:	0f 92       	push	r0
    2d76:	11 24       	eor	r1, r1
    2d78:	0b b6       	in	r0, 0x3b	; 59
    2d7a:	0f 92       	push	r0
    2d7c:	2f 93       	push	r18
    2d7e:	3f 93       	push	r19
    2d80:	4f 93       	push	r20
    2d82:	5f 93       	push	r21
    2d84:	6f 93       	push	r22
    2d86:	7f 93       	push	r23
    2d88:	8f 93       	push	r24
    2d8a:	9f 93       	push	r25
    2d8c:	af 93       	push	r26
    2d8e:	bf 93       	push	r27
    2d90:	ef 93       	push	r30
    2d92:	ff 93       	push	r31
	unsigned char bit9;
	unsigned char usr;
	
	usr  = m.usart1.reg->ucsr1a;
    2d94:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <m+0x40>
    2d98:	f0 91 67 02 	lds	r31, 0x0267	; 0x800267 <m+0x41>
	bit9 = m.usart1.reg->ucsr1b;
	bit9 = 0x01 & (bit9 >> 1);
 	   
	UART1_LastRxError = (usr & (_BV(FE1) | _BV(DOR1)));
    2d9c:	83 81       	ldd	r24, Z+3	; 0x03
    2d9e:	88 71       	andi	r24, 0x18	; 24
    2da0:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <UART1_LastRxError>
	
	UART1_Rx = m.usart1.reg->udr1;
    2da4:	64 81       	ldd	r22, Z+4	; 0x04
    2da6:	60 93 9b 02 	sts	0x029B, r22	; 0x80029b <UART1_Rx>
	rx1buff.push(&rx1buff, UART1_Rx);
    2daa:	e0 91 d6 02 	lds	r30, 0x02D6	; 0x8002d6 <rx1buff+0x8>
    2dae:	f0 91 d7 02 	lds	r31, 0x02D7	; 0x8002d7 <rx1buff+0x9>
    2db2:	8e ec       	ldi	r24, 0xCE	; 206
    2db4:	92 e0       	ldi	r25, 0x02	; 2
    2db6:	09 95       	icall
}
    2db8:	ff 91       	pop	r31
    2dba:	ef 91       	pop	r30
    2dbc:	bf 91       	pop	r27
    2dbe:	af 91       	pop	r26
    2dc0:	9f 91       	pop	r25
    2dc2:	8f 91       	pop	r24
    2dc4:	7f 91       	pop	r23
    2dc6:	6f 91       	pop	r22
    2dc8:	5f 91       	pop	r21
    2dca:	4f 91       	pop	r20
    2dcc:	3f 91       	pop	r19
    2dce:	2f 91       	pop	r18
    2dd0:	0f 90       	pop	r0
    2dd2:	0b be       	out	0x3b, r0	; 59
    2dd4:	0f 90       	pop	r0
    2dd6:	0f be       	out	0x3f, r0	; 63
    2dd8:	0f 90       	pop	r0
    2dda:	1f 90       	pop	r1
    2ddc:	18 95       	reti

00002dde <__vector_31>:
SIGNAL(UART1_TRANSMIT_INTERRUPT)
{
    2dde:	1f 92       	push	r1
    2de0:	0f 92       	push	r0
    2de2:	0f b6       	in	r0, 0x3f	; 63
    2de4:	0f 92       	push	r0
    2de6:	11 24       	eor	r1, r1
    2de8:	0b b6       	in	r0, 0x3b	; 59
    2dea:	0f 92       	push	r0
    2dec:	8f 93       	push	r24
    2dee:	ef 93       	push	r30
    2df0:	ff 93       	push	r31
	m.usart1.reg->ucsr1b &= ~_BV(UDRIE1);
    2df2:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <m+0x40>
    2df6:	f0 91 67 02 	lds	r31, 0x0267	; 0x800267 <m+0x41>
    2dfa:	82 81       	ldd	r24, Z+2	; 0x02
    2dfc:	8f 7d       	andi	r24, 0xDF	; 223
    2dfe:	82 83       	std	Z+2, r24	; 0x02
}
    2e00:	ff 91       	pop	r31
    2e02:	ef 91       	pop	r30
    2e04:	8f 91       	pop	r24
    2e06:	0f 90       	pop	r0
    2e08:	0b be       	out	0x3b, r0	; 59
    2e0a:	0f 90       	pop	r0
    2e0c:	0f be       	out	0x3f, r0	; 63
    2e0e:	0f 90       	pop	r0
    2e10:	1f 90       	pop	r1
    2e12:	18 95       	reti

00002e14 <EEPROMenable>:
/*** File Variable ***/

/*** File Header ***/

/*** Procedure & Function ***/
EEPROM EEPROMenable(void){
    2e14:	fc 01       	movw	r30, r24
	eprom.write_float = eeprom_write_float;
	eprom.update_float = eeprom_update_float;
	eprom.read_block = eeprom_read_block;
	eprom.write_block = eeprom_write_block;
	eprom.update_block = eeprom_update_block;
	return eprom;
    2e16:	8c e9       	ldi	r24, 0x9C	; 156
    2e18:	90 e3       	ldi	r25, 0x30	; 48
    2e1a:	91 83       	std	Z+1, r25	; 0x01
    2e1c:	80 83       	st	Z, r24
    2e1e:	8e ed       	ldi	r24, 0xDE	; 222
    2e20:	90 e3       	ldi	r25, 0x30	; 48
    2e22:	93 83       	std	Z+3, r25	; 0x03
    2e24:	82 83       	std	Z+2, r24	; 0x02
    2e26:	88 eb       	ldi	r24, 0xB8	; 184
    2e28:	90 e3       	ldi	r25, 0x30	; 48
    2e2a:	95 83       	std	Z+5, r25	; 0x05
    2e2c:	84 83       	std	Z+4, r24	; 0x04
    2e2e:	84 ea       	ldi	r24, 0xA4	; 164
    2e30:	90 e3       	ldi	r25, 0x30	; 48
    2e32:	97 83       	std	Z+7, r25	; 0x07
    2e34:	86 83       	std	Z+6, r24	; 0x06
    2e36:	80 ef       	ldi	r24, 0xF0	; 240
    2e38:	90 e3       	ldi	r25, 0x30	; 48
    2e3a:	91 87       	std	Z+9, r25	; 0x09
    2e3c:	80 87       	std	Z+8, r24	; 0x08
    2e3e:	81 ed       	ldi	r24, 0xD1	; 209
    2e40:	90 e3       	ldi	r25, 0x30	; 48
    2e42:	93 87       	std	Z+11, r25	; 0x0b
    2e44:	82 87       	std	Z+10, r24	; 0x0a
    2e46:	8b ee       	ldi	r24, 0xEB	; 235
    2e48:	90 e3       	ldi	r25, 0x30	; 48
    2e4a:	97 87       	std	Z+15, r25	; 0x0f
    2e4c:	86 87       	std	Z+14, r24	; 0x0e
    2e4e:	8b ee       	ldi	r24, 0xEB	; 235
    2e50:	90 e3       	ldi	r25, 0x30	; 48
    2e52:	95 8b       	std	Z+21, r25	; 0x15
    2e54:	84 8b       	std	Z+20, r24	; 0x14
    2e56:	89 ec       	ldi	r24, 0xC9	; 201
    2e58:	90 e3       	ldi	r25, 0x30	; 48
    2e5a:	97 8b       	std	Z+23, r25	; 0x17
    2e5c:	86 8b       	std	Z+22, r24	; 0x16
    2e5e:	8c e8       	ldi	r24, 0x8C	; 140
    2e60:	90 e3       	ldi	r25, 0x30	; 48
    2e62:	91 8f       	std	Z+25, r25	; 0x19
    2e64:	80 8f       	std	Z+24, r24	; 0x18
    2e66:	85 ed       	ldi	r24, 0xD5	; 213
    2e68:	90 e3       	ldi	r25, 0x30	; 48
    2e6a:	93 8f       	std	Z+27, r25	; 0x1b
    2e6c:	82 8f       	std	Z+26, r24	; 0x1a
    2e6e:	89 ea       	ldi	r24, 0xA9	; 169
    2e70:	90 e3       	ldi	r25, 0x30	; 48
    2e72:	95 8f       	std	Z+29, r25	; 0x1d
    2e74:	84 8f       	std	Z+28, r24	; 0x1c
}
    2e76:	cf 01       	movw	r24, r30
    2e78:	08 95       	ret

00002e7a <BUFF_push>:
}

void BUFF_push( BUFF* self, BUFFvar data ){
	BUFFvar* head; BUFFvar* next;
	head = self->head;
	if(data){
    2e7a:	66 23       	and	r22, r22
    2e7c:	c1 f0       	breq	.+48     	; 0x2eae <BUFF_push+0x34>
	return ret; // return copy
}

void BUFF_push( BUFF* self, BUFFvar data ){
	BUFFvar* head; BUFFvar* next;
	head = self->head;
    2e7e:	dc 01       	movw	r26, r24
    2e80:	12 96       	adiw	r26, 0x02	; 2
    2e82:	ed 91       	ld	r30, X+
    2e84:	fc 91       	ld	r31, X
    2e86:	13 97       	sbiw	r26, 0x03	; 3
	if(data){
		if( head == self->end ){
    2e88:	14 96       	adiw	r26, 0x04	; 4
    2e8a:	2d 91       	ld	r18, X+
    2e8c:	3c 91       	ld	r19, X
    2e8e:	15 97       	sbiw	r26, 0x05	; 5
    2e90:	e2 17       	cp	r30, r18
    2e92:	f3 07       	cpc	r31, r19
    2e94:	29 f4       	brne	.+10     	; 0x2ea0 <BUFF_push+0x26>
			head = self->orig;
    2e96:	ed 91       	ld	r30, X+
    2e98:	fc 91       	ld	r31, X
			next = head + 1;
    2e9a:	df 01       	movw	r26, r30
    2e9c:	11 96       	adiw	r26, 0x01	; 1
    2e9e:	02 c0       	rjmp	.+4      	; 0x2ea4 <BUFF_push+0x2a>
		}else{
			next = head + 1;
    2ea0:	df 01       	movw	r26, r30
    2ea2:	11 96       	adiw	r26, 0x01	; 1
		}
			*head = data;
    2ea4:	60 83       	st	Z, r22
			*next = 0;
    2ea6:	1c 92       	st	X, r1
			self->head = next;
    2ea8:	fc 01       	movw	r30, r24
    2eaa:	b3 83       	std	Z+3, r27	; 0x03
    2eac:	a2 83       	std	Z+2, r26	; 0x02
    2eae:	08 95       	ret

00002eb0 <BUFF_raw>:
	}
}

BUFFvar* BUFF_raw( BUFF* self){
		return self->orig;
}
    2eb0:	fc 01       	movw	r30, r24
    2eb2:	80 81       	ld	r24, Z
    2eb4:	91 81       	ldd	r25, Z+1	; 0x01
    2eb6:	08 95       	ret

00002eb8 <BUFF_flush>:

void BUFF_flush( BUFF* self ){
	BUFFvar* head;
	head = self->orig;
    2eb8:	dc 01       	movw	r26, r24
    2eba:	ed 91       	ld	r30, X+
    2ebc:	fc 91       	ld	r31, X
    2ebe:	11 97       	sbiw	r26, 0x01	; 1
	self->head = head;
    2ec0:	13 96       	adiw	r26, 0x03	; 3
    2ec2:	fc 93       	st	X, r31
    2ec4:	ee 93       	st	-X, r30
    2ec6:	12 97       	sbiw	r26, 0x02	; 2
	*head = 0;
    2ec8:	10 82       	st	Z, r1
    2eca:	08 95       	ret

00002ecc <BUFFenable>:
BUFFvar* BUFF_raw(BUFF* self);
void BUFF_flush(BUFF* self);

/*** Procedure & Function ***/
BUFF BUFFenable( uint8_t size_buff, BUFFvar* buff )
{
    2ecc:	fc 01       	movw	r30, r24
	ret.end = buff + ( size_buff - 1 ); // generic
	// function pointers
	ret.push = BUFF_push;
	ret.raw = BUFF_raw;
	ret.flush = BUFF_flush;
	return ret; // return copy
    2ece:	51 83       	std	Z+1, r21	; 0x01
    2ed0:	40 83       	st	Z, r20
    2ed2:	53 83       	std	Z+3, r21	; 0x03
    2ed4:	42 83       	std	Z+2, r20	; 0x02
    2ed6:	70 e0       	ldi	r23, 0x00	; 0
    2ed8:	61 50       	subi	r22, 0x01	; 1
    2eda:	71 09       	sbc	r23, r1
    2edc:	46 0f       	add	r20, r22
    2ede:	57 1f       	adc	r21, r23
    2ee0:	55 83       	std	Z+5, r21	; 0x05
    2ee2:	44 83       	std	Z+4, r20	; 0x04
    2ee4:	8d e3       	ldi	r24, 0x3D	; 61
    2ee6:	97 e1       	ldi	r25, 0x17	; 23
    2ee8:	91 87       	std	Z+9, r25	; 0x09
    2eea:	80 87       	std	Z+8, r24	; 0x08
    2eec:	88 e5       	ldi	r24, 0x58	; 88
    2eee:	97 e1       	ldi	r25, 0x17	; 23
    2ef0:	93 87       	std	Z+11, r25	; 0x0b
    2ef2:	82 87       	std	Z+10, r24	; 0x0a
    2ef4:	8c e5       	ldi	r24, 0x5C	; 92
    2ef6:	97 e1       	ldi	r25, 0x17	; 23
    2ef8:	95 87       	std	Z+13, r25	; 0x0d
    2efa:	84 87       	std	Z+12, r24	; 0x0c
}
    2efc:	cf 01       	movw	r24, r30
    2efe:	08 95       	ret

00002f00 <EXPLODEupdate>:
	explode.update = EXPLODEupdate;
	return explode; // return copy
}
// boot (preamble in while loop)
void EXPLODEupdate(EXPLODE *self, uint8_t x)
{
    2f00:	fc 01       	movw	r30, r24
	self->XI = self->XF;
    2f02:	92 81       	ldd	r25, Z+2	; 0x02
    2f04:	83 81       	ldd	r24, Z+3	; 0x03
    2f06:	90 83       	st	Z, r25
    2f08:	81 83       	std	Z+1, r24	; 0x01
	self->XF = x;
    2f0a:	26 2f       	mov	r18, r22
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	33 83       	std	Z+3, r19	; 0x03
    2f10:	22 83       	std	Z+2, r18	; 0x02
}
// hl
uint8_t EXPLODEhl(EXPLODE *self)
{
	uint8_t i;
	i = self->XF ^ self->XI;
    2f12:	26 2f       	mov	r18, r22
    2f14:	29 27       	eor	r18, r25
// boot (preamble in while loop)
void EXPLODEupdate(EXPLODE *self, uint8_t x)
{
	self->XI = self->XF;
	self->XF = x;
	self->HL = EXPLODEhl(self);
    2f16:	49 2f       	mov	r20, r25
    2f18:	42 23       	and	r20, r18
    2f1a:	50 e0       	ldi	r21, 0x00	; 0
    2f1c:	55 83       	std	Z+5, r21	; 0x05
    2f1e:	44 83       	std	Z+4, r20	; 0x04
	self->LH = EXPLODElh(self);
    2f20:	26 23       	and	r18, r22
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	37 83       	std	Z+7, r19	; 0x07
    2f26:	26 83       	std	Z+6, r18	; 0x06
	self->HH = EXPLODEhh(self);
    2f28:	26 2f       	mov	r18, r22
    2f2a:	29 23       	and	r18, r25
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	31 87       	std	Z+9, r19	; 0x09
    2f30:	20 87       	std	Z+8, r18	; 0x08
	self->LL = EXPLODEll(self);
    2f32:	96 2b       	or	r25, r22
    2f34:	90 95       	com	r25
    2f36:	69 2f       	mov	r22, r25
    2f38:	70 e0       	ldi	r23, 0x00	; 0
    2f3a:	73 87       	std	Z+11, r23	; 0x0b
    2f3c:	62 87       	std	Z+10, r22	; 0x0a
    2f3e:	08 95       	ret

00002f40 <EXPLODEenable>:
	// initialize VAR
	explode.XI = 0;
	explode.XF = 0;
	// function pointers
	explode.update = EXPLODEupdate;
	return explode; // return copy
    2f40:	fc 01       	movw	r30, r24
    2f42:	11 82       	std	Z+1, r1	; 0x01
    2f44:	10 82       	st	Z, r1
    2f46:	13 82       	std	Z+3, r1	; 0x03
    2f48:	12 82       	std	Z+2, r1	; 0x02
    2f4a:	20 e8       	ldi	r18, 0x80	; 128
    2f4c:	37 e1       	ldi	r19, 0x17	; 23
    2f4e:	35 87       	std	Z+13, r19	; 0x0d
    2f50:	24 87       	std	Z+12, r18	; 0x0c
}
    2f52:	08 95       	ret

00002f54 <FUNCswap>:
	return i;
}
uint8_t bintobcd(uint8_t bin)
{
	return (uint8_t)((((bin) / 10) << 4) + ((bin) % 10));
}
    2f54:	cf 92       	push	r12
    2f56:	df 92       	push	r13
    2f58:	ef 92       	push	r14
    2f5a:	ff 92       	push	r15
    2f5c:	0f 93       	push	r16
    2f5e:	1f 93       	push	r17
    2f60:	fc 01       	movw	r30, r24
    2f62:	00 81       	ld	r16, Z
    2f64:	11 81       	ldd	r17, Z+1	; 0x01
    2f66:	22 81       	ldd	r18, Z+2	; 0x02
    2f68:	33 81       	ldd	r19, Z+3	; 0x03
    2f6a:	fb 01       	movw	r30, r22
    2f6c:	c0 80       	ld	r12, Z
    2f6e:	d1 80       	ldd	r13, Z+1	; 0x01
    2f70:	e2 80       	ldd	r14, Z+2	; 0x02
    2f72:	f3 80       	ldd	r15, Z+3	; 0x03
    2f74:	fc 01       	movw	r30, r24
    2f76:	c0 82       	st	Z, r12
    2f78:	d1 82       	std	Z+1, r13	; 0x01
    2f7a:	e2 82       	std	Z+2, r14	; 0x02
    2f7c:	f3 82       	std	Z+3, r15	; 0x03
    2f7e:	fb 01       	movw	r30, r22
    2f80:	00 83       	st	Z, r16
    2f82:	11 83       	std	Z+1, r17	; 0x01
    2f84:	22 83       	std	Z+2, r18	; 0x02
    2f86:	33 83       	std	Z+3, r19	; 0x03
    2f88:	1f 91       	pop	r17
    2f8a:	0f 91       	pop	r16
    2f8c:	ff 90       	pop	r15
    2f8e:	ef 90       	pop	r14
    2f90:	df 90       	pop	r13
    2f92:	cf 90       	pop	r12
    2f94:	08 95       	ret

00002f96 <FUNCcopy>:
    2f96:	fb 01       	movw	r30, r22
    2f98:	20 81       	ld	r18, Z
    2f9a:	fc 01       	movw	r30, r24
    2f9c:	20 83       	st	Z, r18
    2f9e:	22 23       	and	r18, r18
    2fa0:	39 f0       	breq	.+14     	; 0x2fb0 <FUNCcopy+0x1a>
    2fa2:	db 01       	movw	r26, r22
    2fa4:	11 96       	adiw	r26, 0x01	; 1
    2fa6:	31 96       	adiw	r30, 0x01	; 1
    2fa8:	9d 91       	ld	r25, X+
    2faa:	91 93       	st	Z+, r25
    2fac:	91 11       	cpse	r25, r1
    2fae:	fc cf       	rjmp	.-8      	; 0x2fa8 <FUNCcopy+0x12>
    2fb0:	08 95       	ret

00002fb2 <FUNCsqueeze>:
    2fb2:	cf 93       	push	r28
    2fb4:	df 93       	push	r29
    2fb6:	ec 01       	movw	r28, r24
    2fb8:	98 81       	ld	r25, Y
    2fba:	99 23       	and	r25, r25
    2fbc:	99 f0       	breq	.+38     	; 0x2fe4 <FUNCsqueeze+0x32>
    2fbe:	fe 01       	movw	r30, r28
    2fc0:	31 96       	adiw	r30, 0x01	; 1
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	49 2f       	mov	r20, r25
    2fc8:	50 e0       	ldi	r21, 0x00	; 0
    2fca:	46 17       	cp	r20, r22
    2fcc:	57 07       	cpc	r21, r23
    2fce:	31 f0       	breq	.+12     	; 0x2fdc <FUNCsqueeze+0x2a>
    2fd0:	de 01       	movw	r26, r28
    2fd2:	a2 0f       	add	r26, r18
    2fd4:	b3 1f       	adc	r27, r19
    2fd6:	9c 93       	st	X, r25
    2fd8:	2f 5f       	subi	r18, 0xFF	; 255
    2fda:	3f 4f       	sbci	r19, 0xFF	; 255
    2fdc:	91 91       	ld	r25, Z+
    2fde:	91 11       	cpse	r25, r1
    2fe0:	f2 cf       	rjmp	.-28     	; 0x2fc6 <FUNCsqueeze+0x14>
    2fe2:	02 c0       	rjmp	.+4      	; 0x2fe8 <FUNCsqueeze+0x36>
    2fe4:	20 e0       	ldi	r18, 0x00	; 0
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	fe 01       	movw	r30, r28
    2fea:	e2 0f       	add	r30, r18
    2fec:	f3 1f       	adc	r31, r19
    2fee:	10 82       	st	Z, r1
    2ff0:	df 91       	pop	r29
    2ff2:	cf 91       	pop	r28
    2ff4:	08 95       	ret

00002ff6 <FUNCshellsort>:
    2ff6:	2f 92       	push	r2
    2ff8:	3f 92       	push	r3
    2ffa:	4f 92       	push	r4
    2ffc:	5f 92       	push	r5
    2ffe:	6f 92       	push	r6
    3000:	7f 92       	push	r7
    3002:	8f 92       	push	r8
    3004:	9f 92       	push	r9
    3006:	af 92       	push	r10
    3008:	bf 92       	push	r11
    300a:	cf 92       	push	r12
    300c:	df 92       	push	r13
    300e:	ef 92       	push	r14
    3010:	ff 92       	push	r15
    3012:	0f 93       	push	r16
    3014:	1f 93       	push	r17
    3016:	cf 93       	push	r28
    3018:	df 93       	push	r29
    301a:	00 d0       	rcall	.+0      	; 0x301c <FUNCshellsort+0x26>
    301c:	00 d0       	rcall	.+0      	; 0x301e <FUNCshellsort+0x28>
    301e:	cd b7       	in	r28, 0x3d	; 61
    3020:	de b7       	in	r29, 0x3e	; 62
    3022:	2c 01       	movw	r4, r24
    3024:	1b 01       	movw	r2, r22
    3026:	4b 01       	movw	r8, r22
    3028:	77 23       	and	r23, r23
    302a:	1c f4       	brge	.+6      	; 0x3032 <FUNCshellsort+0x3c>
    302c:	2f ef       	ldi	r18, 0xFF	; 255
    302e:	82 1a       	sub	r8, r18
    3030:	92 0a       	sbc	r9, r18
    3032:	95 94       	asr	r9
    3034:	87 94       	ror	r8
    3036:	18 14       	cp	r1, r8
    3038:	19 04       	cpc	r1, r9
    303a:	0c f4       	brge	.+2      	; 0x303e <FUNCshellsort+0x48>
    303c:	51 c0       	rjmp	.+162    	; 0x30e0 <FUNCshellsort+0xea>
    303e:	6a c0       	rjmp	.+212    	; 0x3114 <FUNCshellsort+0x11e>
    3040:	96 01       	movw	r18, r12
    3042:	dd 20       	and	r13, r13
    3044:	9c f1       	brlt	.+102    	; 0x30ac <FUNCshellsort+0xb6>
    3046:	f5 01       	movw	r30, r10
    3048:	40 81       	ld	r20, Z
    304a:	51 81       	ldd	r21, Z+1	; 0x01
    304c:	f4 01       	movw	r30, r8
    304e:	60 81       	ld	r22, Z
    3050:	71 81       	ldd	r23, Z+1	; 0x01
    3052:	64 17       	cp	r22, r20
    3054:	75 07       	cpc	r23, r21
    3056:	54 f5       	brge	.+84     	; 0x30ac <FUNCshellsort+0xb6>
    3058:	8c 01       	movw	r16, r24
    305a:	0a 0d       	add	r16, r10
    305c:	1b 1d       	adc	r17, r11
    305e:	d4 01       	movw	r26, r8
    3060:	bc 82       	std	Y+4, r11	; 0x04
    3062:	ab 82       	std	Y+3, r10	; 0x03
    3064:	ba 82       	std	Y+2, r11	; 0x02
    3066:	a9 82       	std	Y+1, r10	; 0x01
    3068:	eb 81       	ldd	r30, Y+3	; 0x03
    306a:	fc 81       	ldd	r31, Y+4	; 0x04
    306c:	71 83       	std	Z+1, r23	; 0x01
    306e:	60 83       	st	Z, r22
    3070:	11 96       	adiw	r26, 0x01	; 1
    3072:	5c 93       	st	X, r21
    3074:	4e 93       	st	-X, r20
    3076:	2e 19       	sub	r18, r14
    3078:	3f 09       	sbc	r19, r15
    307a:	c2 f0       	brmi	.+48     	; 0x30ac <FUNCshellsort+0xb6>
    307c:	f8 01       	movw	r30, r16
    307e:	40 81       	ld	r20, Z
    3080:	51 81       	ldd	r21, Z+1	; 0x01
    3082:	e9 81       	ldd	r30, Y+1	; 0x01
    3084:	fa 81       	ldd	r31, Y+2	; 0x02
    3086:	60 81       	ld	r22, Z
    3088:	71 81       	ldd	r23, Z+1	; 0x01
    308a:	08 0f       	add	r16, r24
    308c:	19 1f       	adc	r17, r25
    308e:	e8 0f       	add	r30, r24
    3090:	f9 1f       	adc	r31, r25
    3092:	fa 83       	std	Y+2, r31	; 0x02
    3094:	e9 83       	std	Y+1, r30	; 0x01
    3096:	eb 81       	ldd	r30, Y+3	; 0x03
    3098:	fc 81       	ldd	r31, Y+4	; 0x04
    309a:	e8 0f       	add	r30, r24
    309c:	f9 1f       	adc	r31, r25
    309e:	fc 83       	std	Y+4, r31	; 0x04
    30a0:	eb 83       	std	Y+3, r30	; 0x03
    30a2:	a8 0f       	add	r26, r24
    30a4:	b9 1f       	adc	r27, r25
    30a6:	64 17       	cp	r22, r20
    30a8:	75 07       	cpc	r23, r21
    30aa:	f4 f2       	brlt	.-68     	; 0x3068 <FUNCshellsort+0x72>
    30ac:	ff ef       	ldi	r31, 0xFF	; 255
    30ae:	cf 1a       	sub	r12, r31
    30b0:	df 0a       	sbc	r13, r31
    30b2:	22 e0       	ldi	r18, 0x02	; 2
    30b4:	a2 0e       	add	r10, r18
    30b6:	b1 1c       	adc	r11, r1
    30b8:	e2 e0       	ldi	r30, 0x02	; 2
    30ba:	8e 0e       	add	r8, r30
    30bc:	91 1c       	adc	r9, r1
    30be:	c6 14       	cp	r12, r6
    30c0:	d7 04       	cpc	r13, r7
    30c2:	09 f0       	breq	.+2      	; 0x30c6 <FUNCshellsort+0xd0>
    30c4:	bd cf       	rjmp	.-134    	; 0x3040 <FUNCshellsort+0x4a>
    30c6:	47 01       	movw	r8, r14
    30c8:	ff 20       	and	r15, r15
    30ca:	1c f4       	brge	.+6      	; 0x30d2 <FUNCshellsort+0xdc>
    30cc:	ff ef       	ldi	r31, 0xFF	; 255
    30ce:	8f 1a       	sub	r8, r31
    30d0:	9f 0a       	sbc	r9, r31
    30d2:	95 94       	asr	r9
    30d4:	87 94       	ror	r8
    30d6:	18 14       	cp	r1, r8
    30d8:	19 04       	cpc	r1, r9
    30da:	e4 f4       	brge	.+56     	; 0x3114 <FUNCshellsort+0x11e>
    30dc:	74 01       	movw	r14, r8
    30de:	01 c0       	rjmp	.+2      	; 0x30e2 <FUNCshellsort+0xec>
    30e0:	74 01       	movw	r14, r8
    30e2:	82 14       	cp	r8, r2
    30e4:	93 04       	cpc	r9, r3
    30e6:	7c f7       	brge	.-34     	; 0x30c6 <FUNCshellsort+0xd0>
    30e8:	64 01       	movw	r12, r8
    30ea:	ce 18       	sub	r12, r14
    30ec:	df 08       	sbc	r13, r15
    30ee:	56 01       	movw	r10, r12
    30f0:	aa 0c       	add	r10, r10
    30f2:	bb 1c       	adc	r11, r11
    30f4:	a4 0c       	add	r10, r4
    30f6:	b5 1c       	adc	r11, r5
    30f8:	88 0c       	add	r8, r8
    30fa:	99 1c       	adc	r9, r9
    30fc:	84 0c       	add	r8, r4
    30fe:	95 1c       	adc	r9, r5
    3100:	31 01       	movw	r6, r2
    3102:	6e 18       	sub	r6, r14
    3104:	7f 08       	sbc	r7, r15
    3106:	c7 01       	movw	r24, r14
    3108:	88 0f       	add	r24, r24
    310a:	99 1f       	adc	r25, r25
    310c:	91 95       	neg	r25
    310e:	81 95       	neg	r24
    3110:	91 09       	sbc	r25, r1
    3112:	96 cf       	rjmp	.-212    	; 0x3040 <FUNCshellsort+0x4a>
    3114:	0f 90       	pop	r0
    3116:	0f 90       	pop	r0
    3118:	0f 90       	pop	r0
    311a:	0f 90       	pop	r0
    311c:	df 91       	pop	r29
    311e:	cf 91       	pop	r28
    3120:	1f 91       	pop	r17
    3122:	0f 91       	pop	r16
    3124:	ff 90       	pop	r15
    3126:	ef 90       	pop	r14
    3128:	df 90       	pop	r13
    312a:	cf 90       	pop	r12
    312c:	bf 90       	pop	r11
    312e:	af 90       	pop	r10
    3130:	9f 90       	pop	r9
    3132:	8f 90       	pop	r8
    3134:	7f 90       	pop	r7
    3136:	6f 90       	pop	r6
    3138:	5f 90       	pop	r5
    313a:	4f 90       	pop	r4
    313c:	3f 90       	pop	r3
    313e:	2f 90       	pop	r2
    3140:	08 95       	ret

00003142 <FUNCpmax>:
    3142:	86 17       	cp	r24, r22
    3144:	97 07       	cpc	r25, r23
    3146:	0c f4       	brge	.+2      	; 0x314a <FUNCpmax+0x8>
    3148:	cb 01       	movw	r24, r22
    314a:	08 95       	ret

0000314c <FUNCgcd>:
    314c:	9b 01       	movw	r18, r22
    314e:	67 2b       	or	r22, r23
    3150:	11 f4       	brne	.+4      	; 0x3156 <FUNCgcd+0xa>
    3152:	08 95       	ret
    3154:	9a 01       	movw	r18, r20
    3156:	b9 01       	movw	r22, r18
    3158:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <__divmodhi4>
    315c:	ac 01       	movw	r20, r24
    315e:	82 2f       	mov	r24, r18
    3160:	93 2f       	mov	r25, r19
    3162:	41 15       	cp	r20, r1
    3164:	51 05       	cpc	r21, r1
    3166:	b1 f7       	brne	.-20     	; 0x3154 <FUNCgcd+0x8>
    3168:	08 95       	ret

0000316a <FUNCstrToInt>:
    316a:	fc 01       	movw	r30, r24
    316c:	90 81       	ld	r25, Z
    316e:	80 ed       	ldi	r24, 0xD0	; 208
    3170:	89 0f       	add	r24, r25
    3172:	8a 30       	cpi	r24, 0x0A	; 10
    3174:	d0 f4       	brcc	.+52     	; 0x31aa <FUNCstrToInt+0x40>
    3176:	31 96       	adiw	r30, 0x01	; 1
    3178:	20 e0       	ldi	r18, 0x00	; 0
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	a9 01       	movw	r20, r18
    317e:	44 0f       	add	r20, r20
    3180:	55 1f       	adc	r21, r21
    3182:	22 0f       	add	r18, r18
    3184:	33 1f       	adc	r19, r19
    3186:	22 0f       	add	r18, r18
    3188:	33 1f       	adc	r19, r19
    318a:	22 0f       	add	r18, r18
    318c:	33 1f       	adc	r19, r19
    318e:	42 0f       	add	r20, r18
    3190:	53 1f       	adc	r21, r19
    3192:	29 2f       	mov	r18, r25
    3194:	30 e0       	ldi	r19, 0x00	; 0
    3196:	20 53       	subi	r18, 0x30	; 48
    3198:	31 09       	sbc	r19, r1
    319a:	24 0f       	add	r18, r20
    319c:	35 1f       	adc	r19, r21
    319e:	91 91       	ld	r25, Z+
    31a0:	80 ed       	ldi	r24, 0xD0	; 208
    31a2:	89 0f       	add	r24, r25
    31a4:	8a 30       	cpi	r24, 0x0A	; 10
    31a6:	50 f3       	brcs	.-44     	; 0x317c <FUNCstrToInt+0x12>
    31a8:	02 c0       	rjmp	.+4      	; 0x31ae <FUNCstrToInt+0x44>
    31aa:	20 e0       	ldi	r18, 0x00	; 0
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	c9 01       	movw	r24, r18
    31b0:	08 95       	ret

000031b2 <FUNCfilter>:
    31b2:	86 23       	and	r24, r22
    31b4:	08 95       	ret

000031b6 <FUNCticks>:
    31b6:	00 97       	sbiw	r24, 0x00	; 0
    31b8:	39 f0       	breq	.+14     	; 0x31c8 <FUNCticks+0x12>
    31ba:	20 e0       	ldi	r18, 0x00	; 0
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	2f 5f       	subi	r18, 0xFF	; 255
    31c0:	3f 4f       	sbci	r19, 0xFF	; 255
    31c2:	82 17       	cp	r24, r18
    31c4:	93 07       	cpc	r25, r19
    31c6:	d9 f7       	brne	.-10     	; 0x31be <FUNCticks+0x8>
    31c8:	08 95       	ret

000031ca <FUNCtwocomptoint8bit>:
    31ca:	87 ff       	sbrs	r24, 7
    31cc:	08 c0       	rjmp	.+16     	; 0x31de <FUNCtwocomptoint8bit+0x14>
    31ce:	91 95       	neg	r25
    31d0:	81 95       	neg	r24
    31d2:	91 09       	sbc	r25, r1
    31d4:	99 27       	eor	r25, r25
    31d6:	91 95       	neg	r25
    31d8:	81 95       	neg	r24
    31da:	91 09       	sbc	r25, r1
    31dc:	08 95       	ret
    31de:	8f 77       	andi	r24, 0x7F	; 127
    31e0:	99 27       	eor	r25, r25
    31e2:	08 95       	ret

000031e4 <FUNCtwocomptoint10bit>:
    31e4:	91 ff       	sbrs	r25, 1
    31e6:	08 c0       	rjmp	.+16     	; 0x31f8 <FUNCtwocomptoint10bit+0x14>
    31e8:	91 95       	neg	r25
    31ea:	81 95       	neg	r24
    31ec:	91 09       	sbc	r25, r1
    31ee:	93 70       	andi	r25, 0x03	; 3
    31f0:	91 95       	neg	r25
    31f2:	81 95       	neg	r24
    31f4:	91 09       	sbc	r25, r1
    31f6:	08 95       	ret
    31f8:	91 70       	andi	r25, 0x01	; 1
    31fa:	08 95       	ret

000031fc <FUNCtwocomptointnbit>:
    31fc:	61 50       	subi	r22, 0x01	; 1
    31fe:	21 e0       	ldi	r18, 0x01	; 1
    3200:	30 e0       	ldi	r19, 0x00	; 0
    3202:	02 c0       	rjmp	.+4      	; 0x3208 <FUNCtwocomptointnbit+0xc>
    3204:	22 0f       	add	r18, r18
    3206:	33 1f       	adc	r19, r19
    3208:	6a 95       	dec	r22
    320a:	e2 f7       	brpl	.-8      	; 0x3204 <FUNCtwocomptointnbit+0x8>
    320c:	a9 01       	movw	r20, r18
    320e:	41 50       	subi	r20, 0x01	; 1
    3210:	51 09       	sbc	r21, r1
    3212:	b9 01       	movw	r22, r18
    3214:	68 23       	and	r22, r24
    3216:	79 23       	and	r23, r25
    3218:	67 2b       	or	r22, r23
    321a:	29 f0       	breq	.+10     	; 0x3226 <FUNCtwocomptointnbit+0x2a>
    321c:	84 23       	and	r24, r20
    321e:	95 23       	and	r25, r21
    3220:	82 1b       	sub	r24, r18
    3222:	93 0b       	sbc	r25, r19
    3224:	08 95       	ret
    3226:	84 23       	and	r24, r20
    3228:	95 23       	and	r25, r21
    322a:	08 95       	ret

0000322c <FUNCdec2bcd>:
    322c:	9d ec       	ldi	r25, 0xCD	; 205
    322e:	89 9f       	mul	r24, r25
    3230:	91 2d       	mov	r25, r1
    3232:	11 24       	eor	r1, r1
    3234:	96 95       	lsr	r25
    3236:	96 95       	lsr	r25
    3238:	96 95       	lsr	r25
    323a:	39 2f       	mov	r19, r25
    323c:	33 0f       	add	r19, r19
    323e:	23 2f       	mov	r18, r19
    3240:	22 0f       	add	r18, r18
    3242:	22 0f       	add	r18, r18
    3244:	23 0f       	add	r18, r19
    3246:	82 1b       	sub	r24, r18
    3248:	20 e1       	ldi	r18, 0x10	; 16
    324a:	92 9f       	mul	r25, r18
    324c:	80 0d       	add	r24, r0
    324e:	11 24       	eor	r1, r1
    3250:	08 95       	ret

00003252 <FUNCbcd2dec>:
    3252:	98 2f       	mov	r25, r24
    3254:	92 95       	swap	r25
    3256:	9f 70       	andi	r25, 0x0F	; 15
    3258:	99 0f       	add	r25, r25
    325a:	29 2f       	mov	r18, r25
    325c:	22 0f       	add	r18, r18
    325e:	22 0f       	add	r18, r18
    3260:	92 0f       	add	r25, r18
    3262:	8f 70       	andi	r24, 0x0F	; 15
    3264:	89 0f       	add	r24, r25
    3266:	08 95       	ret

00003268 <FUNCresizestr>:
    3268:	fc 01       	movw	r30, r24
    326a:	db 01       	movw	r26, r22
    326c:	a1 54       	subi	r26, 0x41	; 65
    326e:	be 4f       	sbci	r27, 0xFE	; 254
    3270:	1c 92       	st	X, r1
    3272:	16 16       	cp	r1, r22
    3274:	17 06       	cpc	r1, r23
    3276:	14 f5       	brge	.+68     	; 0x32bc <FUNCresizestr+0x54>
    3278:	90 81       	ld	r25, Z
    327a:	91 11       	cpse	r25, r1
    327c:	0c c0       	rjmp	.+24     	; 0x3296 <FUNCresizestr+0x2e>
    327e:	17 c0       	rjmp	.+46     	; 0x32ae <FUNCresizestr+0x46>
    3280:	91 91       	ld	r25, Z+
    3282:	91 11       	cpse	r25, r1
    3284:	0d c0       	rjmp	.+26     	; 0x32a0 <FUNCresizestr+0x38>
    3286:	15 c0       	rjmp	.+42     	; 0x32b2 <FUNCresizestr+0x4a>
    3288:	81 93       	st	Z+, r24
    328a:	2f 5f       	subi	r18, 0xFF	; 255
    328c:	3f 4f       	sbci	r19, 0xFF	; 255
    328e:	26 17       	cp	r18, r22
    3290:	37 07       	cpc	r19, r23
    3292:	d4 f3       	brlt	.-12     	; 0x3288 <FUNCresizestr+0x20>
    3294:	13 c0       	rjmp	.+38     	; 0x32bc <FUNCresizestr+0x54>
    3296:	af eb       	ldi	r26, 0xBF	; 191
    3298:	b1 e0       	ldi	r27, 0x01	; 1
    329a:	31 96       	adiw	r30, 0x01	; 1
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	9d 93       	st	X+, r25
    32a2:	2f 5f       	subi	r18, 0xFF	; 255
    32a4:	3f 4f       	sbci	r19, 0xFF	; 255
    32a6:	62 17       	cp	r22, r18
    32a8:	73 07       	cpc	r23, r19
    32aa:	51 f7       	brne	.-44     	; 0x3280 <FUNCresizestr+0x18>
    32ac:	07 c0       	rjmp	.+14     	; 0x32bc <FUNCresizestr+0x54>
    32ae:	20 e0       	ldi	r18, 0x00	; 0
    32b0:	30 e0       	ldi	r19, 0x00	; 0
    32b2:	f9 01       	movw	r30, r18
    32b4:	e1 54       	subi	r30, 0x41	; 65
    32b6:	fe 4f       	sbci	r31, 0xFE	; 254
    32b8:	80 e2       	ldi	r24, 0x20	; 32
    32ba:	e6 cf       	rjmp	.-52     	; 0x3288 <FUNCresizestr+0x20>
    32bc:	8f eb       	ldi	r24, 0xBF	; 191
    32be:	91 e0       	ldi	r25, 0x01	; 1
    32c0:	08 95       	ret

000032c2 <FUNCtrimmer>:
    32c2:	4f 92       	push	r4
    32c4:	5f 92       	push	r5
    32c6:	6f 92       	push	r6
    32c8:	7f 92       	push	r7
    32ca:	af 92       	push	r10
    32cc:	bf 92       	push	r11
    32ce:	cf 92       	push	r12
    32d0:	df 92       	push	r13
    32d2:	ef 92       	push	r14
    32d4:	ff 92       	push	r15
    32d6:	0f 93       	push	r16
    32d8:	1f 93       	push	r17
    32da:	cf 93       	push	r28
    32dc:	df 93       	push	r29
    32de:	cd b7       	in	r28, 0x3d	; 61
    32e0:	de b7       	in	r29, 0x3e	; 62
    32e2:	29 01       	movw	r4, r18
    32e4:	3a 01       	movw	r6, r20
    32e6:	9b 01       	movw	r18, r22
    32e8:	ac 01       	movw	r20, r24
    32ea:	24 19       	sub	r18, r4
    32ec:	35 09       	sbc	r19, r5
    32ee:	46 09       	sbc	r20, r6
    32f0:	57 09       	sbc	r21, r7
    32f2:	89 89       	ldd	r24, Y+17	; 0x11
    32f4:	9a 89       	ldd	r25, Y+18	; 0x12
    32f6:	ab 89       	ldd	r26, Y+19	; 0x13
    32f8:	bc 89       	ldd	r27, Y+20	; 0x14
    32fa:	bc 01       	movw	r22, r24
    32fc:	cd 01       	movw	r24, r26
    32fe:	6a 19       	sub	r22, r10
    3300:	7b 09       	sbc	r23, r11
    3302:	8c 09       	sbc	r24, r12
    3304:	9d 09       	sbc	r25, r13
    3306:	0e 94 11 2d 	call	0x5a22	; 0x5a22 <__mulsi3>
    330a:	a8 01       	movw	r20, r16
    330c:	97 01       	movw	r18, r14
    330e:	24 19       	sub	r18, r4
    3310:	35 09       	sbc	r19, r5
    3312:	46 09       	sbc	r20, r6
    3314:	57 09       	sbc	r21, r7
    3316:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <__divmodsi4>
    331a:	ca 01       	movw	r24, r20
    331c:	b9 01       	movw	r22, r18
    331e:	6a 0d       	add	r22, r10
    3320:	7b 1d       	adc	r23, r11
    3322:	8c 1d       	adc	r24, r12
    3324:	9d 1d       	adc	r25, r13
    3326:	df 91       	pop	r29
    3328:	cf 91       	pop	r28
    332a:	1f 91       	pop	r17
    332c:	0f 91       	pop	r16
    332e:	ff 90       	pop	r15
    3330:	ef 90       	pop	r14
    3332:	df 90       	pop	r13
    3334:	cf 90       	pop	r12
    3336:	bf 90       	pop	r11
    3338:	af 90       	pop	r10
    333a:	7f 90       	pop	r7
    333c:	6f 90       	pop	r6
    333e:	5f 90       	pop	r5
    3340:	4f 90       	pop	r4
    3342:	08 95       	ret

00003344 <StringLength>:
    3344:	fc 01       	movw	r30, r24
    3346:	20 81       	ld	r18, Z
    3348:	22 23       	and	r18, r18
    334a:	41 f0       	breq	.+16     	; 0x335c <StringLength+0x18>
    334c:	31 96       	adiw	r30, 0x01	; 1
    334e:	80 e0       	ldi	r24, 0x00	; 0
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	01 96       	adiw	r24, 0x01	; 1
    3354:	21 91       	ld	r18, Z+
    3356:	21 11       	cpse	r18, r1
    3358:	fc cf       	rjmp	.-8      	; 0x3352 <StringLength+0xe>
    335a:	08 95       	ret
    335c:	80 e0       	ldi	r24, 0x00	; 0
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	08 95       	ret

00003362 <FUNCtrim>:
    3362:	cf 93       	push	r28
    3364:	df 93       	push	r29
    3366:	ec 01       	movw	r28, r24
    3368:	ed df       	rcall	.-38     	; 0x3344 <StringLength>
    336a:	9c 01       	movw	r18, r24
    336c:	21 50       	subi	r18, 0x01	; 1
    336e:	31 09       	sbc	r19, r1
    3370:	62 f0       	brmi	.+24     	; 0x338a <FUNCtrim+0x28>
    3372:	fe 01       	movw	r30, r28
    3374:	e8 0f       	add	r30, r24
    3376:	f9 1f       	adc	r31, r25
    3378:	92 91       	ld	r25, -Z
    337a:	90 32       	cpi	r25, 0x20	; 32
    337c:	19 f0       	breq	.+6      	; 0x3384 <FUNCtrim+0x22>
    337e:	99 50       	subi	r25, 0x09	; 9
    3380:	92 30       	cpi	r25, 0x02	; 2
    3382:	18 f4       	brcc	.+6      	; 0x338a <FUNCtrim+0x28>
    3384:	21 50       	subi	r18, 0x01	; 1
    3386:	31 09       	sbc	r19, r1
    3388:	b8 f7       	brcc	.-18     	; 0x3378 <FUNCtrim+0x16>
    338a:	c2 0f       	add	r28, r18
    338c:	d3 1f       	adc	r29, r19
    338e:	19 82       	std	Y+1, r1	; 0x01
    3390:	c9 01       	movw	r24, r18
    3392:	df 91       	pop	r29
    3394:	cf 91       	pop	r28
    3396:	08 95       	ret

00003398 <Reverse>:
    3398:	cf 93       	push	r28
    339a:	df 93       	push	r29
    339c:	ec 01       	movw	r28, r24
    339e:	d2 df       	rcall	.-92     	; 0x3344 <StringLength>
    33a0:	9c 01       	movw	r18, r24
    33a2:	21 50       	subi	r18, 0x01	; 1
    33a4:	31 09       	sbc	r19, r1
    33a6:	12 16       	cp	r1, r18
    33a8:	13 06       	cpc	r1, r19
    33aa:	84 f4       	brge	.+32     	; 0x33cc <Reverse+0x34>
    33ac:	de 01       	movw	r26, r28
    33ae:	a8 0f       	add	r26, r24
    33b0:	b9 1f       	adc	r27, r25
    33b2:	fe 01       	movw	r30, r28
    33b4:	80 e0       	ldi	r24, 0x00	; 0
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	40 81       	ld	r20, Z
    33ba:	5e 91       	ld	r21, -X
    33bc:	51 93       	st	Z+, r21
    33be:	4c 93       	st	X, r20
    33c0:	01 96       	adiw	r24, 0x01	; 1
    33c2:	21 50       	subi	r18, 0x01	; 1
    33c4:	31 09       	sbc	r19, r1
    33c6:	82 17       	cp	r24, r18
    33c8:	93 07       	cpc	r25, r19
    33ca:	b4 f3       	brlt	.-20     	; 0x33b8 <Reverse+0x20>
    33cc:	df 91       	pop	r29
    33ce:	cf 91       	pop	r28
    33d0:	08 95       	ret

000033d2 <FUNCi32toa>:
    33d2:	8f 92       	push	r8
    33d4:	9f 92       	push	r9
    33d6:	af 92       	push	r10
    33d8:	bf 92       	push	r11
    33da:	cf 92       	push	r12
    33dc:	df 92       	push	r13
    33de:	ef 92       	push	r14
    33e0:	ff 92       	push	r15
    33e2:	0f 93       	push	r16
    33e4:	1f 93       	push	r17
    33e6:	cf 93       	push	r28
    33e8:	df 93       	push	r29
    33ea:	6b 01       	movw	r12, r22
    33ec:	7c 01       	movw	r14, r24
    33ee:	dc 01       	movw	r26, r24
    33f0:	cb 01       	movw	r24, r22
    33f2:	ff 20       	and	r15, r15
    33f4:	3c f4       	brge	.+14     	; 0x3404 <FUNCi32toa+0x32>
    33f6:	88 27       	eor	r24, r24
    33f8:	99 27       	eor	r25, r25
    33fa:	dc 01       	movw	r26, r24
    33fc:	8c 19       	sub	r24, r12
    33fe:	9d 09       	sbc	r25, r13
    3400:	ae 09       	sbc	r26, r14
    3402:	bf 09       	sbc	r27, r15
    3404:	bc 01       	movw	r22, r24
    3406:	cd 01       	movw	r24, r26
    3408:	10 e0       	ldi	r17, 0x00	; 0
    340a:	0f 2e       	mov	r0, r31
    340c:	fa e0       	ldi	r31, 0x0A	; 10
    340e:	8f 2e       	mov	r8, r31
    3410:	91 2c       	mov	r9, r1
    3412:	a1 2c       	mov	r10, r1
    3414:	b1 2c       	mov	r11, r1
    3416:	f0 2d       	mov	r31, r0
    3418:	01 c0       	rjmp	.+2      	; 0x341c <FUNCi32toa+0x4a>
    341a:	10 2f       	mov	r17, r16
    341c:	01 e0       	ldi	r16, 0x01	; 1
    341e:	01 0f       	add	r16, r17
    3420:	c1 2f       	mov	r28, r17
    3422:	d0 e0       	ldi	r29, 0x00	; 0
    3424:	c1 54       	subi	r28, 0x41	; 65
    3426:	de 4f       	sbci	r29, 0xFE	; 254
    3428:	a5 01       	movw	r20, r10
    342a:	94 01       	movw	r18, r8
    342c:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <__divmodsi4>
    3430:	60 5d       	subi	r22, 0xD0	; 208
    3432:	68 83       	st	Y, r22
    3434:	62 2f       	mov	r22, r18
    3436:	73 2f       	mov	r23, r19
    3438:	84 2f       	mov	r24, r20
    343a:	95 2f       	mov	r25, r21
    343c:	16 16       	cp	r1, r22
    343e:	17 06       	cpc	r1, r23
    3440:	18 06       	cpc	r1, r24
    3442:	19 06       	cpc	r1, r25
    3444:	54 f3       	brlt	.-44     	; 0x341a <FUNCi32toa+0x48>
    3446:	ff 20       	and	r15, r15
    3448:	44 f4       	brge	.+16     	; 0x345a <FUNCi32toa+0x88>
    344a:	e0 2f       	mov	r30, r16
    344c:	f0 e0       	ldi	r31, 0x00	; 0
    344e:	e1 54       	subi	r30, 0x41	; 65
    3450:	fe 4f       	sbci	r31, 0xFE	; 254
    3452:	8d e2       	ldi	r24, 0x2D	; 45
    3454:	80 83       	st	Z, r24
    3456:	02 e0       	ldi	r16, 0x02	; 2
    3458:	01 0f       	add	r16, r17
    345a:	e0 2f       	mov	r30, r16
    345c:	f0 e0       	ldi	r31, 0x00	; 0
    345e:	e1 54       	subi	r30, 0x41	; 65
    3460:	fe 4f       	sbci	r31, 0xFE	; 254
    3462:	10 82       	st	Z, r1
    3464:	8f eb       	ldi	r24, 0xBF	; 191
    3466:	91 e0       	ldi	r25, 0x01	; 1
    3468:	97 df       	rcall	.-210    	; 0x3398 <Reverse>
    346a:	8f eb       	ldi	r24, 0xBF	; 191
    346c:	91 e0       	ldi	r25, 0x01	; 1
    346e:	df 91       	pop	r29
    3470:	cf 91       	pop	r28
    3472:	1f 91       	pop	r17
    3474:	0f 91       	pop	r16
    3476:	ff 90       	pop	r15
    3478:	ef 90       	pop	r14
    347a:	df 90       	pop	r13
    347c:	cf 90       	pop	r12
    347e:	bf 90       	pop	r11
    3480:	af 90       	pop	r10
    3482:	9f 90       	pop	r9
    3484:	8f 90       	pop	r8
    3486:	08 95       	ret

00003488 <FUNCi16toa>:
    3488:	0f 93       	push	r16
    348a:	1f 93       	push	r17
    348c:	cf 93       	push	r28
    348e:	df 93       	push	r29
    3490:	ec 01       	movw	r28, r24
    3492:	99 23       	and	r25, r25
    3494:	24 f4       	brge	.+8      	; 0x349e <FUNCi16toa+0x16>
    3496:	88 27       	eor	r24, r24
    3498:	99 27       	eor	r25, r25
    349a:	8c 1b       	sub	r24, r28
    349c:	9d 0b       	sbc	r25, r29
    349e:	20 e0       	ldi	r18, 0x00	; 0
    34a0:	0a e0       	ldi	r16, 0x0A	; 10
    34a2:	10 e0       	ldi	r17, 0x00	; 0
    34a4:	01 c0       	rjmp	.+2      	; 0x34a8 <FUNCi16toa+0x20>
    34a6:	23 2f       	mov	r18, r19
    34a8:	31 e0       	ldi	r19, 0x01	; 1
    34aa:	32 0f       	add	r19, r18
    34ac:	e2 2f       	mov	r30, r18
    34ae:	f0 e0       	ldi	r31, 0x00	; 0
    34b0:	e1 54       	subi	r30, 0x41	; 65
    34b2:	fe 4f       	sbci	r31, 0xFE	; 254
    34b4:	b8 01       	movw	r22, r16
    34b6:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <__divmodhi4>
    34ba:	80 5d       	subi	r24, 0xD0	; 208
    34bc:	80 83       	st	Z, r24
    34be:	86 2f       	mov	r24, r22
    34c0:	97 2f       	mov	r25, r23
    34c2:	18 16       	cp	r1, r24
    34c4:	19 06       	cpc	r1, r25
    34c6:	7c f3       	brlt	.-34     	; 0x34a6 <FUNCi16toa+0x1e>
    34c8:	dd 23       	and	r29, r29
    34ca:	44 f4       	brge	.+16     	; 0x34dc <FUNCi16toa+0x54>
    34cc:	e3 2f       	mov	r30, r19
    34ce:	f0 e0       	ldi	r31, 0x00	; 0
    34d0:	e1 54       	subi	r30, 0x41	; 65
    34d2:	fe 4f       	sbci	r31, 0xFE	; 254
    34d4:	8d e2       	ldi	r24, 0x2D	; 45
    34d6:	80 83       	st	Z, r24
    34d8:	32 e0       	ldi	r19, 0x02	; 2
    34da:	32 0f       	add	r19, r18
    34dc:	e3 2f       	mov	r30, r19
    34de:	f0 e0       	ldi	r31, 0x00	; 0
    34e0:	e1 54       	subi	r30, 0x41	; 65
    34e2:	fe 4f       	sbci	r31, 0xFE	; 254
    34e4:	10 82       	st	Z, r1
    34e6:	8f eb       	ldi	r24, 0xBF	; 191
    34e8:	91 e0       	ldi	r25, 0x01	; 1
    34ea:	56 df       	rcall	.-340    	; 0x3398 <Reverse>
    34ec:	8f eb       	ldi	r24, 0xBF	; 191
    34ee:	91 e0       	ldi	r25, 0x01	; 1
    34f0:	df 91       	pop	r29
    34f2:	cf 91       	pop	r28
    34f4:	1f 91       	pop	r17
    34f6:	0f 91       	pop	r16
    34f8:	08 95       	ret

000034fa <FUNCui16toa>:
    34fa:	cf 93       	push	r28
    34fc:	ac 01       	movw	r20, r24
    34fe:	9c 01       	movw	r18, r24
    3500:	ad ec       	ldi	r26, 0xCD	; 205
    3502:	bc ec       	ldi	r27, 0xCC	; 204
    3504:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <__umulhisi3>
    3508:	96 95       	lsr	r25
    350a:	87 95       	ror	r24
    350c:	96 95       	lsr	r25
    350e:	87 95       	ror	r24
    3510:	96 95       	lsr	r25
    3512:	87 95       	ror	r24
    3514:	9c 01       	movw	r18, r24
    3516:	22 0f       	add	r18, r18
    3518:	33 1f       	adc	r19, r19
    351a:	88 0f       	add	r24, r24
    351c:	99 1f       	adc	r25, r25
    351e:	88 0f       	add	r24, r24
    3520:	99 1f       	adc	r25, r25
    3522:	88 0f       	add	r24, r24
    3524:	99 1f       	adc	r25, r25
    3526:	82 0f       	add	r24, r18
    3528:	93 1f       	adc	r25, r19
    352a:	9a 01       	movw	r18, r20
    352c:	28 1b       	sub	r18, r24
    352e:	39 0b       	sbc	r19, r25
    3530:	c9 01       	movw	r24, r18
    3532:	80 5d       	subi	r24, 0xD0	; 208
    3534:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <FUNCstr>
    3538:	9a 01       	movw	r18, r20
    353a:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <__umulhisi3>
    353e:	ac 01       	movw	r20, r24
    3540:	56 95       	lsr	r21
    3542:	47 95       	ror	r20
    3544:	56 95       	lsr	r21
    3546:	47 95       	ror	r20
    3548:	56 95       	lsr	r21
    354a:	47 95       	ror	r20
    354c:	41 15       	cp	r20, r1
    354e:	51 05       	cpc	r21, r1
    3550:	89 f1       	breq	.+98     	; 0x35b4 <FUNCui16toa+0xba>
    3552:	e1 e0       	ldi	r30, 0x01	; 1
    3554:	c1 e0       	ldi	r28, 0x01	; 1
    3556:	ce 0f       	add	r28, r30
    3558:	f0 e0       	ldi	r31, 0x00	; 0
    355a:	e1 54       	subi	r30, 0x41	; 65
    355c:	fe 4f       	sbci	r31, 0xFE	; 254
    355e:	9a 01       	movw	r18, r20
    3560:	ad ec       	ldi	r26, 0xCD	; 205
    3562:	bc ec       	ldi	r27, 0xCC	; 204
    3564:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <__umulhisi3>
    3568:	96 95       	lsr	r25
    356a:	87 95       	ror	r24
    356c:	96 95       	lsr	r25
    356e:	87 95       	ror	r24
    3570:	96 95       	lsr	r25
    3572:	87 95       	ror	r24
    3574:	9c 01       	movw	r18, r24
    3576:	22 0f       	add	r18, r18
    3578:	33 1f       	adc	r19, r19
    357a:	88 0f       	add	r24, r24
    357c:	99 1f       	adc	r25, r25
    357e:	88 0f       	add	r24, r24
    3580:	99 1f       	adc	r25, r25
    3582:	88 0f       	add	r24, r24
    3584:	99 1f       	adc	r25, r25
    3586:	82 0f       	add	r24, r18
    3588:	93 1f       	adc	r25, r19
    358a:	9a 01       	movw	r18, r20
    358c:	28 1b       	sub	r18, r24
    358e:	39 0b       	sbc	r19, r25
    3590:	c9 01       	movw	r24, r18
    3592:	80 5d       	subi	r24, 0xD0	; 208
    3594:	80 83       	st	Z, r24
    3596:	9a 01       	movw	r18, r20
    3598:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <__umulhisi3>
    359c:	ac 01       	movw	r20, r24
    359e:	56 95       	lsr	r21
    35a0:	47 95       	ror	r20
    35a2:	56 95       	lsr	r21
    35a4:	47 95       	ror	r20
    35a6:	56 95       	lsr	r21
    35a8:	47 95       	ror	r20
    35aa:	ec 2f       	mov	r30, r28
    35ac:	41 15       	cp	r20, r1
    35ae:	51 05       	cpc	r21, r1
    35b0:	89 f6       	brne	.-94     	; 0x3554 <FUNCui16toa+0x5a>
    35b2:	01 c0       	rjmp	.+2      	; 0x35b6 <FUNCui16toa+0xbc>
    35b4:	c1 e0       	ldi	r28, 0x01	; 1
    35b6:	ec 2f       	mov	r30, r28
    35b8:	f0 e0       	ldi	r31, 0x00	; 0
    35ba:	e1 54       	subi	r30, 0x41	; 65
    35bc:	fe 4f       	sbci	r31, 0xFE	; 254
    35be:	10 82       	st	Z, r1
    35c0:	8f eb       	ldi	r24, 0xBF	; 191
    35c2:	91 e0       	ldi	r25, 0x01	; 1
    35c4:	e9 de       	rcall	.-558    	; 0x3398 <Reverse>
    35c6:	8f eb       	ldi	r24, 0xBF	; 191
    35c8:	91 e0       	ldi	r25, 0x01	; 1
    35ca:	cf 91       	pop	r28
    35cc:	08 95       	ret

000035ce <FUNCbcd2bin>:
    35ce:	98 2f       	mov	r25, r24
    35d0:	92 95       	swap	r25
    35d2:	9f 70       	andi	r25, 0x0F	; 15
    35d4:	99 0f       	add	r25, r25
    35d6:	29 2f       	mov	r18, r25
    35d8:	22 0f       	add	r18, r18
    35da:	22 0f       	add	r18, r18
    35dc:	92 0f       	add	r25, r18
    35de:	8f 70       	andi	r24, 0x0F	; 15
    35e0:	89 0f       	add	r24, r25
    35e2:	08 95       	ret

000035e4 <FUNCbin2bcd>:
    35e4:	ac 01       	movw	r20, r24
    35e6:	9c 01       	movw	r18, r24
    35e8:	ad ec       	ldi	r26, 0xCD	; 205
    35ea:	bc ec       	ldi	r27, 0xCC	; 204
    35ec:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <__umulhisi3>
    35f0:	96 95       	lsr	r25
    35f2:	87 95       	ror	r24
    35f4:	96 95       	lsr	r25
    35f6:	87 95       	ror	r24
    35f8:	96 95       	lsr	r25
    35fa:	87 95       	ror	r24
    35fc:	bc 01       	movw	r22, r24
    35fe:	66 0f       	add	r22, r22
    3600:	77 1f       	adc	r23, r23
    3602:	9c 01       	movw	r18, r24
    3604:	22 0f       	add	r18, r18
    3606:	33 1f       	adc	r19, r19
    3608:	22 0f       	add	r18, r18
    360a:	33 1f       	adc	r19, r19
    360c:	22 0f       	add	r18, r18
    360e:	33 1f       	adc	r19, r19
    3610:	26 0f       	add	r18, r22
    3612:	37 1f       	adc	r19, r23
    3614:	42 1b       	sub	r20, r18
    3616:	53 0b       	sbc	r21, r19
    3618:	34 2f       	mov	r19, r20
    361a:	20 e1       	ldi	r18, 0x10	; 16
    361c:	82 9f       	mul	r24, r18
    361e:	30 0d       	add	r19, r0
    3620:	11 24       	eor	r1, r1
    3622:	83 2f       	mov	r24, r19
    3624:	08 95       	ret

00003626 <FUNCgcd1>:
    3626:	cf 92       	push	r12
    3628:	df 92       	push	r13
    362a:	ef 92       	push	r14
    362c:	ff 92       	push	r15
    362e:	cf 93       	push	r28
    3630:	df 93       	push	r29
    3632:	cd b7       	in	r28, 0x3d	; 61
    3634:	de b7       	in	r29, 0x3e	; 62
    3636:	28 97       	sbiw	r28, 0x08	; 8
    3638:	0f b6       	in	r0, 0x3f	; 63
    363a:	f8 94       	cli
    363c:	de bf       	out	0x3e, r29	; 62
    363e:	0f be       	out	0x3f, r0	; 63
    3640:	cd bf       	out	0x3d, r28	; 61
    3642:	6b 01       	movw	r12, r22
    3644:	7c 01       	movw	r14, r24
    3646:	69 83       	std	Y+1, r22	; 0x01
    3648:	7a 83       	std	Y+2, r23	; 0x02
    364a:	8b 83       	std	Y+3, r24	; 0x03
    364c:	9c 83       	std	Y+4, r25	; 0x04
    364e:	2d 83       	std	Y+5, r18	; 0x05
    3650:	3e 83       	std	Y+6, r19	; 0x06
    3652:	4f 83       	std	Y+7, r20	; 0x07
    3654:	58 87       	std	Y+8, r21	; 0x08
    3656:	c2 16       	cp	r12, r18
    3658:	d3 06       	cpc	r13, r19
    365a:	e4 06       	cpc	r14, r20
    365c:	f5 06       	cpc	r15, r21
    365e:	34 f4       	brge	.+12     	; 0x366c <FUNCgcd1+0x46>
    3660:	be 01       	movw	r22, r28
    3662:	6b 5f       	subi	r22, 0xFB	; 251
    3664:	7f 4f       	sbci	r23, 0xFF	; 255
    3666:	ce 01       	movw	r24, r28
    3668:	01 96       	adiw	r24, 0x01	; 1
    366a:	74 dc       	rcall	.-1816   	; 0x2f54 <FUNCswap>
    366c:	8d 81       	ldd	r24, Y+5	; 0x05
    366e:	9e 81       	ldd	r25, Y+6	; 0x06
    3670:	af 81       	ldd	r26, Y+7	; 0x07
    3672:	b8 85       	ldd	r27, Y+8	; 0x08
    3674:	89 2b       	or	r24, r25
    3676:	8a 2b       	or	r24, r26
    3678:	8b 2b       	or	r24, r27
    367a:	71 f4       	brne	.+28     	; 0x3698 <FUNCgcd1+0x72>
    367c:	69 81       	ldd	r22, Y+1	; 0x01
    367e:	7a 81       	ldd	r23, Y+2	; 0x02
    3680:	8b 81       	ldd	r24, Y+3	; 0x03
    3682:	9c 81       	ldd	r25, Y+4	; 0x04
    3684:	20 e0       	ldi	r18, 0x00	; 0
    3686:	30 e0       	ldi	r19, 0x00	; 0
    3688:	a9 01       	movw	r20, r18
    368a:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <__divmodsi4>
    368e:	61 15       	cp	r22, r1
    3690:	71 05       	cpc	r23, r1
    3692:	81 05       	cpc	r24, r1
    3694:	91 05       	cpc	r25, r1
    3696:	29 f4       	brne	.+10     	; 0x36a2 <FUNCgcd1+0x7c>
    3698:	6d 81       	ldd	r22, Y+5	; 0x05
    369a:	7e 81       	ldd	r23, Y+6	; 0x06
    369c:	8f 81       	ldd	r24, Y+7	; 0x07
    369e:	98 85       	ldd	r25, Y+8	; 0x08
    36a0:	05 c0       	rjmp	.+10     	; 0x36ac <FUNCgcd1+0x86>
    36a2:	6d 83       	std	Y+5, r22	; 0x05
    36a4:	7e 83       	std	Y+6, r23	; 0x06
    36a6:	8f 83       	std	Y+7, r24	; 0x07
    36a8:	98 87       	std	Y+8, r25	; 0x08
    36aa:	f6 cf       	rjmp	.-20     	; 0x3698 <FUNCgcd1+0x72>
    36ac:	28 96       	adiw	r28, 0x08	; 8
    36ae:	0f b6       	in	r0, 0x3f	; 63
    36b0:	f8 94       	cli
    36b2:	de bf       	out	0x3e, r29	; 62
    36b4:	0f be       	out	0x3f, r0	; 63
    36b6:	cd bf       	out	0x3d, r28	; 61
    36b8:	df 91       	pop	r29
    36ba:	cf 91       	pop	r28
    36bc:	ff 90       	pop	r15
    36be:	ef 90       	pop	r14
    36c0:	df 90       	pop	r13
    36c2:	cf 90       	pop	r12
    36c4:	08 95       	ret

000036c6 <FUNCpincheck>:
    36c6:	90 e0       	ldi	r25, 0x00	; 0
    36c8:	02 c0       	rjmp	.+4      	; 0x36ce <FUNCpincheck+0x8>
    36ca:	95 95       	asr	r25
    36cc:	87 95       	ror	r24
    36ce:	6a 95       	dec	r22
    36d0:	e2 f7       	brpl	.-8      	; 0x36ca <FUNCpincheck+0x4>
    36d2:	81 70       	andi	r24, 0x01	; 1
    36d4:	08 95       	ret

000036d6 <FUNCprint_binary>:
    36d6:	9c 01       	movw	r18, r24
    36d8:	21 50       	subi	r18, 0x01	; 1
    36da:	31 09       	sbc	r19, r1
    36dc:	81 e0       	ldi	r24, 0x01	; 1
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	02 c0       	rjmp	.+4      	; 0x36e6 <FUNCprint_binary+0x10>
    36e2:	88 0f       	add	r24, r24
    36e4:	99 1f       	adc	r25, r25
    36e6:	2a 95       	dec	r18
    36e8:	e2 f7       	brpl	.-8      	; 0x36e2 <FUNCprint_binary+0xc>
    36ea:	00 97       	sbiw	r24, 0x00	; 0
    36ec:	b1 f0       	breq	.+44     	; 0x371a <FUNCprint_binary+0x44>
    36ee:	ef eb       	ldi	r30, 0xBF	; 191
    36f0:	f1 e0       	ldi	r31, 0x01	; 1
    36f2:	20 e0       	ldi	r18, 0x00	; 0
    36f4:	30 e0       	ldi	r19, 0x00	; 0
    36f6:	b0 e3       	ldi	r27, 0x30	; 48
    36f8:	a1 e3       	ldi	r26, 0x31	; 49
    36fa:	ab 01       	movw	r20, r22
    36fc:	48 23       	and	r20, r24
    36fe:	59 23       	and	r21, r25
    3700:	45 2b       	or	r20, r21
    3702:	11 f0       	breq	.+4      	; 0x3708 <FUNCprint_binary+0x32>
    3704:	a0 83       	st	Z, r26
    3706:	01 c0       	rjmp	.+2      	; 0x370a <FUNCprint_binary+0x34>
    3708:	b0 83       	st	Z, r27
    370a:	96 95       	lsr	r25
    370c:	87 95       	ror	r24
    370e:	2f 5f       	subi	r18, 0xFF	; 255
    3710:	3f 4f       	sbci	r19, 0xFF	; 255
    3712:	31 96       	adiw	r30, 0x01	; 1
    3714:	00 97       	sbiw	r24, 0x00	; 0
    3716:	89 f7       	brne	.-30     	; 0x36fa <FUNCprint_binary+0x24>
    3718:	02 c0       	rjmp	.+4      	; 0x371e <FUNCprint_binary+0x48>
    371a:	20 e0       	ldi	r18, 0x00	; 0
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	f9 01       	movw	r30, r18
    3720:	e1 54       	subi	r30, 0x41	; 65
    3722:	fe 4f       	sbci	r31, 0xFE	; 254
    3724:	10 82       	st	Z, r1
    3726:	8f eb       	ldi	r24, 0xBF	; 191
    3728:	91 e0       	ldi	r25, 0x01	; 1
    372a:	08 95       	ret

0000372c <FUNCdectohex>:
    372c:	ab 01       	movw	r20, r22
    372e:	bc 01       	movw	r22, r24
    3730:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <FUNCstr>
    3734:	41 15       	cp	r20, r1
    3736:	51 05       	cpc	r21, r1
    3738:	61 05       	cpc	r22, r1
    373a:	71 05       	cpc	r23, r1
    373c:	09 f4       	brne	.+2      	; 0x3740 <FUNCdectohex+0x14>
    373e:	42 c0       	rjmp	.+132    	; 0x37c4 <FUNCdectohex+0x98>
    3740:	21 e0       	ldi	r18, 0x01	; 1
    3742:	ef ef       	ldi	r30, 0xFF	; 255
    3744:	e2 0f       	add	r30, r18
    3746:	db 01       	movw	r26, r22
    3748:	ca 01       	movw	r24, r20
    374a:	8f 70       	andi	r24, 0x0F	; 15
    374c:	99 27       	eor	r25, r25
    374e:	aa 27       	eor	r26, r26
    3750:	b0 78       	andi	r27, 0x80	; 128
    3752:	bb 23       	and	r27, r27
    3754:	54 f4       	brge	.+20     	; 0x376a <FUNCdectohex+0x3e>
    3756:	01 97       	sbiw	r24, 0x01	; 1
    3758:	a1 09       	sbc	r26, r1
    375a:	b1 09       	sbc	r27, r1
    375c:	80 6f       	ori	r24, 0xF0	; 240
    375e:	9f 6f       	ori	r25, 0xFF	; 255
    3760:	af 6f       	ori	r26, 0xFF	; 255
    3762:	bf 6f       	ori	r27, 0xFF	; 255
    3764:	01 96       	adiw	r24, 0x01	; 1
    3766:	a1 1d       	adc	r26, r1
    3768:	b1 1d       	adc	r27, r1
    376a:	8a 30       	cpi	r24, 0x0A	; 10
    376c:	91 05       	cpc	r25, r1
    376e:	a1 05       	cpc	r26, r1
    3770:	b1 05       	cpc	r27, r1
    3772:	34 f4       	brge	.+12     	; 0x3780 <FUNCdectohex+0x54>
    3774:	f0 e0       	ldi	r31, 0x00	; 0
    3776:	e1 54       	subi	r30, 0x41	; 65
    3778:	fe 4f       	sbci	r31, 0xFE	; 254
    377a:	80 5d       	subi	r24, 0xD0	; 208
    377c:	80 83       	st	Z, r24
    377e:	05 c0       	rjmp	.+10     	; 0x378a <FUNCdectohex+0x5e>
    3780:	f0 e0       	ldi	r31, 0x00	; 0
    3782:	e1 54       	subi	r30, 0x41	; 65
    3784:	fe 4f       	sbci	r31, 0xFE	; 254
    3786:	89 5c       	subi	r24, 0xC9	; 201
    3788:	80 83       	st	Z, r24
    378a:	e2 2f       	mov	r30, r18
    378c:	f0 e0       	ldi	r31, 0x00	; 0
    378e:	e1 54       	subi	r30, 0x41	; 65
    3790:	fe 4f       	sbci	r31, 0xFE	; 254
    3792:	10 82       	st	Z, r1
    3794:	db 01       	movw	r26, r22
    3796:	ca 01       	movw	r24, r20
    3798:	77 23       	and	r23, r23
    379a:	1c f4       	brge	.+6      	; 0x37a2 <FUNCdectohex+0x76>
    379c:	0f 96       	adiw	r24, 0x0f	; 15
    379e:	a1 1d       	adc	r26, r1
    37a0:	b1 1d       	adc	r27, r1
    37a2:	ac 01       	movw	r20, r24
    37a4:	bd 01       	movw	r22, r26
    37a6:	68 94       	set
    37a8:	13 f8       	bld	r1, 3
    37aa:	75 95       	asr	r23
    37ac:	67 95       	ror	r22
    37ae:	57 95       	ror	r21
    37b0:	47 95       	ror	r20
    37b2:	16 94       	lsr	r1
    37b4:	d1 f7       	brne	.-12     	; 0x37aa <FUNCdectohex+0x7e>
    37b6:	2f 5f       	subi	r18, 0xFF	; 255
    37b8:	41 15       	cp	r20, r1
    37ba:	51 05       	cpc	r21, r1
    37bc:	61 05       	cpc	r22, r1
    37be:	71 05       	cpc	r23, r1
    37c0:	09 f0       	breq	.+2      	; 0x37c4 <FUNCdectohex+0x98>
    37c2:	bf cf       	rjmp	.-130    	; 0x3742 <FUNCdectohex+0x16>
    37c4:	8f eb       	ldi	r24, 0xBF	; 191
    37c6:	91 e0       	ldi	r25, 0x01	; 1
    37c8:	e7 dd       	rcall	.-1074   	; 0x3398 <Reverse>
    37ca:	8f eb       	ldi	r24, 0xBF	; 191
    37cc:	91 e0       	ldi	r25, 0x01	; 1
    37ce:	08 95       	ret

000037d0 <FUNCReadHLByte>:
    37d0:	28 2f       	mov	r18, r24
    37d2:	30 e0       	ldi	r19, 0x00	; 0
    37d4:	32 2f       	mov	r19, r18
    37d6:	22 27       	eor	r18, r18
    37d8:	a9 01       	movw	r20, r18
    37da:	49 2b       	or	r20, r25
    37dc:	ca 01       	movw	r24, r20
    37de:	08 95       	ret

000037e0 <FUNCReadLHByte>:
    37e0:	29 2f       	mov	r18, r25
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	32 2f       	mov	r19, r18
    37e6:	22 27       	eor	r18, r18
    37e8:	a9 01       	movw	r20, r18
    37ea:	48 2b       	or	r20, r24
    37ec:	ca 01       	movw	r24, r20
    37ee:	08 95       	ret

000037f0 <FUNCWriteHLByte>:
    37f0:	28 2f       	mov	r18, r24
    37f2:	89 2f       	mov	r24, r25
    37f4:	92 2f       	mov	r25, r18
    37f6:	08 95       	ret

000037f8 <FUNCWriteLHByte>:
    37f8:	08 95       	ret

000037fa <FUNCSwapByte>:
    37fa:	98 27       	eor	r25, r24
    37fc:	89 27       	eor	r24, r25
    37fe:	98 27       	eor	r25, r24
    3800:	08 95       	ret

00003802 <FUNCmayia>:
    3802:	ff 92       	push	r15
    3804:	0f 93       	push	r16
    3806:	1f 93       	push	r17
    3808:	cf 93       	push	r28
    380a:	df 93       	push	r29
    380c:	8c 01       	movw	r16, r24
    380e:	eb 01       	movw	r28, r22
    3810:	f4 2e       	mov	r15, r20
    3812:	64 2f       	mov	r22, r20
    3814:	70 e0       	ldi	r23, 0x00	; 0
    3816:	80 e0       	ldi	r24, 0x00	; 0
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	0e 94 93 2a 	call	0x5526	; 0x5526 <__floatunsisf>
    381e:	9b 01       	movw	r18, r22
    3820:	ac 01       	movw	r20, r24
    3822:	60 e0       	ldi	r22, 0x00	; 0
    3824:	70 e0       	ldi	r23, 0x00	; 0
    3826:	80 e0       	ldi	r24, 0x00	; 0
    3828:	90 e4       	ldi	r25, 0x40	; 64
    382a:	0e 94 ac 2b 	call	0x5758	; 0x5758 <pow>
    382e:	20 e0       	ldi	r18, 0x00	; 0
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	40 e8       	ldi	r20, 0x80	; 128
    3834:	5f e3       	ldi	r21, 0x3F	; 63
    3836:	0e 94 91 29 	call	0x5322	; 0x5322 <__subsf3>
    383a:	0e 94 67 2a 	call	0x54ce	; 0x54ce <__fixunssfsi>
    383e:	9e 01       	movw	r18, r28
    3840:	26 23       	and	r18, r22
    3842:	37 23       	and	r19, r23
    3844:	60 23       	and	r22, r16
    3846:	71 23       	and	r23, r17
    3848:	cb 01       	movw	r24, r22
    384a:	82 27       	eor	r24, r18
    384c:	93 27       	eor	r25, r19
    384e:	28 23       	and	r18, r24
    3850:	39 23       	and	r19, r25
    3852:	02 c0       	rjmp	.+4      	; 0x3858 <FUNCmayia+0x56>
    3854:	22 0f       	add	r18, r18
    3856:	33 1f       	adc	r19, r19
    3858:	fa 94       	dec	r15
    385a:	e2 f7       	brpl	.-8      	; 0x3854 <FUNCmayia+0x52>
    385c:	82 2b       	or	r24, r18
    385e:	93 2b       	or	r25, r19
    3860:	df 91       	pop	r29
    3862:	cf 91       	pop	r28
    3864:	1f 91       	pop	r17
    3866:	0f 91       	pop	r16
    3868:	ff 90       	pop	r15
    386a:	08 95       	ret

0000386c <FUNCprint>:
    386c:	cf 93       	push	r28
    386e:	df 93       	push	r29
    3870:	cd b7       	in	r28, 0x3d	; 61
    3872:	de b7       	in	r29, 0x3e	; 62
    3874:	9e 01       	movw	r18, r28
    3876:	2b 5f       	subi	r18, 0xFB	; 251
    3878:	3f 4f       	sbci	r19, 0xFF	; 255
    387a:	f9 01       	movw	r30, r18
    387c:	41 91       	ld	r20, Z+
    387e:	51 91       	ld	r21, Z+
    3880:	9f 01       	movw	r18, r30
    3882:	6f e5       	ldi	r22, 0x5F	; 95
    3884:	70 e0       	ldi	r23, 0x00	; 0
    3886:	8f eb       	ldi	r24, 0xBF	; 191
    3888:	91 e0       	ldi	r25, 0x01	; 1
    388a:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <vsnprintf>
    388e:	99 23       	and	r25, r25
    3890:	1c f0       	brlt	.+6      	; 0x3898 <FUNCprint+0x2c>
    3892:	8f eb       	ldi	r24, 0xBF	; 191
    3894:	91 e0       	ldi	r25, 0x01	; 1
    3896:	02 c0       	rjmp	.+4      	; 0x389c <FUNCprint+0x30>
    3898:	80 e0       	ldi	r24, 0x00	; 0
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	df 91       	pop	r29
    389e:	cf 91       	pop	r28
    38a0:	08 95       	ret

000038a2 <FUNCenable>:
    38a2:	fc 01       	movw	r30, r24
    38a4:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <FUNCstr+0x5f>
    38a8:	82 ea       	ldi	r24, 0xA2	; 162
    38aa:	99 e1       	ldi	r25, 0x19	; 25
    38ac:	91 83       	std	Z+1, r25	; 0x01
    38ae:	80 83       	st	Z, r24
    38b0:	8c ec       	ldi	r24, 0xCC	; 204
    38b2:	99 e1       	ldi	r25, 0x19	; 25
    38b4:	93 83       	std	Z+3, r25	; 0x03
    38b6:	82 83       	std	Z+2, r24	; 0x02
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	9c e1       	ldi	r25, 0x1C	; 28
    38bc:	95 83       	std	Z+5, r25	; 0x05
    38be:	84 83       	std	Z+4, r24	; 0x04
    38c0:	8a ea       	ldi	r24, 0xAA	; 170
    38c2:	97 e1       	ldi	r25, 0x17	; 23
    38c4:	97 83       	std	Z+7, r25	; 0x07
    38c6:	86 83       	std	Z+6, r24	; 0x06
    38c8:	8b ec       	ldi	r24, 0xCB	; 203
    38ca:	97 e1       	ldi	r25, 0x17	; 23
    38cc:	91 87       	std	Z+9, r25	; 0x09
    38ce:	80 87       	std	Z+8, r24	; 0x08
    38d0:	89 ed       	ldi	r24, 0xD9	; 217
    38d2:	97 e1       	ldi	r25, 0x17	; 23
    38d4:	93 87       	std	Z+11, r25	; 0x0b
    38d6:	82 87       	std	Z+10, r24	; 0x0a
    38d8:	8b ef       	ldi	r24, 0xFB	; 251
    38da:	97 e1       	ldi	r25, 0x17	; 23
    38dc:	95 87       	std	Z+13, r25	; 0x0d
    38de:	84 87       	std	Z+12, r24	; 0x0c
    38e0:	84 e4       	ldi	r24, 0x44	; 68
    38e2:	9a e1       	ldi	r25, 0x1A	; 26
    38e4:	97 87       	std	Z+15, r25	; 0x0f
    38e6:	86 87       	std	Z+14, r24	; 0x0e
    38e8:	8d e7       	ldi	r24, 0x7D	; 125
    38ea:	9a e1       	ldi	r25, 0x1A	; 26
    38ec:	91 8b       	std	Z+17, r25	; 0x11
    38ee:	80 8b       	std	Z+16, r24	; 0x10
    38f0:	89 ee       	ldi	r24, 0xE9	; 233
    38f2:	99 e1       	ldi	r25, 0x19	; 25
    38f4:	93 8b       	std	Z+19, r25	; 0x13
    38f6:	82 8b       	std	Z+18, r24	; 0x12
    38f8:	81 eb       	ldi	r24, 0xB1	; 177
    38fa:	99 e1       	ldi	r25, 0x19	; 25
    38fc:	95 8b       	std	Z+21, r25	; 0x15
    38fe:	84 8b       	std	Z+20, r24	; 0x14
    3900:	81 ea       	ldi	r24, 0xA1	; 161
    3902:	98 e1       	ldi	r25, 0x18	; 24
    3904:	97 8b       	std	Z+23, r25	; 0x17
    3906:	86 8b       	std	Z+22, r24	; 0x16
    3908:	86 ea       	ldi	r24, 0xA6	; 166
    390a:	98 e1       	ldi	r25, 0x18	; 24
    390c:	91 8f       	std	Z+25, r25	; 0x19
    390e:	80 8f       	std	Z+24, r24	; 0x18
    3910:	85 eb       	ldi	r24, 0xB5	; 181
    3912:	98 e1       	ldi	r25, 0x18	; 24
    3914:	93 8f       	std	Z+27, r25	; 0x1b
    3916:	82 8f       	std	Z+26, r24	; 0x1a
    3918:	89 ed       	ldi	r24, 0xD9	; 217
    391a:	98 e1       	ldi	r25, 0x18	; 24
    391c:	95 8f       	std	Z+29, r25	; 0x1d
    391e:	84 8f       	std	Z+28, r24	; 0x1c
    3920:	8b ed       	ldi	r24, 0xDB	; 219
    3922:	98 e1       	ldi	r25, 0x18	; 24
    3924:	97 8f       	std	Z+31, r25	; 0x1f
    3926:	86 8f       	std	Z+30, r24	; 0x1e
    3928:	85 ee       	ldi	r24, 0xE5	; 229
    392a:	98 e1       	ldi	r25, 0x18	; 24
    392c:	91 a3       	std	Z+33, r25	; 0x21
    392e:	80 a3       	std	Z+32, r24	; 0x20
    3930:	82 ef       	ldi	r24, 0xF2	; 242
    3932:	98 e1       	ldi	r25, 0x18	; 24
    3934:	93 a3       	std	Z+35, r25	; 0x23
    3936:	82 a3       	std	Z+34, r24	; 0x22
    3938:	8e ef       	ldi	r24, 0xFE	; 254
    393a:	98 e1       	ldi	r25, 0x18	; 24
    393c:	95 a3       	std	Z+37, r25	; 0x25
    393e:	84 a3       	std	Z+36, r24	; 0x24
    3940:	86 e1       	ldi	r24, 0x16	; 22
    3942:	99 e1       	ldi	r25, 0x19	; 25
    3944:	97 a3       	std	Z+39, r25	; 0x27
    3946:	86 a3       	std	Z+38, r24	; 0x26
    3948:	89 e2       	ldi	r24, 0x29	; 41
    394a:	99 e1       	ldi	r25, 0x19	; 25
    394c:	91 a7       	std	Z+41, r25	; 0x29
    394e:	80 a7       	std	Z+40, r24	; 0x28
    3950:	84 e3       	ldi	r24, 0x34	; 52
    3952:	99 e1       	ldi	r25, 0x19	; 25
    3954:	93 a7       	std	Z+43, r25	; 0x2b
    3956:	82 a7       	std	Z+42, r24	; 0x2a
    3958:	81 e6       	ldi	r24, 0x61	; 97
    395a:	99 e1       	ldi	r25, 0x19	; 25
    395c:	95 a7       	std	Z+45, r25	; 0x2d
    395e:	84 a7       	std	Z+44, r24	; 0x2c
    3960:	87 ee       	ldi	r24, 0xE7	; 231
    3962:	9a e1       	ldi	r25, 0x1A	; 26
    3964:	97 a7       	std	Z+47, r25	; 0x2f
    3966:	86 a7       	std	Z+46, r24	; 0x2e
    3968:	82 ef       	ldi	r24, 0xF2	; 242
    396a:	9a e1       	ldi	r25, 0x1A	; 26
    396c:	91 ab       	std	Z+49, r25	; 0x31
    396e:	80 ab       	std	Z+48, r24	; 0x30
    3970:	83 e1       	ldi	r24, 0x13	; 19
    3972:	9b e1       	ldi	r25, 0x1B	; 27
    3974:	93 ab       	std	Z+51, r25	; 0x33
    3976:	82 ab       	std	Z+50, r24	; 0x32
    3978:	83 e6       	ldi	r24, 0x63	; 99
    397a:	9b e1       	ldi	r25, 0x1B	; 27
    397c:	95 ab       	std	Z+53, r25	; 0x35
    397e:	84 ab       	std	Z+52, r24	; 0x34
    3980:	8b e6       	ldi	r24, 0x6B	; 107
    3982:	9b e1       	ldi	r25, 0x1B	; 27
    3984:	97 ab       	std	Z+55, r25	; 0x37
    3986:	86 ab       	std	Z+54, r24	; 0x36
    3988:	89 e4       	ldi	r24, 0x49	; 73
    398a:	9d e1       	ldi	r25, 0x1D	; 29
    398c:	91 af       	std	Z+57, r25	; 0x39
    398e:	80 af       	std	Z+56, r24	; 0x38
    3990:	86 e9       	ldi	r24, 0x96	; 150
    3992:	9b e1       	ldi	r25, 0x1B	; 27
    3994:	93 af       	std	Z+59, r25	; 0x3b
    3996:	82 af       	std	Z+58, r24	; 0x3a
    3998:	88 ee       	ldi	r24, 0xE8	; 232
    399a:	9b e1       	ldi	r25, 0x1B	; 27
    399c:	95 af       	std	Z+61, r25	; 0x3d
    399e:	84 af       	std	Z+60, r24	; 0x3c
    39a0:	80 ef       	ldi	r24, 0xF0	; 240
    39a2:	9b e1       	ldi	r25, 0x1B	; 27
    39a4:	97 af       	std	Z+63, r25	; 0x3f
    39a6:	86 af       	std	Z+62, r24	; 0x3e
    39a8:	df 01       	movw	r26, r30
    39aa:	a0 5c       	subi	r26, 0xC0	; 192
    39ac:	bf 4f       	sbci	r27, 0xFF	; 255
    39ae:	88 ef       	ldi	r24, 0xF8	; 248
    39b0:	9b e1       	ldi	r25, 0x1B	; 27
    39b2:	11 96       	adiw	r26, 0x01	; 1
    39b4:	9c 93       	st	X, r25
    39b6:	8e 93       	st	-X, r24
    39b8:	12 96       	adiw	r26, 0x02	; 2
    39ba:	8c ef       	ldi	r24, 0xFC	; 252
    39bc:	9b e1       	ldi	r25, 0x1B	; 27
    39be:	11 96       	adiw	r26, 0x01	; 1
    39c0:	9c 93       	st	X, r25
    39c2:	8e 93       	st	-X, r24
    39c4:	12 96       	adiw	r26, 0x02	; 2
    39c6:	8d ef       	ldi	r24, 0xFD	; 253
    39c8:	9b e1       	ldi	r25, 0x1B	; 27
    39ca:	11 96       	adiw	r26, 0x01	; 1
    39cc:	9c 93       	st	X, r25
    39ce:	8e 93       	st	-X, r24
    39d0:	12 96       	adiw	r26, 0x02	; 2
    39d2:	86 e3       	ldi	r24, 0x36	; 54
    39d4:	9c e1       	ldi	r25, 0x1C	; 28
    39d6:	8d 93       	st	X+, r24
    39d8:	9c 93       	st	X, r25
    39da:	cf 01       	movw	r24, r30
    39dc:	08 95       	ret

000039de <FUNCintinvstr>:
// intinvstr
uint8_t FUNCintinvstr(int32_t num, char* res, uint8_t n_digit)
{
    39de:	8f 92       	push	r8
    39e0:	9f 92       	push	r9
    39e2:	af 92       	push	r10
    39e4:	bf 92       	push	r11
    39e6:	ef 92       	push	r14
    39e8:	ff 92       	push	r15
    39ea:	0f 93       	push	r16
    39ec:	1f 93       	push	r17
    39ee:	cf 93       	push	r28
    39f0:	df 93       	push	r29
    39f2:	8a 01       	movw	r16, r20
    39f4:	d2 2f       	mov	r29, r18
	uint8_t k = 0;
	for(res[k++] = (char)((num % 10) + '0'); (num /= 10) > 0 ; res[k++] = (char)((num % 10) + '0'));
    39f6:	2a e0       	ldi	r18, 0x0A	; 10
    39f8:	30 e0       	ldi	r19, 0x00	; 0
    39fa:	40 e0       	ldi	r20, 0x00	; 0
    39fc:	50 e0       	ldi	r21, 0x00	; 0
    39fe:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <__divmodsi4>
    3a02:	60 5d       	subi	r22, 0xD0	; 208
    3a04:	f8 01       	movw	r30, r16
    3a06:	60 83       	st	Z, r22
    3a08:	62 2f       	mov	r22, r18
    3a0a:	73 2f       	mov	r23, r19
    3a0c:	84 2f       	mov	r24, r20
    3a0e:	95 2f       	mov	r25, r21
    3a10:	16 16       	cp	r1, r22
    3a12:	17 06       	cpc	r1, r23
    3a14:	18 06       	cpc	r1, r24
    3a16:	19 06       	cpc	r1, r25
    3a18:	fc f4       	brge	.+62     	; 0x3a58 <FUNCintinvstr+0x7a>
    3a1a:	21 e0       	ldi	r18, 0x01	; 1
    3a1c:	0f 2e       	mov	r0, r31
    3a1e:	fa e0       	ldi	r31, 0x0A	; 10
    3a20:	8f 2e       	mov	r8, r31
    3a22:	91 2c       	mov	r9, r1
    3a24:	a1 2c       	mov	r10, r1
    3a26:	b1 2c       	mov	r11, r1
    3a28:	f0 2d       	mov	r31, r0
    3a2a:	c1 e0       	ldi	r28, 0x01	; 1
    3a2c:	c2 0f       	add	r28, r18
    3a2e:	78 01       	movw	r14, r16
    3a30:	e2 0e       	add	r14, r18
    3a32:	f1 1c       	adc	r15, r1
    3a34:	a5 01       	movw	r20, r10
    3a36:	94 01       	movw	r18, r8
    3a38:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <__divmodsi4>
    3a3c:	60 5d       	subi	r22, 0xD0	; 208
    3a3e:	f7 01       	movw	r30, r14
    3a40:	60 83       	st	Z, r22
    3a42:	62 2f       	mov	r22, r18
    3a44:	73 2f       	mov	r23, r19
    3a46:	84 2f       	mov	r24, r20
    3a48:	95 2f       	mov	r25, r21
    3a4a:	2c 2f       	mov	r18, r28
    3a4c:	16 16       	cp	r1, r22
    3a4e:	17 06       	cpc	r1, r23
    3a50:	18 06       	cpc	r1, r24
    3a52:	19 06       	cpc	r1, r25
    3a54:	54 f3       	brlt	.-44     	; 0x3a2a <FUNCintinvstr+0x4c>
    3a56:	01 c0       	rjmp	.+2      	; 0x3a5a <FUNCintinvstr+0x7c>
    3a58:	c1 e0       	ldi	r28, 0x01	; 1
	for( ; k < n_digit ; res[k++] = '0');
    3a5a:	cd 17       	cp	r28, r29
    3a5c:	48 f4       	brcc	.+18     	; 0x3a70 <FUNCintinvstr+0x92>
    3a5e:	80 e3       	ldi	r24, 0x30	; 48
    3a60:	f8 01       	movw	r30, r16
    3a62:	ec 0f       	add	r30, r28
    3a64:	f1 1d       	adc	r31, r1
    3a66:	80 83       	st	Z, r24
    3a68:	cf 5f       	subi	r28, 0xFF	; 255
    3a6a:	dc 13       	cpse	r29, r28
    3a6c:	f9 cf       	rjmp	.-14     	; 0x3a60 <FUNCintinvstr+0x82>
    3a6e:	01 c0       	rjmp	.+2      	; 0x3a72 <FUNCintinvstr+0x94>
    3a70:	dc 2f       	mov	r29, r28
	res[k] = '\0';
    3a72:	f8 01       	movw	r30, r16
    3a74:	ed 0f       	add	r30, r29
    3a76:	f1 1d       	adc	r31, r1
    3a78:	10 82       	st	Z, r1
	return k;
}
    3a7a:	8d 2f       	mov	r24, r29
    3a7c:	df 91       	pop	r29
    3a7e:	cf 91       	pop	r28
    3a80:	1f 91       	pop	r17
    3a82:	0f 91       	pop	r16
    3a84:	ff 90       	pop	r15
    3a86:	ef 90       	pop	r14
    3a88:	bf 90       	pop	r11
    3a8a:	af 90       	pop	r10
    3a8c:	9f 90       	pop	r9
    3a8e:	8f 90       	pop	r8
    3a90:	08 95       	ret

00003a92 <FUNCftoa>:
// ftoa
char* FUNCftoa(double num, char* res, uint8_t afterpoint)
{
    3a92:	8f 92       	push	r8
    3a94:	9f 92       	push	r9
    3a96:	af 92       	push	r10
    3a98:	bf 92       	push	r11
    3a9a:	cf 92       	push	r12
    3a9c:	df 92       	push	r13
    3a9e:	ef 92       	push	r14
    3aa0:	ff 92       	push	r15
    3aa2:	0f 93       	push	r16
    3aa4:	1f 93       	push	r17
    3aa6:	cf 93       	push	r28
    3aa8:	df 93       	push	r29
    3aaa:	6b 01       	movw	r12, r22
    3aac:	7c 01       	movw	r14, r24
    3aae:	ea 01       	movw	r28, r20
    3ab0:	02 2f       	mov	r16, r18
	uint32_t ipart;
	double n, fpart;
	uint8_t k = 0;
	int8_t sign;
	if (num < 0){
    3ab2:	20 e0       	ldi	r18, 0x00	; 0
    3ab4:	30 e0       	ldi	r19, 0x00	; 0
    3ab6:	a9 01       	movw	r20, r18
    3ab8:	0e 94 f6 29 	call	0x53ec	; 0x53ec <__cmpsf2>
    3abc:	88 23       	and	r24, r24
    3abe:	0c f0       	brlt	.+2      	; 0x3ac2 <FUNCftoa+0x30>
    3ac0:	66 c0       	rjmp	.+204    	; 0x3b8e <FUNCftoa+0xfc>
		n = -num; sign = -1;
    3ac2:	f7 fa       	bst	r15, 7
    3ac4:	f0 94       	com	r15
    3ac6:	f7 f8       	bld	r15, 7
    3ac8:	f0 94       	com	r15
	}else{
		n = num; sign = 1;
	}
	ipart = (uint32_t) n; fpart = n - (double)ipart;
    3aca:	c7 01       	movw	r24, r14
    3acc:	b6 01       	movw	r22, r12
    3ace:	0e 94 67 2a 	call	0x54ce	; 0x54ce <__fixunssfsi>
    3ad2:	4b 01       	movw	r8, r22
    3ad4:	5c 01       	movw	r10, r24
    3ad6:	0e 94 93 2a 	call	0x5526	; 0x5526 <__floatunsisf>
    3ada:	9b 01       	movw	r18, r22
    3adc:	ac 01       	movw	r20, r24
    3ade:	c7 01       	movw	r24, r14
    3ae0:	b6 01       	movw	r22, r12
    3ae2:	0e 94 91 29 	call	0x5322	; 0x5322 <__subsf3>
    3ae6:	6b 01       	movw	r12, r22
    3ae8:	7c 01       	movw	r14, r24
	k = FUNCintinvstr((int)ipart, res, 1);
    3aea:	b4 01       	movw	r22, r8
    3aec:	99 0c       	add	r9, r9
    3aee:	88 0b       	sbc	r24, r24
    3af0:	99 0b       	sbc	r25, r25
    3af2:	21 e0       	ldi	r18, 0x01	; 1
    3af4:	ae 01       	movw	r20, r28
    3af6:	73 df       	rcall	.-282    	; 0x39de <FUNCintinvstr>
	if (sign < 0) res[k++] = '-'; else res[k++] = ' ';
    3af8:	11 e0       	ldi	r17, 0x01	; 1
    3afa:	18 0f       	add	r17, r24
    3afc:	fe 01       	movw	r30, r28
    3afe:	e8 0f       	add	r30, r24
    3b00:	f1 1d       	adc	r31, r1
    3b02:	8d e2       	ldi	r24, 0x2D	; 45
    3b04:	80 83       	st	Z, r24
	res[k] = '\0';
    3b06:	5e 01       	movw	r10, r28
    3b08:	a1 0e       	add	r10, r17
    3b0a:	b1 1c       	adc	r11, r1
    3b0c:	f5 01       	movw	r30, r10
    3b0e:	10 82       	st	Z, r1
	Reverse(res);
    3b10:	ce 01       	movw	r24, r28
    3b12:	42 dc       	rcall	.-1916   	; 0x3398 <Reverse>
	if (afterpoint > 0 && afterpoint < (MAXafterpoint + 1)){ // it is only a 8 bit mcu
    3b14:	8f ef       	ldi	r24, 0xFF	; 255
    3b16:	80 0f       	add	r24, r16
    3b18:	86 30       	cpi	r24, 0x06	; 6
    3b1a:	08 f5       	brcc	.+66     	; 0x3b5e <FUNCftoa+0xcc>
		res[k++] = '.';
    3b1c:	8e e2       	ldi	r24, 0x2E	; 46
    3b1e:	f5 01       	movw	r30, r10
    3b20:	80 83       	st	Z, r24
		FUNCintinvstr( (int32_t)(fpart * pow(10, afterpoint)), (res + k), afterpoint );
    3b22:	1f 5f       	subi	r17, 0xFF	; 255
    3b24:	5e 01       	movw	r10, r28
    3b26:	a1 0e       	add	r10, r17
    3b28:	b1 1c       	adc	r11, r1
    3b2a:	60 2f       	mov	r22, r16
    3b2c:	70 e0       	ldi	r23, 0x00	; 0
    3b2e:	80 e0       	ldi	r24, 0x00	; 0
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	0e 94 93 2a 	call	0x5526	; 0x5526 <__floatunsisf>
    3b36:	9b 01       	movw	r18, r22
    3b38:	ac 01       	movw	r20, r24
    3b3a:	60 e0       	ldi	r22, 0x00	; 0
    3b3c:	70 e0       	ldi	r23, 0x00	; 0
    3b3e:	80 e2       	ldi	r24, 0x20	; 32
    3b40:	91 e4       	ldi	r25, 0x41	; 65
    3b42:	0e 94 ac 2b 	call	0x5758	; 0x5758 <pow>
    3b46:	a7 01       	movw	r20, r14
    3b48:	96 01       	movw	r18, r12
    3b4a:	0e 94 49 2b 	call	0x5692	; 0x5692 <__mulsf3>
    3b4e:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <__fixsfsi>
    3b52:	20 2f       	mov	r18, r16
    3b54:	a5 01       	movw	r20, r10
		Reverse(res + k);
    3b56:	43 df       	rcall	.-378    	; 0x39de <FUNCintinvstr>
    3b58:	c5 01       	movw	r24, r10
    3b5a:	1e dc       	rcall	.-1988   	; 0x3398 <Reverse>
    3b5c:	37 c0       	rjmp	.+110    	; 0x3bcc <FUNCftoa+0x13a>
	}else{
		res[k++] = '.';
    3b5e:	8e e2       	ldi	r24, 0x2E	; 46
    3b60:	f5 01       	movw	r30, r10
    3b62:	80 83       	st	Z, r24
		FUNCintinvstr( (int32_t)(fpart * pow(10, DEFAULTafterpoint)), (res + k), DEFAULTafterpoint );
    3b64:	1f 5f       	subi	r17, 0xFF	; 255
    3b66:	ce 01       	movw	r24, r28
    3b68:	81 0f       	add	r24, r17
    3b6a:	91 1d       	adc	r25, r1
    3b6c:	8c 01       	movw	r16, r24
    3b6e:	20 e0       	ldi	r18, 0x00	; 0
    3b70:	30 e0       	ldi	r19, 0x00	; 0
    3b72:	48 ec       	ldi	r20, 0xC8	; 200
    3b74:	52 e4       	ldi	r21, 0x42	; 66
    3b76:	c7 01       	movw	r24, r14
    3b78:	b6 01       	movw	r22, r12
    3b7a:	0e 94 49 2b 	call	0x5692	; 0x5692 <__mulsf3>
    3b7e:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <__fixsfsi>
    3b82:	22 e0       	ldi	r18, 0x02	; 2
    3b84:	a8 01       	movw	r20, r16
		Reverse(res + k);
    3b86:	2b df       	rcall	.-426    	; 0x39de <FUNCintinvstr>
    3b88:	c8 01       	movw	r24, r16
    3b8a:	06 dc       	rcall	.-2036   	; 0x3398 <Reverse>
	}
	return res;
    3b8c:	1f c0       	rjmp	.+62     	; 0x3bcc <FUNCftoa+0x13a>
	if (num < 0){
		n = -num; sign = -1;
	}else{
		n = num; sign = 1;
	}
	ipart = (uint32_t) n; fpart = n - (double)ipart;
    3b8e:	c7 01       	movw	r24, r14
    3b90:	b6 01       	movw	r22, r12
    3b92:	0e 94 67 2a 	call	0x54ce	; 0x54ce <__fixunssfsi>
    3b96:	4b 01       	movw	r8, r22
    3b98:	5c 01       	movw	r10, r24
    3b9a:	0e 94 93 2a 	call	0x5526	; 0x5526 <__floatunsisf>
    3b9e:	9b 01       	movw	r18, r22
    3ba0:	ac 01       	movw	r20, r24
    3ba2:	c7 01       	movw	r24, r14
    3ba4:	b6 01       	movw	r22, r12
    3ba6:	0e 94 91 29 	call	0x5322	; 0x5322 <__subsf3>
    3baa:	6b 01       	movw	r12, r22
    3bac:	7c 01       	movw	r14, r24
	k = FUNCintinvstr((int)ipart, res, 1);
    3bae:	b4 01       	movw	r22, r8
    3bb0:	99 0c       	add	r9, r9
    3bb2:	88 0b       	sbc	r24, r24
    3bb4:	99 0b       	sbc	r25, r25
    3bb6:	21 e0       	ldi	r18, 0x01	; 1
    3bb8:	ae 01       	movw	r20, r28
    3bba:	11 df       	rcall	.-478    	; 0x39de <FUNCintinvstr>
	if (sign < 0) res[k++] = '-'; else res[k++] = ' ';
    3bbc:	11 e0       	ldi	r17, 0x01	; 1
    3bbe:	18 0f       	add	r17, r24
    3bc0:	fe 01       	movw	r30, r28
    3bc2:	e8 0f       	add	r30, r24
    3bc4:	f1 1d       	adc	r31, r1
    3bc6:	80 e2       	ldi	r24, 0x20	; 32
    3bc8:	80 83       	st	Z, r24
    3bca:	9d cf       	rjmp	.-198    	; 0x3b06 <FUNCftoa+0x74>
		res[k++] = '.';
		FUNCintinvstr( (int32_t)(fpart * pow(10, DEFAULTafterpoint)), (res + k), DEFAULTafterpoint );
		Reverse(res + k);
	}
	return res;
}
    3bcc:	ce 01       	movw	r24, r28
    3bce:	df 91       	pop	r29
    3bd0:	cf 91       	pop	r28
    3bd2:	1f 91       	pop	r17
    3bd4:	0f 91       	pop	r16
    3bd6:	ff 90       	pop	r15
    3bd8:	ef 90       	pop	r14
    3bda:	df 90       	pop	r13
    3bdc:	cf 90       	pop	r12
    3bde:	bf 90       	pop	r11
    3be0:	af 90       	pop	r10
    3be2:	9f 90       	pop	r9
    3be4:	8f 90       	pop	r8
    3be6:	08 95       	ret

00003be8 <LCD0_strobe>:
		break;
	}
}
void LCD0_strobe(uint16_t num)
{
	*lcd0_PORT &= ~(1 << EN);
    3be8:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3bec:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3bf0:	80 81       	ld	r24, Z
    3bf2:	8b 7f       	andi	r24, 0xFB	; 251
    3bf4:	80 83       	st	Z, r24
	LCD_ticks(num);
	*lcd0_PORT |= (1 << EN);
    3bf6:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3bfa:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3bfe:	80 81       	ld	r24, Z
    3c00:	84 60       	ori	r24, 0x04	; 4
    3c02:	80 83       	st	Z, r24
    3c04:	08 95       	ret

00003c06 <LCD0_write>:
	// LCD0_write(0x03, INST);// return home
	// _delay_ms(1.53);
	LCD0_gotoxy(0,0);
}
void LCD0_write(char c, unsigned short D_I)
{
    3c06:	0f 93       	push	r16
    3c08:	1f 93       	push	r17
    3c0a:	cf 93       	push	r28
    3c0c:	c8 2f       	mov	r28, r24
    3c0e:	8b 01       	movw	r16, r22
	*lcd0_PORT &= ~(1 << RW); // lcd as input
    3c10:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3c14:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3c18:	80 81       	ld	r24, Z
    3c1a:	8d 7f       	andi	r24, 0xFD	; 253
    3c1c:	80 83       	st	Z, r24
	*lcd0_DDR |= (1 << DB4) | (1 << DB5) | (1 << DB6) | (1 << DB7); // mcu as output
    3c1e:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_DDR>
    3c22:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_DDR+0x1>
    3c26:	80 81       	ld	r24, Z
    3c28:	80 6f       	ori	r24, 0xF0	; 240
    3c2a:	80 83       	st	Z, r24
	
	if(D_I) *lcd0_PORT |= (1 << RS); else *lcd0_PORT &= ~(1 << RS);
    3c2c:	67 2b       	or	r22, r23
    3c2e:	41 f0       	breq	.+16     	; 0x3c40 <LCD0_write+0x3a>
    3c30:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3c34:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3c38:	80 81       	ld	r24, Z
    3c3a:	81 60       	ori	r24, 0x01	; 1
    3c3c:	80 83       	st	Z, r24
    3c3e:	07 c0       	rjmp	.+14     	; 0x3c4e <LCD0_write+0x48>
    3c40:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3c44:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3c48:	80 81       	ld	r24, Z
    3c4a:	8e 7f       	andi	r24, 0xFE	; 254
    3c4c:	80 83       	st	Z, r24
	LCD0_strobe(LCD_N_TICKS); LCD_ticks(BIT_N_TICKS);
    3c4e:	80 e0       	ldi	r24, 0x00	; 0
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	ca df       	rcall	.-108    	; 0x3be8 <LCD0_strobe>
	
	if(c & 0x80) *lcd0_PORT |= 1 << DB7; else *lcd0_PORT &= ~(1 << DB7); LCD_ticks(BIT_N_TICKS);
    3c54:	cc 23       	and	r28, r28
    3c56:	44 f4       	brge	.+16     	; 0x3c68 <LCD0_write+0x62>
    3c58:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3c5c:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3c60:	80 81       	ld	r24, Z
    3c62:	80 68       	ori	r24, 0x80	; 128
    3c64:	80 83       	st	Z, r24
    3c66:	07 c0       	rjmp	.+14     	; 0x3c76 <LCD0_write+0x70>
    3c68:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3c6c:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3c70:	80 81       	ld	r24, Z
    3c72:	8f 77       	andi	r24, 0x7F	; 127
    3c74:	80 83       	st	Z, r24
	if(c & 0x40) *lcd0_PORT |= 1 << DB6; else *lcd0_PORT &= ~(1 << DB6); LCD_ticks(BIT_N_TICKS);
    3c76:	c6 ff       	sbrs	r28, 6
    3c78:	08 c0       	rjmp	.+16     	; 0x3c8a <LCD0_write+0x84>
    3c7a:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3c7e:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3c82:	80 81       	ld	r24, Z
    3c84:	80 64       	ori	r24, 0x40	; 64
    3c86:	80 83       	st	Z, r24
    3c88:	07 c0       	rjmp	.+14     	; 0x3c98 <LCD0_write+0x92>
    3c8a:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3c8e:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3c92:	80 81       	ld	r24, Z
    3c94:	8f 7b       	andi	r24, 0xBF	; 191
    3c96:	80 83       	st	Z, r24
	if(c & 0x20) *lcd0_PORT |= 1 << DB5; else *lcd0_PORT &= ~(1 << DB5); LCD_ticks(BIT_N_TICKS);
    3c98:	c5 ff       	sbrs	r28, 5
    3c9a:	08 c0       	rjmp	.+16     	; 0x3cac <LCD0_write+0xa6>
    3c9c:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3ca0:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3ca4:	80 81       	ld	r24, Z
    3ca6:	80 62       	ori	r24, 0x20	; 32
    3ca8:	80 83       	st	Z, r24
    3caa:	07 c0       	rjmp	.+14     	; 0x3cba <LCD0_write+0xb4>
    3cac:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3cb0:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3cb4:	80 81       	ld	r24, Z
    3cb6:	8f 7d       	andi	r24, 0xDF	; 223
    3cb8:	80 83       	st	Z, r24
	if(c & 0x10) *lcd0_PORT |= 1 << DB4; else *lcd0_PORT &= ~(1 << DB4); LCD_ticks(BIT_N_TICKS);
    3cba:	c4 ff       	sbrs	r28, 4
    3cbc:	08 c0       	rjmp	.+16     	; 0x3cce <LCD0_write+0xc8>
    3cbe:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3cc2:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3cc6:	80 81       	ld	r24, Z
    3cc8:	80 61       	ori	r24, 0x10	; 16
    3cca:	80 83       	st	Z, r24
    3ccc:	07 c0       	rjmp	.+14     	; 0x3cdc <LCD0_write+0xd6>
    3cce:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3cd2:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3cd6:	80 81       	ld	r24, Z
    3cd8:	8f 7e       	andi	r24, 0xEF	; 239
    3cda:	80 83       	st	Z, r24
	
	if(D_I) *lcd0_PORT |= (1 << RS); else *lcd0_PORT &= ~(1 << RS);
    3cdc:	01 2b       	or	r16, r17
    3cde:	41 f0       	breq	.+16     	; 0x3cf0 <LCD0_write+0xea>
    3ce0:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3ce4:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3ce8:	80 81       	ld	r24, Z
    3cea:	81 60       	ori	r24, 0x01	; 1
    3cec:	80 83       	st	Z, r24
    3cee:	07 c0       	rjmp	.+14     	; 0x3cfe <LCD0_write+0xf8>
    3cf0:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3cf4:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3cf8:	80 81       	ld	r24, Z
    3cfa:	8e 7f       	andi	r24, 0xFE	; 254
    3cfc:	80 83       	st	Z, r24
	LCD0_strobe(LCD_N_TICKS); LCD_ticks(BIT_N_TICKS);
    3cfe:	80 e0       	ldi	r24, 0x00	; 0
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	72 df       	rcall	.-284    	; 0x3be8 <LCD0_strobe>
	
	if(c & 0x08) *lcd0_PORT |= 1 << DB7; else *lcd0_PORT &= ~(1 << DB7); LCD_ticks(BIT_N_TICKS);
    3d04:	c3 ff       	sbrs	r28, 3
    3d06:	08 c0       	rjmp	.+16     	; 0x3d18 <LCD0_write+0x112>
    3d08:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3d0c:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3d10:	80 81       	ld	r24, Z
    3d12:	80 68       	ori	r24, 0x80	; 128
    3d14:	80 83       	st	Z, r24
    3d16:	07 c0       	rjmp	.+14     	; 0x3d26 <LCD0_write+0x120>
    3d18:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3d1c:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3d20:	80 81       	ld	r24, Z
    3d22:	8f 77       	andi	r24, 0x7F	; 127
    3d24:	80 83       	st	Z, r24
	if(c & 0x04) *lcd0_PORT |= 1 << DB6; else *lcd0_PORT &= ~(1 << DB6); LCD_ticks(BIT_N_TICKS);
    3d26:	c2 ff       	sbrs	r28, 2
    3d28:	08 c0       	rjmp	.+16     	; 0x3d3a <LCD0_write+0x134>
    3d2a:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3d2e:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3d32:	80 81       	ld	r24, Z
    3d34:	80 64       	ori	r24, 0x40	; 64
    3d36:	80 83       	st	Z, r24
    3d38:	07 c0       	rjmp	.+14     	; 0x3d48 <LCD0_write+0x142>
    3d3a:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3d3e:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3d42:	80 81       	ld	r24, Z
    3d44:	8f 7b       	andi	r24, 0xBF	; 191
    3d46:	80 83       	st	Z, r24
	if(c & 0x02) *lcd0_PORT |= 1 << DB5; else *lcd0_PORT &= ~(1 << DB5); LCD_ticks(BIT_N_TICKS);
    3d48:	c1 ff       	sbrs	r28, 1
    3d4a:	08 c0       	rjmp	.+16     	; 0x3d5c <LCD0_write+0x156>
    3d4c:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3d50:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3d54:	80 81       	ld	r24, Z
    3d56:	80 62       	ori	r24, 0x20	; 32
    3d58:	80 83       	st	Z, r24
    3d5a:	07 c0       	rjmp	.+14     	; 0x3d6a <LCD0_write+0x164>
    3d5c:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3d60:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3d64:	80 81       	ld	r24, Z
    3d66:	8f 7d       	andi	r24, 0xDF	; 223
    3d68:	80 83       	st	Z, r24
	if(c & 0x01) *lcd0_PORT |= 1 << DB4; else *lcd0_PORT &= ~(1 << DB4); LCD_ticks(BIT_N_TICKS);
    3d6a:	c0 ff       	sbrs	r28, 0
    3d6c:	08 c0       	rjmp	.+16     	; 0x3d7e <LCD0_write+0x178>
    3d6e:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3d72:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3d76:	80 81       	ld	r24, Z
    3d78:	80 61       	ori	r24, 0x10	; 16
    3d7a:	80 83       	st	Z, r24
    3d7c:	07 c0       	rjmp	.+14     	; 0x3d8c <LCD0_write+0x186>
    3d7e:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3d82:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3d86:	80 81       	ld	r24, Z
    3d88:	8f 7e       	andi	r24, 0xEF	; 239
    3d8a:	80 83       	st	Z, r24
	
	*lcd0_PORT &= ~(1 << EN); LCD_ticks(LCD_N_TICKS);
    3d8c:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3d90:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3d94:	80 81       	ld	r24, Z
    3d96:	8b 7f       	andi	r24, 0xFB	; 251
    3d98:	80 83       	st	Z, r24
}
    3d9a:	cf 91       	pop	r28
    3d9c:	1f 91       	pop	r17
    3d9e:	0f 91       	pop	r16
    3da0:	08 95       	ret

00003da2 <LCD0_clear>:
		LCD0_putch(' ');
	}
}
void LCD0_clear(void)
{
	LCD0_write(0x01, INST);
    3da2:	60 e0       	ldi	r22, 0x00	; 0
    3da4:	70 e0       	ldi	r23, 0x00	; 0
    3da6:	81 e0       	ldi	r24, 0x01	; 1
    3da8:	2e df       	rcall	.-420    	; 0x3c06 <LCD0_write>
    3daa:	87 ee       	ldi	r24, 0xE7	; 231
    3dac:	97 e1       	ldi	r25, 0x17	; 23
    3dae:	01 97       	sbiw	r24, 0x01	; 1
    3db0:	f1 f7       	brne	.-4      	; 0x3dae <LCD0_clear+0xc>
    3db2:	00 c0       	rjmp	.+0      	; 0x3db4 <LCD0_clear+0x12>
    3db4:	00 00       	nop
    3db6:	08 95       	ret

00003db8 <LCD0_read>:
	if(c & 0x01) *lcd0_PORT |= 1 << DB4; else *lcd0_PORT &= ~(1 << DB4); LCD_ticks(BIT_N_TICKS);
	
	*lcd0_PORT &= ~(1 << EN); LCD_ticks(LCD_N_TICKS);
}
char LCD0_read(unsigned short D_I)
{
    3db8:	0f 93       	push	r16
    3dba:	1f 93       	push	r17
    3dbc:	cf 93       	push	r28
    3dbe:	8c 01       	movw	r16, r24
	char c = 0x00;
	*lcd0_DDR &= ~((1 << DB4) | (1 << DB5) | (1 << DB6) | (1 << DB7)); // mcu as input
    3dc0:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_DDR>
    3dc4:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_DDR+0x1>
    3dc8:	80 81       	ld	r24, Z
    3dca:	8f 70       	andi	r24, 0x0F	; 15
    3dcc:	80 83       	st	Z, r24
	*lcd0_PORT |= (1 << DB4) | (1 << DB5) | (1 << DB6) | (1 << DB7); // pull up resistors
    3dce:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3dd2:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3dd6:	80 81       	ld	r24, Z
    3dd8:	80 6f       	ori	r24, 0xF0	; 240
    3dda:	80 83       	st	Z, r24
	*lcd0_PORT |= (1 << RW); // lcd as output
    3ddc:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3de0:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3de4:	80 81       	ld	r24, Z
    3de6:	82 60       	ori	r24, 0x02	; 2
    3de8:	80 83       	st	Z, r24
	
	if(D_I) *lcd0_PORT |= (1 << RS); else *lcd0_PORT &= ~(1 << RS);
    3dea:	01 15       	cp	r16, r1
    3dec:	11 05       	cpc	r17, r1
    3dee:	41 f0       	breq	.+16     	; 0x3e00 <LCD0_read+0x48>
    3df0:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3df4:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3df8:	80 81       	ld	r24, Z
    3dfa:	81 60       	ori	r24, 0x01	; 1
    3dfc:	80 83       	st	Z, r24
    3dfe:	07 c0       	rjmp	.+14     	; 0x3e0e <LCD0_read+0x56>
    3e00:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3e04:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3e08:	80 81       	ld	r24, Z
    3e0a:	8e 7f       	andi	r24, 0xFE	; 254
    3e0c:	80 83       	st	Z, r24
	LCD0_strobe(LCD_N_TICKS); LCD_ticks(BIT_N_TICKS);
    3e0e:	80 e0       	ldi	r24, 0x00	; 0
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	ea de       	rcall	.-556    	; 0x3be8 <LCD0_strobe>
	
	if(*lcd0_PIN & (1 << DB7)) c |= 1 << 7; else c &= ~(1 << 7); LCD_ticks(BIT_N_TICKS);
    3e14:	e0 91 dc 02 	lds	r30, 0x02DC	; 0x8002dc <lcd0_PIN>
    3e18:	f0 91 dd 02 	lds	r31, 0x02DD	; 0x8002dd <lcd0_PIN+0x1>
    3e1c:	80 81       	ld	r24, Z
    3e1e:	88 23       	and	r24, r24
    3e20:	14 f0       	brlt	.+4      	; 0x3e26 <LCD0_read+0x6e>
    3e22:	c0 e0       	ldi	r28, 0x00	; 0
    3e24:	01 c0       	rjmp	.+2      	; 0x3e28 <LCD0_read+0x70>
    3e26:	c0 e8       	ldi	r28, 0x80	; 128
	if(*lcd0_PIN & (1 << DB6)) c |= 1 << 6; else c &= ~(1 << 6); LCD_ticks(BIT_N_TICKS);
    3e28:	80 81       	ld	r24, Z
    3e2a:	86 ff       	sbrs	r24, 6
    3e2c:	02 c0       	rjmp	.+4      	; 0x3e32 <LCD0_read+0x7a>
    3e2e:	c0 64       	ori	r28, 0x40	; 64
    3e30:	01 c0       	rjmp	.+2      	; 0x3e34 <LCD0_read+0x7c>
    3e32:	cf 7b       	andi	r28, 0xBF	; 191
	if(*lcd0_PIN & (1 << DB5)) c |= 1 << 5; else c &= ~(1 << 5); LCD_ticks(BIT_N_TICKS);
    3e34:	80 81       	ld	r24, Z
    3e36:	85 ff       	sbrs	r24, 5
    3e38:	02 c0       	rjmp	.+4      	; 0x3e3e <LCD0_read+0x86>
    3e3a:	c0 62       	ori	r28, 0x20	; 32
    3e3c:	01 c0       	rjmp	.+2      	; 0x3e40 <LCD0_read+0x88>
    3e3e:	cf 7d       	andi	r28, 0xDF	; 223
	if(*lcd0_PIN & (1 << DB4)) c |= 1 << 4; else c &= ~(1 << 4); LCD_ticks(BIT_N_TICKS);
    3e40:	80 81       	ld	r24, Z
    3e42:	84 ff       	sbrs	r24, 4
    3e44:	02 c0       	rjmp	.+4      	; 0x3e4a <LCD0_read+0x92>
    3e46:	c0 61       	ori	r28, 0x10	; 16
    3e48:	01 c0       	rjmp	.+2      	; 0x3e4c <LCD0_read+0x94>
    3e4a:	cf 7e       	andi	r28, 0xEF	; 239
	
	if(D_I) *lcd0_PORT |= (1 << RS); else *lcd0_PORT &= ~(1 << RS);
    3e4c:	01 2b       	or	r16, r17
    3e4e:	41 f0       	breq	.+16     	; 0x3e60 <LCD0_read+0xa8>
    3e50:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3e54:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3e58:	80 81       	ld	r24, Z
    3e5a:	81 60       	ori	r24, 0x01	; 1
    3e5c:	80 83       	st	Z, r24
    3e5e:	07 c0       	rjmp	.+14     	; 0x3e6e <LCD0_read+0xb6>
    3e60:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3e64:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3e68:	80 81       	ld	r24, Z
    3e6a:	8e 7f       	andi	r24, 0xFE	; 254
    3e6c:	80 83       	st	Z, r24
	LCD0_strobe(LCD_N_TICKS); LCD_ticks(BIT_N_TICKS);
    3e6e:	80 e0       	ldi	r24, 0x00	; 0
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	ba de       	rcall	.-652    	; 0x3be8 <LCD0_strobe>
	
	if(*lcd0_PIN & (1 << DB7)) c |= 1 << 3; else c &= ~(1 << 3); LCD_ticks(BIT_N_TICKS);
    3e74:	e0 91 dc 02 	lds	r30, 0x02DC	; 0x8002dc <lcd0_PIN>
    3e78:	f0 91 dd 02 	lds	r31, 0x02DD	; 0x8002dd <lcd0_PIN+0x1>
    3e7c:	80 81       	ld	r24, Z
    3e7e:	88 23       	and	r24, r24
    3e80:	1c f4       	brge	.+6      	; 0x3e88 <LCD0_read+0xd0>
    3e82:	8c 2f       	mov	r24, r28
    3e84:	88 60       	ori	r24, 0x08	; 8
    3e86:	02 c0       	rjmp	.+4      	; 0x3e8c <LCD0_read+0xd4>
    3e88:	8c 2f       	mov	r24, r28
    3e8a:	87 7f       	andi	r24, 0xF7	; 247
	if(*lcd0_PIN & (1 << DB6)) c |= 1 << 2; else c &= ~(1 << 2); LCD_ticks(BIT_N_TICKS);
    3e8c:	90 81       	ld	r25, Z
    3e8e:	96 ff       	sbrs	r25, 6
    3e90:	02 c0       	rjmp	.+4      	; 0x3e96 <LCD0_read+0xde>
    3e92:	84 60       	ori	r24, 0x04	; 4
    3e94:	01 c0       	rjmp	.+2      	; 0x3e98 <LCD0_read+0xe0>
    3e96:	8b 7f       	andi	r24, 0xFB	; 251
	if(*lcd0_PIN & (1 << DB5)) c |= 1 << 1; else c &= ~(1 << 1); LCD_ticks(BIT_N_TICKS);
    3e98:	90 81       	ld	r25, Z
    3e9a:	95 ff       	sbrs	r25, 5
    3e9c:	02 c0       	rjmp	.+4      	; 0x3ea2 <LCD0_read+0xea>
    3e9e:	82 60       	ori	r24, 0x02	; 2
    3ea0:	01 c0       	rjmp	.+2      	; 0x3ea4 <LCD0_read+0xec>
    3ea2:	8d 7f       	andi	r24, 0xFD	; 253
	if(*lcd0_PIN & (1 << DB4)) c |= 1 << 0; else c &= ~(1 << 0); LCD_ticks(BIT_N_TICKS);
    3ea4:	90 81       	ld	r25, Z
    3ea6:	94 ff       	sbrs	r25, 4
    3ea8:	02 c0       	rjmp	.+4      	; 0x3eae <LCD0_read+0xf6>
    3eaa:	81 60       	ori	r24, 0x01	; 1
    3eac:	01 c0       	rjmp	.+2      	; 0x3eb0 <LCD0_read+0xf8>
    3eae:	8e 7f       	andi	r24, 0xFE	; 254
	
	*lcd0_PORT &= ~(1 << EN); LCD_ticks(LCD_N_TICKS);
    3eb0:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3eb4:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3eb8:	90 81       	ld	r25, Z
    3eba:	9b 7f       	andi	r25, 0xFB	; 251
    3ebc:	90 83       	st	Z, r25
	
	return c;
}
    3ebe:	cf 91       	pop	r28
    3ec0:	1f 91       	pop	r17
    3ec2:	0f 91       	pop	r16
    3ec4:	08 95       	ret

00003ec6 <LCD0_BF>:
// it has to read at minimum one equal and exit immediately if not equal, weird property.
{
	uint8_t i;
	char inst = 0x80;
	for(i=0; 0x80 & inst; i++){
		inst = LCD0_read(INST);
    3ec6:	80 e0       	ldi	r24, 0x00	; 0
    3ec8:	90 e0       	ldi	r25, 0x00	; 0
    3eca:	76 df       	rcall	.-276    	; 0x3db8 <LCD0_read>
void LCD0_BF(void)
// it has to read at minimum one equal and exit immediately if not equal, weird property.
{
	uint8_t i;
	char inst = 0x80;
	for(i=0; 0x80 & inst; i++){
    3ecc:	88 23       	and	r24, r24
    3ece:	44 f4       	brge	.+16     	; 0x3ee0 <LCD0_BF+0x1a>
		inst = LCD0_read(INST);
    3ed0:	80 e0       	ldi	r24, 0x00	; 0
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
    3ed4:	71 df       	rcall	.-286    	; 0x3db8 <LCD0_read>
void LCD0_BF(void)
// it has to read at minimum one equal and exit immediately if not equal, weird property.
{
	uint8_t i;
	char inst = 0x80;
	for(i=0; 0x80 & inst; i++){
    3ed6:	88 23       	and	r24, r24
    3ed8:	1c f4       	brge	.+6      	; 0x3ee0 <LCD0_BF+0x1a>
		inst = LCD0_read(INST);
    3eda:	80 e0       	ldi	r24, 0x00	; 0
    3edc:	90 e0       	ldi	r25, 0x00	; 0
    3ede:	6c cf       	rjmp	.-296    	; 0x3db8 <LCD0_read>
    3ee0:	08 95       	ret

00003ee2 <LCD0_putch>:
	LCD0_BF();
	return c;
}
void LCD0_putch(char c)
{
	LCD0_write(c, DATA);
    3ee2:	61 e0       	ldi	r22, 0x01	; 1
    3ee4:	70 e0       	ldi	r23, 0x00	; 0
    3ee6:	8f de       	rcall	.-738    	; 0x3c06 <LCD0_write>
	LCD0_BF();
    3ee8:	ee cf       	rjmp	.-36     	; 0x3ec6 <LCD0_BF>
    3eea:	08 95       	ret

00003eec <LCD0_string>:
    3eec:	cf 93       	push	r28
}
void LCD0_string(const char* s)
{
    3eee:	df 93       	push	r29
    3ef0:	ec 01       	movw	r28, r24
	char tmp;
	while(*s){
    3ef2:	88 81       	ld	r24, Y
    3ef4:	88 23       	and	r24, r24
    3ef6:	29 f0       	breq	.+10     	; 0x3f02 <LCD0_string+0x16>
    3ef8:	21 96       	adiw	r28, 0x01	; 1
		tmp = *(s++);
		LCD0_putch(tmp);
    3efa:	f3 df       	rcall	.-26     	; 0x3ee2 <LCD0_putch>
	LCD0_BF();
}
void LCD0_string(const char* s)
{
	char tmp;
	while(*s){
    3efc:	89 91       	ld	r24, Y+
    3efe:	81 11       	cpse	r24, r1
    3f00:	fc cf       	rjmp	.-8      	; 0x3efa <LCD0_string+0xe>
		tmp = *(s++);
		LCD0_putch(tmp);
	}
}
    3f02:	df 91       	pop	r29
    3f04:	cf 91       	pop	r28
    3f06:	08 95       	ret

00003f08 <LCD0_string_size>:
void LCD0_string_size(const char* s, uint8_t size)
{
    3f08:	0f 93       	push	r16
    3f0a:	1f 93       	push	r17
    3f0c:	cf 93       	push	r28
    3f0e:	df 93       	push	r29
    3f10:	fc 01       	movw	r30, r24
    3f12:	d6 2f       	mov	r29, r22
	char tmp;
	uint8_t pos = 0;
	while(*s){
    3f14:	80 81       	ld	r24, Z
    3f16:	88 23       	and	r24, r24
    3f18:	51 f0       	breq	.+20     	; 0x3f2e <LCD0_string_size+0x26>
		tmp=*(s++);
    3f1a:	8f 01       	movw	r16, r30
    3f1c:	0f 5f       	subi	r16, 0xFF	; 255
    3f1e:	1f 4f       	sbci	r17, 0xFF	; 255
		pos++;
		if(pos > size) // 1 TO SIZE+1
    3f20:	61 11       	cpse	r22, r1
    3f22:	09 c0       	rjmp	.+18     	; 0x3f36 <LCD0_string_size+0x2e>
    3f24:	15 c0       	rjmp	.+42     	; 0x3f50 <LCD0_string_size+0x48>
{
	char tmp;
	uint8_t pos = 0;
	while(*s){
		tmp=*(s++);
		pos++;
    3f26:	cf 5f       	subi	r28, 0xFF	; 255
		if(pos > size) // 1 TO SIZE+1
    3f28:	dc 17       	cp	r29, r28
    3f2a:	30 f4       	brcc	.+12     	; 0x3f38 <LCD0_string_size+0x30>
    3f2c:	01 c0       	rjmp	.+2      	; 0x3f30 <LCD0_string_size+0x28>
	}
}
void LCD0_string_size(const char* s, uint8_t size)
{
	char tmp;
	uint8_t pos = 0;
    3f2e:	c0 e0       	ldi	r28, 0x00	; 0
		pos++;
		if(pos > size) // 1 TO SIZE+1
			break;
		LCD0_putch(tmp);
	}
	while(pos<size){ // TO SIZE
    3f30:	cd 17       	cp	r28, r29
    3f32:	48 f0       	brcs	.+18     	; 0x3f46 <LCD0_string_size+0x3e>
    3f34:	0d c0       	rjmp	.+26     	; 0x3f50 <LCD0_string_size+0x48>
	char tmp;
	uint8_t pos = 0;
	while(*s){
		tmp=*(s++);
		pos++;
		if(pos > size) // 1 TO SIZE+1
    3f36:	c1 e0       	ldi	r28, 0x01	; 1
			break;
		LCD0_putch(tmp);
    3f38:	d4 df       	rcall	.-88     	; 0x3ee2 <LCD0_putch>
}
void LCD0_string_size(const char* s, uint8_t size)
{
	char tmp;
	uint8_t pos = 0;
	while(*s){
    3f3a:	f8 01       	movw	r30, r16
    3f3c:	81 91       	ld	r24, Z+
    3f3e:	8f 01       	movw	r16, r30
    3f40:	81 11       	cpse	r24, r1
    3f42:	f1 cf       	rjmp	.-30     	; 0x3f26 <LCD0_string_size+0x1e>
    3f44:	f5 cf       	rjmp	.-22     	; 0x3f30 <LCD0_string_size+0x28>
		if(pos > size) // 1 TO SIZE+1
			break;
		LCD0_putch(tmp);
	}
	while(pos<size){ // TO SIZE
		LCD0_putch(' ');
    3f46:	80 e2       	ldi	r24, 0x20	; 32
    3f48:	cc df       	rcall	.-104    	; 0x3ee2 <LCD0_putch>
		pos++;
    3f4a:	cf 5f       	subi	r28, 0xFF	; 255
		pos++;
		if(pos > size) // 1 TO SIZE+1
			break;
		LCD0_putch(tmp);
	}
	while(pos<size){ // TO SIZE
    3f4c:	cd 17       	cp	r28, r29
    3f4e:	d8 f3       	brcs	.-10     	; 0x3f46 <LCD0_string_size+0x3e>
		LCD0_putch(' ');
		pos++;
	}
}
    3f50:	df 91       	pop	r29
    3f52:	cf 91       	pop	r28
    3f54:	1f 91       	pop	r17
    3f56:	0f 91       	pop	r16
    3f58:	08 95       	ret

00003f5a <LCD0_hspace>:
void LCD0_hspace(uint8_t n)
{
    3f5a:	cf 93       	push	r28
    3f5c:	c8 2f       	mov	r28, r24
	for(; n; n--){
    3f5e:	88 23       	and	r24, r24
    3f60:	21 f0       	breq	.+8      	; 0x3f6a <LCD0_hspace+0x10>
		LCD0_putch(' ');
    3f62:	80 e2       	ldi	r24, 0x20	; 32
    3f64:	be df       	rcall	.-132    	; 0x3ee2 <LCD0_putch>
		pos++;
	}
}
void LCD0_hspace(uint8_t n)
{
	for(; n; n--){
    3f66:	c1 50       	subi	r28, 0x01	; 1
    3f68:	e1 f7       	brne	.-8      	; 0x3f62 <LCD0_hspace+0x8>
		LCD0_putch(' ');
	}
}
    3f6a:	cf 91       	pop	r28
    3f6c:	08 95       	ret

00003f6e <LCD0_gotoxy>:
{
	LCD0_write(0x01, INST);
    _delay_ms(1.53);
}
void LCD0_gotoxy(unsigned int y, unsigned int x)
{
    3f6e:	26 2f       	mov	r18, r22
	switch(y){
    3f70:	81 30       	cpi	r24, 0x01	; 1
    3f72:	91 05       	cpc	r25, r1
    3f74:	71 f0       	breq	.+28     	; 0x3f92 <LCD0_gotoxy+0x24>
    3f76:	30 f0       	brcs	.+12     	; 0x3f84 <LCD0_gotoxy+0x16>
    3f78:	82 30       	cpi	r24, 0x02	; 2
    3f7a:	91 05       	cpc	r25, r1
    3f7c:	89 f0       	breq	.+34     	; 0x3fa0 <LCD0_gotoxy+0x32>
    3f7e:	03 97       	sbiw	r24, 0x03	; 3
    3f80:	b1 f0       	breq	.+44     	; 0x3fae <LCD0_gotoxy+0x40>
    3f82:	08 95       	ret
		case 0:
			LCD0_write((0x80 + x), INST);
    3f84:	60 e0       	ldi	r22, 0x00	; 0
    3f86:	70 e0       	ldi	r23, 0x00	; 0
    3f88:	80 e8       	ldi	r24, 0x80	; 128
    3f8a:	82 0f       	add	r24, r18
    3f8c:	3c de       	rcall	.-904    	; 0x3c06 <LCD0_write>
			LCD0_BF();
    3f8e:	9b cf       	rjmp	.-202    	; 0x3ec6 <LCD0_BF>
    3f90:	08 95       	ret
		break;
    3f92:	60 e0       	ldi	r22, 0x00	; 0
		case 1:
			LCD0_write((0xC0 + x), INST);
    3f94:	70 e0       	ldi	r23, 0x00	; 0
    3f96:	80 ec       	ldi	r24, 0xC0	; 192
    3f98:	82 0f       	add	r24, r18
    3f9a:	35 de       	rcall	.-918    	; 0x3c06 <LCD0_write>
			LCD0_BF();
    3f9c:	94 cf       	rjmp	.-216    	; 0x3ec6 <LCD0_BF>
    3f9e:	08 95       	ret
		break;
    3fa0:	60 e0       	ldi	r22, 0x00	; 0
		case 2:
			LCD0_write((0x94 + x), INST); // 0x94
    3fa2:	70 e0       	ldi	r23, 0x00	; 0
    3fa4:	84 e9       	ldi	r24, 0x94	; 148
    3fa6:	82 0f       	add	r24, r18
    3fa8:	2e de       	rcall	.-932    	; 0x3c06 <LCD0_write>
			LCD0_BF();
    3faa:	8d cf       	rjmp	.-230    	; 0x3ec6 <LCD0_BF>
		break;
		case 3:
			LCD0_write((0xD4 + x), INST); // 0xD4
    3fac:	08 95       	ret
    3fae:	60 e0       	ldi	r22, 0x00	; 0
    3fb0:	70 e0       	ldi	r23, 0x00	; 0
    3fb2:	84 ed       	ldi	r24, 0xD4	; 212
    3fb4:	82 0f       	add	r24, r18
    3fb6:	27 de       	rcall	.-946    	; 0x3c06 <LCD0_write>
			LCD0_BF();
    3fb8:	86 cf       	rjmp	.-244    	; 0x3ec6 <LCD0_BF>
    3fba:	08 95       	ret

00003fbc <LCD0_inic>:
    3fbc:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <lcd0_DDR>
	return lcd0;
}
void LCD0_inic(void)
{
	// LCD INIC
	*lcd0_DDR = (1 << RS) | (1 << RW) | (1 << EN) | (0 << NC);
    3fc0:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <lcd0_DDR+0x1>
    3fc4:	87 e0       	ldi	r24, 0x07	; 7
    3fc6:	80 83       	st	Z, r24
	*lcd0_PORT = (1 << NC);
    3fc8:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    3fcc:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    3fd0:	88 e0       	ldi	r24, 0x08	; 8
    3fd2:	80 83       	st	Z, r24
    3fd4:	2f ef       	ldi	r18, 0xFF	; 255
    3fd6:	83 ef       	ldi	r24, 0xF3	; 243
    3fd8:	91 e0       	ldi	r25, 0x01	; 1
    3fda:	21 50       	subi	r18, 0x01	; 1
    3fdc:	80 40       	sbci	r24, 0x00	; 0
    3fde:	90 40       	sbci	r25, 0x00	; 0
    3fe0:	e1 f7       	brne	.-8      	; 0x3fda <LCD0_inic+0x1e>
    3fe2:	00 c0       	rjmp	.+0      	; 0x3fe4 <LCD0_inic+0x28>
    3fe4:	00 00       	nop
	// INICIALIZACAO LCD datasheet/
	_delay_ms(40); // using clock at 16Mhz
	LCD0_write(0x38, INST); // function set
    3fe6:	60 e0       	ldi	r22, 0x00	; 0
    3fe8:	70 e0       	ldi	r23, 0x00	; 0
    3fea:	88 e3       	ldi	r24, 0x38	; 56
    3fec:	0c de       	rcall	.-1000   	; 0x3c06 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3fee:	20 ed       	ldi	r18, 0xD0	; 208
    3ff0:	2a 95       	dec	r18
    3ff2:	f1 f7       	brne	.-4      	; 0x3ff0 <LCD0_inic+0x34>
	_delay_us(39);
	LCD0_write(0x38, INST); // function set
    3ff4:	60 e0       	ldi	r22, 0x00	; 0
    3ff6:	70 e0       	ldi	r23, 0x00	; 0
    3ff8:	88 e3       	ldi	r24, 0x38	; 56
    3ffa:	05 de       	rcall	.-1014   	; 0x3c06 <LCD0_write>
    3ffc:	80 ed       	ldi	r24, 0xD0	; 208
    3ffe:	8a 95       	dec	r24
    4000:	f1 f7       	brne	.-4      	; 0x3ffe <LCD0_inic+0x42>
	_delay_us(39);
	LCD0_write(0x38, INST); // function set
    4002:	60 e0       	ldi	r22, 0x00	; 0
    4004:	70 e0       	ldi	r23, 0x00	; 0
    4006:	88 e3       	ldi	r24, 0x38	; 56
    4008:	fe dd       	rcall	.-1028   	; 0x3c06 <LCD0_write>
    400a:	90 ed       	ldi	r25, 0xD0	; 208
    400c:	9a 95       	dec	r25
    400e:	f1 f7       	brne	.-4      	; 0x400c <LCD0_inic+0x50>
	_delay_us(39);
	LCD0_write(0x28, INST); // function set 2B
    4010:	60 e0       	ldi	r22, 0x00	; 0
    4012:	70 e0       	ldi	r23, 0x00	; 0
    4014:	88 e2       	ldi	r24, 0x28	; 40
    4016:	f7 dd       	rcall	.-1042   	; 0x3c06 <LCD0_write>
    4018:	25 ec       	ldi	r18, 0xC5	; 197
    401a:	2a 95       	dec	r18
    401c:	f1 f7       	brne	.-4      	; 0x401a <LCD0_inic+0x5e>
	_delay_us(37);
	LCD0_write(0x28, INST); // function set 2B
    401e:	00 00       	nop
    4020:	60 e0       	ldi	r22, 0x00	; 0
    4022:	70 e0       	ldi	r23, 0x00	; 0
    4024:	88 e2       	ldi	r24, 0x28	; 40
    4026:	ef dd       	rcall	.-1058   	; 0x3c06 <LCD0_write>
    4028:	85 ec       	ldi	r24, 0xC5	; 197
    402a:	8a 95       	dec	r24
    402c:	f1 f7       	brne	.-4      	; 0x402a <LCD0_inic+0x6e>
	_delay_us(37);
	/**************************************/
	// for(repeat = 2 ; repeat ; repeat--){
	// repeat twice in 4 bit length
	LCD0_write(0x28, INST); // function set 2B
    402e:	00 00       	nop
    4030:	60 e0       	ldi	r22, 0x00	; 0
    4032:	70 e0       	ldi	r23, 0x00	; 0
    4034:	88 e2       	ldi	r24, 0x28	; 40
	LCD0_BF();
    4036:	e7 dd       	rcall	.-1074   	; 0x3c06 <LCD0_write>
    4038:	46 df       	rcall	.-372    	; 0x3ec6 <LCD0_BF>
	LCD0_write(0x28, INST); // function set 2B
    403a:	60 e0       	ldi	r22, 0x00	; 0
    403c:	70 e0       	ldi	r23, 0x00	; 0
    403e:	88 e2       	ldi	r24, 0x28	; 40
	LCD0_BF();
    4040:	e2 dd       	rcall	.-1084   	; 0x3c06 <LCD0_write>

	LCD0_write(0x0C, INST);// display on/off control
    4042:	41 df       	rcall	.-382    	; 0x3ec6 <LCD0_BF>
    4044:	60 e0       	ldi	r22, 0x00	; 0
    4046:	70 e0       	ldi	r23, 0x00	; 0
    4048:	8c e0       	ldi	r24, 0x0C	; 12
	LCD0_BF();
    404a:	dd dd       	rcall	.-1094   	; 0x3c06 <LCD0_write>
	LCD0_write(0x0C, INST);// display on/off control
    404c:	3c df       	rcall	.-392    	; 0x3ec6 <LCD0_BF>
    404e:	60 e0       	ldi	r22, 0x00	; 0
    4050:	70 e0       	ldi	r23, 0x00	; 0
	LCD0_BF();
    4052:	8c e0       	ldi	r24, 0x0C	; 12
    4054:	d8 dd       	rcall	.-1104   	; 0x3c06 <LCD0_write>

	LCD0_write(0x01, INST);// clear display
    4056:	37 df       	rcall	.-402    	; 0x3ec6 <LCD0_BF>
    4058:	60 e0       	ldi	r22, 0x00	; 0
    405a:	70 e0       	ldi	r23, 0x00	; 0
	LCD0_BF();
    405c:	81 e0       	ldi	r24, 0x01	; 1
	LCD0_write(0x01, INST);// clear display
    405e:	d3 dd       	rcall	.-1114   	; 0x3c06 <LCD0_write>
    4060:	32 df       	rcall	.-412    	; 0x3ec6 <LCD0_BF>
    4062:	60 e0       	ldi	r22, 0x00	; 0
    4064:	70 e0       	ldi	r23, 0x00	; 0
	LCD0_BF();
    4066:	81 e0       	ldi	r24, 0x01	; 1
    4068:	ce dd       	rcall	.-1124   	; 0x3c06 <LCD0_write>

	LCD0_write(0x06, INST);// entry mode set (crazy settings)
    406a:	2d df       	rcall	.-422    	; 0x3ec6 <LCD0_BF>
    406c:	60 e0       	ldi	r22, 0x00	; 0
    406e:	70 e0       	ldi	r23, 0x00	; 0
    4070:	86 e0       	ldi	r24, 0x06	; 6
    4072:	c9 dd       	rcall	.-1134   	; 0x3c06 <LCD0_write>
	LCD0_BF();
    4074:	28 df       	rcall	.-432    	; 0x3ec6 <LCD0_BF>
    4076:	60 e0       	ldi	r22, 0x00	; 0
	LCD0_write(0x06, INST);// entry mode set (crazy settings)
    4078:	70 e0       	ldi	r23, 0x00	; 0
    407a:	86 e0       	ldi	r24, 0x06	; 6
    407c:	c4 dd       	rcall	.-1144   	; 0x3c06 <LCD0_write>
    407e:	23 df       	rcall	.-442    	; 0x3ec6 <LCD0_BF>
    4080:	60 e0       	ldi	r22, 0x00	; 0
	LCD0_BF();
    4082:	70 e0       	ldi	r23, 0x00	; 0
    4084:	80 e0       	ldi	r24, 0x00	; 0
	// INICIALIZATION END
	// LCD0_write(0x1F, INST);// cursor or display shift
	// _delay_us(39);
	// LCD0_write(0x03, INST);// return home
	// _delay_ms(1.53);
	LCD0_gotoxy(0,0);
    4086:	90 e0       	ldi	r25, 0x00	; 0
    4088:	72 cf       	rjmp	.-284    	; 0x3f6e <LCD0_gotoxy>
    408a:	08 95       	ret

0000408c <LCD0enable>:
    408c:	cf 93       	push	r28
    408e:	df 93       	push	r29
    4090:	ec 01       	movw	r28, r24
    4092:	70 93 e4 02 	sts	0x02E4, r23	; 0x8002e4 <lcd0_DDR+0x1>
{
	// LOCAL VARIABLES
	// ALLOCAÇÂO MEMORIA PARA Estrutura
	LCD0 lcd0;
	// import parameters
	lcd0_DDR = ddr;
    4096:	60 93 e3 02 	sts	0x02E3, r22	; 0x8002e3 <lcd0_DDR>
	lcd0_PIN = pin;
    409a:	50 93 dd 02 	sts	0x02DD, r21	; 0x8002dd <lcd0_PIN+0x1>
    409e:	40 93 dc 02 	sts	0x02DC, r20	; 0x8002dc <lcd0_PIN>
	lcd0_PORT = port;
    40a2:	30 93 e7 02 	sts	0x02E7, r19	; 0x8002e7 <lcd0_PORT+0x1>
    40a6:	20 93 e6 02 	sts	0x02E6, r18	; 0x8002e6 <lcd0_PORT>
	// initialize variables
	*lcd0_DDR = 0x00;
    40aa:	fb 01       	movw	r30, r22
    40ac:	10 82       	st	Z, r1
	*lcd0_PORT = 0xFF;
    40ae:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <lcd0_PORT>
    40b2:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <lcd0_PORT+0x1>
    40b6:	8f ef       	ldi	r24, 0xFF	; 255
    40b8:	80 83       	st	Z, r24
	lcd0_detect = *lcd0_PIN & (1 << NC);
    40ba:	e0 91 dc 02 	lds	r30, 0x02DC	; 0x8002dc <lcd0_PIN>
    40be:	f0 91 dd 02 	lds	r31, 0x02DD	; 0x8002dd <lcd0_PIN+0x1>
    40c2:	80 81       	ld	r24, Z
    40c4:	88 70       	andi	r24, 0x08	; 8
    40c6:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <lcd0_detect>
	lcd0.hspace = LCD0_hspace;
	lcd0.clear = LCD0_clear;
	lcd0.gotoxy = LCD0_gotoxy;
	lcd0.reboot = LCD0_reboot;
	// LCD INIC
	LCD0_inic();
    40ca:	78 df       	rcall	.-272    	; 0x3fbc <LCD0_inic>
	//
	return lcd0;
    40cc:	83 e0       	ldi	r24, 0x03	; 3
    40ce:	9e e1       	ldi	r25, 0x1E	; 30
    40d0:	99 83       	std	Y+1, r25	; 0x01
    40d2:	88 83       	st	Y, r24
    40d4:	8c ed       	ldi	r24, 0xDC	; 220
    40d6:	9e e1       	ldi	r25, 0x1E	; 30
    40d8:	9b 83       	std	Y+3, r25	; 0x03
    40da:	8a 83       	std	Y+2, r24	; 0x02
    40dc:	83 e6       	ldi	r24, 0x63	; 99
    40de:	9f e1       	ldi	r25, 0x1F	; 31
    40e0:	9d 83       	std	Y+5, r25	; 0x05
    40e2:	8c 83       	std	Y+4, r24	; 0x04
    40e4:	81 e7       	ldi	r24, 0x71	; 113
    40e6:	9f e1       	ldi	r25, 0x1F	; 31
    40e8:	9f 83       	std	Y+7, r25	; 0x07
    40ea:	8e 83       	std	Y+6, r24	; 0x06
    40ec:	87 ea       	ldi	r24, 0xA7	; 167
    40ee:	90 e2       	ldi	r25, 0x20	; 32
    40f0:	99 87       	std	Y+9, r25	; 0x09
    40f2:	88 87       	std	Y+8, r24	; 0x08
    40f4:	86 e7       	ldi	r24, 0x76	; 118
    40f6:	9f e1       	ldi	r25, 0x1F	; 31
    40f8:	9b 87       	std	Y+11, r25	; 0x0b
    40fa:	8a 87       	std	Y+10, r24	; 0x0a
    40fc:	84 e8       	ldi	r24, 0x84	; 132
    40fe:	9f e1       	ldi	r25, 0x1F	; 31
    4100:	9d 87       	std	Y+13, r25	; 0x0d
    4102:	8c 87       	std	Y+12, r24	; 0x0c
    4104:	8d ea       	ldi	r24, 0xAD	; 173
    4106:	9f e1       	ldi	r25, 0x1F	; 31
    4108:	9f 87       	std	Y+15, r25	; 0x0f
    410a:	8e 87       	std	Y+14, r24	; 0x0e
    410c:	81 ed       	ldi	r24, 0xD1	; 209
    410e:	9e e1       	ldi	r25, 0x1E	; 30
    4110:	99 8b       	std	Y+17, r25	; 0x11
    4112:	88 8b       	std	Y+16, r24	; 0x10
    4114:	87 eb       	ldi	r24, 0xB7	; 183
    4116:	9f e1       	ldi	r25, 0x1F	; 31
    4118:	9b 8b       	std	Y+19, r25	; 0x13
    411a:	8a 8b       	std	Y+18, r24	; 0x12
    411c:	86 e9       	ldi	r24, 0x96	; 150
    411e:	90 e2       	ldi	r25, 0x20	; 32
    4120:	9d 8b       	std	Y+21, r25	; 0x15
    4122:	8c 8b       	std	Y+20, r24	; 0x14
}
    4124:	ce 01       	movw	r24, r28
    4126:	df 91       	pop	r29
    4128:	cf 91       	pop	r28
    412a:	08 95       	ret

0000412c <LCD0_reboot>:
	*lcd0_PORT &= ~(1 << EN);
	LCD_ticks(num);
	*lcd0_PORT |= (1 << EN);
}
void LCD0_reboot(void)
{
    412c:	cf 93       	push	r28
	// low high detect pin NC
	uint8_t i;
	uint8_t tmp;
	tmp = *lcd0_PIN & (1 << NC);
    412e:	e0 91 dc 02 	lds	r30, 0x02DC	; 0x8002dc <lcd0_PIN>
    4132:	f0 91 dd 02 	lds	r31, 0x02DD	; 0x8002dd <lcd0_PIN+0x1>
    4136:	c0 81       	ld	r28, Z
    4138:	c8 70       	andi	r28, 0x08	; 8
	i = tmp ^ lcd0_detect;
    413a:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <lcd0_detect>
    413e:	8c 27       	eor	r24, r28
	i &= tmp;
	if(i)
    4140:	8c 23       	and	r24, r28
    4142:	09 f0       	breq	.+2      	; 0x4146 <LCD0_reboot+0x1a>
		LCD0_inic();
    4144:	3b df       	rcall	.-394    	; 0x3fbc <LCD0_inic>
	lcd0_detect = tmp;
    4146:	c0 93 e5 02 	sts	0x02E5, r28	; 0x8002e5 <lcd0_detect>
}
    414a:	cf 91       	pop	r28
    414c:	08 95       	ret

0000414e <LCD0_getch>:
		if(i > 1)
			break;
	}
}
char LCD0_getch(void)
{
    414e:	cf 93       	push	r28
	char c;
	c = LCD0_read(DATA);
    4150:	81 e0       	ldi	r24, 0x01	; 1
    4152:	90 e0       	ldi	r25, 0x00	; 0
    4154:	31 de       	rcall	.-926    	; 0x3db8 <LCD0_read>
    4156:	c8 2f       	mov	r28, r24
	LCD0_BF();
    4158:	b6 de       	rcall	.-660    	; 0x3ec6 <LCD0_BF>
    415a:	8c 2f       	mov	r24, r28
	return c;
}
    415c:	cf 91       	pop	r28
    415e:	08 95       	ret

00004160 <HX711_get_amplify>:
	return hx711;
}
uint8_t HX711_get_amplify(HX711* self)
{
	return self->amplify;
}
    4160:	fc 01       	movw	r30, r24
    4162:	82 81       	ldd	r24, Z+2	; 0x02
    4164:	08 95       	ret

00004166 <HX711_read_bit>:
	self->readflag=OFF;
}
uint8_t HX711_read_bit(void)
{	
	uint16_t ibool;
	*hx711_PORT|=(ONE<<hx711_clkpin);
    4166:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <hx711_PORT>
    416a:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <hx711_PORT+0x1>
    416e:	20 81       	ld	r18, Z
    4170:	81 e0       	ldi	r24, 0x01	; 1
    4172:	90 e0       	ldi	r25, 0x00	; 0
    4174:	00 90 f1 02 	lds	r0, 0x02F1	; 0x8002f1 <hx711_clkpin>
    4178:	02 c0       	rjmp	.+4      	; 0x417e <HX711_read_bit+0x18>
    417a:	88 0f       	add	r24, r24
    417c:	99 1f       	adc	r25, r25
    417e:	0a 94       	dec	r0
    4180:	e2 f7       	brpl	.-8      	; 0x417a <HX711_read_bit+0x14>
    4182:	82 2b       	or	r24, r18
    4184:	80 83       	st	Z, r24
    4186:	84 e2       	ldi	r24, 0x24	; 36
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	01 97       	sbiw	r24, 0x01	; 1
	// 0.1us minimum
	for(ibool=ZERO; ibool<HX711_ticks; ibool++); // inline delay
    418c:	f1 f7       	brne	.-4      	; 0x418a <HX711_read_bit+0x24>
	ibool=*hx711_PIN & (ONE<<hx711_datapin);
    418e:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <hx711_PIN>
    4192:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <hx711_PIN+0x1>
    4196:	40 81       	ld	r20, Z
    4198:	21 e0       	ldi	r18, 0x01	; 1
    419a:	30 e0       	ldi	r19, 0x00	; 0
    419c:	c9 01       	movw	r24, r18
    419e:	00 90 ea 02 	lds	r0, 0x02EA	; 0x8002ea <hx711_datapin>
    41a2:	02 c0       	rjmp	.+4      	; 0x41a8 <HX711_read_bit+0x42>
    41a4:	88 0f       	add	r24, r24
    41a6:	99 1f       	adc	r25, r25
    41a8:	0a 94       	dec	r0
    41aa:	e2 f7       	brpl	.-8      	; 0x41a4 <HX711_read_bit+0x3e>
	*hx711_PORT &= ~(ONE<<hx711_clkpin);
    41ac:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <hx711_PORT>
    41b0:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <hx711_PORT+0x1>
    41b4:	90 81       	ld	r25, Z
    41b6:	00 90 f1 02 	lds	r0, 0x02F1	; 0x8002f1 <hx711_clkpin>
    41ba:	02 c0       	rjmp	.+4      	; 0x41c0 <HX711_read_bit+0x5a>
    41bc:	22 0f       	add	r18, r18
    41be:	33 1f       	adc	r19, r19
    41c0:	0a 94       	dec	r0
    41c2:	e2 f7       	brpl	.-8      	; 0x41bc <HX711_read_bit+0x56>
    41c4:	20 95       	com	r18
    41c6:	29 23       	and	r18, r25
    41c8:	20 83       	st	Z, r18
	return ibool;
}
    41ca:	84 23       	and	r24, r20
    41cc:	08 95       	ret

000041ce <HX711_set_amplify>:
// Gain selector
// AVDD connected to 5V, channel B gain=32
void HX711_set_amplify(HX711* self, uint8_t amplify)
{
	switch(amplify){
    41ce:	60 34       	cpi	r22, 0x40	; 64
    41d0:	79 f0       	breq	.+30     	; 0x41f0 <HX711_set_amplify+0x22>
    41d2:	60 38       	cpi	r22, 0x80	; 128
    41d4:	19 f0       	breq	.+6      	; 0x41dc <HX711_set_amplify+0xe>
    41d6:	60 32       	cpi	r22, 0x20	; 32
    41d8:	81 f4       	brne	.+32     	; 0x41fa <HX711_set_amplify+0x2c>
    41da:	05 c0       	rjmp	.+10     	; 0x41e6 <HX711_set_amplify+0x18>
		case 128:
			self->amplify = ONE; //channel A
    41dc:	21 e0       	ldi	r18, 0x01	; 1
    41de:	fc 01       	movw	r30, r24
    41e0:	22 83       	std	Z+2, r18	; 0x02
			self->ampcount = ONE;
    41e2:	23 83       	std	Z+3, r18	; 0x03
		break;
    41e4:	08 95       	ret
		case 32:
			self->amplify = 2; //channel B
    41e6:	22 e0       	ldi	r18, 0x02	; 2
    41e8:	fc 01       	movw	r30, r24
    41ea:	22 83       	std	Z+2, r18	; 0x02
			self->ampcount = 2; 
    41ec:	23 83       	std	Z+3, r18	; 0x03
		break;
    41ee:	08 95       	ret
		case 64:
			self->amplify = 3; //channel A
    41f0:	23 e0       	ldi	r18, 0x03	; 3
    41f2:	fc 01       	movw	r30, r24
    41f4:	22 83       	std	Z+2, r18	; 0x02
			self->ampcount = 3;
    41f6:	23 83       	std	Z+3, r18	; 0x03
		break;
    41f8:	08 95       	ret
		default:
			self->amplify = ONE;
    41fa:	21 e0       	ldi	r18, 0x01	; 1
    41fc:	fc 01       	movw	r30, r24
    41fe:	22 83       	std	Z+2, r18	; 0x02
			self->ampcount = ONE;
    4200:	23 83       	std	Z+3, r18	; 0x03
    4202:	08 95       	ret

00004204 <HX711_query>:
	}
}
uint8_t HX711_query(HX711* self)
{
	uint8_t flag=OFF; // one shot
	if(!self->readflag){
    4204:	fc 01       	movw	r30, r24
    4206:	20 81       	ld	r18, Z
    4208:	21 11       	cpse	r18, r1
    420a:	14 c0       	rjmp	.+40     	; 0x4234 <HX711_query+0x30>
		if(!(*hx711_PIN & (ONE << hx711_datapin))){
    420c:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <hx711_PIN>
    4210:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <hx711_PIN+0x1>
    4214:	20 81       	ld	r18, Z
    4216:	30 e0       	ldi	r19, 0x00	; 0
    4218:	00 90 ea 02 	lds	r0, 0x02EA	; 0x8002ea <hx711_datapin>
    421c:	02 c0       	rjmp	.+4      	; 0x4222 <HX711_query+0x1e>
    421e:	35 95       	asr	r19
    4220:	27 95       	ror	r18
    4222:	0a 94       	dec	r0
    4224:	e2 f7       	brpl	.-8      	; 0x421e <HX711_query+0x1a>
    4226:	20 fd       	sbrc	r18, 0
    4228:	07 c0       	rjmp	.+14     	; 0x4238 <HX711_query+0x34>
			self->readflag=ON;
    422a:	2f ef       	ldi	r18, 0xFF	; 255
    422c:	fc 01       	movw	r30, r24
    422e:	20 83       	st	Z, r18
			flag=ON;
    4230:	8f ef       	ldi	r24, 0xFF	; 255
    4232:	08 95       	ret
		break;
	}
}
uint8_t HX711_query(HX711* self)
{
	uint8_t flag=OFF; // one shot
    4234:	80 e0       	ldi	r24, 0x00	; 0
    4236:	08 95       	ret
    4238:	80 e0       	ldi	r24, 0x00	; 0
			self->readflag=ON;
			flag=ON;
		}
	}
	return flag;
}
    423a:	08 95       	ret

0000423c <HX711_raw_average>:
		}
	}
	return self->raw_reading;
}
float HX711_raw_average(HX711* self, uint8_t n)
{
    423c:	0f 93       	push	r16
    423e:	1f 93       	push	r17
    4240:	cf 93       	push	r28
    4242:	df 93       	push	r29
    4244:	ec 01       	movw	r28, r24
	if(self->trigger){
    4246:	89 81       	ldd	r24, Y+1	; 0x01
    4248:	88 23       	and	r24, r24
    424a:	99 f1       	breq	.+102    	; 0x42b2 <HX711_raw_average+0x76>
		if(self->av_n < n){
    424c:	8a 89       	ldd	r24, Y+18	; 0x12
    424e:	86 17       	cp	r24, r22
    4250:	98 f4       	brcc	.+38     	; 0x4278 <HX711_raw_average+0x3c>
			self->sum += self->raw_reading;
    4252:	0e 85       	ldd	r16, Y+14	; 0x0e
    4254:	1f 85       	ldd	r17, Y+15	; 0x0f
    4256:	28 89       	ldd	r18, Y+16	; 0x10
    4258:	39 89       	ldd	r19, Y+17	; 0x11
    425a:	4a 85       	ldd	r20, Y+10	; 0x0a
    425c:	5b 85       	ldd	r21, Y+11	; 0x0b
    425e:	6c 85       	ldd	r22, Y+12	; 0x0c
    4260:	7d 85       	ldd	r23, Y+13	; 0x0d
    4262:	40 0f       	add	r20, r16
    4264:	51 1f       	adc	r21, r17
    4266:	62 1f       	adc	r22, r18
    4268:	73 1f       	adc	r23, r19
    426a:	4e 87       	std	Y+14, r20	; 0x0e
    426c:	5f 87       	std	Y+15, r21	; 0x0f
    426e:	68 8b       	std	Y+16, r22	; 0x10
    4270:	79 8b       	std	Y+17, r23	; 0x11
			self->av_n++;
    4272:	8f 5f       	subi	r24, 0xFF	; 255
    4274:	8a 8b       	std	Y+18, r24	; 0x12
    4276:	1c c0       	rjmp	.+56     	; 0x42b0 <HX711_raw_average+0x74>
		}else{
			self->av_n = ZERO;
			self->raw_mean = self->sum / n;
    4278:	26 2f       	mov	r18, r22
    427a:	30 e0       	ldi	r19, 0x00	; 0
    427c:	40 e0       	ldi	r20, 0x00	; 0
    427e:	50 e0       	ldi	r21, 0x00	; 0
    4280:	6e 85       	ldd	r22, Y+14	; 0x0e
    4282:	7f 85       	ldd	r23, Y+15	; 0x0f
    4284:	88 89       	ldd	r24, Y+16	; 0x10
    4286:	99 89       	ldd	r25, Y+17	; 0x11
    4288:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <__divmodsi4>
    428c:	ca 01       	movw	r24, r20
    428e:	b9 01       	movw	r22, r18
    4290:	0e 94 95 2a 	call	0x552a	; 0x552a <__floatsisf>
    4294:	6b 8b       	std	Y+19, r22	; 0x13
    4296:	7c 8b       	std	Y+20, r23	; 0x14
    4298:	8d 8b       	std	Y+21, r24	; 0x15
    429a:	9e 8b       	std	Y+22, r25	; 0x16
			self->sum = ZERO;
			self->sum += self->raw_reading;
    429c:	8a 85       	ldd	r24, Y+10	; 0x0a
    429e:	9b 85       	ldd	r25, Y+11	; 0x0b
    42a0:	ac 85       	ldd	r26, Y+12	; 0x0c
    42a2:	bd 85       	ldd	r27, Y+13	; 0x0d
    42a4:	8e 87       	std	Y+14, r24	; 0x0e
    42a6:	9f 87       	std	Y+15, r25	; 0x0f
    42a8:	a8 8b       	std	Y+16, r26	; 0x10
    42aa:	b9 8b       	std	Y+17, r27	; 0x11
			self->av_n++;
    42ac:	81 e0       	ldi	r24, 0x01	; 1
    42ae:	8a 8b       	std	Y+18, r24	; 0x12
		}
		self->trigger = ZERO;
    42b0:	19 82       	std	Y+1, r1	; 0x01
	}
	return self->raw_mean;
    42b2:	6b 89       	ldd	r22, Y+19	; 0x13
    42b4:	7c 89       	ldd	r23, Y+20	; 0x14
    42b6:	8d 89       	ldd	r24, Y+21	; 0x15
    42b8:	9e 89       	ldd	r25, Y+22	; 0x16
}
    42ba:	df 91       	pop	r29
    42bc:	cf 91       	pop	r28
    42be:	1f 91       	pop	r17
    42c0:	0f 91       	pop	r16
    42c2:	08 95       	ret

000042c4 <HX711_get_readflag>:
uint8_t HX711_get_readflag(HX711* self)
{
	return self->readflag;
    42c4:	fc 01       	movw	r30, r24
    42c6:	80 81       	ld	r24, Z
}
    42c8:	08 95       	ret

000042ca <HX711_get_cal>:
HX711_calibration* HX711_get_cal(HX711* self)
{
	return &(self->cal_data);
}
    42ca:	47 96       	adiw	r24, 0x17	; 23
    42cc:	08 95       	ret

000042ce <HX711_read_raw>:
	}
	return flag;
}
// Function to be used in the interrupt routine with appropriate cycle period.
int32_t HX711_read_raw(HX711* self)
{
    42ce:	0f 93       	push	r16
    42d0:	1f 93       	push	r17
    42d2:	cf 93       	push	r28
    42d4:	df 93       	push	r29
    42d6:	ec 01       	movw	r28, r24
	uint8_t aindex, bindex;
	int32_t value;
	aindex = self->bufferindex-ONE;
    42d8:	09 85       	ldd	r16, Y+9	; 0x09
	bindex = self->bitcount-ONE;
    42da:	1c 81       	ldd	r17, Y+4	; 0x04
	ptr=(int32_t*)self->buffer;
    42dc:	05 96       	adiw	r24, 0x05	; 5
    42de:	90 93 f0 02 	sts	0x02F0, r25	; 0x8002f0 <ptr+0x1>
    42e2:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <ptr>
	// Interrupt 24 times sequence plus gain pulses
	if(self->readflag){
    42e6:	88 81       	ld	r24, Y
    42e8:	88 23       	and	r24, r24
    42ea:	09 f4       	brne	.+2      	; 0x42ee <HX711_read_raw+0x20>
    42ec:	44 c0       	rjmp	.+136    	; 0x4376 <HX711_read_raw+0xa8>
		if(self->bitcount){
    42ee:	11 23       	and	r17, r17
    42f0:	29 f1       	breq	.+74     	; 0x433c <HX711_read_raw+0x6e>
			if (HX711_read_bit())
    42f2:	39 df       	rcall	.-398    	; 0x4166 <HX711_read_bit>
    42f4:	88 23       	and	r24, r24
    42f6:	a9 f0       	breq	.+42     	; 0x4322 <HX711_read_raw+0x54>
				self->buffer[aindex] |= ONE<<(bindex-(aindex*8));
    42f8:	01 50       	subi	r16, 0x01	; 1
    42fa:	80 2f       	mov	r24, r16
    42fc:	90 e0       	ldi	r25, 0x00	; 0
    42fe:	fe 01       	movw	r30, r28
    4300:	e8 0f       	add	r30, r24
    4302:	f9 1f       	adc	r31, r25
    4304:	11 50       	subi	r17, 0x01	; 1
    4306:	28 e0       	ldi	r18, 0x08	; 8
    4308:	02 9f       	mul	r16, r18
    430a:	10 19       	sub	r17, r0
    430c:	11 24       	eor	r1, r1
    430e:	81 e0       	ldi	r24, 0x01	; 1
    4310:	90 e0       	ldi	r25, 0x00	; 0
    4312:	02 c0       	rjmp	.+4      	; 0x4318 <HX711_read_raw+0x4a>
    4314:	88 0f       	add	r24, r24
    4316:	99 1f       	adc	r25, r25
    4318:	1a 95       	dec	r17
    431a:	e2 f7       	brpl	.-8      	; 0x4314 <HX711_read_raw+0x46>
    431c:	95 81       	ldd	r25, Z+5	; 0x05
    431e:	89 2b       	or	r24, r25
    4320:	85 83       	std	Z+5, r24	; 0x05
			self->bitcount--;
    4322:	8c 81       	ldd	r24, Y+4	; 0x04
    4324:	81 50       	subi	r24, 0x01	; 1
    4326:	8c 83       	std	Y+4, r24	; 0x04
			if(self->bitcount == 16)
    4328:	80 31       	cpi	r24, 0x10	; 16
    432a:	19 f4       	brne	.+6      	; 0x4332 <HX711_read_raw+0x64>
				self->bufferindex=2;
    432c:	82 e0       	ldi	r24, 0x02	; 2
    432e:	89 87       	std	Y+9, r24	; 0x09
    4330:	22 c0       	rjmp	.+68     	; 0x4376 <HX711_read_raw+0xa8>
			if(self->bitcount == 8)
    4332:	88 30       	cpi	r24, 0x08	; 8
    4334:	01 f5       	brne	.+64     	; 0x4376 <HX711_read_raw+0xa8>
				self->bufferindex=ONE;
    4336:	81 e0       	ldi	r24, 0x01	; 1
    4338:	89 87       	std	Y+9, r24	; 0x09
    433a:	1d c0       	rjmp	.+58     	; 0x4376 <HX711_read_raw+0xa8>
		}else{
			if(self->ampcount){
    433c:	8b 81       	ldd	r24, Y+3	; 0x03
    433e:	88 23       	and	r24, r24
				HX711_read_bit();
    4340:	29 f0       	breq	.+10     	; 0x434c <HX711_read_raw+0x7e>
    4342:	11 df       	rcall	.-478    	; 0x4166 <HX711_read_bit>
				self->ampcount--;
    4344:	8b 81       	ldd	r24, Y+3	; 0x03
    4346:	81 50       	subi	r24, 0x01	; 1
    4348:	8b 83       	std	Y+3, r24	; 0x03
    434a:	15 c0       	rjmp	.+42     	; 0x4376 <HX711_read_raw+0xa8>
			}else{
				value = *(ptr);
				self->raw_reading = value;
    434c:	8d 81       	ldd	r24, Y+5	; 0x05
    434e:	9e 81       	ldd	r25, Y+6	; 0x06
    4350:	af 81       	ldd	r26, Y+7	; 0x07
    4352:	b8 85       	ldd	r27, Y+8	; 0x08
    4354:	8a 87       	std	Y+10, r24	; 0x0a
    4356:	9b 87       	std	Y+11, r25	; 0x0b
    4358:	ac 87       	std	Y+12, r26	; 0x0c
    435a:	bd 87       	std	Y+13, r27	; 0x0d
				self->bitcount = HX711_ADC_bits;
    435c:	88 e1       	ldi	r24, 0x18	; 24
    435e:	8c 83       	std	Y+4, r24	; 0x04
				self->bufferindex = HX711_VECT_SIZE-ONE;
    4360:	83 e0       	ldi	r24, 0x03	; 3
    4362:	89 87       	std	Y+9, r24	; 0x09
				self->ampcount = self->amplify;
    4364:	8a 81       	ldd	r24, Y+2	; 0x02
    4366:	8b 83       	std	Y+3, r24	; 0x03
				self->buffer[0] = ZERO;
    4368:	1d 82       	std	Y+5, r1	; 0x05
				self->buffer[1] = ZERO;
    436a:	1e 82       	std	Y+6, r1	; 0x06
				self->buffer[2] = ZERO;
    436c:	1f 82       	std	Y+7, r1	; 0x07
				self->buffer[3] = ZERO;
    436e:	18 86       	std	Y+8, r1	; 0x08
				self->trigger = ONE;
    4370:	81 e0       	ldi	r24, 0x01	; 1
    4372:	89 83       	std	Y+1, r24	; 0x01
{
	return self->amplify;
}
void HX711_reset_readflag(HX711* self)
{
	self->readflag=OFF;
    4374:	18 82       	st	Y, r1
				// Reset ready for next query
				HX711_reset_readflag(self);
			}
		}
	}
	return self->raw_reading;
    4376:	6a 85       	ldd	r22, Y+10	; 0x0a
    4378:	7b 85       	ldd	r23, Y+11	; 0x0b
    437a:	8c 85       	ldd	r24, Y+12	; 0x0c
    437c:	9d 85       	ldd	r25, Y+13	; 0x0d
}
    437e:	df 91       	pop	r29
    4380:	cf 91       	pop	r28
    4382:	1f 91       	pop	r17
    4384:	0f 91       	pop	r16
    4386:	08 95       	ret

00004388 <HX711enable>:
uint8_t HX711_get_readflag(HX711* self);
HX711_calibration* HX711_get_cal(HX711* self);

/*** Procedure & Function ***/
HX711 HX711enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port, uint8_t datapin, uint8_t clkpin)
{
    4388:	ef 92       	push	r14
    438a:	0f 93       	push	r16
    438c:	1f 93       	push	r17
    438e:	fc 01       	movw	r30, r24
    4390:	da 01       	movw	r26, r20
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG = STATUS_REGISTER;
    4392:	5f b7       	in	r21, 0x3f	; 63
	STATUS_REGISTER &= ~(1<<GLOBAL_INTERRUPT_ENABLE);
    4394:	8f b7       	in	r24, 0x3f	; 63
    4396:	8f 77       	andi	r24, 0x7F	; 127
    4398:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	HX711 hx711;
	//import parameters
	hx711_DDR = ddr;
    439a:	70 93 f3 02 	sts	0x02F3, r23	; 0x8002f3 <hx711_DDR+0x1>
    439e:	60 93 f2 02 	sts	0x02F2, r22	; 0x8002f2 <hx711_DDR>
	hx711_PIN = pin;
    43a2:	b0 93 ec 02 	sts	0x02EC, r27	; 0x8002ec <hx711_PIN+0x1>
    43a6:	a0 93 eb 02 	sts	0x02EB, r26	; 0x8002eb <hx711_PIN>
	hx711_PORT = port;
    43aa:	30 93 ee 02 	sts	0x02EE, r19	; 0x8002ee <hx711_PORT+0x1>
    43ae:	20 93 ed 02 	sts	0x02ED, r18	; 0x8002ed <hx711_PORT>
	hx711_datapin = datapin;
    43b2:	00 93 ea 02 	sts	0x02EA, r16	; 0x8002ea <hx711_datapin>
	hx711_clkpin = clkpin;
    43b6:	e0 92 f1 02 	sts	0x02F1, r14	; 0x8002f1 <hx711_clkpin>
	//initialize variables
	*hx711_DDR |= (ONE<<clkpin);
    43ba:	db 01       	movw	r26, r22
    43bc:	4c 91       	ld	r20, X
    43be:	81 e0       	ldi	r24, 0x01	; 1
    43c0:	90 e0       	ldi	r25, 0x00	; 0
    43c2:	9c 01       	movw	r18, r24
    43c4:	02 c0       	rjmp	.+4      	; 0x43ca <HX711enable+0x42>
    43c6:	22 0f       	add	r18, r18
    43c8:	33 1f       	adc	r19, r19
    43ca:	ea 94       	dec	r14
    43cc:	e2 f7       	brpl	.-8      	; 0x43c6 <HX711enable+0x3e>
    43ce:	24 2b       	or	r18, r20
    43d0:	2c 93       	st	X, r18
	*hx711_PORT |= (ONE<<datapin);
    43d2:	a0 91 ed 02 	lds	r26, 0x02ED	; 0x8002ed <hx711_PORT>
    43d6:	b0 91 ee 02 	lds	r27, 0x02EE	; 0x8002ee <hx711_PORT+0x1>
    43da:	2c 91       	ld	r18, X
    43dc:	02 c0       	rjmp	.+4      	; 0x43e2 <HX711enable+0x5a>
    43de:	88 0f       	add	r24, r24
    43e0:	99 1f       	adc	r25, r25
    43e2:	0a 95       	dec	r16
    43e4:	e2 f7       	brpl	.-8      	; 0x43de <HX711enable+0x56>
    43e6:	82 2b       	or	r24, r18
    43e8:	8c 93       	st	X, r24
	hx711.readflag = ZERO;
    43ea:	10 82       	st	Z, r1
	hx711.trigger = ZERO;
    43ec:	11 82       	std	Z+1, r1	; 0x01
	hx711.amplify = ONE;
    43ee:	81 e0       	ldi	r24, 0x01	; 1
    43f0:	82 83       	std	Z+2, r24	; 0x02
	hx711.ampcount = ONE;
    43f2:	83 83       	std	Z+3, r24	; 0x03
	hx711.bitcount = HX711_ADC_bits;
    43f4:	88 e1       	ldi	r24, 0x18	; 24
    43f6:	84 83       	std	Z+4, r24	; 0x04
	hx711.buffer[0] = ZERO;
    43f8:	15 82       	std	Z+5, r1	; 0x05
	hx711.buffer[1] = ZERO;
    43fa:	16 82       	std	Z+6, r1	; 0x06
	hx711.buffer[2] = ZERO;
    43fc:	17 82       	std	Z+7, r1	; 0x07
	hx711.buffer[3] = ZERO;
    43fe:	10 86       	std	Z+8, r1	; 0x08
	hx711.bufferindex = HX711_VECT_SIZE-ONE;
    4400:	83 e0       	ldi	r24, 0x03	; 3
    4402:	81 87       	std	Z+9, r24	; 0x09
	hx711.raw_reading = ZERO;
    4404:	12 86       	std	Z+10, r1	; 0x0a
    4406:	13 86       	std	Z+11, r1	; 0x0b
    4408:	14 86       	std	Z+12, r1	; 0x0c
    440a:	15 86       	std	Z+13, r1	; 0x0d
	hx711.sum = ZERO;
    440c:	16 86       	std	Z+14, r1	; 0x0e
    440e:	17 86       	std	Z+15, r1	; 0x0f
    4410:	10 8a       	std	Z+16, r1	; 0x10
    4412:	11 8a       	std	Z+17, r1	; 0x11
	hx711.av_n = ZERO;
    4414:	12 8a       	std	Z+18, r1	; 0x12
	hx711.raw_mean = ZERO;
    4416:	13 8a       	std	Z+19, r1	; 0x13
    4418:	14 8a       	std	Z+20, r1	; 0x14
    441a:	15 8a       	std	Z+21, r1	; 0x15
    441c:	16 8a       	std	Z+22, r1	; 0x16
	// offset para mesa usada.
	hx711.cal_data.offset_32 = HX711_Default_50Kg.offset_32; // to subtract B
    441e:	a0 e0       	ldi	r26, 0x00	; 0
    4420:	b1 e0       	ldi	r27, 0x01	; 1
    4422:	0d 91       	ld	r16, X+
    4424:	1d 91       	ld	r17, X+
    4426:	2d 91       	ld	r18, X+
    4428:	3c 91       	ld	r19, X
    442a:	13 97       	sbiw	r26, 0x03	; 3
    442c:	07 8b       	std	Z+23, r16	; 0x17
    442e:	10 8f       	std	Z+24, r17	; 0x18
    4430:	21 8f       	std	Z+25, r18	; 0x19
    4432:	32 8f       	std	Z+26, r19	; 0x1a
	hx711.cal_data.offset_64 = HX711_Default_50Kg.offset_64; // to subtract A 64
    4434:	14 96       	adiw	r26, 0x04	; 4
    4436:	0d 91       	ld	r16, X+
    4438:	1d 91       	ld	r17, X+
    443a:	2d 91       	ld	r18, X+
    443c:	3c 91       	ld	r19, X
    443e:	17 97       	sbiw	r26, 0x07	; 7
    4440:	03 8f       	std	Z+27, r16	; 0x1b
    4442:	14 8f       	std	Z+28, r17	; 0x1c
    4444:	25 8f       	std	Z+29, r18	; 0x1d
    4446:	36 8f       	std	Z+30, r19	; 0x1e
	hx711.cal_data.offset_128 = HX711_Default_50Kg.offset_128; // to subtract A 128
    4448:	18 96       	adiw	r26, 0x08	; 8
    444a:	0d 91       	ld	r16, X+
    444c:	1d 91       	ld	r17, X+
    444e:	2d 91       	ld	r18, X+
    4450:	3c 91       	ld	r19, X
    4452:	1b 97       	sbiw	r26, 0x0b	; 11
    4454:	07 8f       	std	Z+31, r16	; 0x1f
    4456:	10 a3       	std	Z+32, r17	; 0x20
    4458:	21 a3       	std	Z+33, r18	; 0x21
    445a:	32 a3       	std	Z+34, r19	; 0x22
	// GAIN FACTOR
	hx711.cal_data.divfactor_32 = HX711_Default_50Kg.divfactor_32; // to divide
    445c:	1c 96       	adiw	r26, 0x0c	; 12
    445e:	8c 91       	ld	r24, X
    4460:	1c 97       	sbiw	r26, 0x0c	; 12
    4462:	83 a3       	std	Z+35, r24	; 0x23
	hx711.cal_data.divfactor_64 = HX711_Default_50Kg.divfactor_64; // to divide
    4464:	1d 96       	adiw	r26, 0x0d	; 13
    4466:	8c 91       	ld	r24, X
    4468:	1d 97       	sbiw	r26, 0x0d	; 13
    446a:	84 a3       	std	Z+36, r24	; 0x24
	hx711.cal_data.divfactor_128 = HX711_Default_50Kg.divfactor_128; // to divide
    446c:	1e 96       	adiw	r26, 0x0e	; 14
    446e:	8c 91       	ld	r24, X
    4470:	1e 97       	sbiw	r26, 0x0e	; 14
    4472:	85 a3       	std	Z+37, r24	; 0x25
	hx711.cal_data.status = HX711_Default_50Kg.status;
    4474:	1f 96       	adiw	r26, 0x0f	; 15
    4476:	8c 91       	ld	r24, X
    4478:	1f 97       	sbiw	r26, 0x0f	; 15
    447a:	86 a3       	std	Z+38, r24	; 0x26
	HX711_Default = &HX711_Default_50Kg;
    447c:	b0 93 f5 02 	sts	0x02F5, r27	; 0x8002f5 <HX711_Default+0x1>
    4480:	a0 93 f4 02 	sts	0x02F4, r26	; 0x8002f4 <HX711_Default>
	// Direccionar apontadores para PROTOTIPOS
	hx711.get_amplify=HX711_get_amplify;
    4484:	80 eb       	ldi	r24, 0xB0	; 176
    4486:	90 e2       	ldi	r25, 0x20	; 32
    4488:	90 a7       	std	Z+40, r25	; 0x28
    448a:	87 a3       	std	Z+39, r24	; 0x27
	hx711.read_bit=HX711_read_bit;
    448c:	83 eb       	ldi	r24, 0xB3	; 179
    448e:	90 e2       	ldi	r25, 0x20	; 32
    4490:	92 a7       	std	Z+42, r25	; 0x2a
    4492:	81 a7       	std	Z+41, r24	; 0x29
	hx711.set_amplify=HX711_set_amplify;
    4494:	87 ee       	ldi	r24, 0xE7	; 231
    4496:	90 e2       	ldi	r25, 0x20	; 32
    4498:	94 a7       	std	Z+44, r25	; 0x2c
    449a:	83 a7       	std	Z+43, r24	; 0x2b
	hx711.query=HX711_query;
    449c:	82 e0       	ldi	r24, 0x02	; 2
    449e:	91 e2       	ldi	r25, 0x21	; 33
    44a0:	96 a7       	std	Z+46, r25	; 0x2e
    44a2:	85 a7       	std	Z+45, r24	; 0x2d
	hx711.read_raw=HX711_read_raw;
    44a4:	87 e6       	ldi	r24, 0x67	; 103
    44a6:	91 e2       	ldi	r25, 0x21	; 33
    44a8:	90 ab       	std	Z+48, r25	; 0x30
    44aa:	87 a7       	std	Z+47, r24	; 0x2f
	hx711.raw_average=HX711_raw_average;
    44ac:	8e e1       	ldi	r24, 0x1E	; 30
    44ae:	91 e2       	ldi	r25, 0x21	; 33
    44b0:	92 ab       	std	Z+50, r25	; 0x32
    44b2:	81 ab       	std	Z+49, r24	; 0x31
	hx711.get_readflag=HX711_get_readflag;
    44b4:	82 e6       	ldi	r24, 0x62	; 98
    44b6:	91 e2       	ldi	r25, 0x21	; 33
    44b8:	94 ab       	std	Z+52, r25	; 0x34
    44ba:	83 ab       	std	Z+51, r24	; 0x33
	hx711.get_cal=HX711_get_cal;
    44bc:	85 e6       	ldi	r24, 0x65	; 101
    44be:	91 e2       	ldi	r25, 0x21	; 33
    44c0:	96 ab       	std	Z+54, r25	; 0x36
    44c2:	85 ab       	std	Z+53, r24	; 0x35
	STATUS_REGISTER = tSREG;
    44c4:	5f bf       	out	0x3f, r21	; 63
	// returns a copy
	return hx711;
}
    44c6:	cf 01       	movw	r24, r30
    44c8:	1f 91       	pop	r17
    44ca:	0f 91       	pop	r16
    44cc:	ef 90       	pop	r14
    44ce:	08 95       	ret

000044d0 <PORTINIT>:
** procedure and function
*/
void PORTINIT(void)
{
	//Control buttons
	PORTF |= IMASK;
    44d0:	e2 e6       	ldi	r30, 0x62	; 98
    44d2:	f0 e0       	ldi	r31, 0x00	; 0
    44d4:	80 81       	ld	r24, Z
    44d6:	8f 63       	ori	r24, 0x3F	; 63
    44d8:	80 83       	st	Z, r24
	//troubleshooting output
	DDRC = 0xFF;
    44da:	8f ef       	ldi	r24, 0xFF	; 255
    44dc:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;
    44de:	85 bb       	out	0x15, r24	; 21
    44e0:	08 95       	ret

000044e2 <main>:
** File Header
*/
void PORTINIT();
/****MAIN****/
int main(void)
{
    44e2:	cf 93       	push	r28
    44e4:	df 93       	push	r29
    44e6:	cd b7       	in	r28, 0x3d	; 61
    44e8:	de b7       	in	r29, 0x3e	; 62
    44ea:	ca 5b       	subi	r28, 0xBA	; 186
    44ec:	d1 09       	sbc	r29, r1
    44ee:	0f b6       	in	r0, 0x3f	; 63
    44f0:	f8 94       	cli
    44f2:	de bf       	out	0x3e, r29	; 62
    44f4:	0f be       	out	0x3f, r0	; 63
    44f6:	cd bf       	out	0x3d, r28	; 61
	PORTINIT();
    44f8:	eb df       	rcall	.-42     	; 0x44d0 <PORTINIT>
	HX711_ptr = &HX711_data; // CALIBRATION DATA BUS
    44fa:	0f 2e       	mov	r0, r31
    44fc:	f8 e2       	ldi	r31, 0x28	; 40
    44fe:	cf 2e       	mov	r12, r31
    4500:	f3 e0       	ldi	r31, 0x03	; 3
    4502:	df 2e       	mov	r13, r31
    4504:	f0 2d       	mov	r31, r0
    4506:	d0 92 39 03 	sts	0x0339, r13	; 0x800339 <HX711_ptr+0x1>
    450a:	c0 92 38 03 	sts	0x0338, r12	; 0x800338 <HX711_ptr>
	/***INICIALIZE OBJECTS***/
	F = EXPLODEenable();
    450e:	ce 01       	movw	r24, r28
    4510:	87 5a       	subi	r24, 0xA7	; 167
    4512:	9f 4f       	sbci	r25, 0xFF	; 255
    4514:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <EXPLODEenable>
    4518:	8e e0       	ldi	r24, 0x0E	; 14
    451a:	fe 01       	movw	r30, r28
    451c:	e7 5a       	subi	r30, 0xA7	; 167
    451e:	ff 4f       	sbci	r31, 0xFF	; 255
    4520:	a9 ea       	ldi	r26, 0xA9	; 169
    4522:	b3 e0       	ldi	r27, 0x03	; 3
    4524:	01 90       	ld	r0, Z+
    4526:	0d 92       	st	X+, r0
    4528:	8a 95       	dec	r24
    452a:	e1 f7       	brne	.-8      	; 0x4524 <main+0x42>
	FUNC function = FUNCenable();
    452c:	ce 01       	movw	r24, r28
    452e:	01 96       	adiw	r24, 0x01	; 1
    4530:	b8 d9       	rcall	.-3216   	; 0x38a2 <FUNCenable>
    4532:	89 89       	ldd	r24, Y+17	; 0x11
    4534:	9a 89       	ldd	r25, Y+18	; 0x12
    4536:	c7 54       	subi	r28, 0x47	; 71
    4538:	df 4f       	sbci	r29, 0xFF	; 255
    453a:	99 83       	std	Y+1, r25	; 0x01
    453c:	88 83       	st	Y, r24
    453e:	c9 5b       	subi	r28, 0xB9	; 185
    4540:	d0 40       	sbci	r29, 0x00	; 0
    4542:	29 ac       	ldd	r2, Y+57	; 0x39
    4544:	3a ac       	ldd	r3, Y+58	; 0x3a
	lcd0 = LCD0enable(&DDRA,&PINA,&PORTA);
    4546:	2b e3       	ldi	r18, 0x3B	; 59
    4548:	30 e0       	ldi	r19, 0x00	; 0
    454a:	49 e3       	ldi	r20, 0x39	; 57
    454c:	50 e0       	ldi	r21, 0x00	; 0
    454e:	6a e3       	ldi	r22, 0x3A	; 58
    4550:	70 e0       	ldi	r23, 0x00	; 0
    4552:	ce 01       	movw	r24, r28
    4554:	89 59       	subi	r24, 0x99	; 153
    4556:	9f 4f       	sbci	r25, 0xFF	; 255
    4558:	99 dd       	rcall	.-1230   	; 0x408c <LCD0enable>
    455a:	86 e1       	ldi	r24, 0x16	; 22
    455c:	fe 01       	movw	r30, r28
    455e:	e9 59       	subi	r30, 0x99	; 153
    4560:	ff 4f       	sbci	r31, 0xFF	; 255
    4562:	aa e5       	ldi	r26, 0x5A	; 90
    4564:	b3 e0       	ldi	r27, 0x03	; 3
    4566:	01 90       	ld	r0, Z+
    4568:	0d 92       	st	X+, r0
    456a:	8a 95       	dec	r24
    456c:	e1 f7       	brne	.-8      	; 0x4566 <main+0x84>
	timer0 = TIMER_COUNTER0enable(2,2); //2,2
    456e:	42 e0       	ldi	r20, 0x02	; 2
    4570:	62 e0       	ldi	r22, 0x02	; 2
    4572:	ce 01       	movw	r24, r28
    4574:	87 5a       	subi	r24, 0xA7	; 167
    4576:	9f 4f       	sbci	r25, 0xFF	; 255
    4578:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <TIMER_COUNTER0enable>
    457c:	80 e1       	ldi	r24, 0x10	; 16
    457e:	fe 01       	movw	r30, r28
    4580:	e7 5a       	subi	r30, 0xA7	; 167
    4582:	ff 4f       	sbci	r31, 0xFF	; 255
    4584:	aa ef       	ldi	r26, 0xFA	; 250
    4586:	b2 e0       	ldi	r27, 0x02	; 2
    4588:	01 90       	ld	r0, Z+
    458a:	0d 92       	st	X+, r0
    458c:	8a 95       	dec	r24
    458e:	e1 f7       	brne	.-8      	; 0x4588 <main+0xa6>
	TIMER_COUNTER1 timer1 = TIMER_COUNTER1enable(4,2); //4,2
    4590:	42 e0       	ldi	r20, 0x02	; 2
    4592:	64 e0       	ldi	r22, 0x04	; 4
    4594:	ce 01       	movw	r24, r28
    4596:	87 5b       	subi	r24, 0xB7	; 183
    4598:	9f 4f       	sbci	r25, 0xFF	; 255
    459a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <TIMER_COUNTER1enable>
	hx = HX711enable(&DDRF, &PINF, &PORTF, 6, 7); //6,7
    459e:	0f 2e       	mov	r0, r31
    45a0:	f7 e0       	ldi	r31, 0x07	; 7
    45a2:	ef 2e       	mov	r14, r31
    45a4:	f0 2d       	mov	r31, r0
    45a6:	06 e0       	ldi	r16, 0x06	; 6
    45a8:	22 e6       	ldi	r18, 0x62	; 98
    45aa:	30 e0       	ldi	r19, 0x00	; 0
    45ac:	40 e2       	ldi	r20, 0x20	; 32
    45ae:	50 e0       	ldi	r21, 0x00	; 0
    45b0:	61 e6       	ldi	r22, 0x61	; 97
    45b2:	70 e0       	ldi	r23, 0x00	; 0
    45b4:	ce 01       	movw	r24, r28
    45b6:	83 58       	subi	r24, 0x83	; 131
    45b8:	9f 4f       	sbci	r25, 0xFF	; 255
    45ba:	e6 de       	rcall	.-564    	; 0x4388 <HX711enable>
    45bc:	87 e3       	ldi	r24, 0x37	; 55
    45be:	fe 01       	movw	r30, r28
    45c0:	e3 58       	subi	r30, 0x83	; 131
    45c2:	ff 4f       	sbci	r31, 0xFF	; 255
    45c4:	a0 e7       	ldi	r26, 0x70	; 112
    45c6:	b3 e0       	ldi	r27, 0x03	; 3
    45c8:	01 90       	ld	r0, Z+
    45ca:	0d 92       	st	X+, r0
    45cc:	8a 95       	dec	r24
    45ce:	e1 f7       	brne	.-8      	; 0x45c8 <main+0xe6>
	eprom = EEPROMenable();
    45d0:	ce 01       	movw	r24, r28
    45d2:	87 5a       	subi	r24, 0xA7	; 167
    45d4:	9f 4f       	sbci	r25, 0xFF	; 255
    45d6:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <EEPROMenable>
    45da:	8e e1       	ldi	r24, 0x1E	; 30
    45dc:	fe 01       	movw	r30, r28
    45de:	e7 5a       	subi	r30, 0xA7	; 167
    45e0:	ff 4f       	sbci	r31, 0xFF	; 255
    45e2:	aa e0       	ldi	r26, 0x0A	; 10
    45e4:	b3 e0       	ldi	r27, 0x03	; 3
    45e6:	01 90       	ld	r0, Z+
    45e8:	0d 92       	st	X+, r0
    45ea:	8a 95       	dec	r24
    45ec:	e1 f7       	brne	.-8      	; 0x45e6 <main+0x104>
	/******/
	float value = 0;
	float publish = 0;
	uint8_t choice;
	// Get default values to buss memory
	HX711_data.offset_32 = hx.get_cal(&hx)->offset_32;
    45ee:	00 e7       	ldi	r16, 0x70	; 112
    45f0:	13 e0       	ldi	r17, 0x03	; 3
    45f2:	d8 01       	movw	r26, r16
    45f4:	d5 96       	adiw	r26, 0x35	; 53
    45f6:	ed 91       	ld	r30, X+
    45f8:	fc 91       	ld	r31, X
    45fa:	d6 97       	sbiw	r26, 0x36	; 54
    45fc:	c8 01       	movw	r24, r16
    45fe:	09 95       	icall
    4600:	fc 01       	movw	r30, r24
    4602:	80 81       	ld	r24, Z
    4604:	91 81       	ldd	r25, Z+1	; 0x01
    4606:	a2 81       	ldd	r26, Z+2	; 0x02
    4608:	b3 81       	ldd	r27, Z+3	; 0x03
    460a:	f6 01       	movw	r30, r12
    460c:	80 83       	st	Z, r24
    460e:	91 83       	std	Z+1, r25	; 0x01
    4610:	a2 83       	std	Z+2, r26	; 0x02
    4612:	b3 83       	std	Z+3, r27	; 0x03
	HX711_data.offset_64 = hx.get_cal(&hx)->offset_64;
    4614:	d8 01       	movw	r26, r16
    4616:	d5 96       	adiw	r26, 0x35	; 53
    4618:	ed 91       	ld	r30, X+
    461a:	fc 91       	ld	r31, X
    461c:	d6 97       	sbiw	r26, 0x36	; 54
    461e:	c8 01       	movw	r24, r16
    4620:	09 95       	icall
    4622:	fc 01       	movw	r30, r24
    4624:	84 81       	ldd	r24, Z+4	; 0x04
    4626:	95 81       	ldd	r25, Z+5	; 0x05
    4628:	a6 81       	ldd	r26, Z+6	; 0x06
    462a:	b7 81       	ldd	r27, Z+7	; 0x07
    462c:	f6 01       	movw	r30, r12
    462e:	84 83       	std	Z+4, r24	; 0x04
    4630:	95 83       	std	Z+5, r25	; 0x05
    4632:	a6 83       	std	Z+6, r26	; 0x06
    4634:	b7 83       	std	Z+7, r27	; 0x07
	HX711_data.offset_128 = hx.get_cal(&hx)->offset_128;
    4636:	d8 01       	movw	r26, r16
    4638:	d5 96       	adiw	r26, 0x35	; 53
    463a:	ed 91       	ld	r30, X+
    463c:	fc 91       	ld	r31, X
    463e:	d6 97       	sbiw	r26, 0x36	; 54
    4640:	c8 01       	movw	r24, r16
    4642:	09 95       	icall
    4644:	fc 01       	movw	r30, r24
    4646:	80 85       	ldd	r24, Z+8	; 0x08
    4648:	91 85       	ldd	r25, Z+9	; 0x09
    464a:	a2 85       	ldd	r26, Z+10	; 0x0a
    464c:	b3 85       	ldd	r27, Z+11	; 0x0b
    464e:	f6 01       	movw	r30, r12
    4650:	80 87       	std	Z+8, r24	; 0x08
    4652:	91 87       	std	Z+9, r25	; 0x09
    4654:	a2 87       	std	Z+10, r26	; 0x0a
    4656:	b3 87       	std	Z+11, r27	; 0x0b
	HX711_data.divfactor_32 = hx.get_cal(&hx)->divfactor_32;
    4658:	d8 01       	movw	r26, r16
    465a:	d5 96       	adiw	r26, 0x35	; 53
    465c:	ed 91       	ld	r30, X+
    465e:	fc 91       	ld	r31, X
    4660:	d6 97       	sbiw	r26, 0x36	; 54
    4662:	c8 01       	movw	r24, r16
    4664:	09 95       	icall
    4666:	fc 01       	movw	r30, r24
    4668:	84 85       	ldd	r24, Z+12	; 0x0c
    466a:	d6 01       	movw	r26, r12
    466c:	1c 96       	adiw	r26, 0x0c	; 12
    466e:	8c 93       	st	X, r24
	HX711_data.divfactor_64 = hx.get_cal(&hx)->divfactor_64;
    4670:	d8 01       	movw	r26, r16
    4672:	d5 96       	adiw	r26, 0x35	; 53
    4674:	ed 91       	ld	r30, X+
    4676:	fc 91       	ld	r31, X
    4678:	d6 97       	sbiw	r26, 0x36	; 54
    467a:	c8 01       	movw	r24, r16
    467c:	09 95       	icall
    467e:	fc 01       	movw	r30, r24
    4680:	85 85       	ldd	r24, Z+13	; 0x0d
    4682:	d6 01       	movw	r26, r12
    4684:	1d 96       	adiw	r26, 0x0d	; 13
    4686:	8c 93       	st	X, r24
	HX711_data.divfactor_128 = hx.get_cal(&hx)->divfactor_128;
    4688:	d8 01       	movw	r26, r16
    468a:	d5 96       	adiw	r26, 0x35	; 53
    468c:	ed 91       	ld	r30, X+
    468e:	fc 91       	ld	r31, X
    4690:	d6 97       	sbiw	r26, 0x36	; 54
    4692:	c8 01       	movw	r24, r16
    4694:	09 95       	icall
    4696:	fc 01       	movw	r30, r24
    4698:	86 85       	ldd	r24, Z+14	; 0x0e
    469a:	d6 01       	movw	r26, r12
    469c:	1e 96       	adiw	r26, 0x0e	; 14
    469e:	8c 93       	st	X, r24
	HX711_data.status = hx.get_cal(&hx)->status;
    46a0:	d8 01       	movw	r26, r16
    46a2:	d5 96       	adiw	r26, 0x35	; 53
    46a4:	ed 91       	ld	r30, X+
    46a6:	fc 91       	ld	r31, X
    46a8:	d6 97       	sbiw	r26, 0x36	; 54
    46aa:	c8 01       	movw	r24, r16
    46ac:	09 95       	icall
    46ae:	fc 01       	movw	r30, r24
    46b0:	87 85       	ldd	r24, Z+15	; 0x0f
    46b2:	d6 01       	movw	r26, r12
    46b4:	1f 96       	adiw	r26, 0x0f	; 15
    46b6:	8c 93       	st	X, r24
	/***Parameters timers***/
	timer0.compoutmode(1); // troubleshooting blinking PORTB 5
    46b8:	0f 2e       	mov	r0, r31
    46ba:	fa ef       	ldi	r31, 0xFA	; 250
    46bc:	ef 2e       	mov	r14, r31
    46be:	f2 e0       	ldi	r31, 0x02	; 2
    46c0:	ff 2e       	mov	r15, r31
    46c2:	f0 2d       	mov	r31, r0
    46c4:	d7 01       	movw	r26, r14
    46c6:	ed 91       	ld	r30, X+
    46c8:	fc 91       	ld	r31, X
    46ca:	81 e0       	ldi	r24, 0x01	; 1
    46cc:	09 95       	icall
	/***79 and 8  -> 80 us***/
	timer0.compare(60); // 8 -> 79 -> 80 us, fine tunned = 8 -> 60 -> 30.4us
    46ce:	d7 01       	movw	r26, r14
    46d0:	16 96       	adiw	r26, 0x06	; 6
    46d2:	ed 91       	ld	r30, X+
    46d4:	fc 91       	ld	r31, X
    46d6:	17 97       	sbiw	r26, 0x07	; 7
    46d8:	8c e3       	ldi	r24, 0x3C	; 60
    46da:	09 95       	icall
	timer0.start(8); // 1 -> 32 us , 8 -> 256 us , 32 64 128 256 1024
    46dc:	d7 01       	movw	r26, r14
    46de:	1c 96       	adiw	r26, 0x0c	; 12
    46e0:	ed 91       	ld	r30, X+
    46e2:	fc 91       	ld	r31, X
    46e4:	1d 97       	sbiw	r26, 0x0d	; 13
    46e6:	88 e0       	ldi	r24, 0x08	; 8
    46e8:	90 e0       	ldi	r25, 0x00	; 0
    46ea:	09 95       	icall
	// to be used to jump menu for calibration in progress
	timer1.compoutmodeA(1); // troubleshooting blinking PORTB 6
    46ec:	2b 96       	adiw	r28, 0x0b	; 11
    46ee:	ee ad       	ldd	r30, Y+62	; 0x3e
    46f0:	ff ad       	ldd	r31, Y+63	; 0x3f
    46f2:	2b 97       	sbiw	r28, 0x0b	; 11
    46f4:	81 e0       	ldi	r24, 0x01	; 1
    46f6:	09 95       	icall
	timer1.compareA(62800); // Freq = 256 -> 62800 -> 2 s
    46f8:	61 96       	adiw	r28, 0x11	; 17
    46fa:	ee ad       	ldd	r30, Y+62	; 0x3e
    46fc:	ff ad       	ldd	r31, Y+63	; 0x3f
    46fe:	61 97       	sbiw	r28, 0x11	; 17
    4700:	80 e5       	ldi	r24, 0x50	; 80
    4702:	95 ef       	ldi	r25, 0xF5	; 245
    4704:	09 95       	icall
	timer1.start(256);
    4706:	67 96       	adiw	r28, 0x17	; 23
    4708:	ee ad       	ldd	r30, Y+62	; 0x3e
    470a:	ff ad       	ldd	r31, Y+63	; 0x3f
    470c:	67 97       	sbiw	r28, 0x17	; 23
    470e:	80 e0       	ldi	r24, 0x00	; 0
    4710:	91 e0       	ldi	r25, 0x01	; 1
    4712:	09 95       	icall
	//intx.set(1,0); // Not necessary, if used move IDC from PORTF to PORTD with new config pinage.
	// HX711 Gain
	hx.set_amplify(&hx, 64); // 32 64 128
    4714:	d8 01       	movw	r26, r16
    4716:	9b 96       	adiw	r26, 0x2b	; 43
    4718:	ed 91       	ld	r30, X+
    471a:	fc 91       	ld	r31, X
    471c:	9c 97       	sbiw	r26, 0x2c	; 44
    471e:	60 e4       	ldi	r22, 0x40	; 64
    4720:	c8 01       	movw	r24, r16
    4722:	09 95       	icall
	choice = hx.get_amplify(&hx);
    4724:	d8 01       	movw	r26, r16
    4726:	97 96       	adiw	r26, 0x27	; 39
    4728:	ed 91       	ld	r30, X+
    472a:	fc 91       	ld	r31, X
    472c:	98 97       	sbiw	r26, 0x28	; 40
    472e:	c8 01       	movw	r24, r16
    4730:	09 95       	icall
    4732:	cc 54       	subi	r28, 0x4C	; 76
    4734:	df 4f       	sbci	r29, 0xFF	; 255
    4736:	88 83       	st	Y, r24
    4738:	c4 5b       	subi	r28, 0xB4	; 180
    473a:	d0 40       	sbci	r29, 0x00	; 0
	if(choice == 1)
    473c:	81 30       	cpi	r24, 0x01	; 1
    473e:	41 f4       	brne	.+16     	; 0x4750 <main+0x26e>
		divfactor = (uint16_t) HX711_data.divfactor_128;
    4740:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <HX711_data+0xe>
    4744:	90 e0       	ldi	r25, 0x00	; 0
    4746:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <divfactor+0x1>
    474a:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <divfactor>
    474e:	1d c0       	rjmp	.+58     	; 0x478a <main+0x2a8>
	if(choice == 2)
    4750:	cc 54       	subi	r28, 0x4C	; 76
    4752:	df 4f       	sbci	r29, 0xFF	; 255
    4754:	b8 81       	ld	r27, Y
    4756:	c4 5b       	subi	r28, 0xB4	; 180
    4758:	d0 40       	sbci	r29, 0x00	; 0
    475a:	b2 30       	cpi	r27, 0x02	; 2
    475c:	41 f4       	brne	.+16     	; 0x476e <main+0x28c>
		divfactor = (uint16_t) HX711_data.divfactor_32;
    475e:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <HX711_data+0xc>
    4762:	90 e0       	ldi	r25, 0x00	; 0
    4764:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <divfactor+0x1>
    4768:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <divfactor>
    476c:	0e c0       	rjmp	.+28     	; 0x478a <main+0x2a8>
	if(choice == 3)
    476e:	cc 54       	subi	r28, 0x4C	; 76
    4770:	df 4f       	sbci	r29, 0xFF	; 255
    4772:	e8 81       	ld	r30, Y
    4774:	c4 5b       	subi	r28, 0xB4	; 180
    4776:	d0 40       	sbci	r29, 0x00	; 0
    4778:	e3 30       	cpi	r30, 0x03	; 3
    477a:	39 f4       	brne	.+14     	; 0x478a <main+0x2a8>
		divfactor = (uint16_t) HX711_data.divfactor_64;
    477c:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <HX711_data+0xd>
    4780:	90 e0       	ldi	r25, 0x00	; 0
    4782:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <divfactor+0x1>
    4786:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <divfactor>
	//Get stored calibration values and put them to effect
	eprom.read_block(HX711_ptr, (const void*) ZERO, sizeblock);
    478a:	e0 91 22 03 	lds	r30, 0x0322	; 0x800322 <eprom+0x18>
    478e:	f0 91 23 03 	lds	r31, 0x0323	; 0x800323 <eprom+0x19>
    4792:	40 e1       	ldi	r20, 0x10	; 16
    4794:	50 e0       	ldi	r21, 0x00	; 0
    4796:	60 e0       	ldi	r22, 0x00	; 0
    4798:	70 e0       	ldi	r23, 0x00	; 0
    479a:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <HX711_ptr>
    479e:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <HX711_ptr+0x1>
    47a2:	09 95       	icall
	if(HX711_ptr->status == 1){
    47a4:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <HX711_ptr>
    47a8:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <HX711_ptr+0x1>
    47ac:	87 85       	ldd	r24, Z+15	; 0x0f
    47ae:	81 30       	cpi	r24, 0x01	; 1
    47b0:	09 f0       	breq	.+2      	; 0x47b4 <main+0x2d2>
    47b2:	72 c0       	rjmp	.+228    	; 0x4898 <main+0x3b6>
		//Load stored value 
		hx.get_cal(&hx)->offset_32 = HX711_ptr->offset_32;
    47b4:	00 e7       	ldi	r16, 0x70	; 112
    47b6:	13 e0       	ldi	r17, 0x03	; 3
    47b8:	d8 01       	movw	r26, r16
    47ba:	d5 96       	adiw	r26, 0x35	; 53
    47bc:	ed 91       	ld	r30, X+
    47be:	fc 91       	ld	r31, X
    47c0:	d6 97       	sbiw	r26, 0x36	; 54
    47c2:	c8 01       	movw	r24, r16
    47c4:	09 95       	icall
    47c6:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <HX711_ptr>
    47ca:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <HX711_ptr+0x1>
    47ce:	40 81       	ld	r20, Z
    47d0:	51 81       	ldd	r21, Z+1	; 0x01
    47d2:	62 81       	ldd	r22, Z+2	; 0x02
    47d4:	73 81       	ldd	r23, Z+3	; 0x03
    47d6:	fc 01       	movw	r30, r24
    47d8:	40 83       	st	Z, r20
    47da:	51 83       	std	Z+1, r21	; 0x01
    47dc:	62 83       	std	Z+2, r22	; 0x02
    47de:	73 83       	std	Z+3, r23	; 0x03
		hx.get_cal(&hx)->offset_64 = HX711_ptr->offset_64;
    47e0:	d8 01       	movw	r26, r16
    47e2:	d5 96       	adiw	r26, 0x35	; 53
    47e4:	ed 91       	ld	r30, X+
    47e6:	fc 91       	ld	r31, X
    47e8:	d6 97       	sbiw	r26, 0x36	; 54
    47ea:	c8 01       	movw	r24, r16
    47ec:	09 95       	icall
    47ee:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <HX711_ptr>
    47f2:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <HX711_ptr+0x1>
    47f6:	44 81       	ldd	r20, Z+4	; 0x04
    47f8:	55 81       	ldd	r21, Z+5	; 0x05
    47fa:	66 81       	ldd	r22, Z+6	; 0x06
    47fc:	77 81       	ldd	r23, Z+7	; 0x07
    47fe:	fc 01       	movw	r30, r24
    4800:	44 83       	std	Z+4, r20	; 0x04
    4802:	55 83       	std	Z+5, r21	; 0x05
    4804:	66 83       	std	Z+6, r22	; 0x06
    4806:	77 83       	std	Z+7, r23	; 0x07
		hx.get_cal(&hx)->offset_128 = HX711_ptr->offset_128;
    4808:	d8 01       	movw	r26, r16
    480a:	d5 96       	adiw	r26, 0x35	; 53
    480c:	ed 91       	ld	r30, X+
    480e:	fc 91       	ld	r31, X
    4810:	d6 97       	sbiw	r26, 0x36	; 54
    4812:	c8 01       	movw	r24, r16
    4814:	09 95       	icall
    4816:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <HX711_ptr>
    481a:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <HX711_ptr+0x1>
    481e:	40 85       	ldd	r20, Z+8	; 0x08
    4820:	51 85       	ldd	r21, Z+9	; 0x09
    4822:	62 85       	ldd	r22, Z+10	; 0x0a
    4824:	73 85       	ldd	r23, Z+11	; 0x0b
    4826:	fc 01       	movw	r30, r24
    4828:	40 87       	std	Z+8, r20	; 0x08
    482a:	51 87       	std	Z+9, r21	; 0x09
    482c:	62 87       	std	Z+10, r22	; 0x0a
    482e:	73 87       	std	Z+11, r23	; 0x0b
		hx.get_cal(&hx)->divfactor_32 = HX711_ptr->divfactor_32;
    4830:	d8 01       	movw	r26, r16
    4832:	d5 96       	adiw	r26, 0x35	; 53
    4834:	ed 91       	ld	r30, X+
    4836:	fc 91       	ld	r31, X
    4838:	d6 97       	sbiw	r26, 0x36	; 54
    483a:	c8 01       	movw	r24, r16
    483c:	09 95       	icall
    483e:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <HX711_ptr>
    4842:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <HX711_ptr+0x1>
    4846:	24 85       	ldd	r18, Z+12	; 0x0c
    4848:	fc 01       	movw	r30, r24
    484a:	24 87       	std	Z+12, r18	; 0x0c
		hx.get_cal(&hx)->divfactor_64 = HX711_ptr->divfactor_64;
    484c:	d8 01       	movw	r26, r16
    484e:	d5 96       	adiw	r26, 0x35	; 53
    4850:	ed 91       	ld	r30, X+
    4852:	fc 91       	ld	r31, X
    4854:	d6 97       	sbiw	r26, 0x36	; 54
    4856:	c8 01       	movw	r24, r16
    4858:	09 95       	icall
    485a:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <HX711_ptr>
    485e:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <HX711_ptr+0x1>
    4862:	25 85       	ldd	r18, Z+13	; 0x0d
    4864:	fc 01       	movw	r30, r24
    4866:	25 87       	std	Z+13, r18	; 0x0d
		hx.get_cal(&hx)->divfactor_128 = HX711_ptr->divfactor_128;
    4868:	d8 01       	movw	r26, r16
    486a:	d5 96       	adiw	r26, 0x35	; 53
    486c:	ed 91       	ld	r30, X+
    486e:	fc 91       	ld	r31, X
    4870:	d6 97       	sbiw	r26, 0x36	; 54
    4872:	c8 01       	movw	r24, r16
    4874:	09 95       	icall
    4876:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <HX711_ptr>
    487a:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <HX711_ptr+0x1>
    487e:	26 85       	ldd	r18, Z+14	; 0x0e
    4880:	fc 01       	movw	r30, r24
    4882:	26 87       	std	Z+14, r18	; 0x0e
		hx.get_cal(&hx)->status=ZERO;
    4884:	d8 01       	movw	r26, r16
    4886:	d5 96       	adiw	r26, 0x35	; 53
    4888:	ed 91       	ld	r30, X+
    488a:	fc 91       	ld	r31, X
    488c:	d6 97       	sbiw	r26, 0x36	; 54
    488e:	c8 01       	movw	r24, r16
    4890:	09 95       	icall
    4892:	fc 01       	movw	r30, r24
    4894:	17 86       	std	Z+15, r1	; 0x0f
		PORTC &= ~(ONE << 5); // troubleshooting
    4896:	ad 98       	cbi	0x15, 5	; 21
** File Header
*/
void PORTINIT();
/****MAIN****/
int main(void)
{
    4898:	cb 54       	subi	r28, 0x4B	; 75
    489a:	df 4f       	sbci	r29, 0xFF	; 255
    489c:	18 82       	st	Y, r1
    489e:	19 82       	std	Y+1, r1	; 0x01
    48a0:	1a 82       	std	Y+2, r1	; 0x02
    48a2:	1b 82       	std	Y+3, r1	; 0x03
    48a4:	c5 5b       	subi	r28, 0xB5	; 181
    48a6:	d0 40       	sbci	r29, 0x00	; 0
	//lcd0.string_size(function.ftoa(HX711_data.status, result, ZERO), 13);
	//lcd0.string_size(function.ftoa(hx.get_cal(&hx)->offset_64, result, ZERO), 13);
	/*********************************************************/
	while(TRUE){
		/******PREAMBLE******/
		lcd0.reboot(); //Reboot LCD
    48a8:	0f 2e       	mov	r0, r31
    48aa:	fa e5       	ldi	r31, 0x5A	; 90
    48ac:	cf 2e       	mov	r12, r31
    48ae:	f3 e0       	ldi	r31, 0x03	; 3
    48b0:	df 2e       	mov	r13, r31
    48b2:	f0 2d       	mov	r31, r0
		F.update(&F, PINF); //PORTF INPUT READING
    48b4:	0f 2e       	mov	r0, r31
    48b6:	f9 ea       	ldi	r31, 0xA9	; 169
    48b8:	6f 2e       	mov	r6, r31
    48ba:	f3 e0       	ldi	r31, 0x03	; 3
    48bc:	7f 2e       	mov	r7, r31
    48be:	f0 2d       	mov	r31, r0
			Menu = '2';
			signal = ZERO; // ONE SHOT
			lcd0.clear();
		}
		/***geting data interval***/
		while(hx.query(&hx))
    48c0:	00 e7       	ldi	r16, 0x70	; 112
    48c2:	13 e0       	ldi	r17, 0x03	; 3
    48c4:	e0 2e       	mov	r14, r16
    48c6:	f1 2e       	mov	r15, r17
				/*********************************************/
				//lcd0.gotoxy(1,0); // for troubleshooting
				//lcd0.string_size(function.ftoa(hx.read_raw(&hx), result, ZERO), 13);
				/*********************************************/
				if((F.HL & IMASK) & ONE){ // calibrate offset by pressing button 1
					HX711_data.offset_32 = tmp;
    48c8:	0f 2e       	mov	r0, r31
    48ca:	f8 e2       	ldi	r31, 0x28	; 40
    48cc:	4f 2e       	mov	r4, r31
    48ce:	f3 e0       	ldi	r31, 0x03	; 3
    48d0:	5f 2e       	mov	r5, r31
    48d2:	f0 2d       	mov	r31, r0
					HX711_data.offset_64 = tmp;
					HX711_data.offset_128 = tmp;
					HX711_data.status = ONE;
    48d4:	bb 24       	eor	r11, r11
    48d6:	b3 94       	inc	r11
				}
				/**/
				break;
				/********************************************************************/
			default:
				Menu = '1';
    48d8:	0f 2e       	mov	r0, r31
    48da:	f1 e3       	ldi	r31, 0x31	; 49
    48dc:	af 2e       	mov	r10, r31
    48de:	f0 2d       	mov	r31, r0
	//lcd0.string_size(function.ftoa(HX711_data.status, result, ZERO), 13);
	//lcd0.string_size(function.ftoa(hx.get_cal(&hx)->offset_64, result, ZERO), 13);
	/*********************************************************/
	while(TRUE){
		/******PREAMBLE******/
		lcd0.reboot(); //Reboot LCD
    48e0:	d6 01       	movw	r26, r12
    48e2:	54 96       	adiw	r26, 0x14	; 20
    48e4:	ed 91       	ld	r30, X+
    48e6:	fc 91       	ld	r31, X
    48e8:	55 97       	sbiw	r26, 0x15	; 21
    48ea:	09 95       	icall
		F.update(&F, PINF); //PORTF INPUT READING
    48ec:	60 b1       	in	r22, 0x00	; 0
    48ee:	d3 01       	movw	r26, r6
    48f0:	1c 96       	adiw	r26, 0x0c	; 12
    48f2:	ed 91       	ld	r30, X+
    48f4:	fc 91       	ld	r31, X
    48f6:	1d 97       	sbiw	r26, 0x0d	; 13
    48f8:	c3 01       	movw	r24, r6
    48fa:	09 95       	icall
		/************INPUT***********/
		// Jump Menu signal
		if(signal == ONE){ //INPUT FROM INTERRUPT SINALS
    48fc:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <signal>
    4900:	81 30       	cpi	r24, 0x01	; 1
    4902:	e9 f4       	brne	.+58     	; 0x493e <main+0x45c>
			Menu = '2';
    4904:	b2 e3       	ldi	r27, 0x32	; 50
    4906:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <Menu>
			signal = ZERO; // ONE SHOT
    490a:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <signal>
			lcd0.clear();
    490e:	d6 01       	movw	r26, r12
    4910:	50 96       	adiw	r26, 0x10	; 16
    4912:	ed 91       	ld	r30, X+
    4914:	fc 91       	ld	r31, X
    4916:	51 97       	sbiw	r26, 0x11	; 17
    4918:	09 95       	icall
    491a:	11 c0       	rjmp	.+34     	; 0x493e <main+0x45c>
		}
		/***geting data interval***/
		while(hx.query(&hx))
		//Catches falling Edge instance, begins bit shifting.
		tmp = hx.raw_average(&hx, average_n); // average_n  25 or 50, smaller means faster or more readings
    491c:	d8 01       	movw	r26, r16
    491e:	d1 96       	adiw	r26, 0x31	; 49
    4920:	ed 91       	ld	r30, X+
    4922:	fc 91       	ld	r31, X
    4924:	d2 97       	sbiw	r26, 0x32	; 50
    4926:	68 e1       	ldi	r22, 0x18	; 24
    4928:	8e 2d       	mov	r24, r14
    492a:	9f 2d       	mov	r25, r15
    492c:	09 95       	icall
    492e:	60 93 f6 02 	sts	0x02F6, r22	; 0x8002f6 <tmp>
    4932:	70 93 f7 02 	sts	0x02F7, r23	; 0x8002f7 <tmp+0x1>
    4936:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <tmp+0x2>
    493a:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <tmp+0x3>
			Menu = '2';
			signal = ZERO; // ONE SHOT
			lcd0.clear();
		}
		/***geting data interval***/
		while(hx.query(&hx))
    493e:	d8 01       	movw	r26, r16
    4940:	9d 96       	adiw	r26, 0x2d	; 45
    4942:	ed 91       	ld	r30, X+
    4944:	fc 91       	ld	r31, X
    4946:	9e 97       	sbiw	r26, 0x2e	; 46
    4948:	8e 2d       	mov	r24, r14
    494a:	9f 2d       	mov	r25, r15
    494c:	09 95       	icall
    494e:	81 11       	cpse	r24, r1
    4950:	e5 cf       	rjmp	.-54     	; 0x491c <main+0x43a>
		//Catches falling Edge instance, begins bit shifting.
		tmp = hx.raw_average(&hx, average_n); // average_n  25 or 50, smaller means faster or more readings
		/****************************/
		switch(Menu){
    4952:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <Menu>
    4956:	81 33       	cpi	r24, 0x31	; 49
    4958:	21 f0       	breq	.+8      	; 0x4962 <main+0x480>
    495a:	82 33       	cpi	r24, 0x32	; 50
    495c:	09 f4       	brne	.+2      	; 0x4960 <main+0x47e>
    495e:	06 c2       	rjmp	.+1036   	; 0x4d6c <main+0x88a>
    4960:	ac c3       	rjmp	.+1880   	; 0x50ba <main+0xbd8>
			/***MENU 1***/
			case '1': // Main Program Menu
				lcd0.gotoxy(0,4); //TITLE
    4962:	d6 01       	movw	r26, r12
    4964:	52 96       	adiw	r26, 0x12	; 18
    4966:	ed 91       	ld	r30, X+
    4968:	fc 91       	ld	r31, X
    496a:	53 97       	sbiw	r26, 0x13	; 19
    496c:	64 e0       	ldi	r22, 0x04	; 4
    496e:	70 e0       	ldi	r23, 0x00	; 0
    4970:	80 e0       	ldi	r24, 0x00	; 0
    4972:	90 e0       	ldi	r25, 0x00	; 0
    4974:	09 95       	icall
				lcd0.string_size("Weight Scale", 12); //TITLE
    4976:	d6 01       	movw	r26, r12
    4978:	1c 96       	adiw	r26, 0x0c	; 12
    497a:	ed 91       	ld	r30, X+
    497c:	fc 91       	ld	r31, X
    497e:	1d 97       	sbiw	r26, 0x0d	; 13
    4980:	6c e0       	ldi	r22, 0x0C	; 12
    4982:	82 e1       	ldi	r24, 0x12	; 18
    4984:	91 e0       	ldi	r25, 0x01	; 1
    4986:	09 95       	icall
				/*********************************************/
				//lcd0.gotoxy(1,0); // for troubleshooting
				//lcd0.string_size(function.ftoa(hx.read_raw(&hx), result, ZERO), 13);
				/*********************************************/
				if((F.HL & IMASK) & ONE){ // calibrate offset by pressing button 1
    4988:	f3 01       	movw	r30, r6
    498a:	84 81       	ldd	r24, Z+4	; 0x04
    498c:	80 ff       	sbrs	r24, 0
    498e:	6f c0       	rjmp	.+222    	; 0x4a6e <main+0x58c>
					HX711_data.offset_32 = tmp;
    4990:	60 91 f6 02 	lds	r22, 0x02F6	; 0x8002f6 <tmp>
    4994:	70 91 f7 02 	lds	r23, 0x02F7	; 0x8002f7 <tmp+0x1>
    4998:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <tmp+0x2>
    499c:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <tmp+0x3>
    49a0:	91 d5       	rcall	.+2850   	; 0x54c4 <__fixsfsi>
    49a2:	d2 01       	movw	r26, r4
    49a4:	6d 93       	st	X+, r22
    49a6:	7d 93       	st	X+, r23
    49a8:	8d 93       	st	X+, r24
    49aa:	9c 93       	st	X, r25
    49ac:	13 97       	sbiw	r26, 0x03	; 3
					HX711_data.offset_64 = tmp;
    49ae:	f2 01       	movw	r30, r4
    49b0:	64 83       	std	Z+4, r22	; 0x04
    49b2:	75 83       	std	Z+5, r23	; 0x05
    49b4:	86 83       	std	Z+6, r24	; 0x06
    49b6:	97 83       	std	Z+7, r25	; 0x07
					HX711_data.offset_128 = tmp;
    49b8:	18 96       	adiw	r26, 0x08	; 8
    49ba:	6d 93       	st	X+, r22
    49bc:	7d 93       	st	X+, r23
    49be:	8d 93       	st	X+, r24
    49c0:	9c 93       	st	X, r25
    49c2:	1b 97       	sbiw	r26, 0x0b	; 11
					HX711_data.status = ONE;
    49c4:	1f 96       	adiw	r26, 0x0f	; 15
    49c6:	bc 92       	st	X, r11
					eprom.update_block(HX711_ptr, (void*) ZERO, sizeblock);
    49c8:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <eprom+0x1c>
    49cc:	f0 91 27 03 	lds	r31, 0x0327	; 0x800327 <eprom+0x1d>
    49d0:	40 e1       	ldi	r20, 0x10	; 16
    49d2:	50 e0       	ldi	r21, 0x00	; 0
    49d4:	60 e0       	ldi	r22, 0x00	; 0
    49d6:	70 e0       	ldi	r23, 0x00	; 0
    49d8:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <HX711_ptr>
    49dc:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <HX711_ptr+0x1>
    49e0:	09 95       	icall
					hx.get_cal(&hx)->offset_32 = HX711_ptr->offset_32;
    49e2:	d8 01       	movw	r26, r16
    49e4:	d5 96       	adiw	r26, 0x35	; 53
    49e6:	ed 91       	ld	r30, X+
    49e8:	fc 91       	ld	r31, X
    49ea:	d6 97       	sbiw	r26, 0x36	; 54
    49ec:	c8 01       	movw	r24, r16
    49ee:	09 95       	icall
    49f0:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <HX711_ptr>
    49f4:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <HX711_ptr+0x1>
    49f8:	40 81       	ld	r20, Z
    49fa:	51 81       	ldd	r21, Z+1	; 0x01
    49fc:	62 81       	ldd	r22, Z+2	; 0x02
    49fe:	73 81       	ldd	r23, Z+3	; 0x03
    4a00:	fc 01       	movw	r30, r24
    4a02:	40 83       	st	Z, r20
    4a04:	51 83       	std	Z+1, r21	; 0x01
    4a06:	62 83       	std	Z+2, r22	; 0x02
    4a08:	73 83       	std	Z+3, r23	; 0x03
					hx.get_cal(&hx)->offset_64 = HX711_ptr->offset_64;
    4a0a:	d8 01       	movw	r26, r16
    4a0c:	d5 96       	adiw	r26, 0x35	; 53
    4a0e:	ed 91       	ld	r30, X+
    4a10:	fc 91       	ld	r31, X
    4a12:	d6 97       	sbiw	r26, 0x36	; 54
    4a14:	c8 01       	movw	r24, r16
    4a16:	09 95       	icall
    4a18:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <HX711_ptr>
    4a1c:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <HX711_ptr+0x1>
    4a20:	44 81       	ldd	r20, Z+4	; 0x04
    4a22:	55 81       	ldd	r21, Z+5	; 0x05
    4a24:	66 81       	ldd	r22, Z+6	; 0x06
    4a26:	77 81       	ldd	r23, Z+7	; 0x07
    4a28:	fc 01       	movw	r30, r24
    4a2a:	44 83       	std	Z+4, r20	; 0x04
    4a2c:	55 83       	std	Z+5, r21	; 0x05
    4a2e:	66 83       	std	Z+6, r22	; 0x06
    4a30:	77 83       	std	Z+7, r23	; 0x07
					hx.get_cal(&hx)->offset_128 = HX711_ptr->offset_128;
    4a32:	d8 01       	movw	r26, r16
    4a34:	d5 96       	adiw	r26, 0x35	; 53
    4a36:	ed 91       	ld	r30, X+
    4a38:	fc 91       	ld	r31, X
    4a3a:	d6 97       	sbiw	r26, 0x36	; 54
    4a3c:	c8 01       	movw	r24, r16
    4a3e:	09 95       	icall
    4a40:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <HX711_ptr>
    4a44:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <HX711_ptr+0x1>
    4a48:	40 85       	ldd	r20, Z+8	; 0x08
    4a4a:	51 85       	ldd	r21, Z+9	; 0x09
    4a4c:	62 85       	ldd	r22, Z+10	; 0x0a
    4a4e:	73 85       	ldd	r23, Z+11	; 0x0b
    4a50:	fc 01       	movw	r30, r24
    4a52:	40 87       	std	Z+8, r20	; 0x08
    4a54:	51 87       	std	Z+9, r21	; 0x09
    4a56:	62 87       	std	Z+10, r22	; 0x0a
    4a58:	73 87       	std	Z+11, r23	; 0x0b
					hx.get_cal(&hx)->status=ZERO;
    4a5a:	d8 01       	movw	r26, r16
    4a5c:	d5 96       	adiw	r26, 0x35	; 53
    4a5e:	ed 91       	ld	r30, X+
    4a60:	fc 91       	ld	r31, X
    4a62:	d6 97       	sbiw	r26, 0x36	; 54
    4a64:	c8 01       	movw	r24, r16
    4a66:	09 95       	icall
    4a68:	fc 01       	movw	r30, r24
    4a6a:	17 86       	std	Z+15, r1	; 0x0f
					PORTC &= ~(ONE << 5);
    4a6c:	ad 98       	cbi	0x15, 5	; 21
				}
				if(choice == 1 || choice == 11)
    4a6e:	cc 54       	subi	r28, 0x4C	; 76
    4a70:	df 4f       	sbci	r29, 0xFF	; 255
    4a72:	f8 81       	ld	r31, Y
    4a74:	c4 5b       	subi	r28, 0xB4	; 180
    4a76:	d0 40       	sbci	r29, 0x00	; 0
    4a78:	f1 30       	cpi	r31, 0x01	; 1
    4a7a:	19 f0       	breq	.+6      	; 0x4a82 <main+0x5a0>
    4a7c:	fb 30       	cpi	r31, 0x0B	; 11
    4a7e:	09 f0       	breq	.+2      	; 0x4a82 <main+0x5a0>
    4a80:	50 c0       	rjmp	.+160    	; 0x4b22 <main+0x640>
					value = (tmp - hx.get_cal(&hx)->offset_128) / hx.get_cal(&hx)->divfactor_128; //value to be published to LCD
    4a82:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <tmp>
    4a86:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <tmp+0x1>
    4a8a:	a0 91 f8 02 	lds	r26, 0x02F8	; 0x8002f8 <tmp+0x2>
    4a8e:	b0 91 f9 02 	lds	r27, 0x02F9	; 0x8002f9 <tmp+0x3>
    4a92:	cb 54       	subi	r28, 0x4B	; 75
    4a94:	df 4f       	sbci	r29, 0xFF	; 255
    4a96:	88 83       	st	Y, r24
    4a98:	99 83       	std	Y+1, r25	; 0x01
    4a9a:	aa 83       	std	Y+2, r26	; 0x02
    4a9c:	bb 83       	std	Y+3, r27	; 0x03
    4a9e:	c5 5b       	subi	r28, 0xB5	; 181
    4aa0:	d0 40       	sbci	r29, 0x00	; 0
    4aa2:	d8 01       	movw	r26, r16
    4aa4:	d5 96       	adiw	r26, 0x35	; 53
    4aa6:	ed 91       	ld	r30, X+
    4aa8:	fc 91       	ld	r31, X
    4aaa:	d6 97       	sbiw	r26, 0x36	; 54
    4aac:	c8 01       	movw	r24, r16
    4aae:	09 95       	icall
    4ab0:	fc 01       	movw	r30, r24
    4ab2:	60 85       	ldd	r22, Z+8	; 0x08
    4ab4:	71 85       	ldd	r23, Z+9	; 0x09
    4ab6:	82 85       	ldd	r24, Z+10	; 0x0a
    4ab8:	93 85       	ldd	r25, Z+11	; 0x0b
    4aba:	37 d5       	rcall	.+2670   	; 0x552a <__floatsisf>
    4abc:	9b 01       	movw	r18, r22
    4abe:	ac 01       	movw	r20, r24
    4ac0:	cb 54       	subi	r28, 0x4B	; 75
    4ac2:	df 4f       	sbci	r29, 0xFF	; 255
    4ac4:	68 81       	ld	r22, Y
    4ac6:	79 81       	ldd	r23, Y+1	; 0x01
    4ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    4aca:	9b 81       	ldd	r25, Y+3	; 0x03
    4acc:	c5 5b       	subi	r28, 0xB5	; 181
    4ace:	d0 40       	sbci	r29, 0x00	; 0
    4ad0:	28 d4       	rcall	.+2128   	; 0x5322 <__subsf3>
    4ad2:	cb 54       	subi	r28, 0x4B	; 75
    4ad4:	df 4f       	sbci	r29, 0xFF	; 255
    4ad6:	68 83       	st	Y, r22
    4ad8:	79 83       	std	Y+1, r23	; 0x01
    4ada:	8a 83       	std	Y+2, r24	; 0x02
    4adc:	9b 83       	std	Y+3, r25	; 0x03
    4ade:	c5 5b       	subi	r28, 0xB5	; 181
    4ae0:	d0 40       	sbci	r29, 0x00	; 0
    4ae2:	d8 01       	movw	r26, r16
    4ae4:	d5 96       	adiw	r26, 0x35	; 53
    4ae6:	ed 91       	ld	r30, X+
    4ae8:	fc 91       	ld	r31, X
    4aea:	d6 97       	sbiw	r26, 0x36	; 54
    4aec:	c8 01       	movw	r24, r16
    4aee:	09 95       	icall
    4af0:	fc 01       	movw	r30, r24
    4af2:	66 85       	ldd	r22, Z+14	; 0x0e
    4af4:	70 e0       	ldi	r23, 0x00	; 0
    4af6:	80 e0       	ldi	r24, 0x00	; 0
    4af8:	90 e0       	ldi	r25, 0x00	; 0
    4afa:	17 d5       	rcall	.+2606   	; 0x552a <__floatsisf>
    4afc:	9b 01       	movw	r18, r22
    4afe:	ac 01       	movw	r20, r24
    4b00:	cb 54       	subi	r28, 0x4B	; 75
    4b02:	df 4f       	sbci	r29, 0xFF	; 255
    4b04:	68 81       	ld	r22, Y
    4b06:	79 81       	ldd	r23, Y+1	; 0x01
    4b08:	8a 81       	ldd	r24, Y+2	; 0x02
    4b0a:	9b 81       	ldd	r25, Y+3	; 0x03
    4b0c:	c5 5b       	subi	r28, 0xB5	; 181
    4b0e:	d0 40       	sbci	r29, 0x00	; 0
    4b10:	71 d4       	rcall	.+2274   	; 0x53f4 <__divsf3>
    4b12:	cb 54       	subi	r28, 0x4B	; 75
    4b14:	df 4f       	sbci	r29, 0xFF	; 255
    4b16:	68 83       	st	Y, r22
    4b18:	79 83       	std	Y+1, r23	; 0x01
    4b1a:	8a 83       	std	Y+2, r24	; 0x02
    4b1c:	9b 83       	std	Y+3, r25	; 0x03
    4b1e:	c5 5b       	subi	r28, 0xB5	; 181
    4b20:	d0 40       	sbci	r29, 0x00	; 0
				if(choice == 2 || choice == 21)
    4b22:	cc 54       	subi	r28, 0x4C	; 76
    4b24:	df 4f       	sbci	r29, 0xFF	; 255
    4b26:	f8 81       	ld	r31, Y
    4b28:	c4 5b       	subi	r28, 0xB4	; 180
    4b2a:	d0 40       	sbci	r29, 0x00	; 0
    4b2c:	f2 30       	cpi	r31, 0x02	; 2
    4b2e:	19 f0       	breq	.+6      	; 0x4b36 <main+0x654>
    4b30:	f5 31       	cpi	r31, 0x15	; 21
    4b32:	09 f0       	breq	.+2      	; 0x4b36 <main+0x654>
    4b34:	50 c0       	rjmp	.+160    	; 0x4bd6 <main+0x6f4>
					value = (tmp - hx.get_cal(&hx)->offset_32) / hx.get_cal(&hx)->divfactor_32; //value to be published to LCD
    4b36:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <tmp>
    4b3a:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <tmp+0x1>
    4b3e:	a0 91 f8 02 	lds	r26, 0x02F8	; 0x8002f8 <tmp+0x2>
    4b42:	b0 91 f9 02 	lds	r27, 0x02F9	; 0x8002f9 <tmp+0x3>
    4b46:	cb 54       	subi	r28, 0x4B	; 75
    4b48:	df 4f       	sbci	r29, 0xFF	; 255
    4b4a:	88 83       	st	Y, r24
    4b4c:	99 83       	std	Y+1, r25	; 0x01
    4b4e:	aa 83       	std	Y+2, r26	; 0x02
    4b50:	bb 83       	std	Y+3, r27	; 0x03
    4b52:	c5 5b       	subi	r28, 0xB5	; 181
    4b54:	d0 40       	sbci	r29, 0x00	; 0
    4b56:	d8 01       	movw	r26, r16
    4b58:	d5 96       	adiw	r26, 0x35	; 53
    4b5a:	ed 91       	ld	r30, X+
    4b5c:	fc 91       	ld	r31, X
    4b5e:	d6 97       	sbiw	r26, 0x36	; 54
    4b60:	c8 01       	movw	r24, r16
    4b62:	09 95       	icall
    4b64:	fc 01       	movw	r30, r24
    4b66:	60 81       	ld	r22, Z
    4b68:	71 81       	ldd	r23, Z+1	; 0x01
    4b6a:	82 81       	ldd	r24, Z+2	; 0x02
    4b6c:	93 81       	ldd	r25, Z+3	; 0x03
    4b6e:	dd d4       	rcall	.+2490   	; 0x552a <__floatsisf>
    4b70:	9b 01       	movw	r18, r22
    4b72:	ac 01       	movw	r20, r24
    4b74:	cb 54       	subi	r28, 0x4B	; 75
    4b76:	df 4f       	sbci	r29, 0xFF	; 255
    4b78:	68 81       	ld	r22, Y
    4b7a:	79 81       	ldd	r23, Y+1	; 0x01
    4b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b7e:	9b 81       	ldd	r25, Y+3	; 0x03
    4b80:	c5 5b       	subi	r28, 0xB5	; 181
    4b82:	d0 40       	sbci	r29, 0x00	; 0
    4b84:	ce d3       	rcall	.+1948   	; 0x5322 <__subsf3>
    4b86:	cb 54       	subi	r28, 0x4B	; 75
    4b88:	df 4f       	sbci	r29, 0xFF	; 255
    4b8a:	68 83       	st	Y, r22
    4b8c:	79 83       	std	Y+1, r23	; 0x01
    4b8e:	8a 83       	std	Y+2, r24	; 0x02
    4b90:	9b 83       	std	Y+3, r25	; 0x03
    4b92:	c5 5b       	subi	r28, 0xB5	; 181
    4b94:	d0 40       	sbci	r29, 0x00	; 0
    4b96:	d8 01       	movw	r26, r16
    4b98:	d5 96       	adiw	r26, 0x35	; 53
    4b9a:	ed 91       	ld	r30, X+
    4b9c:	fc 91       	ld	r31, X
    4b9e:	d6 97       	sbiw	r26, 0x36	; 54
    4ba0:	c8 01       	movw	r24, r16
    4ba2:	09 95       	icall
    4ba4:	fc 01       	movw	r30, r24
    4ba6:	64 85       	ldd	r22, Z+12	; 0x0c
    4ba8:	70 e0       	ldi	r23, 0x00	; 0
    4baa:	80 e0       	ldi	r24, 0x00	; 0
    4bac:	90 e0       	ldi	r25, 0x00	; 0
    4bae:	bd d4       	rcall	.+2426   	; 0x552a <__floatsisf>
    4bb0:	9b 01       	movw	r18, r22
    4bb2:	ac 01       	movw	r20, r24
    4bb4:	cb 54       	subi	r28, 0x4B	; 75
    4bb6:	df 4f       	sbci	r29, 0xFF	; 255
    4bb8:	68 81       	ld	r22, Y
    4bba:	79 81       	ldd	r23, Y+1	; 0x01
    4bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    4bbe:	9b 81       	ldd	r25, Y+3	; 0x03
    4bc0:	c5 5b       	subi	r28, 0xB5	; 181
    4bc2:	d0 40       	sbci	r29, 0x00	; 0
    4bc4:	17 d4       	rcall	.+2094   	; 0x53f4 <__divsf3>
    4bc6:	cb 54       	subi	r28, 0x4B	; 75
    4bc8:	df 4f       	sbci	r29, 0xFF	; 255
    4bca:	68 83       	st	Y, r22
    4bcc:	79 83       	std	Y+1, r23	; 0x01
    4bce:	8a 83       	std	Y+2, r24	; 0x02
    4bd0:	9b 83       	std	Y+3, r25	; 0x03
    4bd2:	c5 5b       	subi	r28, 0xB5	; 181
    4bd4:	d0 40       	sbci	r29, 0x00	; 0
				if(choice == 3 || choice == 31)
    4bd6:	cc 54       	subi	r28, 0x4C	; 76
    4bd8:	df 4f       	sbci	r29, 0xFF	; 255
    4bda:	f8 81       	ld	r31, Y
    4bdc:	c4 5b       	subi	r28, 0xB4	; 180
    4bde:	d0 40       	sbci	r29, 0x00	; 0
    4be0:	f3 30       	cpi	r31, 0x03	; 3
    4be2:	19 f0       	breq	.+6      	; 0x4bea <main+0x708>
    4be4:	ff 31       	cpi	r31, 0x1F	; 31
    4be6:	09 f0       	breq	.+2      	; 0x4bea <main+0x708>
    4be8:	50 c0       	rjmp	.+160    	; 0x4c8a <main+0x7a8>
					value = (tmp - hx.get_cal(&hx)->offset_64) / hx.get_cal(&hx)->divfactor_64; //value to be published to LCD
    4bea:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <tmp>
    4bee:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <tmp+0x1>
    4bf2:	a0 91 f8 02 	lds	r26, 0x02F8	; 0x8002f8 <tmp+0x2>
    4bf6:	b0 91 f9 02 	lds	r27, 0x02F9	; 0x8002f9 <tmp+0x3>
    4bfa:	cb 54       	subi	r28, 0x4B	; 75
    4bfc:	df 4f       	sbci	r29, 0xFF	; 255
    4bfe:	88 83       	st	Y, r24
    4c00:	99 83       	std	Y+1, r25	; 0x01
    4c02:	aa 83       	std	Y+2, r26	; 0x02
    4c04:	bb 83       	std	Y+3, r27	; 0x03
    4c06:	c5 5b       	subi	r28, 0xB5	; 181
    4c08:	d0 40       	sbci	r29, 0x00	; 0
    4c0a:	d8 01       	movw	r26, r16
    4c0c:	d5 96       	adiw	r26, 0x35	; 53
    4c0e:	ed 91       	ld	r30, X+
    4c10:	fc 91       	ld	r31, X
    4c12:	d6 97       	sbiw	r26, 0x36	; 54
    4c14:	c8 01       	movw	r24, r16
    4c16:	09 95       	icall
    4c18:	fc 01       	movw	r30, r24
    4c1a:	64 81       	ldd	r22, Z+4	; 0x04
    4c1c:	75 81       	ldd	r23, Z+5	; 0x05
    4c1e:	86 81       	ldd	r24, Z+6	; 0x06
    4c20:	97 81       	ldd	r25, Z+7	; 0x07
    4c22:	83 d4       	rcall	.+2310   	; 0x552a <__floatsisf>
    4c24:	9b 01       	movw	r18, r22
    4c26:	ac 01       	movw	r20, r24
    4c28:	cb 54       	subi	r28, 0x4B	; 75
    4c2a:	df 4f       	sbci	r29, 0xFF	; 255
    4c2c:	68 81       	ld	r22, Y
    4c2e:	79 81       	ldd	r23, Y+1	; 0x01
    4c30:	8a 81       	ldd	r24, Y+2	; 0x02
    4c32:	9b 81       	ldd	r25, Y+3	; 0x03
    4c34:	c5 5b       	subi	r28, 0xB5	; 181
    4c36:	d0 40       	sbci	r29, 0x00	; 0
    4c38:	74 d3       	rcall	.+1768   	; 0x5322 <__subsf3>
    4c3a:	cb 54       	subi	r28, 0x4B	; 75
    4c3c:	df 4f       	sbci	r29, 0xFF	; 255
    4c3e:	68 83       	st	Y, r22
    4c40:	79 83       	std	Y+1, r23	; 0x01
    4c42:	8a 83       	std	Y+2, r24	; 0x02
    4c44:	9b 83       	std	Y+3, r25	; 0x03
    4c46:	c5 5b       	subi	r28, 0xB5	; 181
    4c48:	d0 40       	sbci	r29, 0x00	; 0
    4c4a:	d8 01       	movw	r26, r16
    4c4c:	d5 96       	adiw	r26, 0x35	; 53
    4c4e:	ed 91       	ld	r30, X+
    4c50:	fc 91       	ld	r31, X
    4c52:	d6 97       	sbiw	r26, 0x36	; 54
    4c54:	c8 01       	movw	r24, r16
    4c56:	09 95       	icall
    4c58:	fc 01       	movw	r30, r24
    4c5a:	65 85       	ldd	r22, Z+13	; 0x0d
    4c5c:	70 e0       	ldi	r23, 0x00	; 0
    4c5e:	80 e0       	ldi	r24, 0x00	; 0
    4c60:	90 e0       	ldi	r25, 0x00	; 0
    4c62:	63 d4       	rcall	.+2246   	; 0x552a <__floatsisf>
    4c64:	9b 01       	movw	r18, r22
    4c66:	ac 01       	movw	r20, r24
    4c68:	cb 54       	subi	r28, 0x4B	; 75
    4c6a:	df 4f       	sbci	r29, 0xFF	; 255
    4c6c:	68 81       	ld	r22, Y
    4c6e:	79 81       	ldd	r23, Y+1	; 0x01
    4c70:	8a 81       	ldd	r24, Y+2	; 0x02
    4c72:	9b 81       	ldd	r25, Y+3	; 0x03
    4c74:	c5 5b       	subi	r28, 0xB5	; 181
    4c76:	d0 40       	sbci	r29, 0x00	; 0
    4c78:	bd d3       	rcall	.+1914   	; 0x53f4 <__divsf3>
    4c7a:	cb 54       	subi	r28, 0x4B	; 75
    4c7c:	df 4f       	sbci	r29, 0xFF	; 255
    4c7e:	68 83       	st	Y, r22
    4c80:	79 83       	std	Y+1, r23	; 0x01
    4c82:	8a 83       	std	Y+2, r24	; 0x02
    4c84:	9b 83       	std	Y+3, r25	; 0x03
    4c86:	c5 5b       	subi	r28, 0xB5	; 181
				//lcd0.gotoxy(3,0); // for troubleshooting
				//lcd0.string_size(function.ftoa(tmp, result, ZERO), 13);
				//lcd0.string_size(function.ftoa(hx.get_cal(&hx)->divfactor_128, result, ZERO), 13);
				//lcd0.string_size(function.ftoa(hx.get_cal(&hx)->offset_128, result, ZERO), 13);
				/*********************************************/
				if (value > 1000 || value < -1000){
    4c88:	d0 40       	sbci	r29, 0x00	; 0
    4c8a:	20 e0       	ldi	r18, 0x00	; 0
    4c8c:	30 e0       	ldi	r19, 0x00	; 0
    4c8e:	4a e7       	ldi	r20, 0x7A	; 122
    4c90:	54 e4       	ldi	r21, 0x44	; 68
    4c92:	cb 54       	subi	r28, 0x4B	; 75
    4c94:	df 4f       	sbci	r29, 0xFF	; 255
    4c96:	68 81       	ld	r22, Y
    4c98:	79 81       	ldd	r23, Y+1	; 0x01
    4c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    4c9c:	9b 81       	ldd	r25, Y+3	; 0x03
    4c9e:	c5 5b       	subi	r28, 0xB5	; 181
    4ca0:	d0 40       	sbci	r29, 0x00	; 0
    4ca2:	f3 d4       	rcall	.+2534   	; 0x568a <__gesf2>
    4ca4:	18 16       	cp	r1, r24
    4ca6:	7c f0       	brlt	.+30     	; 0x4cc6 <main+0x7e4>
    4ca8:	20 e0       	ldi	r18, 0x00	; 0
    4caa:	30 e0       	ldi	r19, 0x00	; 0
    4cac:	4a e7       	ldi	r20, 0x7A	; 122
    4cae:	54 ec       	ldi	r21, 0xC4	; 196
    4cb0:	cb 54       	subi	r28, 0x4B	; 75
    4cb2:	df 4f       	sbci	r29, 0xFF	; 255
    4cb4:	68 81       	ld	r22, Y
    4cb6:	79 81       	ldd	r23, Y+1	; 0x01
    4cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    4cba:	9b 81       	ldd	r25, Y+3	; 0x03
    4cbc:	c5 5b       	subi	r28, 0xB5	; 181
    4cbe:	d0 40       	sbci	r29, 0x00	; 0
    4cc0:	95 d3       	rcall	.+1834   	; 0x53ec <__cmpsf2>
    4cc2:	88 23       	and	r24, r24
    4cc4:	64 f5       	brge	.+88     	; 0x4d1e <main+0x83c>
					publish = value / 1000;
					lcd0.gotoxy(2,1);
    4cc6:	d6 01       	movw	r26, r12
    4cc8:	52 96       	adiw	r26, 0x12	; 18
    4cca:	ed 91       	ld	r30, X+
    4ccc:	fc 91       	ld	r31, X
    4cce:	53 97       	sbiw	r26, 0x13	; 19
    4cd0:	61 e0       	ldi	r22, 0x01	; 1
    4cd2:	70 e0       	ldi	r23, 0x00	; 0
    4cd4:	82 e0       	ldi	r24, 0x02	; 2
    4cd6:	90 e0       	ldi	r25, 0x00	; 0
					lcd0.string_size(function.ftoa(publish, result, 3), 13); lcd0.string_size("Kg", 4);
    4cd8:	09 95       	icall
    4cda:	f6 01       	movw	r30, r12
    4cdc:	84 84       	ldd	r8, Z+12	; 0x0c
    4cde:	95 84       	ldd	r9, Z+13	; 0x0d
    4ce0:	20 e0       	ldi	r18, 0x00	; 0
    4ce2:	30 e0       	ldi	r19, 0x00	; 0
    4ce4:	4a e7       	ldi	r20, 0x7A	; 122
    4ce6:	54 e4       	ldi	r21, 0x44	; 68
    4ce8:	cb 54       	subi	r28, 0x4B	; 75
    4cea:	df 4f       	sbci	r29, 0xFF	; 255
    4cec:	68 81       	ld	r22, Y
    4cee:	79 81       	ldd	r23, Y+1	; 0x01
    4cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    4cf2:	9b 81       	ldd	r25, Y+3	; 0x03
    4cf4:	c5 5b       	subi	r28, 0xB5	; 181
    4cf6:	d0 40       	sbci	r29, 0x00	; 0
    4cf8:	7d d3       	rcall	.+1786   	; 0x53f4 <__divsf3>
    4cfa:	23 e0       	ldi	r18, 0x03	; 3
    4cfc:	4a e3       	ldi	r20, 0x3A	; 58
    4cfe:	53 e0       	ldi	r21, 0x03	; 3
    4d00:	f1 01       	movw	r30, r2
    4d02:	09 95       	icall
    4d04:	6d e0       	ldi	r22, 0x0D	; 13
    4d06:	f4 01       	movw	r30, r8
    4d08:	09 95       	icall
    4d0a:	d6 01       	movw	r26, r12
    4d0c:	1c 96       	adiw	r26, 0x0c	; 12
    4d0e:	ed 91       	ld	r30, X+
    4d10:	fc 91       	ld	r31, X
    4d12:	1d 97       	sbiw	r26, 0x0d	; 13
    4d14:	64 e0       	ldi	r22, 0x04	; 4
    4d16:	8f e1       	ldi	r24, 0x1F	; 31
    4d18:	91 e0       	ldi	r25, 0x01	; 1
    4d1a:	09 95       	icall
    4d1c:	e1 cd       	rjmp	.-1086   	; 0x48e0 <main+0x3fe>
				}else{
					publish = value;
					lcd0.gotoxy(2,1);
    4d1e:	d6 01       	movw	r26, r12
    4d20:	52 96       	adiw	r26, 0x12	; 18
    4d22:	ed 91       	ld	r30, X+
    4d24:	fc 91       	ld	r31, X
    4d26:	53 97       	sbiw	r26, 0x13	; 19
    4d28:	61 e0       	ldi	r22, 0x01	; 1
    4d2a:	70 e0       	ldi	r23, 0x00	; 0
    4d2c:	82 e0       	ldi	r24, 0x02	; 2
    4d2e:	90 e0       	ldi	r25, 0x00	; 0
    4d30:	09 95       	icall
					lcd0.string_size(function.ftoa(publish, result, ZERO), 13); lcd0.string_size("gram", 4);
    4d32:	f6 01       	movw	r30, r12
    4d34:	84 84       	ldd	r8, Z+12	; 0x0c
    4d36:	95 84       	ldd	r9, Z+13	; 0x0d
    4d38:	20 e0       	ldi	r18, 0x00	; 0
    4d3a:	4a e3       	ldi	r20, 0x3A	; 58
    4d3c:	53 e0       	ldi	r21, 0x03	; 3
    4d3e:	cb 54       	subi	r28, 0x4B	; 75
    4d40:	df 4f       	sbci	r29, 0xFF	; 255
    4d42:	68 81       	ld	r22, Y
    4d44:	79 81       	ldd	r23, Y+1	; 0x01
    4d46:	8a 81       	ldd	r24, Y+2	; 0x02
    4d48:	9b 81       	ldd	r25, Y+3	; 0x03
    4d4a:	c5 5b       	subi	r28, 0xB5	; 181
    4d4c:	d0 40       	sbci	r29, 0x00	; 0
    4d4e:	f1 01       	movw	r30, r2
    4d50:	09 95       	icall
    4d52:	6d e0       	ldi	r22, 0x0D	; 13
    4d54:	f4 01       	movw	r30, r8
    4d56:	09 95       	icall
    4d58:	d6 01       	movw	r26, r12
    4d5a:	1c 96       	adiw	r26, 0x0c	; 12
    4d5c:	ed 91       	ld	r30, X+
    4d5e:	fc 91       	ld	r31, X
    4d60:	1d 97       	sbiw	r26, 0x0d	; 13
    4d62:	64 e0       	ldi	r22, 0x04	; 4
    4d64:	82 e2       	ldi	r24, 0x22	; 34
    4d66:	91 e0       	ldi	r25, 0x01	; 1
    4d68:	09 95       	icall
    4d6a:	ba cd       	rjmp	.-1164   	; 0x48e0 <main+0x3fe>
				}
				break;
			/***MENU 2***/
			case '2': // MANUAL CALIBRATE DIVFACTOR MENU
				/**/
				lcd0.gotoxy(0,1);
    4d6c:	d6 01       	movw	r26, r12
    4d6e:	52 96       	adiw	r26, 0x12	; 18
    4d70:	ed 91       	ld	r30, X+
    4d72:	fc 91       	ld	r31, X
    4d74:	53 97       	sbiw	r26, 0x13	; 19
    4d76:	61 e0       	ldi	r22, 0x01	; 1
    4d78:	70 e0       	ldi	r23, 0x00	; 0
    4d7a:	80 e0       	ldi	r24, 0x00	; 0
    4d7c:	90 e0       	ldi	r25, 0x00	; 0
    4d7e:	09 95       	icall
				lcd0.string_size("SETUP GAIN FACTOR",17);
    4d80:	d6 01       	movw	r26, r12
    4d82:	1c 96       	adiw	r26, 0x0c	; 12
    4d84:	ed 91       	ld	r30, X+
    4d86:	fc 91       	ld	r31, X
    4d88:	1d 97       	sbiw	r26, 0x0d	; 13
    4d8a:	61 e1       	ldi	r22, 0x11	; 17
    4d8c:	87 e2       	ldi	r24, 0x27	; 39
    4d8e:	91 e0       	ldi	r25, 0x01	; 1
    4d90:	09 95       	icall
				switch(choice){
    4d92:	cc 54       	subi	r28, 0x4C	; 76
    4d94:	df 4f       	sbci	r29, 0xFF	; 255
    4d96:	b8 81       	ld	r27, Y
    4d98:	c4 5b       	subi	r28, 0xB4	; 180
    4d9a:	d0 40       	sbci	r29, 0x00	; 0
    4d9c:	b3 30       	cpi	r27, 0x03	; 3
    4d9e:	09 f4       	brne	.+2      	; 0x4da2 <main+0x8c0>
    4da0:	d2 c0       	rjmp	.+420    	; 0x4f46 <main+0xa64>
    4da2:	30 f4       	brcc	.+12     	; 0x4db0 <main+0x8ce>
    4da4:	b1 30       	cpi	r27, 0x01	; 1
    4da6:	99 f0       	breq	.+38     	; 0x4dce <main+0x8ec>
    4da8:	b2 30       	cpi	r27, 0x02	; 2
    4daa:	09 f4       	brne	.+2      	; 0x4dae <main+0x8cc>
    4dac:	6e c0       	rjmp	.+220    	; 0x4e8a <main+0x9a8>
    4dae:	29 c1       	rjmp	.+594    	; 0x5002 <main+0xb20>
    4db0:	cc 54       	subi	r28, 0x4C	; 76
    4db2:	df 4f       	sbci	r29, 0xFF	; 255
    4db4:	e8 81       	ld	r30, Y
    4db6:	c4 5b       	subi	r28, 0xB4	; 180
    4db8:	d0 40       	sbci	r29, 0x00	; 0
    4dba:	e5 31       	cpi	r30, 0x15	; 21
    4dbc:	09 f4       	brne	.+2      	; 0x4dc0 <main+0x8de>
    4dbe:	7a c0       	rjmp	.+244    	; 0x4eb4 <main+0x9d2>
    4dc0:	ef 31       	cpi	r30, 0x1F	; 31
    4dc2:	09 f4       	brne	.+2      	; 0x4dc6 <main+0x8e4>
    4dc4:	d5 c0       	rjmp	.+426    	; 0x4f70 <main+0xa8e>
    4dc6:	eb 30       	cpi	r30, 0x0B	; 11
    4dc8:	09 f0       	breq	.+2      	; 0x4dcc <main+0x8ea>
    4dca:	1b c1       	rjmp	.+566    	; 0x5002 <main+0xb20>
    4dcc:	15 c0       	rjmp	.+42     	; 0x4df8 <main+0x916>
					case 1: // case 128
						divfactor=hx.get_cal(&hx)->divfactor_128;
    4dce:	d8 01       	movw	r26, r16
    4dd0:	d5 96       	adiw	r26, 0x35	; 53
    4dd2:	ed 91       	ld	r30, X+
    4dd4:	fc 91       	ld	r31, X
    4dd6:	d6 97       	sbiw	r26, 0x36	; 54
    4dd8:	c8 01       	movw	r24, r16
    4dda:	09 95       	icall
    4ddc:	fc 01       	movw	r30, r24
    4dde:	86 85       	ldd	r24, Z+14	; 0x0e
    4de0:	90 e0       	ldi	r25, 0x00	; 0
    4de2:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <divfactor+0x1>
    4de6:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <divfactor>
						choice=11;
    4dea:	fb e0       	ldi	r31, 0x0B	; 11
    4dec:	cc 54       	subi	r28, 0x4C	; 76
    4dee:	df 4f       	sbci	r29, 0xFF	; 255
    4df0:	f8 83       	st	Y, r31
    4df2:	c4 5b       	subi	r28, 0xB4	; 180
    4df4:	d0 40       	sbci	r29, 0x00	; 0
						break;
    4df6:	0b c1       	rjmp	.+534    	; 0x500e <main+0xb2c>
					case 11: // case 128
						lcd0.gotoxy(2,9);
    4df8:	d6 01       	movw	r26, r12
    4dfa:	52 96       	adiw	r26, 0x12	; 18
    4dfc:	ed 91       	ld	r30, X+
    4dfe:	fc 91       	ld	r31, X
    4e00:	53 97       	sbiw	r26, 0x13	; 19
    4e02:	69 e0       	ldi	r22, 0x09	; 9
    4e04:	70 e0       	ldi	r23, 0x00	; 0
    4e06:	82 e0       	ldi	r24, 0x02	; 2
    4e08:	90 e0       	ldi	r25, 0x00	; 0
    4e0a:	09 95       	icall
						if(F.HL == (ONE << 3)){
    4e0c:	f3 01       	movw	r30, r6
    4e0e:	84 81       	ldd	r24, Z+4	; 0x04
    4e10:	95 81       	ldd	r25, Z+5	; 0x05
    4e12:	88 30       	cpi	r24, 0x08	; 8
    4e14:	91 05       	cpc	r25, r1
    4e16:	89 f4       	brne	.+34     	; 0x4e3a <main+0x958>
							divfactor++;
    4e18:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <divfactor>
    4e1c:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <divfactor+0x1>
    4e20:	01 96       	adiw	r24, 0x01	; 1
							if(divfactor > maxDIV)
    4e22:	8f 3f       	cpi	r24, 0xFF	; 255
    4e24:	91 05       	cpc	r25, r1
    4e26:	09 f0       	breq	.+2      	; 0x4e2a <main+0x948>
    4e28:	08 f4       	brcc	.+2      	; 0x4e2c <main+0x94a>
    4e2a:	4a c1       	rjmp	.+660    	; 0x50c0 <main+0xbde>
								divfactor = maxDIV;
    4e2c:	8f ef       	ldi	r24, 0xFF	; 255
    4e2e:	90 e0       	ldi	r25, 0x00	; 0
    4e30:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <divfactor+0x1>
    4e34:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <divfactor>
    4e38:	13 c0       	rjmp	.+38     	; 0x4e60 <main+0x97e>
						}
						if(F.HL == (ONE << 4)){
    4e3a:	40 97       	sbiw	r24, 0x10	; 16
    4e3c:	89 f4       	brne	.+34     	; 0x4e60 <main+0x97e>
							divfactor--;
    4e3e:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <divfactor>
    4e42:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <divfactor+0x1>
    4e46:	01 97       	sbiw	r24, 0x01	; 1
							if(divfactor < minDIV)
    4e48:	29 f0       	breq	.+10     	; 0x4e54 <main+0x972>
							divfactor++;
							if(divfactor > maxDIV)
								divfactor = maxDIV;
						}
						if(F.HL == (ONE << 4)){
							divfactor--;
    4e4a:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <divfactor+0x1>
    4e4e:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <divfactor>
    4e52:	06 c0       	rjmp	.+12     	; 0x4e60 <main+0x97e>
							if(divfactor < minDIV)
								divfactor = minDIV;
    4e54:	81 e0       	ldi	r24, 0x01	; 1
    4e56:	90 e0       	ldi	r25, 0x00	; 0
    4e58:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <divfactor+0x1>
    4e5c:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <divfactor>
						}
						HX711_data.divfactor_128 = divfactor;
    4e60:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <divfactor>
    4e64:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <divfactor+0x1>
    4e68:	d2 01       	movw	r26, r4
    4e6a:	1e 96       	adiw	r26, 0x0e	; 14
    4e6c:	8c 93       	st	X, r24
						lcd0.string_size(function.ui16toa(divfactor),6);
    4e6e:	f6 01       	movw	r30, r12
    4e70:	84 84       	ldd	r8, Z+12	; 0x0c
    4e72:	95 84       	ldd	r9, Z+13	; 0x0d
    4e74:	c7 54       	subi	r28, 0x47	; 71
    4e76:	df 4f       	sbci	r29, 0xFF	; 255
    4e78:	e8 81       	ld	r30, Y
    4e7a:	f9 81       	ldd	r31, Y+1	; 0x01
    4e7c:	c9 5b       	subi	r28, 0xB9	; 185
    4e7e:	d0 40       	sbci	r29, 0x00	; 0
    4e80:	09 95       	icall
    4e82:	66 e0       	ldi	r22, 0x06	; 6
    4e84:	f4 01       	movw	r30, r8
    4e86:	09 95       	icall
						break;
    4e88:	c2 c0       	rjmp	.+388    	; 0x500e <main+0xb2c>
					case 2: // case 32
						divfactor=hx.get_cal(&hx)->divfactor_32;
    4e8a:	d8 01       	movw	r26, r16
    4e8c:	d5 96       	adiw	r26, 0x35	; 53
    4e8e:	ed 91       	ld	r30, X+
    4e90:	fc 91       	ld	r31, X
    4e92:	d6 97       	sbiw	r26, 0x36	; 54
    4e94:	c8 01       	movw	r24, r16
    4e96:	09 95       	icall
    4e98:	fc 01       	movw	r30, r24
    4e9a:	84 85       	ldd	r24, Z+12	; 0x0c
    4e9c:	90 e0       	ldi	r25, 0x00	; 0
    4e9e:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <divfactor+0x1>
    4ea2:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <divfactor>
						choice=21;
    4ea6:	f5 e1       	ldi	r31, 0x15	; 21
    4ea8:	cc 54       	subi	r28, 0x4C	; 76
    4eaa:	df 4f       	sbci	r29, 0xFF	; 255
    4eac:	f8 83       	st	Y, r31
    4eae:	c4 5b       	subi	r28, 0xB4	; 180
    4eb0:	d0 40       	sbci	r29, 0x00	; 0
						break;
    4eb2:	ad c0       	rjmp	.+346    	; 0x500e <main+0xb2c>
					case 21: // case 32
						lcd0.gotoxy(2,9);
    4eb4:	d6 01       	movw	r26, r12
    4eb6:	52 96       	adiw	r26, 0x12	; 18
    4eb8:	ed 91       	ld	r30, X+
    4eba:	fc 91       	ld	r31, X
    4ebc:	53 97       	sbiw	r26, 0x13	; 19
    4ebe:	69 e0       	ldi	r22, 0x09	; 9
    4ec0:	70 e0       	ldi	r23, 0x00	; 0
    4ec2:	82 e0       	ldi	r24, 0x02	; 2
    4ec4:	90 e0       	ldi	r25, 0x00	; 0
    4ec6:	09 95       	icall
						if(F.HL == (ONE << 3)){
    4ec8:	f3 01       	movw	r30, r6
    4eca:	84 81       	ldd	r24, Z+4	; 0x04
    4ecc:	95 81       	ldd	r25, Z+5	; 0x05
    4ece:	88 30       	cpi	r24, 0x08	; 8
    4ed0:	91 05       	cpc	r25, r1
    4ed2:	89 f4       	brne	.+34     	; 0x4ef6 <main+0xa14>
							divfactor++;
    4ed4:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <divfactor>
    4ed8:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <divfactor+0x1>
    4edc:	01 96       	adiw	r24, 0x01	; 1
							if(divfactor > maxDIV)
    4ede:	8f 3f       	cpi	r24, 0xFF	; 255
    4ee0:	91 05       	cpc	r25, r1
    4ee2:	09 f0       	breq	.+2      	; 0x4ee6 <main+0xa04>
    4ee4:	08 f4       	brcc	.+2      	; 0x4ee8 <main+0xa06>
    4ee6:	f1 c0       	rjmp	.+482    	; 0x50ca <main+0xbe8>
								divfactor = maxDIV;
    4ee8:	8f ef       	ldi	r24, 0xFF	; 255
    4eea:	90 e0       	ldi	r25, 0x00	; 0
    4eec:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <divfactor+0x1>
    4ef0:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <divfactor>
    4ef4:	13 c0       	rjmp	.+38     	; 0x4f1c <main+0xa3a>
						}
						if(F.HL == (ONE << 4)){
    4ef6:	40 97       	sbiw	r24, 0x10	; 16
    4ef8:	89 f4       	brne	.+34     	; 0x4f1c <main+0xa3a>
							divfactor--;
    4efa:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <divfactor>
    4efe:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <divfactor+0x1>
    4f02:	01 97       	sbiw	r24, 0x01	; 1
							if(divfactor < minDIV)
    4f04:	29 f0       	breq	.+10     	; 0x4f10 <main+0xa2e>
							divfactor++;
							if(divfactor > maxDIV)
								divfactor = maxDIV;
						}
						if(F.HL == (ONE << 4)){
							divfactor--;
    4f06:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <divfactor+0x1>
    4f0a:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <divfactor>
    4f0e:	06 c0       	rjmp	.+12     	; 0x4f1c <main+0xa3a>
							if(divfactor < minDIV)
								divfactor=minDIV;
    4f10:	81 e0       	ldi	r24, 0x01	; 1
    4f12:	90 e0       	ldi	r25, 0x00	; 0
    4f14:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <divfactor+0x1>
    4f18:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <divfactor>
						}
						HX711_data.divfactor_32 = divfactor;
    4f1c:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <divfactor>
    4f20:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <divfactor+0x1>
    4f24:	d2 01       	movw	r26, r4
    4f26:	1c 96       	adiw	r26, 0x0c	; 12
    4f28:	8c 93       	st	X, r24
						lcd0.string_size(function.ui16toa(divfactor),6);
    4f2a:	f6 01       	movw	r30, r12
    4f2c:	84 84       	ldd	r8, Z+12	; 0x0c
    4f2e:	95 84       	ldd	r9, Z+13	; 0x0d
    4f30:	c7 54       	subi	r28, 0x47	; 71
    4f32:	df 4f       	sbci	r29, 0xFF	; 255
    4f34:	e8 81       	ld	r30, Y
    4f36:	f9 81       	ldd	r31, Y+1	; 0x01
    4f38:	c9 5b       	subi	r28, 0xB9	; 185
    4f3a:	d0 40       	sbci	r29, 0x00	; 0
    4f3c:	09 95       	icall
    4f3e:	66 e0       	ldi	r22, 0x06	; 6
    4f40:	f4 01       	movw	r30, r8
    4f42:	09 95       	icall
						break;
    4f44:	64 c0       	rjmp	.+200    	; 0x500e <main+0xb2c>
					case 3: // case 64
						divfactor=hx.get_cal(&hx)->divfactor_64;
    4f46:	d8 01       	movw	r26, r16
    4f48:	d5 96       	adiw	r26, 0x35	; 53
    4f4a:	ed 91       	ld	r30, X+
    4f4c:	fc 91       	ld	r31, X
    4f4e:	d6 97       	sbiw	r26, 0x36	; 54
    4f50:	c8 01       	movw	r24, r16
    4f52:	09 95       	icall
    4f54:	fc 01       	movw	r30, r24
    4f56:	85 85       	ldd	r24, Z+13	; 0x0d
    4f58:	90 e0       	ldi	r25, 0x00	; 0
    4f5a:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <divfactor+0x1>
    4f5e:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <divfactor>
						choice=31;
    4f62:	ff e1       	ldi	r31, 0x1F	; 31
    4f64:	cc 54       	subi	r28, 0x4C	; 76
    4f66:	df 4f       	sbci	r29, 0xFF	; 255
    4f68:	f8 83       	st	Y, r31
    4f6a:	c4 5b       	subi	r28, 0xB4	; 180
    4f6c:	d0 40       	sbci	r29, 0x00	; 0
						break;
    4f6e:	4f c0       	rjmp	.+158    	; 0x500e <main+0xb2c>
					case 31: // case 64
						lcd0.gotoxy(2,9);
    4f70:	d6 01       	movw	r26, r12
    4f72:	52 96       	adiw	r26, 0x12	; 18
    4f74:	ed 91       	ld	r30, X+
    4f76:	fc 91       	ld	r31, X
    4f78:	53 97       	sbiw	r26, 0x13	; 19
    4f7a:	69 e0       	ldi	r22, 0x09	; 9
    4f7c:	70 e0       	ldi	r23, 0x00	; 0
    4f7e:	82 e0       	ldi	r24, 0x02	; 2
    4f80:	90 e0       	ldi	r25, 0x00	; 0
    4f82:	09 95       	icall
						if(F.HL == (ONE << 3)){
    4f84:	f3 01       	movw	r30, r6
    4f86:	84 81       	ldd	r24, Z+4	; 0x04
    4f88:	95 81       	ldd	r25, Z+5	; 0x05
    4f8a:	88 30       	cpi	r24, 0x08	; 8
    4f8c:	91 05       	cpc	r25, r1
    4f8e:	89 f4       	brne	.+34     	; 0x4fb2 <main+0xad0>
							divfactor++;
    4f90:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <divfactor>
    4f94:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <divfactor+0x1>
    4f98:	01 96       	adiw	r24, 0x01	; 1
							if(divfactor > maxDIV)
    4f9a:	8f 3f       	cpi	r24, 0xFF	; 255
    4f9c:	91 05       	cpc	r25, r1
    4f9e:	09 f0       	breq	.+2      	; 0x4fa2 <main+0xac0>
    4fa0:	08 f4       	brcc	.+2      	; 0x4fa4 <main+0xac2>
    4fa2:	98 c0       	rjmp	.+304    	; 0x50d4 <main+0xbf2>
								divfactor = maxDIV;
    4fa4:	8f ef       	ldi	r24, 0xFF	; 255
    4fa6:	90 e0       	ldi	r25, 0x00	; 0
    4fa8:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <divfactor+0x1>
    4fac:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <divfactor>
    4fb0:	13 c0       	rjmp	.+38     	; 0x4fd8 <main+0xaf6>
						}
						if(F.HL == (ONE << 4)){
    4fb2:	40 97       	sbiw	r24, 0x10	; 16
    4fb4:	89 f4       	brne	.+34     	; 0x4fd8 <main+0xaf6>
							divfactor--;
    4fb6:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <divfactor>
    4fba:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <divfactor+0x1>
    4fbe:	01 97       	sbiw	r24, 0x01	; 1
							if(divfactor < minDIV)
    4fc0:	29 f0       	breq	.+10     	; 0x4fcc <main+0xaea>
							divfactor++;
							if(divfactor > maxDIV)
								divfactor = maxDIV;
						}
						if(F.HL == (ONE << 4)){
							divfactor--;
    4fc2:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <divfactor+0x1>
    4fc6:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <divfactor>
    4fca:	06 c0       	rjmp	.+12     	; 0x4fd8 <main+0xaf6>
							if(divfactor < minDIV)
								divfactor = minDIV;
    4fcc:	81 e0       	ldi	r24, 0x01	; 1
    4fce:	90 e0       	ldi	r25, 0x00	; 0
    4fd0:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <divfactor+0x1>
    4fd4:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <divfactor>
						}
						HX711_data.divfactor_64 = divfactor;
    4fd8:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <divfactor>
    4fdc:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <divfactor+0x1>
    4fe0:	d2 01       	movw	r26, r4
    4fe2:	1d 96       	adiw	r26, 0x0d	; 13
    4fe4:	8c 93       	st	X, r24
						lcd0.string_size(function.ui16toa(divfactor),6);
    4fe6:	f6 01       	movw	r30, r12
    4fe8:	84 84       	ldd	r8, Z+12	; 0x0c
    4fea:	95 84       	ldd	r9, Z+13	; 0x0d
    4fec:	c7 54       	subi	r28, 0x47	; 71
    4fee:	df 4f       	sbci	r29, 0xFF	; 255
    4ff0:	e8 81       	ld	r30, Y
    4ff2:	f9 81       	ldd	r31, Y+1	; 0x01
    4ff4:	c9 5b       	subi	r28, 0xB9	; 185
    4ff6:	d0 40       	sbci	r29, 0x00	; 0
    4ff8:	09 95       	icall
    4ffa:	66 e0       	ldi	r22, 0x06	; 6
    4ffc:	f4 01       	movw	r30, r8
    4ffe:	09 95       	icall
						break;
    5000:	06 c0       	rjmp	.+12     	; 0x500e <main+0xb2c>
					default:
						choice = 3;
    5002:	f3 e0       	ldi	r31, 0x03	; 3
    5004:	cc 54       	subi	r28, 0x4C	; 76
    5006:	df 4f       	sbci	r29, 0xFF	; 255
    5008:	f8 83       	st	Y, r31
    500a:	c4 5b       	subi	r28, 0xB4	; 180
    500c:	d0 40       	sbci	r29, 0x00	; 0
						break;
				};
				// Exit and store value
				if((F.LL & IMASK) == (ONE << 5)){ // Button 6
    500e:	d3 01       	movw	r26, r6
    5010:	1a 96       	adiw	r26, 0x0a	; 10
    5012:	8d 91       	ld	r24, X+
    5014:	9c 91       	ld	r25, X
    5016:	1b 97       	sbiw	r26, 0x0b	; 11
    5018:	8f 73       	andi	r24, 0x3F	; 63
    501a:	99 27       	eor	r25, r25
    501c:	80 97       	sbiw	r24, 0x20	; 32
    501e:	09 f0       	breq	.+2      	; 0x5022 <main+0xb40>
    5020:	5f cc       	rjmp	.-1858   	; 0x48e0 <main+0x3fe>
					HX711_data.status = ONE;
    5022:	f2 01       	movw	r30, r4
    5024:	b7 86       	std	Z+15, r11	; 0x0f
					eprom.update_block(HX711_ptr, (void*) ZERO, sizeblock);
    5026:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <eprom+0x1c>
    502a:	f0 91 27 03 	lds	r31, 0x0327	; 0x800327 <eprom+0x1d>
    502e:	40 e1       	ldi	r20, 0x10	; 16
    5030:	50 e0       	ldi	r21, 0x00	; 0
    5032:	60 e0       	ldi	r22, 0x00	; 0
    5034:	70 e0       	ldi	r23, 0x00	; 0
    5036:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <HX711_ptr>
    503a:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <HX711_ptr+0x1>
    503e:	09 95       	icall
					hx.get_cal(&hx)->divfactor_32=divfactor;
    5040:	d8 01       	movw	r26, r16
    5042:	d5 96       	adiw	r26, 0x35	; 53
    5044:	ed 91       	ld	r30, X+
    5046:	fc 91       	ld	r31, X
    5048:	d6 97       	sbiw	r26, 0x36	; 54
    504a:	c8 01       	movw	r24, r16
    504c:	09 95       	icall
    504e:	e7 ea       	ldi	r30, 0xA7	; 167
    5050:	f3 e0       	ldi	r31, 0x03	; 3
    5052:	20 81       	ld	r18, Z
    5054:	dc 01       	movw	r26, r24
    5056:	1c 96       	adiw	r26, 0x0c	; 12
    5058:	2c 93       	st	X, r18
					hx.get_cal(&hx)->divfactor_64=divfactor;
    505a:	d8 01       	movw	r26, r16
    505c:	d5 96       	adiw	r26, 0x35	; 53
    505e:	ed 91       	ld	r30, X+
    5060:	fc 91       	ld	r31, X
    5062:	d6 97       	sbiw	r26, 0x36	; 54
    5064:	c8 01       	movw	r24, r16
    5066:	09 95       	icall
    5068:	e7 ea       	ldi	r30, 0xA7	; 167
    506a:	f3 e0       	ldi	r31, 0x03	; 3
    506c:	20 81       	ld	r18, Z
    506e:	dc 01       	movw	r26, r24
    5070:	1d 96       	adiw	r26, 0x0d	; 13
    5072:	2c 93       	st	X, r18
					hx.get_cal(&hx)->divfactor_128=divfactor;
    5074:	d8 01       	movw	r26, r16
    5076:	d5 96       	adiw	r26, 0x35	; 53
    5078:	ed 91       	ld	r30, X+
    507a:	fc 91       	ld	r31, X
    507c:	d6 97       	sbiw	r26, 0x36	; 54
    507e:	c8 01       	movw	r24, r16
    5080:	09 95       	icall
    5082:	e7 ea       	ldi	r30, 0xA7	; 167
    5084:	f3 e0       	ldi	r31, 0x03	; 3
    5086:	20 81       	ld	r18, Z
    5088:	dc 01       	movw	r26, r24
    508a:	1e 96       	adiw	r26, 0x0e	; 14
    508c:	2c 93       	st	X, r18
					hx.get_cal(&hx)->status=ZERO;
    508e:	d8 01       	movw	r26, r16
    5090:	d5 96       	adiw	r26, 0x35	; 53
    5092:	ed 91       	ld	r30, X+
    5094:	fc 91       	ld	r31, X
    5096:	d6 97       	sbiw	r26, 0x36	; 54
    5098:	c8 01       	movw	r24, r16
    509a:	09 95       	icall
    509c:	fc 01       	movw	r30, r24
    509e:	17 86       	std	Z+15, r1	; 0x0f
					PORTC &= ~(ONE << 5); // troubleshooting
    50a0:	ad 98       	cbi	0x15, 5	; 21
					PORTC |= (ONE << 7); // troubleshooting
    50a2:	af 9a       	sbi	0x15, 7	; 21
					counter_2 = ZERO;
    50a4:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <counter_2>
					Menu = '1';
    50a8:	a0 92 11 01 	sts	0x0111, r10	; 0x800111 <Menu>
					lcd0.clear();
    50ac:	d6 01       	movw	r26, r12
    50ae:	50 96       	adiw	r26, 0x10	; 16
    50b0:	ed 91       	ld	r30, X+
    50b2:	fc 91       	ld	r31, X
    50b4:	51 97       	sbiw	r26, 0x11	; 17
    50b6:	09 95       	icall
    50b8:	13 cc       	rjmp	.-2010   	; 0x48e0 <main+0x3fe>
				}
				/**/
				break;
				/********************************************************************/
			default:
				Menu = '1';
    50ba:	a0 92 11 01 	sts	0x0111, r10	; 0x800111 <Menu>
				break;
    50be:	10 cc       	rjmp	.-2016   	; 0x48e0 <main+0x3fe>
						choice=11;
						break;
					case 11: // case 128
						lcd0.gotoxy(2,9);
						if(F.HL == (ONE << 3)){
							divfactor++;
    50c0:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <divfactor+0x1>
    50c4:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <divfactor>
    50c8:	cb ce       	rjmp	.-618    	; 0x4e60 <main+0x97e>
						choice=21;
						break;
					case 21: // case 32
						lcd0.gotoxy(2,9);
						if(F.HL == (ONE << 3)){
							divfactor++;
    50ca:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <divfactor+0x1>
    50ce:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <divfactor>
    50d2:	24 cf       	rjmp	.-440    	; 0x4f1c <main+0xa3a>
						choice=31;
						break;
					case 31: // case 64
						lcd0.gotoxy(2,9);
						if(F.HL == (ONE << 3)){
							divfactor++;
    50d4:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <divfactor+0x1>
    50d8:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <divfactor>
    50dc:	7d cf       	rjmp	.-262    	; 0x4fd8 <main+0xaf6>

000050de <__vector_15>:
}
/*
** interrupt
*/
ISR(TIMER0_COMP_vect) // 15.4 us intervals
{
    50de:	1f 92       	push	r1
    50e0:	0f 92       	push	r0
    50e2:	0f b6       	in	r0, 0x3f	; 63
    50e4:	0f 92       	push	r0
    50e6:	11 24       	eor	r1, r1
    50e8:	0b b6       	in	r0, 0x3b	; 59
    50ea:	0f 92       	push	r0
    50ec:	2f 93       	push	r18
    50ee:	3f 93       	push	r19
    50f0:	4f 93       	push	r20
    50f2:	5f 93       	push	r21
    50f4:	6f 93       	push	r22
    50f6:	7f 93       	push	r23
    50f8:	8f 93       	push	r24
    50fa:	9f 93       	push	r25
    50fc:	af 93       	push	r26
    50fe:	bf 93       	push	r27
    5100:	cf 93       	push	r28
    5102:	ef 93       	push	r30
    5104:	ff 93       	push	r31
	/***Block other interrupts during this procedure***/
	uint8_t Sreg;
	Sreg = STATUS_REGISTER;
    5106:	cf b7       	in	r28, 0x3f	; 63
	STATUS_REGISTER &= ~(ONE << GLOBAL_INTERRUPT_ENABLE);
    5108:	8f b7       	in	r24, 0x3f	; 63
    510a:	8f 77       	andi	r24, 0x7F	; 127
    510c:	8f bf       	out	0x3f, r24	; 63
	hx.read_raw(&hx);
    510e:	e0 91 9f 03 	lds	r30, 0x039F	; 0x80039f <hx+0x2f>
    5112:	f0 91 a0 03 	lds	r31, 0x03A0	; 0x8003a0 <hx+0x30>
    5116:	80 e7       	ldi	r24, 0x70	; 112
    5118:	93 e0       	ldi	r25, 0x03	; 3
    511a:	09 95       	icall
	/***enable interrupts again***/
	STATUS_REGISTER = Sreg;
    511c:	cf bf       	out	0x3f, r28	; 63
}
    511e:	ff 91       	pop	r31
    5120:	ef 91       	pop	r30
    5122:	cf 91       	pop	r28
    5124:	bf 91       	pop	r27
    5126:	af 91       	pop	r26
    5128:	9f 91       	pop	r25
    512a:	8f 91       	pop	r24
    512c:	7f 91       	pop	r23
    512e:	6f 91       	pop	r22
    5130:	5f 91       	pop	r21
    5132:	4f 91       	pop	r20
    5134:	3f 91       	pop	r19
    5136:	2f 91       	pop	r18
    5138:	0f 90       	pop	r0
    513a:	0b be       	out	0x3b, r0	; 59
    513c:	0f 90       	pop	r0
    513e:	0f be       	out	0x3f, r0	; 63
    5140:	0f 90       	pop	r0
    5142:	1f 90       	pop	r1
    5144:	18 95       	reti

00005146 <__vector_12>:
ISR(TIMER1_COMPA_vect) // 1 second intervals
{
    5146:	1f 92       	push	r1
    5148:	0f 92       	push	r0
    514a:	0f b6       	in	r0, 0x3f	; 63
    514c:	0f 92       	push	r0
    514e:	11 24       	eor	r1, r1
    5150:	0b b6       	in	r0, 0x3b	; 59
    5152:	0f 92       	push	r0
    5154:	2f 93       	push	r18
    5156:	3f 93       	push	r19
    5158:	4f 93       	push	r20
    515a:	5f 93       	push	r21
    515c:	6f 93       	push	r22
    515e:	7f 93       	push	r23
    5160:	8f 93       	push	r24
    5162:	9f 93       	push	r25
    5164:	af 93       	push	r26
    5166:	bf 93       	push	r27
    5168:	cf 93       	push	r28
    516a:	df 93       	push	r29
    516c:	ef 93       	push	r30
    516e:	ff 93       	push	r31
	/***CLEAR EEPROM OFFSET SEQUENCE START***/
	if((F.LL & IMASK) == (ONE << 3)) //button 4
    5170:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <F+0xa>
    5174:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <F+0xb>
    5178:	8f 73       	andi	r24, 0x3F	; 63
    517a:	99 27       	eor	r25, r25
    517c:	08 97       	sbiw	r24, 0x08	; 8
    517e:	49 f4       	brne	.+18     	; 0x5192 <__vector_12+0x4c>
		counter_1++;
    5180:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <counter_1>
    5184:	8f 5f       	subi	r24, 0xFF	; 255
    5186:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <counter_1>
	else if(counter_1 < _5sec+ONE)
		counter_1=ZERO;
	if(counter_1 > _5sec){
    518a:	86 30       	cpi	r24, 0x06	; 6
    518c:	08 f4       	brcc	.+2      	; 0x5190 <__vector_12+0x4a>
    518e:	a7 c0       	rjmp	.+334    	; 0x52de <__vector_12+0x198>
    5190:	07 c0       	rjmp	.+14     	; 0x51a0 <__vector_12+0x5a>
ISR(TIMER1_COMPA_vect) // 1 second intervals
{
	/***CLEAR EEPROM OFFSET SEQUENCE START***/
	if((F.LL & IMASK) == (ONE << 3)) //button 4
		counter_1++;
	else if(counter_1 < _5sec+ONE)
    5192:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <counter_1>
    5196:	86 30       	cpi	r24, 0x06	; 6
    5198:	18 f4       	brcc	.+6      	; 0x51a0 <__vector_12+0x5a>
		counter_1=ZERO;
    519a:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <counter_1>
    519e:	8f c0       	rjmp	.+286    	; 0x52be <__vector_12+0x178>
	if(counter_1 > _5sec){
		counter_1 = _5sec+ONE; //lock in place
    51a0:	86 e0       	ldi	r24, 0x06	; 6
    51a2:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <counter_1>
		PORTC ^= (ONE << 6); // troubleshooting
    51a6:	95 b3       	in	r25, 0x15	; 21
    51a8:	80 e4       	ldi	r24, 0x40	; 64
    51aa:	89 27       	eor	r24, r25
    51ac:	85 bb       	out	0x15, r24	; 21
		count--;
    51ae:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <count>
    51b2:	81 50       	subi	r24, 0x01	; 1
    51b4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <count>
		if(!count){ //led blinks x times
    51b8:	81 11       	cpse	r24, r1
    51ba:	81 c0       	rjmp	.+258    	; 0x52be <__vector_12+0x178>
			// Delete eeprom memory ZERO
			eprom.update_block(HX711_Default, (void*) ZERO, sizeblock);
    51bc:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <eprom+0x1c>
    51c0:	f0 91 27 03 	lds	r31, 0x0327	; 0x800327 <eprom+0x1d>
    51c4:	40 e1       	ldi	r20, 0x10	; 16
    51c6:	50 e0       	ldi	r21, 0x00	; 0
    51c8:	60 e0       	ldi	r22, 0x00	; 0
    51ca:	70 e0       	ldi	r23, 0x00	; 0
    51cc:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <HX711_Default>
    51d0:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <HX711_Default+0x1>
    51d4:	09 95       	icall
			hx.get_cal(&hx)->offset_32 = HX711_Default->offset_32;
    51d6:	c0 e7       	ldi	r28, 0x70	; 112
    51d8:	d3 e0       	ldi	r29, 0x03	; 3
    51da:	ed a9       	ldd	r30, Y+53	; 0x35
    51dc:	fe a9       	ldd	r31, Y+54	; 0x36
    51de:	ce 01       	movw	r24, r28
    51e0:	09 95       	icall
    51e2:	e0 91 f4 02 	lds	r30, 0x02F4	; 0x8002f4 <HX711_Default>
    51e6:	f0 91 f5 02 	lds	r31, 0x02F5	; 0x8002f5 <HX711_Default+0x1>
    51ea:	40 81       	ld	r20, Z
    51ec:	51 81       	ldd	r21, Z+1	; 0x01
    51ee:	62 81       	ldd	r22, Z+2	; 0x02
    51f0:	73 81       	ldd	r23, Z+3	; 0x03
    51f2:	fc 01       	movw	r30, r24
    51f4:	40 83       	st	Z, r20
    51f6:	51 83       	std	Z+1, r21	; 0x01
    51f8:	62 83       	std	Z+2, r22	; 0x02
    51fa:	73 83       	std	Z+3, r23	; 0x03
			hx.get_cal(&hx)->offset_64 = HX711_Default->offset_64;
    51fc:	ed a9       	ldd	r30, Y+53	; 0x35
    51fe:	fe a9       	ldd	r31, Y+54	; 0x36
    5200:	ce 01       	movw	r24, r28
    5202:	09 95       	icall
    5204:	e0 91 f4 02 	lds	r30, 0x02F4	; 0x8002f4 <HX711_Default>
    5208:	f0 91 f5 02 	lds	r31, 0x02F5	; 0x8002f5 <HX711_Default+0x1>
    520c:	44 81       	ldd	r20, Z+4	; 0x04
    520e:	55 81       	ldd	r21, Z+5	; 0x05
    5210:	66 81       	ldd	r22, Z+6	; 0x06
    5212:	77 81       	ldd	r23, Z+7	; 0x07
    5214:	fc 01       	movw	r30, r24
    5216:	44 83       	std	Z+4, r20	; 0x04
    5218:	55 83       	std	Z+5, r21	; 0x05
    521a:	66 83       	std	Z+6, r22	; 0x06
    521c:	77 83       	std	Z+7, r23	; 0x07
			hx.get_cal(&hx)->offset_128 = HX711_Default->offset_128;
    521e:	ed a9       	ldd	r30, Y+53	; 0x35
    5220:	fe a9       	ldd	r31, Y+54	; 0x36
    5222:	ce 01       	movw	r24, r28
    5224:	09 95       	icall
    5226:	e0 91 f4 02 	lds	r30, 0x02F4	; 0x8002f4 <HX711_Default>
    522a:	f0 91 f5 02 	lds	r31, 0x02F5	; 0x8002f5 <HX711_Default+0x1>
    522e:	40 85       	ldd	r20, Z+8	; 0x08
    5230:	51 85       	ldd	r21, Z+9	; 0x09
    5232:	62 85       	ldd	r22, Z+10	; 0x0a
    5234:	73 85       	ldd	r23, Z+11	; 0x0b
    5236:	fc 01       	movw	r30, r24
    5238:	40 87       	std	Z+8, r20	; 0x08
    523a:	51 87       	std	Z+9, r21	; 0x09
    523c:	62 87       	std	Z+10, r22	; 0x0a
    523e:	73 87       	std	Z+11, r23	; 0x0b
			hx.get_cal(&hx)->divfactor_32 = divfactor = HX711_Default->divfactor_32;
    5240:	ed a9       	ldd	r30, Y+53	; 0x35
    5242:	fe a9       	ldd	r31, Y+54	; 0x36
    5244:	ce 01       	movw	r24, r28
    5246:	09 95       	icall
    5248:	e0 91 f4 02 	lds	r30, 0x02F4	; 0x8002f4 <HX711_Default>
    524c:	f0 91 f5 02 	lds	r31, 0x02F5	; 0x8002f5 <HX711_Default+0x1>
    5250:	24 85       	ldd	r18, Z+12	; 0x0c
    5252:	42 2f       	mov	r20, r18
    5254:	50 e0       	ldi	r21, 0x00	; 0
    5256:	50 93 a8 03 	sts	0x03A8, r21	; 0x8003a8 <divfactor+0x1>
    525a:	40 93 a7 03 	sts	0x03A7, r20	; 0x8003a7 <divfactor>
    525e:	fc 01       	movw	r30, r24
    5260:	24 87       	std	Z+12, r18	; 0x0c
			hx.get_cal(&hx)->divfactor_64 = divfactor = HX711_Default->divfactor_64;
    5262:	ed a9       	ldd	r30, Y+53	; 0x35
    5264:	fe a9       	ldd	r31, Y+54	; 0x36
    5266:	ce 01       	movw	r24, r28
    5268:	09 95       	icall
    526a:	e0 91 f4 02 	lds	r30, 0x02F4	; 0x8002f4 <HX711_Default>
    526e:	f0 91 f5 02 	lds	r31, 0x02F5	; 0x8002f5 <HX711_Default+0x1>
    5272:	25 85       	ldd	r18, Z+13	; 0x0d
    5274:	42 2f       	mov	r20, r18
    5276:	50 e0       	ldi	r21, 0x00	; 0
    5278:	50 93 a8 03 	sts	0x03A8, r21	; 0x8003a8 <divfactor+0x1>
    527c:	40 93 a7 03 	sts	0x03A7, r20	; 0x8003a7 <divfactor>
    5280:	fc 01       	movw	r30, r24
    5282:	25 87       	std	Z+13, r18	; 0x0d
			hx.get_cal(&hx)->divfactor_128 = HX711_Default->divfactor_128;
    5284:	ed a9       	ldd	r30, Y+53	; 0x35
    5286:	fe a9       	ldd	r31, Y+54	; 0x36
    5288:	ce 01       	movw	r24, r28
    528a:	09 95       	icall
    528c:	e0 91 f4 02 	lds	r30, 0x02F4	; 0x8002f4 <HX711_Default>
    5290:	f0 91 f5 02 	lds	r31, 0x02F5	; 0x8002f5 <HX711_Default+0x1>
    5294:	26 85       	ldd	r18, Z+14	; 0x0e
    5296:	fc 01       	movw	r30, r24
    5298:	26 87       	std	Z+14, r18	; 0x0e
			hx.get_cal(&hx)->status = HX711_Default->status;
    529a:	ed a9       	ldd	r30, Y+53	; 0x35
    529c:	fe a9       	ldd	r31, Y+54	; 0x36
    529e:	ce 01       	movw	r24, r28
    52a0:	09 95       	icall
    52a2:	e0 91 f4 02 	lds	r30, 0x02F4	; 0x8002f4 <HX711_Default>
    52a6:	f0 91 f5 02 	lds	r31, 0x02F5	; 0x8002f5 <HX711_Default+0x1>
    52aa:	27 85       	ldd	r18, Z+15	; 0x0f
    52ac:	fc 01       	movw	r30, r24
    52ae:	27 87       	std	Z+15, r18	; 0x0f
			PORTC |= (ONE << 5); // troubleshooting
    52b0:	ad 9a       	sbi	0x15, 5	; 21
			PORTC |= (ONE << 6); // troubleshooting
    52b2:	ae 9a       	sbi	0x15, 6	; 21
			counter_1 = ZERO;
    52b4:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <counter_1>
			count=blink;
    52b8:	88 e0       	ldi	r24, 0x08	; 8
    52ba:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <count>
		}
	}
	/***CLEAR EEPROM OFFSET SEQUENCE END***/
	/***CAL DIVFACTOR DEFINE START***/
	if((F.LL & IMASK) == (ONE << 4)) //button 5
    52be:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <F+0xa>
    52c2:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <F+0xb>
    52c6:	8f 73       	andi	r24, 0x3F	; 63
    52c8:	99 27       	eor	r25, r25
    52ca:	40 97       	sbiw	r24, 0x10	; 16
    52cc:	41 f4       	brne	.+16     	; 0x52de <__vector_12+0x198>
		counter_2++;
    52ce:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <counter_2>
    52d2:	8f 5f       	subi	r24, 0xFF	; 255
    52d4:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <counter_2>
	else if(counter_2 < _5sec+ONE)
		counter_2=ZERO; //RESET TIMER
	if(counter_2 > _5sec){
    52d8:	86 30       	cpi	r24, 0x06	; 6
    52da:	40 f4       	brcc	.+16     	; 0x52ec <__vector_12+0x1a6>
    52dc:	0d c0       	rjmp	.+26     	; 0x52f8 <__vector_12+0x1b2>
	}
	/***CLEAR EEPROM OFFSET SEQUENCE END***/
	/***CAL DIVFACTOR DEFINE START***/
	if((F.LL & IMASK) == (ONE << 4)) //button 5
		counter_2++;
	else if(counter_2 < _5sec+ONE)
    52de:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <counter_2>
    52e2:	86 30       	cpi	r24, 0x06	; 6
    52e4:	18 f4       	brcc	.+6      	; 0x52ec <__vector_12+0x1a6>
		counter_2=ZERO; //RESET TIMER
    52e6:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <counter_2>
    52ea:	06 c0       	rjmp	.+12     	; 0x52f8 <__vector_12+0x1b2>
	if(counter_2 > _5sec){
		counter_2 = ZERO; //RESET TIMER
    52ec:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <counter_2>
		signal = ONE;
    52f0:	81 e0       	ldi	r24, 0x01	; 1
    52f2:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <signal>
		PORTC &= ~(ONE << 7); // troubleshooting
    52f6:	af 98       	cbi	0x15, 7	; 21
	}
	/***CAL DIVFACTOR DEFINE END***/
}
    52f8:	ff 91       	pop	r31
    52fa:	ef 91       	pop	r30
    52fc:	df 91       	pop	r29
    52fe:	cf 91       	pop	r28
    5300:	bf 91       	pop	r27
    5302:	af 91       	pop	r26
    5304:	9f 91       	pop	r25
    5306:	8f 91       	pop	r24
    5308:	7f 91       	pop	r23
    530a:	6f 91       	pop	r22
    530c:	5f 91       	pop	r21
    530e:	4f 91       	pop	r20
    5310:	3f 91       	pop	r19
    5312:	2f 91       	pop	r18
    5314:	0f 90       	pop	r0
    5316:	0b be       	out	0x3b, r0	; 59
    5318:	0f 90       	pop	r0
    531a:	0f be       	out	0x3f, r0	; 63
    531c:	0f 90       	pop	r0
    531e:	1f 90       	pop	r1
    5320:	18 95       	reti

00005322 <__subsf3>:
    5322:	50 58       	subi	r21, 0x80	; 128

00005324 <__addsf3>:
    5324:	bb 27       	eor	r27, r27
    5326:	aa 27       	eor	r26, r26
    5328:	0e d0       	rcall	.+28     	; 0x5346 <__addsf3x>
    532a:	75 c1       	rjmp	.+746    	; 0x5616 <__fp_round>
    532c:	66 d1       	rcall	.+716    	; 0x55fa <__fp_pscA>
    532e:	30 f0       	brcs	.+12     	; 0x533c <__addsf3+0x18>
    5330:	6b d1       	rcall	.+726    	; 0x5608 <__fp_pscB>
    5332:	20 f0       	brcs	.+8      	; 0x533c <__addsf3+0x18>
    5334:	31 f4       	brne	.+12     	; 0x5342 <__addsf3+0x1e>
    5336:	9f 3f       	cpi	r25, 0xFF	; 255
    5338:	11 f4       	brne	.+4      	; 0x533e <__addsf3+0x1a>
    533a:	1e f4       	brtc	.+6      	; 0x5342 <__addsf3+0x1e>
    533c:	5b c1       	rjmp	.+694    	; 0x55f4 <__fp_nan>
    533e:	0e f4       	brtc	.+2      	; 0x5342 <__addsf3+0x1e>
    5340:	e0 95       	com	r30
    5342:	e7 fb       	bst	r30, 7
    5344:	51 c1       	rjmp	.+674    	; 0x55e8 <__fp_inf>

00005346 <__addsf3x>:
    5346:	e9 2f       	mov	r30, r25
    5348:	77 d1       	rcall	.+750    	; 0x5638 <__fp_split3>
    534a:	80 f3       	brcs	.-32     	; 0x532c <__addsf3+0x8>
    534c:	ba 17       	cp	r27, r26
    534e:	62 07       	cpc	r22, r18
    5350:	73 07       	cpc	r23, r19
    5352:	84 07       	cpc	r24, r20
    5354:	95 07       	cpc	r25, r21
    5356:	18 f0       	brcs	.+6      	; 0x535e <__addsf3x+0x18>
    5358:	71 f4       	brne	.+28     	; 0x5376 <__addsf3x+0x30>
    535a:	9e f5       	brtc	.+102    	; 0x53c2 <__addsf3x+0x7c>
    535c:	8f c1       	rjmp	.+798    	; 0x567c <__fp_zero>
    535e:	0e f4       	brtc	.+2      	; 0x5362 <__addsf3x+0x1c>
    5360:	e0 95       	com	r30
    5362:	0b 2e       	mov	r0, r27
    5364:	ba 2f       	mov	r27, r26
    5366:	a0 2d       	mov	r26, r0
    5368:	0b 01       	movw	r0, r22
    536a:	b9 01       	movw	r22, r18
    536c:	90 01       	movw	r18, r0
    536e:	0c 01       	movw	r0, r24
    5370:	ca 01       	movw	r24, r20
    5372:	a0 01       	movw	r20, r0
    5374:	11 24       	eor	r1, r1
    5376:	ff 27       	eor	r31, r31
    5378:	59 1b       	sub	r21, r25
    537a:	99 f0       	breq	.+38     	; 0x53a2 <__addsf3x+0x5c>
    537c:	59 3f       	cpi	r21, 0xF9	; 249
    537e:	50 f4       	brcc	.+20     	; 0x5394 <__addsf3x+0x4e>
    5380:	50 3e       	cpi	r21, 0xE0	; 224
    5382:	68 f1       	brcs	.+90     	; 0x53de <__addsf3x+0x98>
    5384:	1a 16       	cp	r1, r26
    5386:	f0 40       	sbci	r31, 0x00	; 0
    5388:	a2 2f       	mov	r26, r18
    538a:	23 2f       	mov	r18, r19
    538c:	34 2f       	mov	r19, r20
    538e:	44 27       	eor	r20, r20
    5390:	58 5f       	subi	r21, 0xF8	; 248
    5392:	f3 cf       	rjmp	.-26     	; 0x537a <__addsf3x+0x34>
    5394:	46 95       	lsr	r20
    5396:	37 95       	ror	r19
    5398:	27 95       	ror	r18
    539a:	a7 95       	ror	r26
    539c:	f0 40       	sbci	r31, 0x00	; 0
    539e:	53 95       	inc	r21
    53a0:	c9 f7       	brne	.-14     	; 0x5394 <__addsf3x+0x4e>
    53a2:	7e f4       	brtc	.+30     	; 0x53c2 <__addsf3x+0x7c>
    53a4:	1f 16       	cp	r1, r31
    53a6:	ba 0b       	sbc	r27, r26
    53a8:	62 0b       	sbc	r22, r18
    53aa:	73 0b       	sbc	r23, r19
    53ac:	84 0b       	sbc	r24, r20
    53ae:	ba f0       	brmi	.+46     	; 0x53de <__addsf3x+0x98>
    53b0:	91 50       	subi	r25, 0x01	; 1
    53b2:	a1 f0       	breq	.+40     	; 0x53dc <__addsf3x+0x96>
    53b4:	ff 0f       	add	r31, r31
    53b6:	bb 1f       	adc	r27, r27
    53b8:	66 1f       	adc	r22, r22
    53ba:	77 1f       	adc	r23, r23
    53bc:	88 1f       	adc	r24, r24
    53be:	c2 f7       	brpl	.-16     	; 0x53b0 <__addsf3x+0x6a>
    53c0:	0e c0       	rjmp	.+28     	; 0x53de <__addsf3x+0x98>
    53c2:	ba 0f       	add	r27, r26
    53c4:	62 1f       	adc	r22, r18
    53c6:	73 1f       	adc	r23, r19
    53c8:	84 1f       	adc	r24, r20
    53ca:	48 f4       	brcc	.+18     	; 0x53de <__addsf3x+0x98>
    53cc:	87 95       	ror	r24
    53ce:	77 95       	ror	r23
    53d0:	67 95       	ror	r22
    53d2:	b7 95       	ror	r27
    53d4:	f7 95       	ror	r31
    53d6:	9e 3f       	cpi	r25, 0xFE	; 254
    53d8:	08 f0       	brcs	.+2      	; 0x53dc <__addsf3x+0x96>
    53da:	b3 cf       	rjmp	.-154    	; 0x5342 <__addsf3+0x1e>
    53dc:	93 95       	inc	r25
    53de:	88 0f       	add	r24, r24
    53e0:	08 f0       	brcs	.+2      	; 0x53e4 <__addsf3x+0x9e>
    53e2:	99 27       	eor	r25, r25
    53e4:	ee 0f       	add	r30, r30
    53e6:	97 95       	ror	r25
    53e8:	87 95       	ror	r24
    53ea:	08 95       	ret

000053ec <__cmpsf2>:
    53ec:	d9 d0       	rcall	.+434    	; 0x55a0 <__fp_cmp>
    53ee:	08 f4       	brcc	.+2      	; 0x53f2 <__cmpsf2+0x6>
    53f0:	81 e0       	ldi	r24, 0x01	; 1
    53f2:	08 95       	ret

000053f4 <__divsf3>:
    53f4:	0c d0       	rcall	.+24     	; 0x540e <__divsf3x>
    53f6:	0f c1       	rjmp	.+542    	; 0x5616 <__fp_round>
    53f8:	07 d1       	rcall	.+526    	; 0x5608 <__fp_pscB>
    53fa:	40 f0       	brcs	.+16     	; 0x540c <__divsf3+0x18>
    53fc:	fe d0       	rcall	.+508    	; 0x55fa <__fp_pscA>
    53fe:	30 f0       	brcs	.+12     	; 0x540c <__divsf3+0x18>
    5400:	21 f4       	brne	.+8      	; 0x540a <__divsf3+0x16>
    5402:	5f 3f       	cpi	r21, 0xFF	; 255
    5404:	19 f0       	breq	.+6      	; 0x540c <__divsf3+0x18>
    5406:	f0 c0       	rjmp	.+480    	; 0x55e8 <__fp_inf>
    5408:	51 11       	cpse	r21, r1
    540a:	39 c1       	rjmp	.+626    	; 0x567e <__fp_szero>
    540c:	f3 c0       	rjmp	.+486    	; 0x55f4 <__fp_nan>

0000540e <__divsf3x>:
    540e:	14 d1       	rcall	.+552    	; 0x5638 <__fp_split3>
    5410:	98 f3       	brcs	.-26     	; 0x53f8 <__divsf3+0x4>

00005412 <__divsf3_pse>:
    5412:	99 23       	and	r25, r25
    5414:	c9 f3       	breq	.-14     	; 0x5408 <__divsf3+0x14>
    5416:	55 23       	and	r21, r21
    5418:	b1 f3       	breq	.-20     	; 0x5406 <__divsf3+0x12>
    541a:	95 1b       	sub	r25, r21
    541c:	55 0b       	sbc	r21, r21
    541e:	bb 27       	eor	r27, r27
    5420:	aa 27       	eor	r26, r26
    5422:	62 17       	cp	r22, r18
    5424:	73 07       	cpc	r23, r19
    5426:	84 07       	cpc	r24, r20
    5428:	38 f0       	brcs	.+14     	; 0x5438 <__divsf3_pse+0x26>
    542a:	9f 5f       	subi	r25, 0xFF	; 255
    542c:	5f 4f       	sbci	r21, 0xFF	; 255
    542e:	22 0f       	add	r18, r18
    5430:	33 1f       	adc	r19, r19
    5432:	44 1f       	adc	r20, r20
    5434:	aa 1f       	adc	r26, r26
    5436:	a9 f3       	breq	.-22     	; 0x5422 <__divsf3_pse+0x10>
    5438:	33 d0       	rcall	.+102    	; 0x54a0 <__divsf3_pse+0x8e>
    543a:	0e 2e       	mov	r0, r30
    543c:	3a f0       	brmi	.+14     	; 0x544c <__divsf3_pse+0x3a>
    543e:	e0 e8       	ldi	r30, 0x80	; 128
    5440:	30 d0       	rcall	.+96     	; 0x54a2 <__divsf3_pse+0x90>
    5442:	91 50       	subi	r25, 0x01	; 1
    5444:	50 40       	sbci	r21, 0x00	; 0
    5446:	e6 95       	lsr	r30
    5448:	00 1c       	adc	r0, r0
    544a:	ca f7       	brpl	.-14     	; 0x543e <__divsf3_pse+0x2c>
    544c:	29 d0       	rcall	.+82     	; 0x54a0 <__divsf3_pse+0x8e>
    544e:	fe 2f       	mov	r31, r30
    5450:	27 d0       	rcall	.+78     	; 0x54a0 <__divsf3_pse+0x8e>
    5452:	66 0f       	add	r22, r22
    5454:	77 1f       	adc	r23, r23
    5456:	88 1f       	adc	r24, r24
    5458:	bb 1f       	adc	r27, r27
    545a:	26 17       	cp	r18, r22
    545c:	37 07       	cpc	r19, r23
    545e:	48 07       	cpc	r20, r24
    5460:	ab 07       	cpc	r26, r27
    5462:	b0 e8       	ldi	r27, 0x80	; 128
    5464:	09 f0       	breq	.+2      	; 0x5468 <__divsf3_pse+0x56>
    5466:	bb 0b       	sbc	r27, r27
    5468:	80 2d       	mov	r24, r0
    546a:	bf 01       	movw	r22, r30
    546c:	ff 27       	eor	r31, r31
    546e:	93 58       	subi	r25, 0x83	; 131
    5470:	5f 4f       	sbci	r21, 0xFF	; 255
    5472:	2a f0       	brmi	.+10     	; 0x547e <__divsf3_pse+0x6c>
    5474:	9e 3f       	cpi	r25, 0xFE	; 254
    5476:	51 05       	cpc	r21, r1
    5478:	68 f0       	brcs	.+26     	; 0x5494 <__divsf3_pse+0x82>
    547a:	b6 c0       	rjmp	.+364    	; 0x55e8 <__fp_inf>
    547c:	00 c1       	rjmp	.+512    	; 0x567e <__fp_szero>
    547e:	5f 3f       	cpi	r21, 0xFF	; 255
    5480:	ec f3       	brlt	.-6      	; 0x547c <__divsf3_pse+0x6a>
    5482:	98 3e       	cpi	r25, 0xE8	; 232
    5484:	dc f3       	brlt	.-10     	; 0x547c <__divsf3_pse+0x6a>
    5486:	86 95       	lsr	r24
    5488:	77 95       	ror	r23
    548a:	67 95       	ror	r22
    548c:	b7 95       	ror	r27
    548e:	f7 95       	ror	r31
    5490:	9f 5f       	subi	r25, 0xFF	; 255
    5492:	c9 f7       	brne	.-14     	; 0x5486 <__divsf3_pse+0x74>
    5494:	88 0f       	add	r24, r24
    5496:	91 1d       	adc	r25, r1
    5498:	96 95       	lsr	r25
    549a:	87 95       	ror	r24
    549c:	97 f9       	bld	r25, 7
    549e:	08 95       	ret
    54a0:	e1 e0       	ldi	r30, 0x01	; 1
    54a2:	66 0f       	add	r22, r22
    54a4:	77 1f       	adc	r23, r23
    54a6:	88 1f       	adc	r24, r24
    54a8:	bb 1f       	adc	r27, r27
    54aa:	62 17       	cp	r22, r18
    54ac:	73 07       	cpc	r23, r19
    54ae:	84 07       	cpc	r24, r20
    54b0:	ba 07       	cpc	r27, r26
    54b2:	20 f0       	brcs	.+8      	; 0x54bc <__divsf3_pse+0xaa>
    54b4:	62 1b       	sub	r22, r18
    54b6:	73 0b       	sbc	r23, r19
    54b8:	84 0b       	sbc	r24, r20
    54ba:	ba 0b       	sbc	r27, r26
    54bc:	ee 1f       	adc	r30, r30
    54be:	88 f7       	brcc	.-30     	; 0x54a2 <__divsf3_pse+0x90>
    54c0:	e0 95       	com	r30
    54c2:	08 95       	ret

000054c4 <__fixsfsi>:
    54c4:	04 d0       	rcall	.+8      	; 0x54ce <__fixunssfsi>
    54c6:	68 94       	set
    54c8:	b1 11       	cpse	r27, r1
    54ca:	d9 c0       	rjmp	.+434    	; 0x567e <__fp_szero>
    54cc:	08 95       	ret

000054ce <__fixunssfsi>:
    54ce:	bc d0       	rcall	.+376    	; 0x5648 <__fp_splitA>
    54d0:	88 f0       	brcs	.+34     	; 0x54f4 <__fixunssfsi+0x26>
    54d2:	9f 57       	subi	r25, 0x7F	; 127
    54d4:	90 f0       	brcs	.+36     	; 0x54fa <__fixunssfsi+0x2c>
    54d6:	b9 2f       	mov	r27, r25
    54d8:	99 27       	eor	r25, r25
    54da:	b7 51       	subi	r27, 0x17	; 23
    54dc:	a0 f0       	brcs	.+40     	; 0x5506 <__fixunssfsi+0x38>
    54de:	d1 f0       	breq	.+52     	; 0x5514 <__fixunssfsi+0x46>
    54e0:	66 0f       	add	r22, r22
    54e2:	77 1f       	adc	r23, r23
    54e4:	88 1f       	adc	r24, r24
    54e6:	99 1f       	adc	r25, r25
    54e8:	1a f0       	brmi	.+6      	; 0x54f0 <__fixunssfsi+0x22>
    54ea:	ba 95       	dec	r27
    54ec:	c9 f7       	brne	.-14     	; 0x54e0 <__fixunssfsi+0x12>
    54ee:	12 c0       	rjmp	.+36     	; 0x5514 <__fixunssfsi+0x46>
    54f0:	b1 30       	cpi	r27, 0x01	; 1
    54f2:	81 f0       	breq	.+32     	; 0x5514 <__fixunssfsi+0x46>
    54f4:	c3 d0       	rcall	.+390    	; 0x567c <__fp_zero>
    54f6:	b1 e0       	ldi	r27, 0x01	; 1
    54f8:	08 95       	ret
    54fa:	c0 c0       	rjmp	.+384    	; 0x567c <__fp_zero>
    54fc:	67 2f       	mov	r22, r23
    54fe:	78 2f       	mov	r23, r24
    5500:	88 27       	eor	r24, r24
    5502:	b8 5f       	subi	r27, 0xF8	; 248
    5504:	39 f0       	breq	.+14     	; 0x5514 <__fixunssfsi+0x46>
    5506:	b9 3f       	cpi	r27, 0xF9	; 249
    5508:	cc f3       	brlt	.-14     	; 0x54fc <__fixunssfsi+0x2e>
    550a:	86 95       	lsr	r24
    550c:	77 95       	ror	r23
    550e:	67 95       	ror	r22
    5510:	b3 95       	inc	r27
    5512:	d9 f7       	brne	.-10     	; 0x550a <__fixunssfsi+0x3c>
    5514:	3e f4       	brtc	.+14     	; 0x5524 <__fixunssfsi+0x56>
    5516:	90 95       	com	r25
    5518:	80 95       	com	r24
    551a:	70 95       	com	r23
    551c:	61 95       	neg	r22
    551e:	7f 4f       	sbci	r23, 0xFF	; 255
    5520:	8f 4f       	sbci	r24, 0xFF	; 255
    5522:	9f 4f       	sbci	r25, 0xFF	; 255
    5524:	08 95       	ret

00005526 <__floatunsisf>:
    5526:	e8 94       	clt
    5528:	09 c0       	rjmp	.+18     	; 0x553c <__floatsisf+0x12>

0000552a <__floatsisf>:
    552a:	97 fb       	bst	r25, 7
    552c:	3e f4       	brtc	.+14     	; 0x553c <__floatsisf+0x12>
    552e:	90 95       	com	r25
    5530:	80 95       	com	r24
    5532:	70 95       	com	r23
    5534:	61 95       	neg	r22
    5536:	7f 4f       	sbci	r23, 0xFF	; 255
    5538:	8f 4f       	sbci	r24, 0xFF	; 255
    553a:	9f 4f       	sbci	r25, 0xFF	; 255
    553c:	99 23       	and	r25, r25
    553e:	a9 f0       	breq	.+42     	; 0x556a <__floatsisf+0x40>
    5540:	f9 2f       	mov	r31, r25
    5542:	96 e9       	ldi	r25, 0x96	; 150
    5544:	bb 27       	eor	r27, r27
    5546:	93 95       	inc	r25
    5548:	f6 95       	lsr	r31
    554a:	87 95       	ror	r24
    554c:	77 95       	ror	r23
    554e:	67 95       	ror	r22
    5550:	b7 95       	ror	r27
    5552:	f1 11       	cpse	r31, r1
    5554:	f8 cf       	rjmp	.-16     	; 0x5546 <__floatsisf+0x1c>
    5556:	fa f4       	brpl	.+62     	; 0x5596 <__floatsisf+0x6c>
    5558:	bb 0f       	add	r27, r27
    555a:	11 f4       	brne	.+4      	; 0x5560 <__floatsisf+0x36>
    555c:	60 ff       	sbrs	r22, 0
    555e:	1b c0       	rjmp	.+54     	; 0x5596 <__floatsisf+0x6c>
    5560:	6f 5f       	subi	r22, 0xFF	; 255
    5562:	7f 4f       	sbci	r23, 0xFF	; 255
    5564:	8f 4f       	sbci	r24, 0xFF	; 255
    5566:	9f 4f       	sbci	r25, 0xFF	; 255
    5568:	16 c0       	rjmp	.+44     	; 0x5596 <__floatsisf+0x6c>
    556a:	88 23       	and	r24, r24
    556c:	11 f0       	breq	.+4      	; 0x5572 <__floatsisf+0x48>
    556e:	96 e9       	ldi	r25, 0x96	; 150
    5570:	11 c0       	rjmp	.+34     	; 0x5594 <__floatsisf+0x6a>
    5572:	77 23       	and	r23, r23
    5574:	21 f0       	breq	.+8      	; 0x557e <__floatsisf+0x54>
    5576:	9e e8       	ldi	r25, 0x8E	; 142
    5578:	87 2f       	mov	r24, r23
    557a:	76 2f       	mov	r23, r22
    557c:	05 c0       	rjmp	.+10     	; 0x5588 <__floatsisf+0x5e>
    557e:	66 23       	and	r22, r22
    5580:	71 f0       	breq	.+28     	; 0x559e <__floatsisf+0x74>
    5582:	96 e8       	ldi	r25, 0x86	; 134
    5584:	86 2f       	mov	r24, r22
    5586:	70 e0       	ldi	r23, 0x00	; 0
    5588:	60 e0       	ldi	r22, 0x00	; 0
    558a:	2a f0       	brmi	.+10     	; 0x5596 <__floatsisf+0x6c>
    558c:	9a 95       	dec	r25
    558e:	66 0f       	add	r22, r22
    5590:	77 1f       	adc	r23, r23
    5592:	88 1f       	adc	r24, r24
    5594:	da f7       	brpl	.-10     	; 0x558c <__floatsisf+0x62>
    5596:	88 0f       	add	r24, r24
    5598:	96 95       	lsr	r25
    559a:	87 95       	ror	r24
    559c:	97 f9       	bld	r25, 7
    559e:	08 95       	ret

000055a0 <__fp_cmp>:
    55a0:	99 0f       	add	r25, r25
    55a2:	00 08       	sbc	r0, r0
    55a4:	55 0f       	add	r21, r21
    55a6:	aa 0b       	sbc	r26, r26
    55a8:	e0 e8       	ldi	r30, 0x80	; 128
    55aa:	fe ef       	ldi	r31, 0xFE	; 254
    55ac:	16 16       	cp	r1, r22
    55ae:	17 06       	cpc	r1, r23
    55b0:	e8 07       	cpc	r30, r24
    55b2:	f9 07       	cpc	r31, r25
    55b4:	c0 f0       	brcs	.+48     	; 0x55e6 <__fp_cmp+0x46>
    55b6:	12 16       	cp	r1, r18
    55b8:	13 06       	cpc	r1, r19
    55ba:	e4 07       	cpc	r30, r20
    55bc:	f5 07       	cpc	r31, r21
    55be:	98 f0       	brcs	.+38     	; 0x55e6 <__fp_cmp+0x46>
    55c0:	62 1b       	sub	r22, r18
    55c2:	73 0b       	sbc	r23, r19
    55c4:	84 0b       	sbc	r24, r20
    55c6:	95 0b       	sbc	r25, r21
    55c8:	39 f4       	brne	.+14     	; 0x55d8 <__fp_cmp+0x38>
    55ca:	0a 26       	eor	r0, r26
    55cc:	61 f0       	breq	.+24     	; 0x55e6 <__fp_cmp+0x46>
    55ce:	23 2b       	or	r18, r19
    55d0:	24 2b       	or	r18, r20
    55d2:	25 2b       	or	r18, r21
    55d4:	21 f4       	brne	.+8      	; 0x55de <__fp_cmp+0x3e>
    55d6:	08 95       	ret
    55d8:	0a 26       	eor	r0, r26
    55da:	09 f4       	brne	.+2      	; 0x55de <__fp_cmp+0x3e>
    55dc:	a1 40       	sbci	r26, 0x01	; 1
    55de:	a6 95       	lsr	r26
    55e0:	8f ef       	ldi	r24, 0xFF	; 255
    55e2:	81 1d       	adc	r24, r1
    55e4:	81 1d       	adc	r24, r1
    55e6:	08 95       	ret

000055e8 <__fp_inf>:
    55e8:	97 f9       	bld	r25, 7
    55ea:	9f 67       	ori	r25, 0x7F	; 127
    55ec:	80 e8       	ldi	r24, 0x80	; 128
    55ee:	70 e0       	ldi	r23, 0x00	; 0
    55f0:	60 e0       	ldi	r22, 0x00	; 0
    55f2:	08 95       	ret

000055f4 <__fp_nan>:
    55f4:	9f ef       	ldi	r25, 0xFF	; 255
    55f6:	80 ec       	ldi	r24, 0xC0	; 192
    55f8:	08 95       	ret

000055fa <__fp_pscA>:
    55fa:	00 24       	eor	r0, r0
    55fc:	0a 94       	dec	r0
    55fe:	16 16       	cp	r1, r22
    5600:	17 06       	cpc	r1, r23
    5602:	18 06       	cpc	r1, r24
    5604:	09 06       	cpc	r0, r25
    5606:	08 95       	ret

00005608 <__fp_pscB>:
    5608:	00 24       	eor	r0, r0
    560a:	0a 94       	dec	r0
    560c:	12 16       	cp	r1, r18
    560e:	13 06       	cpc	r1, r19
    5610:	14 06       	cpc	r1, r20
    5612:	05 06       	cpc	r0, r21
    5614:	08 95       	ret

00005616 <__fp_round>:
    5616:	09 2e       	mov	r0, r25
    5618:	03 94       	inc	r0
    561a:	00 0c       	add	r0, r0
    561c:	11 f4       	brne	.+4      	; 0x5622 <__fp_round+0xc>
    561e:	88 23       	and	r24, r24
    5620:	52 f0       	brmi	.+20     	; 0x5636 <__fp_round+0x20>
    5622:	bb 0f       	add	r27, r27
    5624:	40 f4       	brcc	.+16     	; 0x5636 <__fp_round+0x20>
    5626:	bf 2b       	or	r27, r31
    5628:	11 f4       	brne	.+4      	; 0x562e <__fp_round+0x18>
    562a:	60 ff       	sbrs	r22, 0
    562c:	04 c0       	rjmp	.+8      	; 0x5636 <__fp_round+0x20>
    562e:	6f 5f       	subi	r22, 0xFF	; 255
    5630:	7f 4f       	sbci	r23, 0xFF	; 255
    5632:	8f 4f       	sbci	r24, 0xFF	; 255
    5634:	9f 4f       	sbci	r25, 0xFF	; 255
    5636:	08 95       	ret

00005638 <__fp_split3>:
    5638:	57 fd       	sbrc	r21, 7
    563a:	90 58       	subi	r25, 0x80	; 128
    563c:	44 0f       	add	r20, r20
    563e:	55 1f       	adc	r21, r21
    5640:	59 f0       	breq	.+22     	; 0x5658 <__fp_splitA+0x10>
    5642:	5f 3f       	cpi	r21, 0xFF	; 255
    5644:	71 f0       	breq	.+28     	; 0x5662 <__fp_splitA+0x1a>
    5646:	47 95       	ror	r20

00005648 <__fp_splitA>:
    5648:	88 0f       	add	r24, r24
    564a:	97 fb       	bst	r25, 7
    564c:	99 1f       	adc	r25, r25
    564e:	61 f0       	breq	.+24     	; 0x5668 <__fp_splitA+0x20>
    5650:	9f 3f       	cpi	r25, 0xFF	; 255
    5652:	79 f0       	breq	.+30     	; 0x5672 <__fp_splitA+0x2a>
    5654:	87 95       	ror	r24
    5656:	08 95       	ret
    5658:	12 16       	cp	r1, r18
    565a:	13 06       	cpc	r1, r19
    565c:	14 06       	cpc	r1, r20
    565e:	55 1f       	adc	r21, r21
    5660:	f2 cf       	rjmp	.-28     	; 0x5646 <__fp_split3+0xe>
    5662:	46 95       	lsr	r20
    5664:	f1 df       	rcall	.-30     	; 0x5648 <__fp_splitA>
    5666:	08 c0       	rjmp	.+16     	; 0x5678 <__fp_splitA+0x30>
    5668:	16 16       	cp	r1, r22
    566a:	17 06       	cpc	r1, r23
    566c:	18 06       	cpc	r1, r24
    566e:	99 1f       	adc	r25, r25
    5670:	f1 cf       	rjmp	.-30     	; 0x5654 <__fp_splitA+0xc>
    5672:	86 95       	lsr	r24
    5674:	71 05       	cpc	r23, r1
    5676:	61 05       	cpc	r22, r1
    5678:	08 94       	sec
    567a:	08 95       	ret

0000567c <__fp_zero>:
    567c:	e8 94       	clt

0000567e <__fp_szero>:
    567e:	bb 27       	eor	r27, r27
    5680:	66 27       	eor	r22, r22
    5682:	77 27       	eor	r23, r23
    5684:	cb 01       	movw	r24, r22
    5686:	97 f9       	bld	r25, 7
    5688:	08 95       	ret

0000568a <__gesf2>:
    568a:	8a df       	rcall	.-236    	; 0x55a0 <__fp_cmp>
    568c:	08 f4       	brcc	.+2      	; 0x5690 <__gesf2+0x6>
    568e:	8f ef       	ldi	r24, 0xFF	; 255
    5690:	08 95       	ret

00005692 <__mulsf3>:
    5692:	0b d0       	rcall	.+22     	; 0x56aa <__mulsf3x>
    5694:	c0 cf       	rjmp	.-128    	; 0x5616 <__fp_round>
    5696:	b1 df       	rcall	.-158    	; 0x55fa <__fp_pscA>
    5698:	28 f0       	brcs	.+10     	; 0x56a4 <__mulsf3+0x12>
    569a:	b6 df       	rcall	.-148    	; 0x5608 <__fp_pscB>
    569c:	18 f0       	brcs	.+6      	; 0x56a4 <__mulsf3+0x12>
    569e:	95 23       	and	r25, r21
    56a0:	09 f0       	breq	.+2      	; 0x56a4 <__mulsf3+0x12>
    56a2:	a2 cf       	rjmp	.-188    	; 0x55e8 <__fp_inf>
    56a4:	a7 cf       	rjmp	.-178    	; 0x55f4 <__fp_nan>
    56a6:	11 24       	eor	r1, r1
    56a8:	ea cf       	rjmp	.-44     	; 0x567e <__fp_szero>

000056aa <__mulsf3x>:
    56aa:	c6 df       	rcall	.-116    	; 0x5638 <__fp_split3>
    56ac:	a0 f3       	brcs	.-24     	; 0x5696 <__mulsf3+0x4>

000056ae <__mulsf3_pse>:
    56ae:	95 9f       	mul	r25, r21
    56b0:	d1 f3       	breq	.-12     	; 0x56a6 <__mulsf3+0x14>
    56b2:	95 0f       	add	r25, r21
    56b4:	50 e0       	ldi	r21, 0x00	; 0
    56b6:	55 1f       	adc	r21, r21
    56b8:	62 9f       	mul	r22, r18
    56ba:	f0 01       	movw	r30, r0
    56bc:	72 9f       	mul	r23, r18
    56be:	bb 27       	eor	r27, r27
    56c0:	f0 0d       	add	r31, r0
    56c2:	b1 1d       	adc	r27, r1
    56c4:	63 9f       	mul	r22, r19
    56c6:	aa 27       	eor	r26, r26
    56c8:	f0 0d       	add	r31, r0
    56ca:	b1 1d       	adc	r27, r1
    56cc:	aa 1f       	adc	r26, r26
    56ce:	64 9f       	mul	r22, r20
    56d0:	66 27       	eor	r22, r22
    56d2:	b0 0d       	add	r27, r0
    56d4:	a1 1d       	adc	r26, r1
    56d6:	66 1f       	adc	r22, r22
    56d8:	82 9f       	mul	r24, r18
    56da:	22 27       	eor	r18, r18
    56dc:	b0 0d       	add	r27, r0
    56de:	a1 1d       	adc	r26, r1
    56e0:	62 1f       	adc	r22, r18
    56e2:	73 9f       	mul	r23, r19
    56e4:	b0 0d       	add	r27, r0
    56e6:	a1 1d       	adc	r26, r1
    56e8:	62 1f       	adc	r22, r18
    56ea:	83 9f       	mul	r24, r19
    56ec:	a0 0d       	add	r26, r0
    56ee:	61 1d       	adc	r22, r1
    56f0:	22 1f       	adc	r18, r18
    56f2:	74 9f       	mul	r23, r20
    56f4:	33 27       	eor	r19, r19
    56f6:	a0 0d       	add	r26, r0
    56f8:	61 1d       	adc	r22, r1
    56fa:	23 1f       	adc	r18, r19
    56fc:	84 9f       	mul	r24, r20
    56fe:	60 0d       	add	r22, r0
    5700:	21 1d       	adc	r18, r1
    5702:	82 2f       	mov	r24, r18
    5704:	76 2f       	mov	r23, r22
    5706:	6a 2f       	mov	r22, r26
    5708:	11 24       	eor	r1, r1
    570a:	9f 57       	subi	r25, 0x7F	; 127
    570c:	50 40       	sbci	r21, 0x00	; 0
    570e:	8a f0       	brmi	.+34     	; 0x5732 <__mulsf3_pse+0x84>
    5710:	e1 f0       	breq	.+56     	; 0x574a <__mulsf3_pse+0x9c>
    5712:	88 23       	and	r24, r24
    5714:	4a f0       	brmi	.+18     	; 0x5728 <__mulsf3_pse+0x7a>
    5716:	ee 0f       	add	r30, r30
    5718:	ff 1f       	adc	r31, r31
    571a:	bb 1f       	adc	r27, r27
    571c:	66 1f       	adc	r22, r22
    571e:	77 1f       	adc	r23, r23
    5720:	88 1f       	adc	r24, r24
    5722:	91 50       	subi	r25, 0x01	; 1
    5724:	50 40       	sbci	r21, 0x00	; 0
    5726:	a9 f7       	brne	.-22     	; 0x5712 <__mulsf3_pse+0x64>
    5728:	9e 3f       	cpi	r25, 0xFE	; 254
    572a:	51 05       	cpc	r21, r1
    572c:	70 f0       	brcs	.+28     	; 0x574a <__mulsf3_pse+0x9c>
    572e:	5c cf       	rjmp	.-328    	; 0x55e8 <__fp_inf>
    5730:	a6 cf       	rjmp	.-180    	; 0x567e <__fp_szero>
    5732:	5f 3f       	cpi	r21, 0xFF	; 255
    5734:	ec f3       	brlt	.-6      	; 0x5730 <__mulsf3_pse+0x82>
    5736:	98 3e       	cpi	r25, 0xE8	; 232
    5738:	dc f3       	brlt	.-10     	; 0x5730 <__mulsf3_pse+0x82>
    573a:	86 95       	lsr	r24
    573c:	77 95       	ror	r23
    573e:	67 95       	ror	r22
    5740:	b7 95       	ror	r27
    5742:	f7 95       	ror	r31
    5744:	e7 95       	ror	r30
    5746:	9f 5f       	subi	r25, 0xFF	; 255
    5748:	c1 f7       	brne	.-16     	; 0x573a <__mulsf3_pse+0x8c>
    574a:	fe 2b       	or	r31, r30
    574c:	88 0f       	add	r24, r24
    574e:	91 1d       	adc	r25, r1
    5750:	96 95       	lsr	r25
    5752:	87 95       	ror	r24
    5754:	97 f9       	bld	r25, 7
    5756:	08 95       	ret

00005758 <pow>:
    5758:	fa 01       	movw	r30, r20
    575a:	ee 0f       	add	r30, r30
    575c:	ff 1f       	adc	r31, r31
    575e:	30 96       	adiw	r30, 0x00	; 0
    5760:	21 05       	cpc	r18, r1
    5762:	31 05       	cpc	r19, r1
    5764:	99 f1       	breq	.+102    	; 0x57cc <pow+0x74>
    5766:	61 15       	cp	r22, r1
    5768:	71 05       	cpc	r23, r1
    576a:	61 f4       	brne	.+24     	; 0x5784 <pow+0x2c>
    576c:	80 38       	cpi	r24, 0x80	; 128
    576e:	bf e3       	ldi	r27, 0x3F	; 63
    5770:	9b 07       	cpc	r25, r27
    5772:	49 f1       	breq	.+82     	; 0x57c6 <pow+0x6e>
    5774:	68 94       	set
    5776:	90 38       	cpi	r25, 0x80	; 128
    5778:	81 05       	cpc	r24, r1
    577a:	61 f0       	breq	.+24     	; 0x5794 <pow+0x3c>
    577c:	80 38       	cpi	r24, 0x80	; 128
    577e:	bf ef       	ldi	r27, 0xFF	; 255
    5780:	9b 07       	cpc	r25, r27
    5782:	41 f0       	breq	.+16     	; 0x5794 <pow+0x3c>
    5784:	99 23       	and	r25, r25
    5786:	42 f5       	brpl	.+80     	; 0x57d8 <pow+0x80>
    5788:	ff 3f       	cpi	r31, 0xFF	; 255
    578a:	e1 05       	cpc	r30, r1
    578c:	31 05       	cpc	r19, r1
    578e:	21 05       	cpc	r18, r1
    5790:	11 f1       	breq	.+68     	; 0x57d6 <pow+0x7e>
    5792:	e8 94       	clt
    5794:	08 94       	sec
    5796:	e7 95       	ror	r30
    5798:	d9 01       	movw	r26, r18
    579a:	aa 23       	and	r26, r26
    579c:	29 f4       	brne	.+10     	; 0x57a8 <pow+0x50>
    579e:	ab 2f       	mov	r26, r27
    57a0:	be 2f       	mov	r27, r30
    57a2:	f8 5f       	subi	r31, 0xF8	; 248
    57a4:	d0 f3       	brcs	.-12     	; 0x579a <pow+0x42>
    57a6:	10 c0       	rjmp	.+32     	; 0x57c8 <pow+0x70>
    57a8:	ff 5f       	subi	r31, 0xFF	; 255
    57aa:	70 f4       	brcc	.+28     	; 0x57c8 <pow+0x70>
    57ac:	a6 95       	lsr	r26
    57ae:	e0 f7       	brcc	.-8      	; 0x57a8 <pow+0x50>
    57b0:	f7 39       	cpi	r31, 0x97	; 151
    57b2:	50 f0       	brcs	.+20     	; 0x57c8 <pow+0x70>
    57b4:	19 f0       	breq	.+6      	; 0x57bc <pow+0x64>
    57b6:	ff 3a       	cpi	r31, 0xAF	; 175
    57b8:	38 f4       	brcc	.+14     	; 0x57c8 <pow+0x70>
    57ba:	9f 77       	andi	r25, 0x7F	; 127
    57bc:	9f 93       	push	r25
    57be:	0c d0       	rcall	.+24     	; 0x57d8 <pow+0x80>
    57c0:	0f 90       	pop	r0
    57c2:	07 fc       	sbrc	r0, 7
    57c4:	90 58       	subi	r25, 0x80	; 128
    57c6:	08 95       	ret
    57c8:	3e f0       	brts	.+14     	; 0x57d8 <pow+0x80>
    57ca:	14 cf       	rjmp	.-472    	; 0x55f4 <__fp_nan>
    57cc:	60 e0       	ldi	r22, 0x00	; 0
    57ce:	70 e0       	ldi	r23, 0x00	; 0
    57d0:	80 e8       	ldi	r24, 0x80	; 128
    57d2:	9f e3       	ldi	r25, 0x3F	; 63
    57d4:	08 95       	ret
    57d6:	4f e7       	ldi	r20, 0x7F	; 127
    57d8:	9f 77       	andi	r25, 0x7F	; 127
    57da:	5f 93       	push	r21
    57dc:	4f 93       	push	r20
    57de:	3f 93       	push	r19
    57e0:	2f 93       	push	r18
    57e2:	9e d0       	rcall	.+316    	; 0x5920 <log>
    57e4:	2f 91       	pop	r18
    57e6:	3f 91       	pop	r19
    57e8:	4f 91       	pop	r20
    57ea:	5f 91       	pop	r21
    57ec:	52 df       	rcall	.-348    	; 0x5692 <__mulsf3>
    57ee:	05 c0       	rjmp	.+10     	; 0x57fa <exp>
    57f0:	19 f4       	brne	.+6      	; 0x57f8 <pow+0xa0>
    57f2:	0e f0       	brts	.+2      	; 0x57f6 <pow+0x9e>
    57f4:	f9 ce       	rjmp	.-526    	; 0x55e8 <__fp_inf>
    57f6:	42 cf       	rjmp	.-380    	; 0x567c <__fp_zero>
    57f8:	fd ce       	rjmp	.-518    	; 0x55f4 <__fp_nan>

000057fa <exp>:
    57fa:	26 df       	rcall	.-436    	; 0x5648 <__fp_splitA>
    57fc:	c8 f3       	brcs	.-14     	; 0x57f0 <pow+0x98>
    57fe:	96 38       	cpi	r25, 0x86	; 134
    5800:	c0 f7       	brcc	.-16     	; 0x57f2 <pow+0x9a>
    5802:	07 f8       	bld	r0, 7
    5804:	0f 92       	push	r0
    5806:	e8 94       	clt
    5808:	2b e3       	ldi	r18, 0x3B	; 59
    580a:	3a ea       	ldi	r19, 0xAA	; 170
    580c:	48 eb       	ldi	r20, 0xB8	; 184
    580e:	5f e7       	ldi	r21, 0x7F	; 127
    5810:	4e df       	rcall	.-356    	; 0x56ae <__mulsf3_pse>
    5812:	0f 92       	push	r0
    5814:	0f 92       	push	r0
    5816:	0f 92       	push	r0
    5818:	4d b7       	in	r20, 0x3d	; 61
    581a:	5e b7       	in	r21, 0x3e	; 62
    581c:	0f 92       	push	r0
    581e:	c0 d0       	rcall	.+384    	; 0x59a0 <modf>
    5820:	e8 e2       	ldi	r30, 0x28	; 40
    5822:	f1 e0       	ldi	r31, 0x01	; 1
    5824:	16 d0       	rcall	.+44     	; 0x5852 <__fp_powser>
    5826:	4f 91       	pop	r20
    5828:	5f 91       	pop	r21
    582a:	ef 91       	pop	r30
    582c:	ff 91       	pop	r31
    582e:	e5 95       	asr	r30
    5830:	ee 1f       	adc	r30, r30
    5832:	ff 1f       	adc	r31, r31
    5834:	49 f0       	breq	.+18     	; 0x5848 <exp+0x4e>
    5836:	fe 57       	subi	r31, 0x7E	; 126
    5838:	e0 68       	ori	r30, 0x80	; 128
    583a:	44 27       	eor	r20, r20
    583c:	ee 0f       	add	r30, r30
    583e:	44 1f       	adc	r20, r20
    5840:	fa 95       	dec	r31
    5842:	e1 f7       	brne	.-8      	; 0x583c <exp+0x42>
    5844:	41 95       	neg	r20
    5846:	55 0b       	sbc	r21, r21
    5848:	32 d0       	rcall	.+100    	; 0x58ae <ldexp>
    584a:	0f 90       	pop	r0
    584c:	07 fe       	sbrs	r0, 7
    584e:	26 c0       	rjmp	.+76     	; 0x589c <inverse>
    5850:	08 95       	ret

00005852 <__fp_powser>:
    5852:	df 93       	push	r29
    5854:	cf 93       	push	r28
    5856:	1f 93       	push	r17
    5858:	0f 93       	push	r16
    585a:	ff 92       	push	r15
    585c:	ef 92       	push	r14
    585e:	df 92       	push	r13
    5860:	7b 01       	movw	r14, r22
    5862:	8c 01       	movw	r16, r24
    5864:	68 94       	set
    5866:	05 c0       	rjmp	.+10     	; 0x5872 <__fp_powser+0x20>
    5868:	da 2e       	mov	r13, r26
    586a:	ef 01       	movw	r28, r30
    586c:	1e df       	rcall	.-452    	; 0x56aa <__mulsf3x>
    586e:	fe 01       	movw	r30, r28
    5870:	e8 94       	clt
    5872:	a5 91       	lpm	r26, Z+
    5874:	25 91       	lpm	r18, Z+
    5876:	35 91       	lpm	r19, Z+
    5878:	45 91       	lpm	r20, Z+
    587a:	55 91       	lpm	r21, Z+
    587c:	ae f3       	brts	.-22     	; 0x5868 <__fp_powser+0x16>
    587e:	ef 01       	movw	r28, r30
    5880:	62 dd       	rcall	.-1340   	; 0x5346 <__addsf3x>
    5882:	fe 01       	movw	r30, r28
    5884:	97 01       	movw	r18, r14
    5886:	a8 01       	movw	r20, r16
    5888:	da 94       	dec	r13
    588a:	79 f7       	brne	.-34     	; 0x586a <__fp_powser+0x18>
    588c:	df 90       	pop	r13
    588e:	ef 90       	pop	r14
    5890:	ff 90       	pop	r15
    5892:	0f 91       	pop	r16
    5894:	1f 91       	pop	r17
    5896:	cf 91       	pop	r28
    5898:	df 91       	pop	r29
    589a:	08 95       	ret

0000589c <inverse>:
    589c:	9b 01       	movw	r18, r22
    589e:	ac 01       	movw	r20, r24
    58a0:	60 e0       	ldi	r22, 0x00	; 0
    58a2:	70 e0       	ldi	r23, 0x00	; 0
    58a4:	80 e8       	ldi	r24, 0x80	; 128
    58a6:	9f e3       	ldi	r25, 0x3F	; 63
    58a8:	a5 cd       	rjmp	.-1206   	; 0x53f4 <__divsf3>
    58aa:	9e ce       	rjmp	.-708    	; 0x55e8 <__fp_inf>
    58ac:	ac c0       	rjmp	.+344    	; 0x5a06 <__fp_mpack>

000058ae <ldexp>:
    58ae:	cc de       	rcall	.-616    	; 0x5648 <__fp_splitA>
    58b0:	e8 f3       	brcs	.-6      	; 0x58ac <inverse+0x10>
    58b2:	99 23       	and	r25, r25
    58b4:	d9 f3       	breq	.-10     	; 0x58ac <inverse+0x10>
    58b6:	94 0f       	add	r25, r20
    58b8:	51 1d       	adc	r21, r1
    58ba:	bb f3       	brvs	.-18     	; 0x58aa <inverse+0xe>
    58bc:	91 50       	subi	r25, 0x01	; 1
    58be:	50 40       	sbci	r21, 0x00	; 0
    58c0:	94 f0       	brlt	.+36     	; 0x58e6 <ldexp+0x38>
    58c2:	59 f0       	breq	.+22     	; 0x58da <ldexp+0x2c>
    58c4:	88 23       	and	r24, r24
    58c6:	32 f0       	brmi	.+12     	; 0x58d4 <ldexp+0x26>
    58c8:	66 0f       	add	r22, r22
    58ca:	77 1f       	adc	r23, r23
    58cc:	88 1f       	adc	r24, r24
    58ce:	91 50       	subi	r25, 0x01	; 1
    58d0:	50 40       	sbci	r21, 0x00	; 0
    58d2:	c1 f7       	brne	.-16     	; 0x58c4 <ldexp+0x16>
    58d4:	9e 3f       	cpi	r25, 0xFE	; 254
    58d6:	51 05       	cpc	r21, r1
    58d8:	44 f7       	brge	.-48     	; 0x58aa <inverse+0xe>
    58da:	88 0f       	add	r24, r24
    58dc:	91 1d       	adc	r25, r1
    58de:	96 95       	lsr	r25
    58e0:	87 95       	ror	r24
    58e2:	97 f9       	bld	r25, 7
    58e4:	08 95       	ret
    58e6:	5f 3f       	cpi	r21, 0xFF	; 255
    58e8:	ac f0       	brlt	.+42     	; 0x5914 <ldexp+0x66>
    58ea:	98 3e       	cpi	r25, 0xE8	; 232
    58ec:	9c f0       	brlt	.+38     	; 0x5914 <ldexp+0x66>
    58ee:	bb 27       	eor	r27, r27
    58f0:	86 95       	lsr	r24
    58f2:	77 95       	ror	r23
    58f4:	67 95       	ror	r22
    58f6:	b7 95       	ror	r27
    58f8:	08 f4       	brcc	.+2      	; 0x58fc <ldexp+0x4e>
    58fa:	b1 60       	ori	r27, 0x01	; 1
    58fc:	93 95       	inc	r25
    58fe:	c1 f7       	brne	.-16     	; 0x58f0 <ldexp+0x42>
    5900:	bb 0f       	add	r27, r27
    5902:	58 f7       	brcc	.-42     	; 0x58da <ldexp+0x2c>
    5904:	11 f4       	brne	.+4      	; 0x590a <ldexp+0x5c>
    5906:	60 ff       	sbrs	r22, 0
    5908:	e8 cf       	rjmp	.-48     	; 0x58da <ldexp+0x2c>
    590a:	6f 5f       	subi	r22, 0xFF	; 255
    590c:	7f 4f       	sbci	r23, 0xFF	; 255
    590e:	8f 4f       	sbci	r24, 0xFF	; 255
    5910:	9f 4f       	sbci	r25, 0xFF	; 255
    5912:	e3 cf       	rjmp	.-58     	; 0x58da <ldexp+0x2c>
    5914:	b4 ce       	rjmp	.-664    	; 0x567e <__fp_szero>
    5916:	0e f0       	brts	.+2      	; 0x591a <ldexp+0x6c>
    5918:	76 c0       	rjmp	.+236    	; 0x5a06 <__fp_mpack>
    591a:	6c ce       	rjmp	.-808    	; 0x55f4 <__fp_nan>
    591c:	68 94       	set
    591e:	64 ce       	rjmp	.-824    	; 0x55e8 <__fp_inf>

00005920 <log>:
    5920:	93 de       	rcall	.-730    	; 0x5648 <__fp_splitA>
    5922:	c8 f3       	brcs	.-14     	; 0x5916 <ldexp+0x68>
    5924:	99 23       	and	r25, r25
    5926:	d1 f3       	breq	.-12     	; 0x591c <ldexp+0x6e>
    5928:	c6 f3       	brts	.-16     	; 0x591a <ldexp+0x6c>
    592a:	df 93       	push	r29
    592c:	cf 93       	push	r28
    592e:	1f 93       	push	r17
    5930:	0f 93       	push	r16
    5932:	ff 92       	push	r15
    5934:	c9 2f       	mov	r28, r25
    5936:	dd 27       	eor	r29, r29
    5938:	88 23       	and	r24, r24
    593a:	2a f0       	brmi	.+10     	; 0x5946 <log+0x26>
    593c:	21 97       	sbiw	r28, 0x01	; 1
    593e:	66 0f       	add	r22, r22
    5940:	77 1f       	adc	r23, r23
    5942:	88 1f       	adc	r24, r24
    5944:	da f7       	brpl	.-10     	; 0x593c <log+0x1c>
    5946:	20 e0       	ldi	r18, 0x00	; 0
    5948:	30 e0       	ldi	r19, 0x00	; 0
    594a:	40 e8       	ldi	r20, 0x80	; 128
    594c:	5f eb       	ldi	r21, 0xBF	; 191
    594e:	9f e3       	ldi	r25, 0x3F	; 63
    5950:	88 39       	cpi	r24, 0x98	; 152
    5952:	20 f0       	brcs	.+8      	; 0x595c <log+0x3c>
    5954:	80 3e       	cpi	r24, 0xE0	; 224
    5956:	30 f0       	brcs	.+12     	; 0x5964 <log+0x44>
    5958:	21 96       	adiw	r28, 0x01	; 1
    595a:	8f 77       	andi	r24, 0x7F	; 127
    595c:	e3 dc       	rcall	.-1594   	; 0x5324 <__addsf3>
    595e:	e0 e5       	ldi	r30, 0x50	; 80
    5960:	f1 e0       	ldi	r31, 0x01	; 1
    5962:	03 c0       	rjmp	.+6      	; 0x596a <log+0x4a>
    5964:	df dc       	rcall	.-1602   	; 0x5324 <__addsf3>
    5966:	ed e7       	ldi	r30, 0x7D	; 125
    5968:	f1 e0       	ldi	r31, 0x01	; 1
    596a:	73 df       	rcall	.-282    	; 0x5852 <__fp_powser>
    596c:	8b 01       	movw	r16, r22
    596e:	be 01       	movw	r22, r28
    5970:	ec 01       	movw	r28, r24
    5972:	fb 2e       	mov	r15, r27
    5974:	6f 57       	subi	r22, 0x7F	; 127
    5976:	71 09       	sbc	r23, r1
    5978:	75 95       	asr	r23
    597a:	77 1f       	adc	r23, r23
    597c:	88 0b       	sbc	r24, r24
    597e:	99 0b       	sbc	r25, r25
    5980:	d4 dd       	rcall	.-1112   	; 0x552a <__floatsisf>
    5982:	28 e1       	ldi	r18, 0x18	; 24
    5984:	32 e7       	ldi	r19, 0x72	; 114
    5986:	41 e3       	ldi	r20, 0x31	; 49
    5988:	5f e3       	ldi	r21, 0x3F	; 63
    598a:	8f de       	rcall	.-738    	; 0x56aa <__mulsf3x>
    598c:	af 2d       	mov	r26, r15
    598e:	98 01       	movw	r18, r16
    5990:	ae 01       	movw	r20, r28
    5992:	ff 90       	pop	r15
    5994:	0f 91       	pop	r16
    5996:	1f 91       	pop	r17
    5998:	cf 91       	pop	r28
    599a:	df 91       	pop	r29
    599c:	d4 dc       	rcall	.-1624   	; 0x5346 <__addsf3x>
    599e:	3b ce       	rjmp	.-906    	; 0x5616 <__fp_round>

000059a0 <modf>:
    59a0:	fa 01       	movw	r30, r20
    59a2:	dc 01       	movw	r26, r24
    59a4:	aa 0f       	add	r26, r26
    59a6:	bb 1f       	adc	r27, r27
    59a8:	9b 01       	movw	r18, r22
    59aa:	ac 01       	movw	r20, r24
    59ac:	bf 57       	subi	r27, 0x7F	; 127
    59ae:	28 f4       	brcc	.+10     	; 0x59ba <modf+0x1a>
    59b0:	22 27       	eor	r18, r18
    59b2:	33 27       	eor	r19, r19
    59b4:	44 27       	eor	r20, r20
    59b6:	50 78       	andi	r21, 0x80	; 128
    59b8:	1f c0       	rjmp	.+62     	; 0x59f8 <modf+0x58>
    59ba:	b7 51       	subi	r27, 0x17	; 23
    59bc:	88 f4       	brcc	.+34     	; 0x59e0 <modf+0x40>
    59be:	ab 2f       	mov	r26, r27
    59c0:	00 24       	eor	r0, r0
    59c2:	46 95       	lsr	r20
    59c4:	37 95       	ror	r19
    59c6:	27 95       	ror	r18
    59c8:	01 1c       	adc	r0, r1
    59ca:	a3 95       	inc	r26
    59cc:	d2 f3       	brmi	.-12     	; 0x59c2 <modf+0x22>
    59ce:	00 20       	and	r0, r0
    59d0:	69 f0       	breq	.+26     	; 0x59ec <modf+0x4c>
    59d2:	22 0f       	add	r18, r18
    59d4:	33 1f       	adc	r19, r19
    59d6:	44 1f       	adc	r20, r20
    59d8:	b3 95       	inc	r27
    59da:	da f3       	brmi	.-10     	; 0x59d2 <modf+0x32>
    59dc:	0d d0       	rcall	.+26     	; 0x59f8 <modf+0x58>
    59de:	a1 cc       	rjmp	.-1726   	; 0x5322 <__subsf3>
    59e0:	61 30       	cpi	r22, 0x01	; 1
    59e2:	71 05       	cpc	r23, r1
    59e4:	a0 e8       	ldi	r26, 0x80	; 128
    59e6:	8a 07       	cpc	r24, r26
    59e8:	b9 46       	sbci	r27, 0x69	; 105
    59ea:	30 f4       	brcc	.+12     	; 0x59f8 <modf+0x58>
    59ec:	9b 01       	movw	r18, r22
    59ee:	ac 01       	movw	r20, r24
    59f0:	66 27       	eor	r22, r22
    59f2:	77 27       	eor	r23, r23
    59f4:	88 27       	eor	r24, r24
    59f6:	90 78       	andi	r25, 0x80	; 128
    59f8:	30 96       	adiw	r30, 0x00	; 0
    59fa:	21 f0       	breq	.+8      	; 0x5a04 <modf+0x64>
    59fc:	20 83       	st	Z, r18
    59fe:	31 83       	std	Z+1, r19	; 0x01
    5a00:	42 83       	std	Z+2, r20	; 0x02
    5a02:	53 83       	std	Z+3, r21	; 0x03
    5a04:	08 95       	ret

00005a06 <__fp_mpack>:
    5a06:	9f 3f       	cpi	r25, 0xFF	; 255
    5a08:	31 f0       	breq	.+12     	; 0x5a16 <__fp_mpack_finite+0xc>

00005a0a <__fp_mpack_finite>:
    5a0a:	91 50       	subi	r25, 0x01	; 1
    5a0c:	20 f4       	brcc	.+8      	; 0x5a16 <__fp_mpack_finite+0xc>
    5a0e:	87 95       	ror	r24
    5a10:	77 95       	ror	r23
    5a12:	67 95       	ror	r22
    5a14:	b7 95       	ror	r27
    5a16:	88 0f       	add	r24, r24
    5a18:	91 1d       	adc	r25, r1
    5a1a:	96 95       	lsr	r25
    5a1c:	87 95       	ror	r24
    5a1e:	97 f9       	bld	r25, 7
    5a20:	08 95       	ret

00005a22 <__mulsi3>:
    5a22:	db 01       	movw	r26, r22
    5a24:	8f 93       	push	r24
    5a26:	9f 93       	push	r25
    5a28:	88 d0       	rcall	.+272    	; 0x5b3a <__muluhisi3>
    5a2a:	bf 91       	pop	r27
    5a2c:	af 91       	pop	r26
    5a2e:	a2 9f       	mul	r26, r18
    5a30:	80 0d       	add	r24, r0
    5a32:	91 1d       	adc	r25, r1
    5a34:	a3 9f       	mul	r26, r19
    5a36:	90 0d       	add	r25, r0
    5a38:	b2 9f       	mul	r27, r18
    5a3a:	90 0d       	add	r25, r0
    5a3c:	11 24       	eor	r1, r1
    5a3e:	08 95       	ret

00005a40 <__udivmodhi4>:
    5a40:	aa 1b       	sub	r26, r26
    5a42:	bb 1b       	sub	r27, r27
    5a44:	51 e1       	ldi	r21, 0x11	; 17
    5a46:	07 c0       	rjmp	.+14     	; 0x5a56 <__udivmodhi4_ep>

00005a48 <__udivmodhi4_loop>:
    5a48:	aa 1f       	adc	r26, r26
    5a4a:	bb 1f       	adc	r27, r27
    5a4c:	a6 17       	cp	r26, r22
    5a4e:	b7 07       	cpc	r27, r23
    5a50:	10 f0       	brcs	.+4      	; 0x5a56 <__udivmodhi4_ep>
    5a52:	a6 1b       	sub	r26, r22
    5a54:	b7 0b       	sbc	r27, r23

00005a56 <__udivmodhi4_ep>:
    5a56:	88 1f       	adc	r24, r24
    5a58:	99 1f       	adc	r25, r25
    5a5a:	5a 95       	dec	r21
    5a5c:	a9 f7       	brne	.-22     	; 0x5a48 <__udivmodhi4_loop>
    5a5e:	80 95       	com	r24
    5a60:	90 95       	com	r25
    5a62:	bc 01       	movw	r22, r24
    5a64:	cd 01       	movw	r24, r26
    5a66:	08 95       	ret

00005a68 <__divmodhi4>:
    5a68:	97 fb       	bst	r25, 7
    5a6a:	07 2e       	mov	r0, r23
    5a6c:	16 f4       	brtc	.+4      	; 0x5a72 <__divmodhi4+0xa>
    5a6e:	00 94       	com	r0
    5a70:	06 d0       	rcall	.+12     	; 0x5a7e <__divmodhi4_neg1>
    5a72:	77 fd       	sbrc	r23, 7
    5a74:	08 d0       	rcall	.+16     	; 0x5a86 <__divmodhi4_neg2>
    5a76:	e4 df       	rcall	.-56     	; 0x5a40 <__udivmodhi4>
    5a78:	07 fc       	sbrc	r0, 7
    5a7a:	05 d0       	rcall	.+10     	; 0x5a86 <__divmodhi4_neg2>
    5a7c:	3e f4       	brtc	.+14     	; 0x5a8c <__divmodhi4_exit>

00005a7e <__divmodhi4_neg1>:
    5a7e:	90 95       	com	r25
    5a80:	81 95       	neg	r24
    5a82:	9f 4f       	sbci	r25, 0xFF	; 255
    5a84:	08 95       	ret

00005a86 <__divmodhi4_neg2>:
    5a86:	70 95       	com	r23
    5a88:	61 95       	neg	r22
    5a8a:	7f 4f       	sbci	r23, 0xFF	; 255

00005a8c <__divmodhi4_exit>:
    5a8c:	08 95       	ret

00005a8e <__udivmodsi4>:
    5a8e:	a1 e2       	ldi	r26, 0x21	; 33
    5a90:	1a 2e       	mov	r1, r26
    5a92:	aa 1b       	sub	r26, r26
    5a94:	bb 1b       	sub	r27, r27
    5a96:	fd 01       	movw	r30, r26
    5a98:	0d c0       	rjmp	.+26     	; 0x5ab4 <__udivmodsi4_ep>

00005a9a <__udivmodsi4_loop>:
    5a9a:	aa 1f       	adc	r26, r26
    5a9c:	bb 1f       	adc	r27, r27
    5a9e:	ee 1f       	adc	r30, r30
    5aa0:	ff 1f       	adc	r31, r31
    5aa2:	a2 17       	cp	r26, r18
    5aa4:	b3 07       	cpc	r27, r19
    5aa6:	e4 07       	cpc	r30, r20
    5aa8:	f5 07       	cpc	r31, r21
    5aaa:	20 f0       	brcs	.+8      	; 0x5ab4 <__udivmodsi4_ep>
    5aac:	a2 1b       	sub	r26, r18
    5aae:	b3 0b       	sbc	r27, r19
    5ab0:	e4 0b       	sbc	r30, r20
    5ab2:	f5 0b       	sbc	r31, r21

00005ab4 <__udivmodsi4_ep>:
    5ab4:	66 1f       	adc	r22, r22
    5ab6:	77 1f       	adc	r23, r23
    5ab8:	88 1f       	adc	r24, r24
    5aba:	99 1f       	adc	r25, r25
    5abc:	1a 94       	dec	r1
    5abe:	69 f7       	brne	.-38     	; 0x5a9a <__udivmodsi4_loop>
    5ac0:	60 95       	com	r22
    5ac2:	70 95       	com	r23
    5ac4:	80 95       	com	r24
    5ac6:	90 95       	com	r25
    5ac8:	9b 01       	movw	r18, r22
    5aca:	ac 01       	movw	r20, r24
    5acc:	bd 01       	movw	r22, r26
    5ace:	cf 01       	movw	r24, r30
    5ad0:	08 95       	ret

00005ad2 <__divmodsi4>:
    5ad2:	05 2e       	mov	r0, r21
    5ad4:	97 fb       	bst	r25, 7
    5ad6:	16 f4       	brtc	.+4      	; 0x5adc <__divmodsi4+0xa>
    5ad8:	00 94       	com	r0
    5ada:	0f d0       	rcall	.+30     	; 0x5afa <__negsi2>
    5adc:	57 fd       	sbrc	r21, 7
    5ade:	05 d0       	rcall	.+10     	; 0x5aea <__divmodsi4_neg2>
    5ae0:	d6 df       	rcall	.-84     	; 0x5a8e <__udivmodsi4>
    5ae2:	07 fc       	sbrc	r0, 7
    5ae4:	02 d0       	rcall	.+4      	; 0x5aea <__divmodsi4_neg2>
    5ae6:	46 f4       	brtc	.+16     	; 0x5af8 <__divmodsi4_exit>
    5ae8:	08 c0       	rjmp	.+16     	; 0x5afa <__negsi2>

00005aea <__divmodsi4_neg2>:
    5aea:	50 95       	com	r21
    5aec:	40 95       	com	r20
    5aee:	30 95       	com	r19
    5af0:	21 95       	neg	r18
    5af2:	3f 4f       	sbci	r19, 0xFF	; 255
    5af4:	4f 4f       	sbci	r20, 0xFF	; 255
    5af6:	5f 4f       	sbci	r21, 0xFF	; 255

00005af8 <__divmodsi4_exit>:
    5af8:	08 95       	ret

00005afa <__negsi2>:
    5afa:	90 95       	com	r25
    5afc:	80 95       	com	r24
    5afe:	70 95       	com	r23
    5b00:	61 95       	neg	r22
    5b02:	7f 4f       	sbci	r23, 0xFF	; 255
    5b04:	8f 4f       	sbci	r24, 0xFF	; 255
    5b06:	9f 4f       	sbci	r25, 0xFF	; 255
    5b08:	08 95       	ret

00005b0a <__tablejump2__>:
    5b0a:	ee 0f       	add	r30, r30
    5b0c:	ff 1f       	adc	r31, r31
    5b0e:	00 24       	eor	r0, r0
    5b10:	00 1c       	adc	r0, r0
    5b12:	0b be       	out	0x3b, r0	; 59
    5b14:	07 90       	elpm	r0, Z+
    5b16:	f6 91       	elpm	r31, Z
    5b18:	e0 2d       	mov	r30, r0
    5b1a:	09 94       	ijmp

00005b1c <__umulhisi3>:
    5b1c:	a2 9f       	mul	r26, r18
    5b1e:	b0 01       	movw	r22, r0
    5b20:	b3 9f       	mul	r27, r19
    5b22:	c0 01       	movw	r24, r0
    5b24:	a3 9f       	mul	r26, r19
    5b26:	70 0d       	add	r23, r0
    5b28:	81 1d       	adc	r24, r1
    5b2a:	11 24       	eor	r1, r1
    5b2c:	91 1d       	adc	r25, r1
    5b2e:	b2 9f       	mul	r27, r18
    5b30:	70 0d       	add	r23, r0
    5b32:	81 1d       	adc	r24, r1
    5b34:	11 24       	eor	r1, r1
    5b36:	91 1d       	adc	r25, r1
    5b38:	08 95       	ret

00005b3a <__muluhisi3>:
    5b3a:	f0 df       	rcall	.-32     	; 0x5b1c <__umulhisi3>
    5b3c:	a5 9f       	mul	r26, r21
    5b3e:	90 0d       	add	r25, r0
    5b40:	b4 9f       	mul	r27, r20
    5b42:	90 0d       	add	r25, r0
    5b44:	a4 9f       	mul	r26, r20
    5b46:	80 0d       	add	r24, r0
    5b48:	91 1d       	adc	r25, r1
    5b4a:	11 24       	eor	r1, r1
    5b4c:	08 95       	ret

00005b4e <vsnprintf>:
    5b4e:	0f 93       	push	r16
    5b50:	1f 93       	push	r17
    5b52:	cf 93       	push	r28
    5b54:	df 93       	push	r29
    5b56:	cd b7       	in	r28, 0x3d	; 61
    5b58:	de b7       	in	r29, 0x3e	; 62
    5b5a:	2e 97       	sbiw	r28, 0x0e	; 14
    5b5c:	0f b6       	in	r0, 0x3f	; 63
    5b5e:	f8 94       	cli
    5b60:	de bf       	out	0x3e, r29	; 62
    5b62:	0f be       	out	0x3f, r0	; 63
    5b64:	cd bf       	out	0x3d, r28	; 61
    5b66:	8c 01       	movw	r16, r24
    5b68:	fa 01       	movw	r30, r20
    5b6a:	86 e0       	ldi	r24, 0x06	; 6
    5b6c:	8c 83       	std	Y+4, r24	; 0x04
    5b6e:	1a 83       	std	Y+2, r17	; 0x02
    5b70:	09 83       	std	Y+1, r16	; 0x01
    5b72:	77 ff       	sbrs	r23, 7
    5b74:	02 c0       	rjmp	.+4      	; 0x5b7a <vsnprintf+0x2c>
    5b76:	60 e0       	ldi	r22, 0x00	; 0
    5b78:	70 e8       	ldi	r23, 0x80	; 128
    5b7a:	cb 01       	movw	r24, r22
    5b7c:	01 97       	sbiw	r24, 0x01	; 1
    5b7e:	9e 83       	std	Y+6, r25	; 0x06
    5b80:	8d 83       	std	Y+5, r24	; 0x05
    5b82:	a9 01       	movw	r20, r18
    5b84:	bf 01       	movw	r22, r30
    5b86:	ce 01       	movw	r24, r28
    5b88:	01 96       	adiw	r24, 0x01	; 1
    5b8a:	19 d0       	rcall	.+50     	; 0x5bbe <vfprintf>
    5b8c:	4d 81       	ldd	r20, Y+5	; 0x05
    5b8e:	5e 81       	ldd	r21, Y+6	; 0x06
    5b90:	57 fd       	sbrc	r21, 7
    5b92:	0a c0       	rjmp	.+20     	; 0x5ba8 <vsnprintf+0x5a>
    5b94:	2f 81       	ldd	r18, Y+7	; 0x07
    5b96:	38 85       	ldd	r19, Y+8	; 0x08
    5b98:	42 17       	cp	r20, r18
    5b9a:	53 07       	cpc	r21, r19
    5b9c:	0c f4       	brge	.+2      	; 0x5ba0 <vsnprintf+0x52>
    5b9e:	9a 01       	movw	r18, r20
    5ba0:	f8 01       	movw	r30, r16
    5ba2:	e2 0f       	add	r30, r18
    5ba4:	f3 1f       	adc	r31, r19
    5ba6:	10 82       	st	Z, r1
    5ba8:	2e 96       	adiw	r28, 0x0e	; 14
    5baa:	0f b6       	in	r0, 0x3f	; 63
    5bac:	f8 94       	cli
    5bae:	de bf       	out	0x3e, r29	; 62
    5bb0:	0f be       	out	0x3f, r0	; 63
    5bb2:	cd bf       	out	0x3d, r28	; 61
    5bb4:	df 91       	pop	r29
    5bb6:	cf 91       	pop	r28
    5bb8:	1f 91       	pop	r17
    5bba:	0f 91       	pop	r16
    5bbc:	08 95       	ret

00005bbe <vfprintf>:
    5bbe:	2f 92       	push	r2
    5bc0:	3f 92       	push	r3
    5bc2:	4f 92       	push	r4
    5bc4:	5f 92       	push	r5
    5bc6:	6f 92       	push	r6
    5bc8:	7f 92       	push	r7
    5bca:	8f 92       	push	r8
    5bcc:	9f 92       	push	r9
    5bce:	af 92       	push	r10
    5bd0:	bf 92       	push	r11
    5bd2:	cf 92       	push	r12
    5bd4:	df 92       	push	r13
    5bd6:	ef 92       	push	r14
    5bd8:	ff 92       	push	r15
    5bda:	0f 93       	push	r16
    5bdc:	1f 93       	push	r17
    5bde:	cf 93       	push	r28
    5be0:	df 93       	push	r29
    5be2:	cd b7       	in	r28, 0x3d	; 61
    5be4:	de b7       	in	r29, 0x3e	; 62
    5be6:	2b 97       	sbiw	r28, 0x0b	; 11
    5be8:	0f b6       	in	r0, 0x3f	; 63
    5bea:	f8 94       	cli
    5bec:	de bf       	out	0x3e, r29	; 62
    5bee:	0f be       	out	0x3f, r0	; 63
    5bf0:	cd bf       	out	0x3d, r28	; 61
    5bf2:	6c 01       	movw	r12, r24
    5bf4:	7b 01       	movw	r14, r22
    5bf6:	8a 01       	movw	r16, r20
    5bf8:	fc 01       	movw	r30, r24
    5bfa:	17 82       	std	Z+7, r1	; 0x07
    5bfc:	16 82       	std	Z+6, r1	; 0x06
    5bfe:	83 81       	ldd	r24, Z+3	; 0x03
    5c00:	81 ff       	sbrs	r24, 1
    5c02:	bf c1       	rjmp	.+894    	; 0x5f82 <vfprintf+0x3c4>
    5c04:	ce 01       	movw	r24, r28
    5c06:	01 96       	adiw	r24, 0x01	; 1
    5c08:	3c 01       	movw	r6, r24
    5c0a:	f6 01       	movw	r30, r12
    5c0c:	93 81       	ldd	r25, Z+3	; 0x03
    5c0e:	f7 01       	movw	r30, r14
    5c10:	93 fd       	sbrc	r25, 3
    5c12:	85 91       	lpm	r24, Z+
    5c14:	93 ff       	sbrs	r25, 3
    5c16:	81 91       	ld	r24, Z+
    5c18:	7f 01       	movw	r14, r30
    5c1a:	88 23       	and	r24, r24
    5c1c:	09 f4       	brne	.+2      	; 0x5c20 <vfprintf+0x62>
    5c1e:	ad c1       	rjmp	.+858    	; 0x5f7a <vfprintf+0x3bc>
    5c20:	85 32       	cpi	r24, 0x25	; 37
    5c22:	39 f4       	brne	.+14     	; 0x5c32 <vfprintf+0x74>
    5c24:	93 fd       	sbrc	r25, 3
    5c26:	85 91       	lpm	r24, Z+
    5c28:	93 ff       	sbrs	r25, 3
    5c2a:	81 91       	ld	r24, Z+
    5c2c:	7f 01       	movw	r14, r30
    5c2e:	85 32       	cpi	r24, 0x25	; 37
    5c30:	21 f4       	brne	.+8      	; 0x5c3a <vfprintf+0x7c>
    5c32:	b6 01       	movw	r22, r12
    5c34:	90 e0       	ldi	r25, 0x00	; 0
    5c36:	d6 d1       	rcall	.+940    	; 0x5fe4 <fputc>
    5c38:	e8 cf       	rjmp	.-48     	; 0x5c0a <vfprintf+0x4c>
    5c3a:	91 2c       	mov	r9, r1
    5c3c:	21 2c       	mov	r2, r1
    5c3e:	31 2c       	mov	r3, r1
    5c40:	ff e1       	ldi	r31, 0x1F	; 31
    5c42:	f3 15       	cp	r31, r3
    5c44:	d8 f0       	brcs	.+54     	; 0x5c7c <vfprintf+0xbe>
    5c46:	8b 32       	cpi	r24, 0x2B	; 43
    5c48:	79 f0       	breq	.+30     	; 0x5c68 <vfprintf+0xaa>
    5c4a:	38 f4       	brcc	.+14     	; 0x5c5a <vfprintf+0x9c>
    5c4c:	80 32       	cpi	r24, 0x20	; 32
    5c4e:	79 f0       	breq	.+30     	; 0x5c6e <vfprintf+0xb0>
    5c50:	83 32       	cpi	r24, 0x23	; 35
    5c52:	a1 f4       	brne	.+40     	; 0x5c7c <vfprintf+0xbe>
    5c54:	23 2d       	mov	r18, r3
    5c56:	20 61       	ori	r18, 0x10	; 16
    5c58:	1d c0       	rjmp	.+58     	; 0x5c94 <vfprintf+0xd6>
    5c5a:	8d 32       	cpi	r24, 0x2D	; 45
    5c5c:	61 f0       	breq	.+24     	; 0x5c76 <vfprintf+0xb8>
    5c5e:	80 33       	cpi	r24, 0x30	; 48
    5c60:	69 f4       	brne	.+26     	; 0x5c7c <vfprintf+0xbe>
    5c62:	23 2d       	mov	r18, r3
    5c64:	21 60       	ori	r18, 0x01	; 1
    5c66:	16 c0       	rjmp	.+44     	; 0x5c94 <vfprintf+0xd6>
    5c68:	83 2d       	mov	r24, r3
    5c6a:	82 60       	ori	r24, 0x02	; 2
    5c6c:	38 2e       	mov	r3, r24
    5c6e:	e3 2d       	mov	r30, r3
    5c70:	e4 60       	ori	r30, 0x04	; 4
    5c72:	3e 2e       	mov	r3, r30
    5c74:	2a c0       	rjmp	.+84     	; 0x5cca <vfprintf+0x10c>
    5c76:	f3 2d       	mov	r31, r3
    5c78:	f8 60       	ori	r31, 0x08	; 8
    5c7a:	1d c0       	rjmp	.+58     	; 0x5cb6 <vfprintf+0xf8>
    5c7c:	37 fc       	sbrc	r3, 7
    5c7e:	2d c0       	rjmp	.+90     	; 0x5cda <vfprintf+0x11c>
    5c80:	20 ed       	ldi	r18, 0xD0	; 208
    5c82:	28 0f       	add	r18, r24
    5c84:	2a 30       	cpi	r18, 0x0A	; 10
    5c86:	40 f0       	brcs	.+16     	; 0x5c98 <vfprintf+0xda>
    5c88:	8e 32       	cpi	r24, 0x2E	; 46
    5c8a:	b9 f4       	brne	.+46     	; 0x5cba <vfprintf+0xfc>
    5c8c:	36 fc       	sbrc	r3, 6
    5c8e:	75 c1       	rjmp	.+746    	; 0x5f7a <vfprintf+0x3bc>
    5c90:	23 2d       	mov	r18, r3
    5c92:	20 64       	ori	r18, 0x40	; 64
    5c94:	32 2e       	mov	r3, r18
    5c96:	19 c0       	rjmp	.+50     	; 0x5cca <vfprintf+0x10c>
    5c98:	36 fe       	sbrs	r3, 6
    5c9a:	06 c0       	rjmp	.+12     	; 0x5ca8 <vfprintf+0xea>
    5c9c:	8a e0       	ldi	r24, 0x0A	; 10
    5c9e:	98 9e       	mul	r9, r24
    5ca0:	20 0d       	add	r18, r0
    5ca2:	11 24       	eor	r1, r1
    5ca4:	92 2e       	mov	r9, r18
    5ca6:	11 c0       	rjmp	.+34     	; 0x5cca <vfprintf+0x10c>
    5ca8:	ea e0       	ldi	r30, 0x0A	; 10
    5caa:	2e 9e       	mul	r2, r30
    5cac:	20 0d       	add	r18, r0
    5cae:	11 24       	eor	r1, r1
    5cb0:	22 2e       	mov	r2, r18
    5cb2:	f3 2d       	mov	r31, r3
    5cb4:	f0 62       	ori	r31, 0x20	; 32
    5cb6:	3f 2e       	mov	r3, r31
    5cb8:	08 c0       	rjmp	.+16     	; 0x5cca <vfprintf+0x10c>
    5cba:	8c 36       	cpi	r24, 0x6C	; 108
    5cbc:	21 f4       	brne	.+8      	; 0x5cc6 <vfprintf+0x108>
    5cbe:	83 2d       	mov	r24, r3
    5cc0:	80 68       	ori	r24, 0x80	; 128
    5cc2:	38 2e       	mov	r3, r24
    5cc4:	02 c0       	rjmp	.+4      	; 0x5cca <vfprintf+0x10c>
    5cc6:	88 36       	cpi	r24, 0x68	; 104
    5cc8:	41 f4       	brne	.+16     	; 0x5cda <vfprintf+0x11c>
    5cca:	f7 01       	movw	r30, r14
    5ccc:	93 fd       	sbrc	r25, 3
    5cce:	85 91       	lpm	r24, Z+
    5cd0:	93 ff       	sbrs	r25, 3
    5cd2:	81 91       	ld	r24, Z+
    5cd4:	7f 01       	movw	r14, r30
    5cd6:	81 11       	cpse	r24, r1
    5cd8:	b3 cf       	rjmp	.-154    	; 0x5c40 <vfprintf+0x82>
    5cda:	98 2f       	mov	r25, r24
    5cdc:	9f 7d       	andi	r25, 0xDF	; 223
    5cde:	95 54       	subi	r25, 0x45	; 69
    5ce0:	93 30       	cpi	r25, 0x03	; 3
    5ce2:	28 f4       	brcc	.+10     	; 0x5cee <vfprintf+0x130>
    5ce4:	0c 5f       	subi	r16, 0xFC	; 252
    5ce6:	1f 4f       	sbci	r17, 0xFF	; 255
    5ce8:	9f e3       	ldi	r25, 0x3F	; 63
    5cea:	99 83       	std	Y+1, r25	; 0x01
    5cec:	0d c0       	rjmp	.+26     	; 0x5d08 <vfprintf+0x14a>
    5cee:	83 36       	cpi	r24, 0x63	; 99
    5cf0:	31 f0       	breq	.+12     	; 0x5cfe <vfprintf+0x140>
    5cf2:	83 37       	cpi	r24, 0x73	; 115
    5cf4:	71 f0       	breq	.+28     	; 0x5d12 <vfprintf+0x154>
    5cf6:	83 35       	cpi	r24, 0x53	; 83
    5cf8:	09 f0       	breq	.+2      	; 0x5cfc <vfprintf+0x13e>
    5cfa:	55 c0       	rjmp	.+170    	; 0x5da6 <vfprintf+0x1e8>
    5cfc:	20 c0       	rjmp	.+64     	; 0x5d3e <vfprintf+0x180>
    5cfe:	f8 01       	movw	r30, r16
    5d00:	80 81       	ld	r24, Z
    5d02:	89 83       	std	Y+1, r24	; 0x01
    5d04:	0e 5f       	subi	r16, 0xFE	; 254
    5d06:	1f 4f       	sbci	r17, 0xFF	; 255
    5d08:	88 24       	eor	r8, r8
    5d0a:	83 94       	inc	r8
    5d0c:	91 2c       	mov	r9, r1
    5d0e:	53 01       	movw	r10, r6
    5d10:	12 c0       	rjmp	.+36     	; 0x5d36 <vfprintf+0x178>
    5d12:	28 01       	movw	r4, r16
    5d14:	f2 e0       	ldi	r31, 0x02	; 2
    5d16:	4f 0e       	add	r4, r31
    5d18:	51 1c       	adc	r5, r1
    5d1a:	f8 01       	movw	r30, r16
    5d1c:	a0 80       	ld	r10, Z
    5d1e:	b1 80       	ldd	r11, Z+1	; 0x01
    5d20:	36 fe       	sbrs	r3, 6
    5d22:	03 c0       	rjmp	.+6      	; 0x5d2a <vfprintf+0x16c>
    5d24:	69 2d       	mov	r22, r9
    5d26:	70 e0       	ldi	r23, 0x00	; 0
    5d28:	02 c0       	rjmp	.+4      	; 0x5d2e <vfprintf+0x170>
    5d2a:	6f ef       	ldi	r22, 0xFF	; 255
    5d2c:	7f ef       	ldi	r23, 0xFF	; 255
    5d2e:	c5 01       	movw	r24, r10
    5d30:	4e d1       	rcall	.+668    	; 0x5fce <strnlen>
    5d32:	4c 01       	movw	r8, r24
    5d34:	82 01       	movw	r16, r4
    5d36:	f3 2d       	mov	r31, r3
    5d38:	ff 77       	andi	r31, 0x7F	; 127
    5d3a:	3f 2e       	mov	r3, r31
    5d3c:	15 c0       	rjmp	.+42     	; 0x5d68 <vfprintf+0x1aa>
    5d3e:	28 01       	movw	r4, r16
    5d40:	22 e0       	ldi	r18, 0x02	; 2
    5d42:	42 0e       	add	r4, r18
    5d44:	51 1c       	adc	r5, r1
    5d46:	f8 01       	movw	r30, r16
    5d48:	a0 80       	ld	r10, Z
    5d4a:	b1 80       	ldd	r11, Z+1	; 0x01
    5d4c:	36 fe       	sbrs	r3, 6
    5d4e:	03 c0       	rjmp	.+6      	; 0x5d56 <vfprintf+0x198>
    5d50:	69 2d       	mov	r22, r9
    5d52:	70 e0       	ldi	r23, 0x00	; 0
    5d54:	02 c0       	rjmp	.+4      	; 0x5d5a <vfprintf+0x19c>
    5d56:	6f ef       	ldi	r22, 0xFF	; 255
    5d58:	7f ef       	ldi	r23, 0xFF	; 255
    5d5a:	c5 01       	movw	r24, r10
    5d5c:	2d d1       	rcall	.+602    	; 0x5fb8 <strnlen_P>
    5d5e:	4c 01       	movw	r8, r24
    5d60:	f3 2d       	mov	r31, r3
    5d62:	f0 68       	ori	r31, 0x80	; 128
    5d64:	3f 2e       	mov	r3, r31
    5d66:	82 01       	movw	r16, r4
    5d68:	33 fc       	sbrc	r3, 3
    5d6a:	19 c0       	rjmp	.+50     	; 0x5d9e <vfprintf+0x1e0>
    5d6c:	82 2d       	mov	r24, r2
    5d6e:	90 e0       	ldi	r25, 0x00	; 0
    5d70:	88 16       	cp	r8, r24
    5d72:	99 06       	cpc	r9, r25
    5d74:	a0 f4       	brcc	.+40     	; 0x5d9e <vfprintf+0x1e0>
    5d76:	b6 01       	movw	r22, r12
    5d78:	80 e2       	ldi	r24, 0x20	; 32
    5d7a:	90 e0       	ldi	r25, 0x00	; 0
    5d7c:	33 d1       	rcall	.+614    	; 0x5fe4 <fputc>
    5d7e:	2a 94       	dec	r2
    5d80:	f5 cf       	rjmp	.-22     	; 0x5d6c <vfprintf+0x1ae>
    5d82:	f5 01       	movw	r30, r10
    5d84:	37 fc       	sbrc	r3, 7
    5d86:	85 91       	lpm	r24, Z+
    5d88:	37 fe       	sbrs	r3, 7
    5d8a:	81 91       	ld	r24, Z+
    5d8c:	5f 01       	movw	r10, r30
    5d8e:	b6 01       	movw	r22, r12
    5d90:	90 e0       	ldi	r25, 0x00	; 0
    5d92:	28 d1       	rcall	.+592    	; 0x5fe4 <fputc>
    5d94:	21 10       	cpse	r2, r1
    5d96:	2a 94       	dec	r2
    5d98:	21 e0       	ldi	r18, 0x01	; 1
    5d9a:	82 1a       	sub	r8, r18
    5d9c:	91 08       	sbc	r9, r1
    5d9e:	81 14       	cp	r8, r1
    5da0:	91 04       	cpc	r9, r1
    5da2:	79 f7       	brne	.-34     	; 0x5d82 <vfprintf+0x1c4>
    5da4:	e1 c0       	rjmp	.+450    	; 0x5f68 <vfprintf+0x3aa>
    5da6:	84 36       	cpi	r24, 0x64	; 100
    5da8:	11 f0       	breq	.+4      	; 0x5dae <vfprintf+0x1f0>
    5daa:	89 36       	cpi	r24, 0x69	; 105
    5dac:	39 f5       	brne	.+78     	; 0x5dfc <vfprintf+0x23e>
    5dae:	f8 01       	movw	r30, r16
    5db0:	37 fe       	sbrs	r3, 7
    5db2:	07 c0       	rjmp	.+14     	; 0x5dc2 <vfprintf+0x204>
    5db4:	60 81       	ld	r22, Z
    5db6:	71 81       	ldd	r23, Z+1	; 0x01
    5db8:	82 81       	ldd	r24, Z+2	; 0x02
    5dba:	93 81       	ldd	r25, Z+3	; 0x03
    5dbc:	0c 5f       	subi	r16, 0xFC	; 252
    5dbe:	1f 4f       	sbci	r17, 0xFF	; 255
    5dc0:	08 c0       	rjmp	.+16     	; 0x5dd2 <vfprintf+0x214>
    5dc2:	60 81       	ld	r22, Z
    5dc4:	71 81       	ldd	r23, Z+1	; 0x01
    5dc6:	07 2e       	mov	r0, r23
    5dc8:	00 0c       	add	r0, r0
    5dca:	88 0b       	sbc	r24, r24
    5dcc:	99 0b       	sbc	r25, r25
    5dce:	0e 5f       	subi	r16, 0xFE	; 254
    5dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    5dd2:	f3 2d       	mov	r31, r3
    5dd4:	ff 76       	andi	r31, 0x6F	; 111
    5dd6:	3f 2e       	mov	r3, r31
    5dd8:	97 ff       	sbrs	r25, 7
    5dda:	09 c0       	rjmp	.+18     	; 0x5dee <vfprintf+0x230>
    5ddc:	90 95       	com	r25
    5dde:	80 95       	com	r24
    5de0:	70 95       	com	r23
    5de2:	61 95       	neg	r22
    5de4:	7f 4f       	sbci	r23, 0xFF	; 255
    5de6:	8f 4f       	sbci	r24, 0xFF	; 255
    5de8:	9f 4f       	sbci	r25, 0xFF	; 255
    5dea:	f0 68       	ori	r31, 0x80	; 128
    5dec:	3f 2e       	mov	r3, r31
    5dee:	2a e0       	ldi	r18, 0x0A	; 10
    5df0:	30 e0       	ldi	r19, 0x00	; 0
    5df2:	a3 01       	movw	r20, r6
    5df4:	33 d1       	rcall	.+614    	; 0x605c <__ultoa_invert>
    5df6:	88 2e       	mov	r8, r24
    5df8:	86 18       	sub	r8, r6
    5dfa:	44 c0       	rjmp	.+136    	; 0x5e84 <vfprintf+0x2c6>
    5dfc:	85 37       	cpi	r24, 0x75	; 117
    5dfe:	31 f4       	brne	.+12     	; 0x5e0c <vfprintf+0x24e>
    5e00:	23 2d       	mov	r18, r3
    5e02:	2f 7e       	andi	r18, 0xEF	; 239
    5e04:	b2 2e       	mov	r11, r18
    5e06:	2a e0       	ldi	r18, 0x0A	; 10
    5e08:	30 e0       	ldi	r19, 0x00	; 0
    5e0a:	25 c0       	rjmp	.+74     	; 0x5e56 <vfprintf+0x298>
    5e0c:	93 2d       	mov	r25, r3
    5e0e:	99 7f       	andi	r25, 0xF9	; 249
    5e10:	b9 2e       	mov	r11, r25
    5e12:	8f 36       	cpi	r24, 0x6F	; 111
    5e14:	c1 f0       	breq	.+48     	; 0x5e46 <vfprintf+0x288>
    5e16:	18 f4       	brcc	.+6      	; 0x5e1e <vfprintf+0x260>
    5e18:	88 35       	cpi	r24, 0x58	; 88
    5e1a:	79 f0       	breq	.+30     	; 0x5e3a <vfprintf+0x27c>
    5e1c:	ae c0       	rjmp	.+348    	; 0x5f7a <vfprintf+0x3bc>
    5e1e:	80 37       	cpi	r24, 0x70	; 112
    5e20:	19 f0       	breq	.+6      	; 0x5e28 <vfprintf+0x26a>
    5e22:	88 37       	cpi	r24, 0x78	; 120
    5e24:	21 f0       	breq	.+8      	; 0x5e2e <vfprintf+0x270>
    5e26:	a9 c0       	rjmp	.+338    	; 0x5f7a <vfprintf+0x3bc>
    5e28:	e9 2f       	mov	r30, r25
    5e2a:	e0 61       	ori	r30, 0x10	; 16
    5e2c:	be 2e       	mov	r11, r30
    5e2e:	b4 fe       	sbrs	r11, 4
    5e30:	0d c0       	rjmp	.+26     	; 0x5e4c <vfprintf+0x28e>
    5e32:	fb 2d       	mov	r31, r11
    5e34:	f4 60       	ori	r31, 0x04	; 4
    5e36:	bf 2e       	mov	r11, r31
    5e38:	09 c0       	rjmp	.+18     	; 0x5e4c <vfprintf+0x28e>
    5e3a:	34 fe       	sbrs	r3, 4
    5e3c:	0a c0       	rjmp	.+20     	; 0x5e52 <vfprintf+0x294>
    5e3e:	29 2f       	mov	r18, r25
    5e40:	26 60       	ori	r18, 0x06	; 6
    5e42:	b2 2e       	mov	r11, r18
    5e44:	06 c0       	rjmp	.+12     	; 0x5e52 <vfprintf+0x294>
    5e46:	28 e0       	ldi	r18, 0x08	; 8
    5e48:	30 e0       	ldi	r19, 0x00	; 0
    5e4a:	05 c0       	rjmp	.+10     	; 0x5e56 <vfprintf+0x298>
    5e4c:	20 e1       	ldi	r18, 0x10	; 16
    5e4e:	30 e0       	ldi	r19, 0x00	; 0
    5e50:	02 c0       	rjmp	.+4      	; 0x5e56 <vfprintf+0x298>
    5e52:	20 e1       	ldi	r18, 0x10	; 16
    5e54:	32 e0       	ldi	r19, 0x02	; 2
    5e56:	f8 01       	movw	r30, r16
    5e58:	b7 fe       	sbrs	r11, 7
    5e5a:	07 c0       	rjmp	.+14     	; 0x5e6a <vfprintf+0x2ac>
    5e5c:	60 81       	ld	r22, Z
    5e5e:	71 81       	ldd	r23, Z+1	; 0x01
    5e60:	82 81       	ldd	r24, Z+2	; 0x02
    5e62:	93 81       	ldd	r25, Z+3	; 0x03
    5e64:	0c 5f       	subi	r16, 0xFC	; 252
    5e66:	1f 4f       	sbci	r17, 0xFF	; 255
    5e68:	06 c0       	rjmp	.+12     	; 0x5e76 <vfprintf+0x2b8>
    5e6a:	60 81       	ld	r22, Z
    5e6c:	71 81       	ldd	r23, Z+1	; 0x01
    5e6e:	80 e0       	ldi	r24, 0x00	; 0
    5e70:	90 e0       	ldi	r25, 0x00	; 0
    5e72:	0e 5f       	subi	r16, 0xFE	; 254
    5e74:	1f 4f       	sbci	r17, 0xFF	; 255
    5e76:	a3 01       	movw	r20, r6
    5e78:	f1 d0       	rcall	.+482    	; 0x605c <__ultoa_invert>
    5e7a:	88 2e       	mov	r8, r24
    5e7c:	86 18       	sub	r8, r6
    5e7e:	fb 2d       	mov	r31, r11
    5e80:	ff 77       	andi	r31, 0x7F	; 127
    5e82:	3f 2e       	mov	r3, r31
    5e84:	36 fe       	sbrs	r3, 6
    5e86:	0d c0       	rjmp	.+26     	; 0x5ea2 <vfprintf+0x2e4>
    5e88:	23 2d       	mov	r18, r3
    5e8a:	2e 7f       	andi	r18, 0xFE	; 254
    5e8c:	a2 2e       	mov	r10, r18
    5e8e:	89 14       	cp	r8, r9
    5e90:	58 f4       	brcc	.+22     	; 0x5ea8 <vfprintf+0x2ea>
    5e92:	34 fe       	sbrs	r3, 4
    5e94:	0b c0       	rjmp	.+22     	; 0x5eac <vfprintf+0x2ee>
    5e96:	32 fc       	sbrc	r3, 2
    5e98:	09 c0       	rjmp	.+18     	; 0x5eac <vfprintf+0x2ee>
    5e9a:	83 2d       	mov	r24, r3
    5e9c:	8e 7e       	andi	r24, 0xEE	; 238
    5e9e:	a8 2e       	mov	r10, r24
    5ea0:	05 c0       	rjmp	.+10     	; 0x5eac <vfprintf+0x2ee>
    5ea2:	b8 2c       	mov	r11, r8
    5ea4:	a3 2c       	mov	r10, r3
    5ea6:	03 c0       	rjmp	.+6      	; 0x5eae <vfprintf+0x2f0>
    5ea8:	b8 2c       	mov	r11, r8
    5eaa:	01 c0       	rjmp	.+2      	; 0x5eae <vfprintf+0x2f0>
    5eac:	b9 2c       	mov	r11, r9
    5eae:	a4 fe       	sbrs	r10, 4
    5eb0:	0f c0       	rjmp	.+30     	; 0x5ed0 <vfprintf+0x312>
    5eb2:	fe 01       	movw	r30, r28
    5eb4:	e8 0d       	add	r30, r8
    5eb6:	f1 1d       	adc	r31, r1
    5eb8:	80 81       	ld	r24, Z
    5eba:	80 33       	cpi	r24, 0x30	; 48
    5ebc:	21 f4       	brne	.+8      	; 0x5ec6 <vfprintf+0x308>
    5ebe:	9a 2d       	mov	r25, r10
    5ec0:	99 7e       	andi	r25, 0xE9	; 233
    5ec2:	a9 2e       	mov	r10, r25
    5ec4:	09 c0       	rjmp	.+18     	; 0x5ed8 <vfprintf+0x31a>
    5ec6:	a2 fe       	sbrs	r10, 2
    5ec8:	06 c0       	rjmp	.+12     	; 0x5ed6 <vfprintf+0x318>
    5eca:	b3 94       	inc	r11
    5ecc:	b3 94       	inc	r11
    5ece:	04 c0       	rjmp	.+8      	; 0x5ed8 <vfprintf+0x31a>
    5ed0:	8a 2d       	mov	r24, r10
    5ed2:	86 78       	andi	r24, 0x86	; 134
    5ed4:	09 f0       	breq	.+2      	; 0x5ed8 <vfprintf+0x31a>
    5ed6:	b3 94       	inc	r11
    5ed8:	a3 fc       	sbrc	r10, 3
    5eda:	10 c0       	rjmp	.+32     	; 0x5efc <vfprintf+0x33e>
    5edc:	a0 fe       	sbrs	r10, 0
    5ede:	06 c0       	rjmp	.+12     	; 0x5eec <vfprintf+0x32e>
    5ee0:	b2 14       	cp	r11, r2
    5ee2:	80 f4       	brcc	.+32     	; 0x5f04 <vfprintf+0x346>
    5ee4:	28 0c       	add	r2, r8
    5ee6:	92 2c       	mov	r9, r2
    5ee8:	9b 18       	sub	r9, r11
    5eea:	0d c0       	rjmp	.+26     	; 0x5f06 <vfprintf+0x348>
    5eec:	b2 14       	cp	r11, r2
    5eee:	58 f4       	brcc	.+22     	; 0x5f06 <vfprintf+0x348>
    5ef0:	b6 01       	movw	r22, r12
    5ef2:	80 e2       	ldi	r24, 0x20	; 32
    5ef4:	90 e0       	ldi	r25, 0x00	; 0
    5ef6:	76 d0       	rcall	.+236    	; 0x5fe4 <fputc>
    5ef8:	b3 94       	inc	r11
    5efa:	f8 cf       	rjmp	.-16     	; 0x5eec <vfprintf+0x32e>
    5efc:	b2 14       	cp	r11, r2
    5efe:	18 f4       	brcc	.+6      	; 0x5f06 <vfprintf+0x348>
    5f00:	2b 18       	sub	r2, r11
    5f02:	02 c0       	rjmp	.+4      	; 0x5f08 <vfprintf+0x34a>
    5f04:	98 2c       	mov	r9, r8
    5f06:	21 2c       	mov	r2, r1
    5f08:	a4 fe       	sbrs	r10, 4
    5f0a:	0f c0       	rjmp	.+30     	; 0x5f2a <vfprintf+0x36c>
    5f0c:	b6 01       	movw	r22, r12
    5f0e:	80 e3       	ldi	r24, 0x30	; 48
    5f10:	90 e0       	ldi	r25, 0x00	; 0
    5f12:	68 d0       	rcall	.+208    	; 0x5fe4 <fputc>
    5f14:	a2 fe       	sbrs	r10, 2
    5f16:	16 c0       	rjmp	.+44     	; 0x5f44 <vfprintf+0x386>
    5f18:	a1 fc       	sbrc	r10, 1
    5f1a:	03 c0       	rjmp	.+6      	; 0x5f22 <vfprintf+0x364>
    5f1c:	88 e7       	ldi	r24, 0x78	; 120
    5f1e:	90 e0       	ldi	r25, 0x00	; 0
    5f20:	02 c0       	rjmp	.+4      	; 0x5f26 <vfprintf+0x368>
    5f22:	88 e5       	ldi	r24, 0x58	; 88
    5f24:	90 e0       	ldi	r25, 0x00	; 0
    5f26:	b6 01       	movw	r22, r12
    5f28:	0c c0       	rjmp	.+24     	; 0x5f42 <vfprintf+0x384>
    5f2a:	8a 2d       	mov	r24, r10
    5f2c:	86 78       	andi	r24, 0x86	; 134
    5f2e:	51 f0       	breq	.+20     	; 0x5f44 <vfprintf+0x386>
    5f30:	a1 fe       	sbrs	r10, 1
    5f32:	02 c0       	rjmp	.+4      	; 0x5f38 <vfprintf+0x37a>
    5f34:	8b e2       	ldi	r24, 0x2B	; 43
    5f36:	01 c0       	rjmp	.+2      	; 0x5f3a <vfprintf+0x37c>
    5f38:	80 e2       	ldi	r24, 0x20	; 32
    5f3a:	a7 fc       	sbrc	r10, 7
    5f3c:	8d e2       	ldi	r24, 0x2D	; 45
    5f3e:	b6 01       	movw	r22, r12
    5f40:	90 e0       	ldi	r25, 0x00	; 0
    5f42:	50 d0       	rcall	.+160    	; 0x5fe4 <fputc>
    5f44:	89 14       	cp	r8, r9
    5f46:	30 f4       	brcc	.+12     	; 0x5f54 <vfprintf+0x396>
    5f48:	b6 01       	movw	r22, r12
    5f4a:	80 e3       	ldi	r24, 0x30	; 48
    5f4c:	90 e0       	ldi	r25, 0x00	; 0
    5f4e:	4a d0       	rcall	.+148    	; 0x5fe4 <fputc>
    5f50:	9a 94       	dec	r9
    5f52:	f8 cf       	rjmp	.-16     	; 0x5f44 <vfprintf+0x386>
    5f54:	8a 94       	dec	r8
    5f56:	f3 01       	movw	r30, r6
    5f58:	e8 0d       	add	r30, r8
    5f5a:	f1 1d       	adc	r31, r1
    5f5c:	80 81       	ld	r24, Z
    5f5e:	b6 01       	movw	r22, r12
    5f60:	90 e0       	ldi	r25, 0x00	; 0
    5f62:	40 d0       	rcall	.+128    	; 0x5fe4 <fputc>
    5f64:	81 10       	cpse	r8, r1
    5f66:	f6 cf       	rjmp	.-20     	; 0x5f54 <vfprintf+0x396>
    5f68:	22 20       	and	r2, r2
    5f6a:	09 f4       	brne	.+2      	; 0x5f6e <vfprintf+0x3b0>
    5f6c:	4e ce       	rjmp	.-868    	; 0x5c0a <vfprintf+0x4c>
    5f6e:	b6 01       	movw	r22, r12
    5f70:	80 e2       	ldi	r24, 0x20	; 32
    5f72:	90 e0       	ldi	r25, 0x00	; 0
    5f74:	37 d0       	rcall	.+110    	; 0x5fe4 <fputc>
    5f76:	2a 94       	dec	r2
    5f78:	f7 cf       	rjmp	.-18     	; 0x5f68 <vfprintf+0x3aa>
    5f7a:	f6 01       	movw	r30, r12
    5f7c:	86 81       	ldd	r24, Z+6	; 0x06
    5f7e:	97 81       	ldd	r25, Z+7	; 0x07
    5f80:	02 c0       	rjmp	.+4      	; 0x5f86 <vfprintf+0x3c8>
    5f82:	8f ef       	ldi	r24, 0xFF	; 255
    5f84:	9f ef       	ldi	r25, 0xFF	; 255
    5f86:	2b 96       	adiw	r28, 0x0b	; 11
    5f88:	0f b6       	in	r0, 0x3f	; 63
    5f8a:	f8 94       	cli
    5f8c:	de bf       	out	0x3e, r29	; 62
    5f8e:	0f be       	out	0x3f, r0	; 63
    5f90:	cd bf       	out	0x3d, r28	; 61
    5f92:	df 91       	pop	r29
    5f94:	cf 91       	pop	r28
    5f96:	1f 91       	pop	r17
    5f98:	0f 91       	pop	r16
    5f9a:	ff 90       	pop	r15
    5f9c:	ef 90       	pop	r14
    5f9e:	df 90       	pop	r13
    5fa0:	cf 90       	pop	r12
    5fa2:	bf 90       	pop	r11
    5fa4:	af 90       	pop	r10
    5fa6:	9f 90       	pop	r9
    5fa8:	8f 90       	pop	r8
    5faa:	7f 90       	pop	r7
    5fac:	6f 90       	pop	r6
    5fae:	5f 90       	pop	r5
    5fb0:	4f 90       	pop	r4
    5fb2:	3f 90       	pop	r3
    5fb4:	2f 90       	pop	r2
    5fb6:	08 95       	ret

00005fb8 <strnlen_P>:
    5fb8:	fc 01       	movw	r30, r24
    5fba:	05 90       	lpm	r0, Z+
    5fbc:	61 50       	subi	r22, 0x01	; 1
    5fbe:	70 40       	sbci	r23, 0x00	; 0
    5fc0:	01 10       	cpse	r0, r1
    5fc2:	d8 f7       	brcc	.-10     	; 0x5fba <strnlen_P+0x2>
    5fc4:	80 95       	com	r24
    5fc6:	90 95       	com	r25
    5fc8:	8e 0f       	add	r24, r30
    5fca:	9f 1f       	adc	r25, r31
    5fcc:	08 95       	ret

00005fce <strnlen>:
    5fce:	fc 01       	movw	r30, r24
    5fd0:	61 50       	subi	r22, 0x01	; 1
    5fd2:	70 40       	sbci	r23, 0x00	; 0
    5fd4:	01 90       	ld	r0, Z+
    5fd6:	01 10       	cpse	r0, r1
    5fd8:	d8 f7       	brcc	.-10     	; 0x5fd0 <strnlen+0x2>
    5fda:	80 95       	com	r24
    5fdc:	90 95       	com	r25
    5fde:	8e 0f       	add	r24, r30
    5fe0:	9f 1f       	adc	r25, r31
    5fe2:	08 95       	ret

00005fe4 <fputc>:
    5fe4:	0f 93       	push	r16
    5fe6:	1f 93       	push	r17
    5fe8:	cf 93       	push	r28
    5fea:	df 93       	push	r29
    5fec:	fb 01       	movw	r30, r22
    5fee:	23 81       	ldd	r18, Z+3	; 0x03
    5ff0:	21 fd       	sbrc	r18, 1
    5ff2:	03 c0       	rjmp	.+6      	; 0x5ffa <fputc+0x16>
    5ff4:	8f ef       	ldi	r24, 0xFF	; 255
    5ff6:	9f ef       	ldi	r25, 0xFF	; 255
    5ff8:	2c c0       	rjmp	.+88     	; 0x6052 <fputc+0x6e>
    5ffa:	22 ff       	sbrs	r18, 2
    5ffc:	16 c0       	rjmp	.+44     	; 0x602a <fputc+0x46>
    5ffe:	46 81       	ldd	r20, Z+6	; 0x06
    6000:	57 81       	ldd	r21, Z+7	; 0x07
    6002:	24 81       	ldd	r18, Z+4	; 0x04
    6004:	35 81       	ldd	r19, Z+5	; 0x05
    6006:	42 17       	cp	r20, r18
    6008:	53 07       	cpc	r21, r19
    600a:	44 f4       	brge	.+16     	; 0x601c <fputc+0x38>
    600c:	a0 81       	ld	r26, Z
    600e:	b1 81       	ldd	r27, Z+1	; 0x01
    6010:	9d 01       	movw	r18, r26
    6012:	2f 5f       	subi	r18, 0xFF	; 255
    6014:	3f 4f       	sbci	r19, 0xFF	; 255
    6016:	31 83       	std	Z+1, r19	; 0x01
    6018:	20 83       	st	Z, r18
    601a:	8c 93       	st	X, r24
    601c:	26 81       	ldd	r18, Z+6	; 0x06
    601e:	37 81       	ldd	r19, Z+7	; 0x07
    6020:	2f 5f       	subi	r18, 0xFF	; 255
    6022:	3f 4f       	sbci	r19, 0xFF	; 255
    6024:	37 83       	std	Z+7, r19	; 0x07
    6026:	26 83       	std	Z+6, r18	; 0x06
    6028:	14 c0       	rjmp	.+40     	; 0x6052 <fputc+0x6e>
    602a:	8b 01       	movw	r16, r22
    602c:	ec 01       	movw	r28, r24
    602e:	fb 01       	movw	r30, r22
    6030:	00 84       	ldd	r0, Z+8	; 0x08
    6032:	f1 85       	ldd	r31, Z+9	; 0x09
    6034:	e0 2d       	mov	r30, r0
    6036:	09 95       	icall
    6038:	89 2b       	or	r24, r25
    603a:	e1 f6       	brne	.-72     	; 0x5ff4 <fputc+0x10>
    603c:	d8 01       	movw	r26, r16
    603e:	16 96       	adiw	r26, 0x06	; 6
    6040:	8d 91       	ld	r24, X+
    6042:	9c 91       	ld	r25, X
    6044:	17 97       	sbiw	r26, 0x07	; 7
    6046:	01 96       	adiw	r24, 0x01	; 1
    6048:	17 96       	adiw	r26, 0x07	; 7
    604a:	9c 93       	st	X, r25
    604c:	8e 93       	st	-X, r24
    604e:	16 97       	sbiw	r26, 0x06	; 6
    6050:	ce 01       	movw	r24, r28
    6052:	df 91       	pop	r29
    6054:	cf 91       	pop	r28
    6056:	1f 91       	pop	r17
    6058:	0f 91       	pop	r16
    605a:	08 95       	ret

0000605c <__ultoa_invert>:
    605c:	fa 01       	movw	r30, r20
    605e:	aa 27       	eor	r26, r26
    6060:	28 30       	cpi	r18, 0x08	; 8
    6062:	51 f1       	breq	.+84     	; 0x60b8 <__ultoa_invert+0x5c>
    6064:	20 31       	cpi	r18, 0x10	; 16
    6066:	81 f1       	breq	.+96     	; 0x60c8 <__ultoa_invert+0x6c>
    6068:	e8 94       	clt
    606a:	6f 93       	push	r22
    606c:	6e 7f       	andi	r22, 0xFE	; 254
    606e:	6e 5f       	subi	r22, 0xFE	; 254
    6070:	7f 4f       	sbci	r23, 0xFF	; 255
    6072:	8f 4f       	sbci	r24, 0xFF	; 255
    6074:	9f 4f       	sbci	r25, 0xFF	; 255
    6076:	af 4f       	sbci	r26, 0xFF	; 255
    6078:	b1 e0       	ldi	r27, 0x01	; 1
    607a:	3e d0       	rcall	.+124    	; 0x60f8 <__ultoa_invert+0x9c>
    607c:	b4 e0       	ldi	r27, 0x04	; 4
    607e:	3c d0       	rcall	.+120    	; 0x60f8 <__ultoa_invert+0x9c>
    6080:	67 0f       	add	r22, r23
    6082:	78 1f       	adc	r23, r24
    6084:	89 1f       	adc	r24, r25
    6086:	9a 1f       	adc	r25, r26
    6088:	a1 1d       	adc	r26, r1
    608a:	68 0f       	add	r22, r24
    608c:	79 1f       	adc	r23, r25
    608e:	8a 1f       	adc	r24, r26
    6090:	91 1d       	adc	r25, r1
    6092:	a1 1d       	adc	r26, r1
    6094:	6a 0f       	add	r22, r26
    6096:	71 1d       	adc	r23, r1
    6098:	81 1d       	adc	r24, r1
    609a:	91 1d       	adc	r25, r1
    609c:	a1 1d       	adc	r26, r1
    609e:	20 d0       	rcall	.+64     	; 0x60e0 <__ultoa_invert+0x84>
    60a0:	09 f4       	brne	.+2      	; 0x60a4 <__ultoa_invert+0x48>
    60a2:	68 94       	set
    60a4:	3f 91       	pop	r19
    60a6:	2a e0       	ldi	r18, 0x0A	; 10
    60a8:	26 9f       	mul	r18, r22
    60aa:	11 24       	eor	r1, r1
    60ac:	30 19       	sub	r19, r0
    60ae:	30 5d       	subi	r19, 0xD0	; 208
    60b0:	31 93       	st	Z+, r19
    60b2:	de f6       	brtc	.-74     	; 0x606a <__ultoa_invert+0xe>
    60b4:	cf 01       	movw	r24, r30
    60b6:	08 95       	ret
    60b8:	46 2f       	mov	r20, r22
    60ba:	47 70       	andi	r20, 0x07	; 7
    60bc:	40 5d       	subi	r20, 0xD0	; 208
    60be:	41 93       	st	Z+, r20
    60c0:	b3 e0       	ldi	r27, 0x03	; 3
    60c2:	0f d0       	rcall	.+30     	; 0x60e2 <__ultoa_invert+0x86>
    60c4:	c9 f7       	brne	.-14     	; 0x60b8 <__ultoa_invert+0x5c>
    60c6:	f6 cf       	rjmp	.-20     	; 0x60b4 <__ultoa_invert+0x58>
    60c8:	46 2f       	mov	r20, r22
    60ca:	4f 70       	andi	r20, 0x0F	; 15
    60cc:	40 5d       	subi	r20, 0xD0	; 208
    60ce:	4a 33       	cpi	r20, 0x3A	; 58
    60d0:	18 f0       	brcs	.+6      	; 0x60d8 <__ultoa_invert+0x7c>
    60d2:	49 5d       	subi	r20, 0xD9	; 217
    60d4:	31 fd       	sbrc	r19, 1
    60d6:	40 52       	subi	r20, 0x20	; 32
    60d8:	41 93       	st	Z+, r20
    60da:	02 d0       	rcall	.+4      	; 0x60e0 <__ultoa_invert+0x84>
    60dc:	a9 f7       	brne	.-22     	; 0x60c8 <__ultoa_invert+0x6c>
    60de:	ea cf       	rjmp	.-44     	; 0x60b4 <__ultoa_invert+0x58>
    60e0:	b4 e0       	ldi	r27, 0x04	; 4
    60e2:	a6 95       	lsr	r26
    60e4:	97 95       	ror	r25
    60e6:	87 95       	ror	r24
    60e8:	77 95       	ror	r23
    60ea:	67 95       	ror	r22
    60ec:	ba 95       	dec	r27
    60ee:	c9 f7       	brne	.-14     	; 0x60e2 <__ultoa_invert+0x86>
    60f0:	00 97       	sbiw	r24, 0x00	; 0
    60f2:	61 05       	cpc	r22, r1
    60f4:	71 05       	cpc	r23, r1
    60f6:	08 95       	ret
    60f8:	9b 01       	movw	r18, r22
    60fa:	ac 01       	movw	r20, r24
    60fc:	0a 2e       	mov	r0, r26
    60fe:	06 94       	lsr	r0
    6100:	57 95       	ror	r21
    6102:	47 95       	ror	r20
    6104:	37 95       	ror	r19
    6106:	27 95       	ror	r18
    6108:	ba 95       	dec	r27
    610a:	c9 f7       	brne	.-14     	; 0x60fe <__ultoa_invert+0xa2>
    610c:	62 0f       	add	r22, r18
    610e:	73 1f       	adc	r23, r19
    6110:	84 1f       	adc	r24, r20
    6112:	95 1f       	adc	r25, r21
    6114:	a0 1d       	adc	r26, r0
    6116:	08 95       	ret

00006118 <eeprom_read_block>:
    6118:	dc 01       	movw	r26, r24
    611a:	cb 01       	movw	r24, r22

0000611c <eeprom_read_blraw>:
    611c:	fc 01       	movw	r30, r24
    611e:	e1 99       	sbic	0x1c, 1	; 28
    6120:	fe cf       	rjmp	.-4      	; 0x611e <eeprom_read_blraw+0x2>
    6122:	06 c0       	rjmp	.+12     	; 0x6130 <eeprom_read_blraw+0x14>
    6124:	ff bb       	out	0x1f, r31	; 31
    6126:	ee bb       	out	0x1e, r30	; 30
    6128:	e0 9a       	sbi	0x1c, 0	; 28
    612a:	31 96       	adiw	r30, 0x01	; 1
    612c:	0d b2       	in	r0, 0x1d	; 29
    612e:	0d 92       	st	X+, r0
    6130:	41 50       	subi	r20, 0x01	; 1
    6132:	50 40       	sbci	r21, 0x00	; 0
    6134:	b8 f7       	brcc	.-18     	; 0x6124 <eeprom_read_blraw+0x8>
    6136:	08 95       	ret

00006138 <eeprom_read_byte>:
    6138:	e1 99       	sbic	0x1c, 1	; 28
    613a:	fe cf       	rjmp	.-4      	; 0x6138 <eeprom_read_byte>
    613c:	9f bb       	out	0x1f, r25	; 31
    613e:	8e bb       	out	0x1e, r24	; 30
    6140:	e0 9a       	sbi	0x1c, 0	; 28
    6142:	99 27       	eor	r25, r25
    6144:	8d b3       	in	r24, 0x1d	; 29
    6146:	08 95       	ret

00006148 <eeprom_read_word>:
    6148:	a8 e1       	ldi	r26, 0x18	; 24
    614a:	b0 e0       	ldi	r27, 0x00	; 0
    614c:	42 e0       	ldi	r20, 0x02	; 2
    614e:	50 e0       	ldi	r21, 0x00	; 0
    6150:	e5 cf       	rjmp	.-54     	; 0x611c <eeprom_read_blraw>

00006152 <eeprom_update_block>:
    6152:	dc 01       	movw	r26, r24
    6154:	a4 0f       	add	r26, r20
    6156:	b5 1f       	adc	r27, r21
    6158:	41 50       	subi	r20, 0x01	; 1
    615a:	50 40       	sbci	r21, 0x00	; 0
    615c:	40 f0       	brcs	.+16     	; 0x616e <eeprom_update_block+0x1c>
    615e:	cb 01       	movw	r24, r22
    6160:	84 0f       	add	r24, r20
    6162:	95 1f       	adc	r25, r21
    6164:	2e 91       	ld	r18, -X
    6166:	05 d0       	rcall	.+10     	; 0x6172 <eeprom_update_r18>
    6168:	41 50       	subi	r20, 0x01	; 1
    616a:	50 40       	sbci	r21, 0x00	; 0
    616c:	d8 f7       	brcc	.-10     	; 0x6164 <eeprom_update_block+0x12>
    616e:	08 95       	ret

00006170 <eeprom_update_byte>:
    6170:	26 2f       	mov	r18, r22

00006172 <eeprom_update_r18>:
    6172:	e1 99       	sbic	0x1c, 1	; 28
    6174:	fe cf       	rjmp	.-4      	; 0x6172 <eeprom_update_r18>
    6176:	9f bb       	out	0x1f, r25	; 31
    6178:	8e bb       	out	0x1e, r24	; 30
    617a:	e0 9a       	sbi	0x1c, 0	; 28
    617c:	01 97       	sbiw	r24, 0x01	; 1
    617e:	0d b2       	in	r0, 0x1d	; 29
    6180:	02 16       	cp	r0, r18
    6182:	31 f0       	breq	.+12     	; 0x6190 <eeprom_update_r18+0x1e>
    6184:	2d bb       	out	0x1d, r18	; 29
    6186:	0f b6       	in	r0, 0x3f	; 63
    6188:	f8 94       	cli
    618a:	e2 9a       	sbi	0x1c, 2	; 28
    618c:	e1 9a       	sbi	0x1c, 1	; 28
    618e:	0f be       	out	0x3f, r0	; 63
    6190:	08 95       	ret

00006192 <eeprom_update_dword>:
    6192:	03 96       	adiw	r24, 0x03	; 3
    6194:	27 2f       	mov	r18, r23
    6196:	ed df       	rcall	.-38     	; 0x6172 <eeprom_update_r18>
    6198:	eb df       	rcall	.-42     	; 0x6170 <eeprom_update_byte>
    619a:	25 2f       	mov	r18, r21
    619c:	ea df       	rcall	.-44     	; 0x6172 <eeprom_update_r18>
    619e:	24 2f       	mov	r18, r20
    61a0:	e8 cf       	rjmp	.-48     	; 0x6172 <eeprom_update_r18>

000061a2 <eeprom_update_word>:
    61a2:	01 96       	adiw	r24, 0x01	; 1
    61a4:	27 2f       	mov	r18, r23
    61a6:	e5 df       	rcall	.-54     	; 0x6172 <eeprom_update_r18>
    61a8:	e3 cf       	rjmp	.-58     	; 0x6170 <eeprom_update_byte>

000061aa <eeprom_write_block>:
    61aa:	dc 01       	movw	r26, r24
    61ac:	cb 01       	movw	r24, r22
    61ae:	02 c0       	rjmp	.+4      	; 0x61b4 <eeprom_write_block+0xa>
    61b0:	2d 91       	ld	r18, X+
    61b2:	05 d0       	rcall	.+10     	; 0x61be <eeprom_write_r18>
    61b4:	41 50       	subi	r20, 0x01	; 1
    61b6:	50 40       	sbci	r21, 0x00	; 0
    61b8:	d8 f7       	brcc	.-10     	; 0x61b0 <eeprom_write_block+0x6>
    61ba:	08 95       	ret

000061bc <eeprom_write_byte>:
    61bc:	26 2f       	mov	r18, r22

000061be <eeprom_write_r18>:
    61be:	e1 99       	sbic	0x1c, 1	; 28
    61c0:	fe cf       	rjmp	.-4      	; 0x61be <eeprom_write_r18>
    61c2:	9f bb       	out	0x1f, r25	; 31
    61c4:	8e bb       	out	0x1e, r24	; 30
    61c6:	2d bb       	out	0x1d, r18	; 29
    61c8:	0f b6       	in	r0, 0x3f	; 63
    61ca:	f8 94       	cli
    61cc:	e2 9a       	sbi	0x1c, 2	; 28
    61ce:	e1 9a       	sbi	0x1c, 1	; 28
    61d0:	0f be       	out	0x3f, r0	; 63
    61d2:	01 96       	adiw	r24, 0x01	; 1
    61d4:	08 95       	ret

000061d6 <eeprom_write_dword>:
    61d6:	24 2f       	mov	r18, r20
    61d8:	f2 df       	rcall	.-28     	; 0x61be <eeprom_write_r18>
    61da:	25 2f       	mov	r18, r21
    61dc:	f0 df       	rcall	.-32     	; 0x61be <eeprom_write_r18>
    61de:	00 c0       	rjmp	.+0      	; 0x61e0 <eeprom_write_word>

000061e0 <eeprom_write_word>:
    61e0:	ed df       	rcall	.-38     	; 0x61bc <eeprom_write_byte>
    61e2:	27 2f       	mov	r18, r23
    61e4:	ec cf       	rjmp	.-40     	; 0x61be <eeprom_write_r18>

000061e6 <_exit>:
    61e6:	f8 94       	cli

000061e8 <__stop_program>:
    61e8:	ff cf       	rjmp	.-2      	; 0x61e8 <__stop_program>
